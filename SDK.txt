Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 1]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 1]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 1]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 1]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 1]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 1]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 1]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 1]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 1]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 1]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 1]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 1]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 1]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 1]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 1]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 1]
	GameStateBase* GameState;//[Offset: 0x120, Size: 1]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 1]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 1]
	Level*[] Levels;//[Offset: 0x138, Size: 1]
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 1]
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 1]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 1]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 1]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 1]
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x1f8, Size: 1]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x200, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x250, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x260, Size: 1]
	WorldComposition* WorldComposition;//[Offset: 0x5e0, Size: 1]
	WorldPSCPool PSCPool;//[Offset: 0x678, Size: 1]
	WorldSettings* K2_GetWorldSettings();// 0x3c9be30
	void HandleTimelineScrubbed();// 0x3c9be10

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x1ef32e0

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 1]
	Model* Model;//[Offset: 0xc0, Size: 1]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 1]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 1]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 1]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 1]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 1]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 1]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 1]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 1]
	float LightmapTotalSize;//[Offset: 0x110, Size: 1]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 1]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 1]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 1]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 1]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 1]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 1]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 1]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x468, Size: 1]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 1]
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 1]
	float CachedMaxDrawDistance;//[Offset: 0x208, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x20c, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x20d, Size: 1]
	byte IndirectLightingCacheQuality;//[Offset: 0x20e, Size: 1]
	enum LightmapType;//[Offset: 0x20f, Size: 1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x212, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x212, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x212, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x213, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x213, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x213, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x213, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x213, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x213, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x213, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x213, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 1]
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x216, Size: 1]
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x218, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x21a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x21b, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x21c, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x220, Size: 1]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x228, Size: 1]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x238, Size: 1]
	int TranslucencySortPriority;//[Offset: 0x250, Size: 1]
	float TranslucencySortDistanceOffset;//[Offset: 0x254, Size: 1]
	int VisibilityId;//[Offset: 0x258, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x260, Size: 1]
	int8 VirtualTextureLodBias;//[Offset: 0x270, Size: 1]
	int8 VirtualTextureCullMips;//[Offset: 0x271, Size: 1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x272, Size: 1]
	enum VirtualTextureRenderPassType;//[Offset: 0x273, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x278, Size: 1]
	float BoundsScale;//[Offset: 0x284, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x298, Size: 1]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a8, Size: 1]
	BodyInstance BodyInstance;//[Offset: 0x2c8, Size: 1]
	delegate OnComponentHit;//[Offset: 0x420, Size: 1]
	delegate OnComponentBeginOverlap;//[Offset: 0x421, Size: 1]
	delegate OnComponentEndOverlap;//[Offset: 0x422, Size: 1]
	delegate OnComponentWake;//[Offset: 0x423, Size: 1]
	delegate OnComponentSleep;//[Offset: 0x424, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x426, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x427, Size: 1]
	delegate OnClicked;//[Offset: 0x428, Size: 1]
	delegate OnReleased;//[Offset: 0x429, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x42a, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x42b, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x42c, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x42d, Size: 1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x448, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x3c56720
	void WakeRigidBody(FName BoneName);// 0x3c56690
	void WakeAllRigidBodies();// 0x1b548a0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x3c565e0
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0x3c56550
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x3c56480
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x3c563f0
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0x3c56370
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x3c562e0
	void SetSimulatePhysics(bool bSimulate);// 0x3c56250
	void SetRenderInMainPass(bool bValue);// 0x3c561c0
	void SetRenderCustomDepth(bool bValue);// 0x3c56130
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x3c560a0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x3c55a20
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3c55f80
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3c55e60
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3c55e60
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x3c55d30
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3c55c00
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3c55ab0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3c55ab0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x3c55990
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x3c55900
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x3c55870
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x3c557a0
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x3c556d0
	void SetMassScale(FName BoneName, float InMassScale);// 0x3c555f0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x3c554e0
	void SetLinearDamping(float InDamping);// 0x3c55450
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x3c55320
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x3c55290
	void SetHiddenInSceneCapture(bool bValue);// 0x3c55200
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x3c55170
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x3c550e0
	void SetEnableGravity(bool bGravityEnabled);// 0x3c55050
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x3c54f70
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x3c54e90
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x3c54dc0
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x3c54cf0
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x3c54c10
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x3c54b30
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x3c54a60
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x3c54990
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x3c54910
	void SetCustomDepthStencilValue(int Value);// 0x3c54880
	void SetCullDistance(float NewCullDistance);// 0x3c54800
	void SetConstraintMode(byte ConstraintMode);// 0x3c54780
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x3c546b0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x3c54630
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x3c54560
	void SetCollisionObjectType(byte Channel);// 0x3c544e0
	void SetCollisionEnabled(byte NewType);// 0x3c54460
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x3c54380
	void SetCastShadow(bool NewCastShadow);// 0x3c542f0
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x3c54260
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0x3c541d0
	void SetBoundsScale(float NewBoundsScale);// 0x3c54150
	void SetAngularDamping(float InDamping);// 0x3c540c0
	void SetAllUseCCD(bool InUseCCD);// 0x3b59900
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x3c53fe0
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x3c53ef0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x3c53dd0
	void SetAllMassScale(float InMassScale);// 0x3c53d40
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x3c53c40
	void PutRigidBodyToSleep(FName BoneName);// 0x3c53bb0
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3c53800
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3c534a0
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3c53140
	bool K2_IsQueryCollisionEnabled();// 0x3c53100
	bool K2_IsPhysicsCollisionEnabled();// 0x3c530c0
	bool K2_IsCollisionEnabled();// 0x3c53080
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3c52d10
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x3c52c70
	bool IsOverlappingActor(const Actor* Other);// 0x3c52bd0
	bool IsGravityEnabled();// 0x3c52ba0
	bool IsAnyRigidBodyAwake();// 0x3b58880
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x3c52ad0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x3c52a00
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x3c529d0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x3c528d0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x3c52820
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x3c52770
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x3c526a0
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x3c526a0
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x3c525f0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x3c524f0
	int GetNumMaterials();// 0x3c524c0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x3c523e0
	MaterialInterface* GetMaterial(int ElementIndex);// 0x3c52340
	float GetMassScale(FName BoneName);// 0x3c522a0
	float GetMass();// 0x3c52260
	float GetLinearDamping();// 0x3c52220
	Vector GetInertiaTensor(FName BoneName);// 0x3c52170
	bool GetGenerateOverlapEvents();// 0x3c52140
	byte GetCollisionResponseToChannel(byte Channel);// 0x3c520b0
	FName GetCollisionProfileName();// 0x3c52070
	byte GetCollisionObjectType();// 0x3c52040
	byte GetCollisionEnabled();// 0x3c52010
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x3c51ed0
	Vector GetCenterOfMass(FName BoneName);// 0x3c51e20
	float GetAngularDamping();// 0x3c51de0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x3c51cc0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x3c51bf0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x3c51b50
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x3c51ad0
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x3c51a50
	void ClearMoveIgnoreComponents();// 0x3c51a20
	void ClearMoveIgnoreActors();// 0x3c51a00
	bool CanCharacterStepUp(Pawn* Pawn);// 0x3c51960
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x3c516e0
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x3c51810
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x3c516e0
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x3c51500
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x3c51320
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x3c511e0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x3c510b0
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x3c50f70
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x3c50e30
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x3c50d00
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x3c50bd0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x3c50a80
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x3c50950

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 1]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 1]
	FName AttachSocketName;//[Offset: 0xc8, Size: 1]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 1]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 1]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 1]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 1]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 1]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 1]
	byte Mobility;//[Offset: 0x14f, Size: 1]
	byte DetailMode;//[Offset: 0x150, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x3c64d60
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x3c64c90
	void SetWorldScale3D(Vector NewScale);// 0x3c64aa0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x3c649d0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x3c64940
	void SetRelativeScale3D(Vector NewScale3D);// 0x3c648b0
	void SetMobility(byte NewMobility);// 0x3c64830
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x3c64760
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x3c645a0
	void ResetRelativeTransform();// 0x3c64580
	void OnRep_Visibility(bool OldValue);// 0x3c64270
	void OnRep_Transform();// 0x3c64250
	void OnRep_AttachSocketName();// 0x3c64230
	void OnRep_AttachParent();// 0x3c64230
	void OnRep_AttachChildren();// 0x3c64210
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c64000
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c63e50
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c63c50
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c63aa0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c63890
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c636e0
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c634e0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c63330
	Transform K2_GetComponentToWorld();// 0x3c632d0
	Vector K2_GetComponentScale();// 0x3c63290
	Rotator K2_GetComponentRotation();// 0x3c63250
	Vector K2_GetComponentLocation();// 0x3c63210
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x3c630b0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3c62ee0
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x3c62d80
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c62b70
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c62960
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c627b0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c62600
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c62450
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c622a0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c62090
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c61ee0
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3c61d30
	bool IsVisible();// 0x3c61d00
	bool IsSimulatingPhysics(FName BoneName);// 0x3c61c60
	bool IsAnySimulatingPhysics();// 0x3c61c30
	Vector GetUpVector();// 0x3c61a90
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x3c61980
	Rotator GetSocketRotation(FName InSocketName);// 0x3c618d0
	Quat GetSocketQuaternion(FName InSocketName);// 0x3c61820
	Vector GetSocketLocation(FName InSocketName);// 0x3c61770
	bool GetShouldUpdatePhysicsVolume();// 0x3c61740
	Vector GetRightVector();// 0x3c61700
	Transform GetRelativeTransform();// 0x3c616a0
	PhysicsVolume* GetPhysicsVolume();// 0x3c61670
	void GetParentComponents(out SceneComponent*[] Parents);// 0x3c615c0
	int GetNumChildrenComponents();// 0x3c61590
	Vector GetForwardVector();// 0x3c3c880
	Vector GetComponentVelocity();// 0x3c61550
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x3c61450
	SceneComponent* GetChildComponent(int ChildIndex);// 0x3c613b0
	FName GetAttachSocketName();// 0x3377dd0
	SceneComponent* GetAttachParent();// 0x3c61390
	FName[] GetAllSocketNames();// 0x3c61310
	bool DoesSocketExist(FName InSocketName);// 0x3c61270
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x3c611a0

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 1]
	enum CreationMethod;//[Offset: 0x8c, Size: 1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 1]
	void ToggleActive();// 0x3206dc0
	void SetTickGroup(byte NewTickGroup);// 0x3b24650
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x3b246d0
	void SetIsReplicated(bool ShouldReplicate);// 0x3b245c0
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x3b24540
	void SetComponentTickInterval(float TickInterval);// 0x3b244c0
	void SetComponentTickEnabled(bool bEnabled);// 0x3b24430
	void SetAutoActivate(bool bNewAutoActivate);// 0x3b20d30
	void SetActive(bool bNewActive, bool bReset);// 0x3b24360
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3b242d0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3b24240
	void ReceiveTick(float DeltaSeconds);// 0x1ef32e0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1ef32e0
	void ReceiveBeginPlay();// 0x1ef32e0
	void OnRep_IsActive();// 0x2c7e150
	void K2_DestroyComponent(Object* Object);// 0x3b24130
	bool IsComponentTickEnabled();// 0x3b24100
	bool IsBeingDestroyed();// 0x3b240d0
	bool IsActive();// 0x3b240a0
	Actor* GetOwner();// 0x3b24080
	float GetComponentTickInterval();// 0x3b24050
	void Deactivate();// 0x2c7def0
	bool ComponentHasTag(FName Tag);// 0x3b23e10
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3b23cb0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3b23c20
	void Activate(bool bReset);// 0x3207070

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 1]
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 1]
	byte RemoteRole;//[Offset: 0x5f, Size: 1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 1]
	float InitialLifeSpan;//[Offset: 0x94, Size: 1]
	float CustomTimeDilation;//[Offset: 0x98, Size: 1]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 1]
	Actor* Owner;//[Offset: 0xe0, Size: 1]
	FName NetDriverName;//[Offset: 0xe8, Size: 1]
	byte Role;//[Offset: 0xf0, Size: 1]
	byte NetDormancy;//[Offset: 0xf1, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 1]
	int InputPriority;//[Offset: 0xf4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 1]
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 1]
	int NetTag;//[Offset: 0x104, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x108, Size: 1]
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 1]
	float NetPriority;//[Offset: 0x110, Size: 1]
	Pawn* Instigator;//[Offset: 0x118, Size: 1]
	Actor*[] Children;//[Offset: 0x120, Size: 1]
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 1]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 1]
	FName[] Layers;//[Offset: 0x150, Size: 1]
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 1]
	FName[] Tags;//[Offset: 0x170, Size: 1]
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 1]
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 1]
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 1]
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 1]
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 1]
	delegate OnClicked;//[Offset: 0x187, Size: 1]
	delegate OnReleased;//[Offset: 0x188, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 1]
	delegate OnActorHit;//[Offset: 0x18d, Size: 1]
	delegate OnDestroyed;//[Offset: 0x18e, Size: 1]
	delegate OnEndPlay;//[Offset: 0x18f, Size: 1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 1]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x3b21030
	void UserConstructionScript();// 0x1ef32e0
	void TearOff();// 0x2c7e170
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x3b20f60
	void SetTickGroup(byte NewTickGroup);// 0x3b20e50
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x3b20ed0
	void SetReplicates(bool bInReplicates);// 0x3b20dc0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x3b20d30
	void SetOwner(Actor* NewOwner);// 0x3b20ca0
	void SetNetDormancy(byte NewDormancy);// 0x3b20c20
	void SetLifeSpan(float InLifespan);// 0x3b20b90
	void SetAutoDestroyWhenFinished(bool bVal);// 0x3b20b00
	void SetActorTickInterval(float TickInterval);// 0x3b20a80
	void SetActorTickEnabled(bool bEnabled);// 0x3b209f0
	void SetActorScale3D(Vector NewScale3D);// 0x3b20960
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x3b208d0
	void SetActorHiddenInGame(bool bNewHidden);// 0x3b20840
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x3b207b0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3b20720
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3b20690
	void ReceiveTick(float DeltaSeconds);// 0x1ef32e0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1ef32e0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1ef32e0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1ef32e0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1ef32e0
	void ReceiveDestroyed();// 0x1ef32e0
	void ReceiveBeginPlay();// 0x1ef32e0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1ef32e0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1ef32e0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1ef32e0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1ef32e0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1ef32e0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1ef32e0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1ef32e0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1ef32e0
	void ReceiveActorEndCursorOver();// 0x1ef32e0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1ef32e0
	void ReceiveActorBeginCursorOver();// 0x1ef32e0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x3b20570
	void OnRep_ReplicateMovement();// 0x2c7e150
	void OnRep_ReplicatedMovement();// 0x3b20550
	void OnRep_Owner();// 0x3206dc0
	void OnRep_Instigator();// 0x3b20530
	void OnRep_AttachmentReplication();// 0x2c7dd10
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x3b20390
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x11b8be0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x3b202a0
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b20090
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x3b1ffa0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1fd90
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1fbe0
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1fa30
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1f820
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1f660
	void K2_OnReset();// 0x1ef32e0
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1ef32e0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1ef32e0
	SceneComponent* K2_GetRootComponent();// 0x3b1f640
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x3b1f560
	Rotator K2_GetActorRotation();// 0x3b1f4b0
	Vector K2_GetActorLocation();// 0x3b1f430
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3b1f320
	void K2_DestroyComponent(ActorComponent* Component);// 0x3b1f290
	void K2_DestroyActor();// 0x3b1f270
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3b1f0a0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3b1eed0
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x3b1ed70
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x3b1ec10
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1ea00
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1e7f0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1e640
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1e490
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1e280
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1e0d0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3b1df20
	bool IsOverlappingActor(const Actor* Other);// 0x3b1de80
	bool IsChildActor();// 0x3b1de50
	bool IsActorTickEnabled();// 0x3b1de20
	bool IsActorBeingDestroyed();// 0x3b1ddf0
	bool HasAuthority();// 0x3b1ddc0
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x3b1dd20
	Vector GetVelocity();// 0x3b1dce0
	Transform GetTransform();// 0x3b1dc90
	bool GetTickableWhenPaused();// 0x3b1dc60
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x3b1dbc0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x3b1db20
	byte GetRemoteRole();// 0x3b1db00
	ChildActorComponent* GetParentComponent();// 0x3b1dad0
	Actor* GetParentActor();// 0x3b1daa0
	Actor* GetOwner();// 0x3b1da80
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x3b1d9d0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x3b1d8d0
	byte GetLocalRole();// 0x3b1d8b0
	float GetLifeSpan();// 0x3b1d870
	Controller* GetInstigatorController();// 0x3b1d840
	Pawn* GetInstigator();// 0x10434a0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x3b1d730
	float GetInputAxisValue(const FName InputAxisName);// 0x3b1d690
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x3b1d590
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x3b1d4f0
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x3b1d450
	float GetGameTimeSinceCreation();// 0x3b1d420
	float GetDotProductTo(const Actor* OtherActor);// 0x3b1d380
	float GetDistanceTo(const Actor* OtherActor);// 0x3b1d2e0
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x3b1d1d0
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x3b1d0f0
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x3b1d050
	FName GetAttachParentSocketName();// 0x3b1cf10
	Actor* GetAttachParentActor();// 0x3b1cee0
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x3b1cf50
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x3b1cde0
	Vector GetActorUpVector();// 0x3b1cd70
	float GetActorTimeDilation();// 0x3b1cd40
	float GetActorTickInterval();// 0x3b1cd10
	Vector GetActorScale3D();// 0x3b1ccd0
	Vector GetActorRightVector();// 0x3b1cc60
	Vector GetActorRelativeScale3D();// 0x3b1cc20
	Vector GetActorForwardVector();// 0x3b1cbb0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x3b1cac0
	bool GetActorEnableCollision();// 0x3b1ca90
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x3b1c900
	void ForceNetUpdate();// 0x3b1c8e0
	void FlushNetDormancy();// 0x3b1c8c0
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x3b1c760
	void EnableInput(PlayerController* PlayerController);// 0x3b1c6d0
	void DisableInput(PlayerController* PlayerController);// 0x31ef1d0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x3b1c640
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3b1c5b0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3b1c520
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x3b1c360
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x3b1c150
	bool ActorHasTag(FName Tag);// 0x3b1c0b0

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 1]
	float DestructibleImpulse;//[Offset: 0x30, Size: 1]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 1]
	float DamageFalloff;//[Offset: 0x38, Size: 1]

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float DISTANCE;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 1]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 1]
	float PenetrationDepth;//[Offset: 0x54, Size: 1]
	int Item;//[Offset: 0x58, Size: 1]
	byte ElementIndex;//[Offset: 0x5c, Size: 1]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 1]
	Actor* Actor;//[Offset: 0x68, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 1]
	FName BoneName;//[Offset: 0x78, Size: 1]
	FName MyBoneName;//[Offset: 0x80, Size: 1]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 1]
	float StaticFriction;//[Offset: 0x2c, Size: 1]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float Restitution;//[Offset: 0x34, Size: 1]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float Density;//[Offset: 0x3c, Size: 1]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 1]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 1]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 1]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 1]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 1]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 1]
	byte SurfaceType;//[Offset: 0x60, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnInstigatedAnyDamage;//[Size: 1]
	FName StateName;//[Offset: 0x248, Size: 1]
	Pawn* Pawn;//[Offset: 0x250, Size: 1]
	Character* Character;//[Offset: 0x260, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 1]
	Rotator ControlRotation;//[Offset: 0x288, Size: 1]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	void UnPossess();// 0x3b64a80
	void StopMovement();// 0x3b64a60
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x3b64970
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x1aef990
	void SetIgnoreLookInput(bool bNewLookInput);// 0x3b648e0
	void SetControlRotation(out const Rotator NewRotation);// 0x3b64850
	void ResetIgnoreMoveInput();// 0x3b64830
	void ResetIgnoreLookInput();// 0x3b64810
	void ResetIgnoreInputFlags();// 0x3b647f0
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x1ef32e0
	void ReceivePossess(Pawn* PossessedPawn);// 0x1ef32e0
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1ef32e0
	void Possess(Pawn* InPawn);// 0x3b64760
	void OnRep_PlayerState();// 0x3b64740
	void OnRep_Pawn();// 0x3b64720
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x3b645f0
	Pawn* K2_GetPawn();// 0x3b645c0
	bool IsPlayerController();// 0x3b64590
	bool IsMoveInputIgnored();// 0x3b64560
	bool IsLookInputIgnored();// 0x3b64530
	bool IsLocalPlayerController();// 0x3b644e0
	bool IsLocalController();// 0x3b644b0
	Actor* GetViewTarget();// 0x3b64480
	Rotator GetDesiredRotation();// 0x3b64280
	Rotator GetControlRotation();// 0x3b64240
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x3b64110
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x3b63fd0
	PlayerController* CastToPlayerController();// 0x3b63fa0

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 1]
	int playerId;//[Offset: 0x224, Size: 1]
	byte Ping;//[Offset: 0x228, Size: 1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 1]
	int StartTime;//[Offset: 0x22c, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 1]
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 1]
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 1]
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 1]
	FString PlayerNamePrivate;//[Offset: 0x300, Size: 1]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1ef32e0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1ef32e0
	void OnRep_UniqueId();// 0x1106430
	void OnRep_Score();// 0x1a7dc00
	void OnRep_PlayerName();// 0x102ced0
	void OnRep_PlayerId();// 0x3c1c690
	void OnRep_bIsInactive();// 0x3c1cf20
	bool IsOnlyASpectator();// 0x3c4dbf0
	FString GetPlayerName();// 0x3c4da00

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 1]
	float BaseEyeHeight;//[Offset: 0x22c, Size: 1]
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 1]
	enum AutoPossessAI;//[Offset: 0x231, Size: 1]
	byte RemoteViewPitch;//[Offset: 0x232, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x240, Size: 1]
	Controller* LastHitBy;//[Offset: 0x250, Size: 1]
	Controller* Controller;//[Offset: 0x258, Size: 1]
	Vector ControlInputVector;//[Offset: 0x264, Size: 1]
	Vector LastControlInputVector;//[Offset: 0x270, Size: 1]
	void SpawnDefaultController();// 0x3c3a3d0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x3c392d0
	void ReceiveUnpossessed(Controller* OldController);// 0x1ef32e0
	void ReceivePossessed(Controller* NewController);// 0x1ef32e0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x3c38770
	void OnRep_PlayerState();// 0x1106570
	void OnRep_Controller();// 0x3c38750
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3c38510
	Vector K2_GetMovementInputVector();// 0x3c383b0
	bool IsPlayerControlled();// 0x3b644b0
	bool IsPawnControlled();// 0x3c384e0
	bool IsMoveInputIgnored();// 0x3c38480
	bool IsLocallyControlled();// 0x3c38450
	bool IsControlled();// 0x3c38420
	bool IsBotControlled();// 0x3b870d0
	Vector GetPendingMovementInputVector();// 0x3c383b0
	Vector GetNavAgentLocation();// 0x3c382f0
	PawnMovementComponent* GetMovementComponent();// 0x3b6d030
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x3c38260
	Vector GetLastMovementInputVector();// 0x3c38220
	Rotator GetControlRotation();// 0x3c380f0
	Controller* GetController();// 0x3c38130
	Rotator GetBaseAimRotation();// 0x3c37f10
	void DetachFromControllerPendingDestroy();// 0x3c37ef0
	Vector ConsumeMovementInputVector();// 0x3c37eb0
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x3c37990
	void AddControllerYawInput(float Val);// 0x3c37820
	void AddControllerRollInput(float Val);// 0x3c37790
	void AddControllerPitchInput(float Val);// 0x3c37700

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 1]
	Vector K2_GetInputVector();// 0x3c38370
	bool IsMoveInputIgnored();// 0x3c384b0
	Vector GetPendingInputVector();// 0x3c38370
	Pawn* GetPawnOwner();// 0x3c38340
	Vector GetLastInputVector();// 0x3c381e0
	Vector ConsumeInputVector();// 0x3c37e70
	void AddInputVector(Vector WorldVector, bool bForce);// 0x3c378b0

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 1]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 1]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 1]
	void StopMovementKeepPathing();// 0x3c232f0
	void StopActiveMovement();// 0x3c232d0
	bool IsSwimming();// 0x3c232a0
	bool IsMovingOnGround();// 0x3b3e1b0
	bool IsFlying();// 0x3c23270
	bool IsFalling();// 0x3c23240
	bool IsCrouching();// 0x3c23210

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 1]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 1]
	Vector Velocity;//[Offset: 0xc4, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 1]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 1]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 1]
	void StopMovementImmediately();// 0x3c20800
	void SnapUpdatedComponentToPlane();// 0x3c207e0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x3c20670
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x3c20510
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x3c20480
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x3c20390
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x3c20300
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x3c20280
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x3c20050
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x3c1fb60
	float K2_GetModifiedMaxSpeed();// 0x3c1fb20
	float K2_GetMaxSpeedModifier();// 0x3c1fae0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x3c1f9a0
	Vector GetPlaneConstraintOrigin();// 0x3c1f960
	Vector GetPlaneConstraintNormal();// 0x3c1f920
	enum GetPlaneConstraintAxisSetting();// 0x3c1f900
	PhysicsVolume* GetPhysicsVolume();// 0x3c1f8d0
	float GetMaxSpeed();// 0x3c1f890
	float GetGravityZ();// 0x3c1f6b0
	Vector ConstrainNormalToPlane(Vector Normal);// 0x3c1f600
	Vector ConstrainLocationToPlane(Vector Location);// 0x3c1f550
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x3c1f4a0

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 1]
	int Priority;//[Offset: 0x25c, Size: 1]
	float FluidFriction;//[Offset: 0x260, Size: 1]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 1]
	Color BrushColor;//[Offset: 0x224, Size: 1]
	int PolyFlags;//[Offset: 0x228, Size: 1]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 1]
	Model* Brush;//[Offset: 0x230, Size: 1]
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 1]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 1]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x450, Size: 1]
	BodySetup* BrushBodySetup;//[Offset: 0x458, Size: 1]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 1]
	Vector BuildScale3D;//[Offset: 0x288, Size: 1]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 1]
	byte PhysicsType;//[Offset: 0x30, Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 1]
	byte CollisionReponse;//[Offset: 0x32, Size: 1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 1]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 1]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 1]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 1]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	float Radius;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 1]
	FName Name;//[Offset: 0xc, Size: 1]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float X;//[Offset: 0x48, Size: 1]
	float Y;//[Offset: 0x4c, Size: 1]
	float Z;//[Offset: 0x50, Size: 1]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 1]
	float Yaw;//[Offset: 0x4, Size: 1]
	float Roll;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius;//[Offset: 0x48, Size: 1]
	float Length;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 1]
	int[] IndexData;//[Offset: 0x40, Size: 1]
	Box ElemBox;//[Offset: 0x50, Size: 1]
	Transform Transform;//[Offset: 0x70, Size: 1]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 1]
	Vector Max;//[Offset: 0xc, Size: 1]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 1]
	Vector Translation;//[Offset: 0x10, Size: 1]
	Vector Scale3D;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius0;//[Offset: 0x48, Size: 1]
	float Radius1;//[Offset: 0x4c, Size: 1]
	float Length;//[Offset: 0x50, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1e, Size: 1]
	byte CollisionEnabled;//[Offset: 0x20, Size: 1]
	enum SleepFamily;//[Offset: 0x59, Size: 1]
	byte DOFMode;//[Offset: 0x5a, Size: 1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5c, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 1]
	FName CollisionProfileName;//[Offset: 0x6c, Size: 1]
	byte PositionSolverIterationCount;//[Offset: 0x74, Size: 1]
	byte VelocitySolverIterationCount;//[Offset: 0x75, Size: 1]
	CollisionResponse CollisionResponses;//[Offset: 0x78, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0xa8, Size: 1]
	float MassInKgOverride;//[Offset: 0xac, Size: 1]
	float LinearDamping;//[Offset: 0xb8, Size: 1]
	float AngularDamping;//[Offset: 0xbc, Size: 1]
	Vector CustomDOFPlaneNormal;//[Offset: 0xc0, Size: 1]
	Vector COMNudge;//[Offset: 0xcc, Size: 1]
	float MassScale;//[Offset: 0xd8, Size: 1]
	Vector InertiaTensorScale;//[Offset: 0xdc, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf8, Size: 1]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x108, Size: 1]
	float MaxAngularVelocity;//[Offset: 0x110, Size: 1]
	float CustomSleepThresholdMultiplier;//[Offset: 0x114, Size: 1]
	float StabilizationThresholdMultiplier;//[Offset: 0x118, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0x11c, Size: 1]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 1]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 1]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 1]
	int Index;//[Offset: 0x4, Size: 1]
	int SelectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 1]
	float AgentHeight;//[Offset: 0x8, Size: 1]
	float AgentStepHeight;//[Offset: 0xc, Size: 1]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 1]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 1]
	FString SubPathString;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 1]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 1]
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 1]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 1]
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 1]
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 1]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 1]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 1]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 1]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 1]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 1]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 1]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 1]
	int JumpMaxCount;//[Offset: 0x344, Size: 1]
	int JumpCurrentCount;//[Offset: 0x348, Size: 1]
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 1]
	MulticastInlineDelegateProperty OnReachedJumpApex;//[Size: 1]
	MulticastInlineDelegateProperty MovementModeChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterMovementUpdated;//[Size: 1]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 1]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 1]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 1]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 1]
	void UnCrouch(bool bClientSimulation);// 0x3b5bfb0
	void StopJumping();// 0x3b5bf90
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x3b5bf00
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x3b5bb30
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x3b5b9c0
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x3b5b720
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x3b5b320
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3b5ae90
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3b5aa00
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3b5a6c0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x3b5a620
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x3b5a500
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x3b5a360
	void OnRep_RootMotion();// 0x3b5a340
	void OnRep_ReplicatedBasedMovement();// 0x3b5a320
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x3b5a300
	void OnRep_IsCrouched();// 0x1b548a0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1ef32e0
	void OnLanded(out const HitResult Hit);// 0x1ef32e0
	void OnJumped();// 0x3b5a2e0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3b5a1b0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1ef32e0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1ef32e0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1ef32e0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1ef32e0
	void Jump();// 0x3b5a190
	bool IsPlayingRootMotion();// 0x3b5a160
	bool IsPlayingNetworkedRootMotionMontage();// 0x3b5a130
	bool IsJumpProvidingForce();// 0x3b5a100
	bool HasAnyRootMotion();// 0x3b5a0d0
	AnimMontage* GetCurrentMontage();// 0x3b59a40
	Vector GetBaseTranslationOffset();// 0x3b59a10
	Rotator GetBaseRotationOffsetRotator();// 0x3b599c0
	float GetAnimRootMotionTranslationScale();// 0x3b59990
	void Crouch(bool bClientSimulation);// 0x3b59900
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3b59580
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x3b59490
	void ClientCheatWalk();// 0x3b59470
	void ClientCheatGhost();// 0x3b59450
	void ClientCheatFly();// 0x3b59430
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3b58f50
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3b58c20
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3b58990
	void ClientAckGoodMove(float Timestamp);// 0x3b58910
	bool CanJumpInternal();// 0x3b588e0
	bool CanJump();// 0x3b588b0
	bool CanCrouch();// 0x3b58880
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x3b58790

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6a0, Size: 1]
	class AnimInstance* AnimClass;//[Offset: 0x6a8, Size: 1]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6b0, Size: 1]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6b8, Size: 1]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6c0, Size: 1]
	Vector RootBoneTranslation;//[Offset: 0x6e8, Size: 1]
	Vector LineCheckBoundsScale;//[Offset: 0x6f4, Size: 1]
	AnimInstance*[] LinkedInstances;//[Offset: 0x730, Size: 1]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x740, Size: 1]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x750, Size: 1]
	float GlobalAnimRateScale;//[Offset: 0x8b0, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x8b4, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x8b5, Size: 1]
	byte AnimationMode;//[Offset: 0x8b7, Size: 1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b9, Size: 1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b9, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b9, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b9, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b9, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b9, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ba, Size: 1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c0, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c0, Size: 1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c0, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c1, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c1, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c1, Size: 1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c1, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c1, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c1, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c1, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c2, Size: 1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c2, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c2, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c2, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c2, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c2, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c2, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c2, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c3, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c3, Size: 1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c3, Size: 1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c3, Size: 1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c3, Size: 1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c3, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8c6, Size: 1]
	float ClothBlendWeight;//[Offset: 0x8c8, Size: 1]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8d0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x8e0, Size: 1]
	MulticastInlineDelegateProperty OnConstraintBroken;//[Size: 1]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x900, Size: 1]
	float TeleportDistanceThreshold;//[Offset: 0x9d8, Size: 1]
	float TeleportRotationThreshold;//[Offset: 0x9dc, Size: 1]
	uint32 LastPoseTickFrame;//[Offset: 0x9e8, Size: 1]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa40, Size: 1]
	MulticastInlineDelegateProperty OnAnimInitialized;//[Size: 1]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3c6e850
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x3c6e7c0
	void ToggleDisablePostProcessBlueprint();// 0x3c6e7a0
	void TermBodiesBelow(FName ParentBoneName);// 0x3c6e710
	void SuspendClothingSimulation();// 0x3c6e6f0
	void Stop();// 0x3c6e6d0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3c6e600
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x1a2f5c0
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1a2f5c0
	void SetTeleportRotationThreshold(float Threshold);// 0x3c6e580
	void SetTeleportDistanceThreshold(float Threshold);// 0x3c6e500
	void SetPosition(float InPos, bool bFireNotifies);// 0x3c6e420
	void SetPlayRate(float Rate);// 0x3c6e3a0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x3c6e320
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x3c6e200
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x3c6e0e0
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x3c6e050
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x3c6df40
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x3c6de70
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x3c6dde0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x3c6dd50
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x3c6dc80
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x3c6db70
	void SetClothMaxDistanceScale(float Scale);// 0x3c6daf0
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x3c6da20
	void SetAnimClass(class Object NewClass);// 0x3c6d880
	void SetAnimationMode(byte InAnimationMode);// 0x3c6d9a0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x3c6d910
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x3c6d720
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x3c6d550
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x3c6d620
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x3c6d4c0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3c6d390
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3c6d260
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x3c6d0f0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x3c6d060
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3c6cf80
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x3c6ce50
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x3c6ccd0
	void ResumeClothingSimulation();// 0x3c6ccb0
	void ResetClothTeleportMode();// 0x3c6cc90
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x3c6cc10
	void ResetAllowedAnimCurveEvaluation();// 0x3c6cbf0
	void ResetAllBodiesSimulatePhysics();// 0x3c6cbd0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x3c6cb00
	void Play(bool bLooping);// 0x3c6ca70
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate);// 0x3c6c8b0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3c6c7e0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3c6c750
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float DISTANCE);// 0x3c6c550
	bool IsPlaying();// 0x3c6c520
	bool IsClothingSimulationSuspended();// 0x3c6c4f0
	bool IsBodyGravityEnabled(FName BoneName);// 0x3c6c450
	bool HasValidAnimationInstance();// 0x3c6c420
	float GetTeleportRotationThreshold();// 0x3c6c3f0
	float GetTeleportDistanceThreshold();// 0x3c6c3f0
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x3c6c230
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x3c6c000
	Vector GetSkeletalCenterOfMass();// 0x3c6bfc0
	AnimInstance* GetPostProcessInstance();// 0x3c6bf90
	float GetPosition();// 0x3c6bf60
	float GetPlayRate();// 0x3c6bf30
	float GetMorphTarget(FName MorphTargetName);// 0x3c6be90
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3c6bdf0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3c6bd50
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3c6bc60
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3c6bbc0
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x3c6ba20
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x3c6b830
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x3c6b680
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x3c6b490
	bool GetDisablePostProcessBlueprint();// 0x3c6b460
	bool GetDisableAnimCurves();// 0x3c6b430
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x3c6b2b0
	float GetClothMaxDistanceScale();// 0x3c6b250
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x3c6b280
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x3c6b180
	AnimInstance* GetAnimInstance();// 0x3c6b120
	class Object GetAnimClass();// 0x3c6b0f0
	byte GetAnimationMode();// 0x3c6b150
	bool GetAllowRigidBodyAnimNode();// 0x3c6b090
	bool GetAllowedAnimCurveEvaluate();// 0x3c6b0c0
	void ForceClothNextUpdateTeleportAndReset();// 0x3c6b070
	void ForceClothNextUpdateTeleport();// 0x3c6b050
	FName FindConstraintBoneName(int ConstraintIndex);// 0x3c6afc0
	void ClearMorphTargets();// 0x3c6afa0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x3c6ae70
	void BindClothToMasterPoseComponent();// 0x3c6ae50
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x3c6ad80
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x3c6ac00
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x3c6aa80
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3c6a960

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x480, Size: 1]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x488, Size: 1]
	enum[] SkinCacheUsage;//[Offset: 0x490, Size: 1]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x4a0, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5a8, Size: 1]
	int ForcedLodModel;//[Offset: 0x5b0, Size: 1]
	int MinLodModel;//[Offset: 0x5b4, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x5c0, Size: 1]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5d0, Size: 1]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x604, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x606, Size: 1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x606, Size: 1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x606, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x606, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x606, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x607, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x607, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x607, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x607, Size: 1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x607, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x607, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x607, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x607, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x608, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x608, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x608, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x608, Size: 1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x608, Size: 1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x609, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x609, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x60c, Size: 1]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x620, Size: 1]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x640, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x3c74160
	void UnHideBoneByName(FName BoneName);// 0x3c740d0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3c73f00
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3c73d30
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x3c73be0
	void ShowAllMaterialSections(int LODIndex);// 0x3c73b50
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x3c73a80
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x3c73990
	bool SetSkinWeightProfile(FName InProfileName);// 0x3c738f0
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x3c73800
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x3c73730
	void SetRenderStatic(bool bNewValue);// 0x3c736a0
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x3c73570
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x3c73440
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x3c73370
	void SetMinLOD(int InNewMinLOD);// 0x3c732e0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x3c73210
	void SetForcedLOD(int InNewForcedLOD);// 0x3c73180
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x3c730f0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x3c73060
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x3c72fe0
	bool IsUsingSkinWeightProfile();// 0x3c72fb0
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x3c72ee0
	bool IsBoneHiddenByName(FName BoneName);// 0x3c72e40
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x3c72c40
	int GetVertexOffsetUsage(int LODIndex);// 0x3c72ba0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x3c72a80
	FName GetSocketBoneName(FName InSocketName);// 0x3c72940
	Vector GetRefPosePosition(int BoneIndex);// 0x3c72890
	FName GetParentBone(FName BoneName);// 0x3c72800
	int GetNumLODs();// 0x3c727d0
	int GetNumBones();// 0x3c727a0
	int GetForcedLOD();// 0x3c72770
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x3c72670
	FName GetCurrentSkinWeightProfileName();// 0x3c72650
	FName GetBoneName(int BoneIndex);// 0x3c725c0
	int GetBoneIndex(FName BoneName);// 0x3c72520
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x3c72380
	void ClearVertexColorOverride(int LODIndex);// 0x3c722f0
	void ClearSkinWeightProfile();// 0x3c722d0
	void ClearSkinWeightOverride(int LODIndex);// 0x3c72240
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x3c72170

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x450, Size: 1]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x3c20700
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x3c205a0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x3c200e0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x3c1fa40
	FName[] GetMaterialSlotNames();// 0x3c1f790
	MaterialInterface*[] GetMaterials();// 0x3c1f810
	int GetMaterialIndex(FName MaterialSlotName);// 0x3c1f6f0

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 1]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 1]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 1]
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 1]
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x160, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 1]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 1]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 1]
	MorphTarget*[] MorphTargets;//[Offset: 0x190, Size: 1]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x318, Size: 1]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x320, Size: 1]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x330, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x370, Size: 1]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x390, Size: 1]
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x3c68b80
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x3c68ad0
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x3c68a20
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x11b8820
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x3c68910
	int NumSockets();// 0x3c688e0
	FString[] K2_GetAllMorphTargetNames();// 0x3c68800
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x3c68730
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x3c68690
	Skeleton* GetSkeleton();// 0x3c68670
	PhysicsAsset* GetShadowPhysicsAsset();// 0x3c68650
	PhysicsAsset* GetPhysicsAsset();// 0x3c68630
	NodeMappingContainer*[] GetNodeMappingData();// 0x3c685a0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x3c68500
	MorphTarget*[] GetMorphTargets();// 0x3c684d0
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x3c684a0
	SkeletalMaterial[] GetMaterials();// 0x3c68470
	SkeletalMeshLODSettings* GetLODSettings();// 0x3bb9860
	BoxSphereBounds GetImportedBounds();// 0x3c68420
	Object* GetDefaultAnimatingRig();// 0x3c683c0
	BoxSphereBounds GetBounds();// 0x3c68370
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x3c681a0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x3c680c0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x3c68020

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 1]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 1]
	int StreamingIndex;//[Offset: 0x4c, Size: 1]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 1]

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 1]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 1]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 1]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 1]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 1]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 1]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x380, Size: 1]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 1]
	int ParentIndex;//[Offset: 0x8, Size: 1]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 1]
	int B;//[Offset: 0x4, Size: 1]
	int C;//[Offset: 0x8, Size: 1]
	int D;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 1]
	FName TargetBoneName;//[Offset: 0x8, Size: 1]
	FName VirtualBoneName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x30, Size: 1]
	Vector RelativeLocation;//[Offset: 0x38, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 1]
	Vector RelativeScale;//[Offset: 0x50, Size: 1]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x3c72d10
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x3c729d0

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 1]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float BlendScale;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 1]
	FName[] SlotNames;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 1]
	Guid AssetGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 1]
	Vector BoxExtent;//[Offset: 0xc, Size: 1]
	float SphereRadius;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 1]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 1]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x3c1c6b0
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x3c1c080
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x3c1bfe0
	PhysicalMaterial* GetPhysicalMaterial();// 0x32067f0
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x3c1bec0
	Material* GetBaseMaterial();// 0x3c1be90

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 1]
	byte AddressX;//[Offset: 0x2c, Size: 1]
	byte AddressY;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 1]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 1]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 1]
	float WorldUnitScale;//[Offset: 0x24, Size: 1]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ScatterRadius;//[Offset: 0x2c, Size: 1]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 1]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 1]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 1]
	float ExtinctionScale;//[Offset: 0x60, Size: 1]
	float NormalScale;//[Offset: 0x64, Size: 1]
	float ScatteringDistribution;//[Offset: 0x68, Size: 1]
	float IOR;//[Offset: 0x6c, Size: 1]
	float Roughness0;//[Offset: 0x70, Size: 1]
	float Roughness1;//[Offset: 0x74, Size: 1]
	float LobeMix;//[Offset: 0x78, Size: 1]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 1]
	float G;//[Offset: 0x4, Size: 1]
	float B;//[Offset: 0x8, Size: 1]
	float A;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 1]
	byte Association;//[Offset: 0x8, Size: 1]
	int Index;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 1]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 1]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 1]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 1]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 1]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 1]
	byte MaterialDomain;//[Offset: 0x150, Size: 1]
	byte BlendMode;//[Offset: 0x151, Size: 1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 1]
	byte ShadingModel;//[Offset: 0x154, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 1]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 1]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 1]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 1]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 1]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 1]
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 1]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 1]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 1]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 1]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 1]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 1]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 1]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 1]
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x209, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20a, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20a, Size: 1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20a, Size: 1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20a, Size: 1]
	bool WriteDepthToTranslucentMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20a, Size: 1]
	byte ShadingRate;//[Offset: 0x20b, Size: 1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20c, Size: 1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20c, Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20c, Size: 1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20c, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20d, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20d, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20d, Size: 1]
	byte BlendableLocation;//[Offset: 0x20e, Size: 1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20f, Size: 1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20f, Size: 1]
	byte StencilCompare;//[Offset: 0x210, Size: 1]
	byte StencilRefValue;//[Offset: 0x211, Size: 1]
	byte RefractionMode;//[Offset: 0x212, Size: 1]
	int BlendablePriority;//[Offset: 0x214, Size: 1]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x21c, Size: 1]
	float RefractionDepthBias;//[Offset: 0x220, Size: 1]
	Guid StateId;//[Offset: 0x224, Size: 1]
	float MaxDisplacement;//[Offset: 0x234, Size: 1]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x268, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName InputName;//[Offset: 0x4, Size: 1]
	FName ExpressionName;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName InputName;//[Offset: 0x4, Size: 1]
	FName ExpressionName;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 1]
	Object*[] ReferencedTextures;//[Offset: 0x150, Size: 1]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x160, Size: 1]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x170, Size: 1]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x180, Size: 1]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x190, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1a0, Size: 1]
	FName[] DynamicParameterNames;//[Offset: 0x1b0, Size: 1]
	bool[] QualityLevelsUsed;//[Offset: 0x1c0, Size: 1]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d0, Size: 1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 5]
	float[] ScalarValues;//[Offset: 0xf0, Size: 1]
	LinearColor[] VectorValues;//[Offset: 0x100, Size: 1]
	Texture*[] TextureValues;//[Offset: 0x110, Size: 1]
	Font*[] FontValues;//[Offset: 0x120, Size: 1]
	int[] FontPageValues;//[Offset: 0x130, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x140, Size: 1]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 1]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 1]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 1]
	int LODBias;//[Offset: 0x78, Size: 1]
	byte CompressionSettings;//[Offset: 0x7c, Size: 1]
	byte Filter;//[Offset: 0x7d, Size: 1]
	enum MipLoadOptions;//[Offset: 0x7e, Size: 1]
	byte LODGroup;//[Offset: 0x7f, Size: 1]
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 1]
	enum DownscaleOptions;//[Offset: 0x84, Size: 1]
	bool sRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 1]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 1]
	int IsRemapped;//[Offset: 0x58, Size: 1]
	float EmScale;//[Offset: 0x5c, Size: 1]
	float Ascent;//[Offset: 0x60, Size: 1]
	float Descent;//[Offset: 0x64, Size: 1]
	float Leading;//[Offset: 0x68, Size: 1]
	int Kerning;//[Offset: 0x6c, Size: 1]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 1]
	int NumCharacters;//[Offset: 0x120, Size: 1]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 1]
	float ScalingFactor;//[Offset: 0x138, Size: 1]
	int LegacyFontSize;//[Offset: 0x13c, Size: 1]
	FName LegacyFontName;//[Offset: 0x140, Size: 1]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 1]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 1]
	int StartV;//[Offset: 0x4, Size: 1]
	int USize;//[Offset: 0x8, Size: 1]
	int VSize;//[Offset: 0xc, Size: 1]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0x178, Size: 1]
	int FirstResourceMemMip;//[Offset: 0x17c, Size: 1]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]
	byte AddressX;//[Offset: 0x181, Size: 1]
	byte AddressY;//[Offset: 0x182, Size: 1]
	IntPoint ImportedSize;//[Offset: 0x184, Size: 1]
	int Blueprint_GetSizeY();// 0x3c90560
	int Blueprint_GetSizeX();// 0x3c90530

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 1]
	float Height;//[Offset: 0x10, Size: 1]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x18, Size: 1]
	FString Chars;//[Offset: 0x20, Size: 1]
	FString UnicodeRange;//[Offset: 0x30, Size: 1]
	FString CharsFilePath;//[Offset: 0x40, Size: 1]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 1]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 1]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	int TexturePageWidth;//[Offset: 0x78, Size: 1]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 1]
	int XPadding;//[Offset: 0x80, Size: 1]
	int YPadding;//[Offset: 0x84, Size: 1]
	int ExtendBoxTop;//[Offset: 0x88, Size: 1]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 1]
	int ExtendBoxRight;//[Offset: 0x90, Size: 1]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 1]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int Kerning;//[Offset: 0x9c, Size: 1]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 1]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 1]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 1]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 1]
	FontData Font;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 1]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	int SubFaceIndex;//[Offset: 0x14, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 1]
	float ScalingFactor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 1]
	FString Cultures;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 1]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 1]
	int TileSize;//[Offset: 0x2c, Size: 1]
	int TileBorderSize;//[Offset: 0x30, Size: 1]
	enum MaterialType;//[Offset: 0x34, Size: 1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 1]
	byte LODGroup;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x44, Size: 1]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 1]
	int GetTileSize();// 0x3c5c870
	int GetTileCount();// 0x3c5c810
	int GetTileBorderSize();// 0x3c5c7d0
	int GetSize();// 0x3c5c740
	int GetPageTableSize();// 0x3c5c710

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 1]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 1]
	Guid ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 1]
	float GrassDensity;//[Offset: 0x48, Size: 1]
	float PlacementJitter;//[Offset: 0x4c, Size: 1]
	int StartCullDistance;//[Offset: 0x50, Size: 1]
	int EndCullDistance;//[Offset: 0x54, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 1]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 1]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 1]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float PlacementJitter;//[Offset: 0x20, Size: 1]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 1]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 1]
	int MinLOD;//[Offset: 0x2c, Size: 1]
	enum Scaling;//[Offset: 0x30, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 1]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 1]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 1]
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 1]
	float LightmapUVDensity;//[Offset: 0x98, Size: 1]
	int LightMapResolution;//[Offset: 0x9c, Size: 1]
	int LightMapCoordinateIndex;//[Offset: 0xa0, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa4, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 1]
	int LODForCollision;//[Offset: 0xb0, Size: 1]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb4, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb5, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 1]
	Object* EditableMesh;//[Offset: 0x140, Size: 1]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 1]
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x3c8a020
	void RemoveSocket(StaticMeshSocket* Socket);// 0x3c88fc0
	StaticMaterial[] GetStaticMaterials();// 0x3c88ee0
	int GetNumSections(int InLOD);// 0x3c88cd0
	int GetNumLODs();// 0x3c88ca0
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x3c88b70
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x3c88af0
	int GetMaterialIndex(FName MaterialSlotName);// 0x3c88a50
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x3c889b0
	BoxSphereBounds GetBounds();// 0x3c88800
	Box GetBoundingBox();// 0x3c887b0
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x3c886b0
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x3c88620
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x3c88520
	void AddSocket(StaticMeshSocket* Socket);// 0x3c88490
	FName AddMaterial(MaterialInterface* Material);// 0x3c88400

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	Vector RelativeLocation;//[Offset: 0x30, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 1]
	Vector RelativeScale;//[Offset: 0x48, Size: 1]
	FString Tag;//[Offset: 0x58, Size: 1]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x3321f10
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x3321e30
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x3321d50
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x3321a10

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector position);// 0x3319720
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x3319600
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x3319530
	void ReversePolygonFacing(PolygonID PolygonID);// 0x33194b0
	void ReserveNewVertices(int NumberOfNewVertices);// 0x3319420
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x33191e0
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x3319390
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x3319300
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x3319270
	void ReserveNewEdges(int NumberOfNewEdges);// 0x33191e0
	bool IsVertexValid(VertexID VertexID);// 0x3319150
	bool IsVertexOrphaned(VertexID VertexID);// 0x33190c0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x3319030
	bool IsTriangleValid(const TriangleID TriangleID);// 0x3318fa0
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x3318f10
	bool IsPolygonValid(PolygonID PolygonID);// 0x3318e80
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x3318df0
	bool IsEmpty();// 0x3318dc0
	bool IsEdgeValid(EdgeID EdgeID);// 0x3318d30
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x3318c50
	bool IsEdgeInternal(EdgeID EdgeID);// 0x3318bc0
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3318ad0
	Vector GetVertexPosition(VertexID VertexID);// 0x3318a30
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x3318950
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x33188b0
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x33187d0
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x33186f0
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x3318610
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x3318520
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x3318430
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x3318340
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x3318250
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x3318160
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x3318070
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x3317f80
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3317e90
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x3317db0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x3317d10
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x3317c70
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x3317b80
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x3317a90
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x33179a0
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x33178b0
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x33177c0
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x3317720
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x3317630
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x3317540
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x3317450
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x3317360
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x33172d0
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x3317240
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x33171b0
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x3317120
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x3317090
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x3317000
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x3316f70
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x3316ee0
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x3316e50
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x3316dc0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x3316d30
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x3316ca0
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x3316bb0
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x3316ad0
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x33169e0
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x33168f0
	void Empty();// 0x33168d0
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x33167e0
	void DeleteVertex(VertexID VertexID);// 0x3316760
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x33165a0
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x3316520
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x3316360
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x3316270
	void CreateVertexWithID(VertexID VertexID);// 0x33161f0
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x3316120
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x3316080
	VertexID CreateVertex();// 0x3316040
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3315e90
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3315d20
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3315b70
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x3315af0
	PolygonGroupID CreatePolygonGroup();// 0x3315ab0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3315940
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x3315820
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x3315740
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x33156c0

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 1]
	float DiffuseBoost;//[Offset: 0x4, Size: 1]
	float ExportResolutionScale;//[Offset: 0x8, Size: 1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 1]
	int UVChannelIndex;//[Offset: 0x4, Size: 1]
	FName TextureName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 1]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 1]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 1]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 1]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 1]
	byte RefPoseType;//[Offset: 0x151, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 1]
	int RefFrameIndex;//[Offset: 0x160, Size: 1]
	FName RetargetSource;//[Offset: 0x164, Size: 1]
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x170, Size: 1]
	enum Interpolation;//[Offset: 0x180, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 1]
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1b0, Size: 1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 1]
	float SequenceLength;//[Offset: 0x90, Size: 1]
	float RateScale;//[Offset: 0x94, Size: 1]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 1]
	float GetPlayLength();// 0x3b35710

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 1]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 1]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 1]
	FName NotifyName;//[Offset: 0x40, Size: 1]
	AnimNotify* Notify;//[Offset: 0x48, Size: 1]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 1]
	float Duration;//[Offset: 0x58, Size: 1]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 1]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 1]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 1]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 1]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 1]
	int SlotIndex;//[Offset: 0x10, Size: 1]
	int SegmentIndex;//[Offset: 0x14, Size: 1]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 1]
	float SegmentLength;//[Offset: 0x20, Size: 1]
	float LinkValue;//[Offset: 0x24, Size: 1]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x1ef32e0
	FString GetNotifyName();// 0x3378590

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x1ef32e0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x1ef32e0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x1ef32e0
	FString GetNotifyName();// 0x3378590

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 1]
	float BlendInTime;//[Offset: 0xd8, Size: 1]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 1]
	float BlendOutTime;//[Offset: 0x110, Size: 1]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 1]
	FName SyncGroup;//[Offset: 0x118, Size: 1]
	int SyncSlotIndex;//[Offset: 0x120, Size: 1]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 1]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 1]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 1]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 1]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 1]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 1]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 1]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 1]
	float GetDefaultBlendOutTime();// 0x3b32cf0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 1]
	float BlendTime;//[Offset: 0x8, Size: 1]
	enum BlendOption;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 1]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float GetFloatValue(float InTime);// 0x3b69ec0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x3b643a0
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x3b642c0

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 1]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 1]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]
	float ArriveTangent;//[Offset: 0xc, Size: 1]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 1]
	float LeaveTangent;//[Offset: 0x14, Size: 1]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 1]
	float StartTime;//[Offset: 0x38, Size: 1]
	FName NextSectionName;//[Offset: 0x3c, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 1]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 1]
	float StartPos;//[Offset: 0x8, Size: 1]
	float AnimStartTime;//[Offset: 0xc, Size: 1]
	float AnimEndTime;//[Offset: 0x10, Size: 1]
	float AnimPlayRate;//[Offset: 0x14, Size: 1]
	int LoopingCount;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 1]
	float DisplayTime;//[Offset: 0x38, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 1]
	float TriggerTime;//[Offset: 0x4, Size: 1]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 1]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 1]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 1]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 3]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 3]
	float Alpha;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 1]
	SmartName Name;//[Offset: 0x8, Size: 1]
	int CurveTypeFlags;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 1]
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 1]
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	StringCurve StringCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 1]
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 1]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 1]
	FString Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 1]
	int DefaultValue;//[Offset: 0x78, Size: 1]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 1]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x70, Size: 1]
	SimpleCurveKey[] Keys;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 1]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 1]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 1]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 1]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 1]
	byte ReductionMethod;//[Offset: 0x18, Size: 1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 1]
	byte TextureImportance;//[Offset: 0x1a, Size: 1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	float WeldingThreshold;//[Offset: 0x20, Size: 1]
	float NormalsThreshold;//[Offset: 0x24, Size: 1]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 1]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	float VolumeImportance;//[Offset: 0x30, Size: 1]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	int BaseLOD;//[Offset: 0x38, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 1]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 1]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 1]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 1]
	enum SolverType;//[Offset: 0x7c, Size: 1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 1]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 1]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 1]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 1]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 1]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 1]
	float PositionStrength;//[Offset: 0x14, Size: 1]
	float VelocityStrength;//[Offset: 0x18, Size: 1]
	float MaxLinearForce;//[Offset: 0x1c, Size: 1]
	float MaxAngularForce;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 1]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1f0, Size: 1]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x200, Size: 1]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 1]
	FName ConstraintBone1;//[Offset: 0x20, Size: 1]
	FName ConstraintBone2;//[Offset: 0x28, Size: 1]
	Vector Pos1;//[Offset: 0x30, Size: 1]
	Vector PriAxis1;//[Offset: 0x3c, Size: 1]
	Vector SecAxis1;//[Offset: 0x48, Size: 1]
	Vector Pos2;//[Offset: 0x54, Size: 1]
	Vector PriAxis2;//[Offset: 0x60, Size: 1]
	Vector SecAxis2;//[Offset: 0x6c, Size: 1]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 1]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 1]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 1]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 1]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 1]
	float LinearBreakThreshold;//[Offset: 0x10, Size: 1]
	float LinearPlasticityThreshold;//[Offset: 0x14, Size: 1]
	float AngularBreakThreshold;//[Offset: 0x18, Size: 1]
	float AngularPlasticityThreshold;//[Offset: 0x1c, Size: 1]
	LinearConstraint LinearLimit;//[Offset: 0x20, Size: 1]
	ConeConstraint ConeLimit;//[Offset: 0x3c, Size: 1]
	TwistConstraint TwistLimit;//[Offset: 0x5c, Size: 1]
	LinearDriveConstraint LinearDrive;//[Offset: 0x78, Size: 1]
	AngularDriveConstraint AngularDrive;//[Offset: 0xc4, Size: 1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 1]
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 1]
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 1]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float Restitution;//[Offset: 0x8, Size: 1]
	float ContactDistance;//[Offset: 0xc, Size: 1]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 1]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 1]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 1]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 1]
	Vector VelocityTarget;//[Offset: 0xc, Size: 1]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 1]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 1]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float MaxForce;//[Offset: 0x8, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 1]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 1]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 1]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 1]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 1]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 1]
	FName ProfileName;//[Offset: 0x114, Size: 1]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 1]
	int SolverIterations;//[Offset: 0x4, Size: 1]
	int JointIterations;//[Offset: 0x8, Size: 1]
	int CollisionIterations;//[Offset: 0xc, Size: 1]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 1]
	int JointPushOutIterations;//[Offset: 0x14, Size: 1]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 1]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 1]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 1]
	Object* SourceAsset;//[Offset: 0x118, Size: 1]
	Object* TargetAsset;//[Offset: 0x140, Size: 1]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 1]
	Transform Transform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 1]
	byte BlueprintType;//[Offset: 0x58, Size: 1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 1]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 1]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 1]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 1]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 1]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 1]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 1]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 1]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 1]
	FName AttachToName;//[Offset: 0x80, Size: 1]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 1]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 1]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 1]
	Guid VariableGuid;//[Offset: 0xc0, Size: 1]
	FName InternalVariableName;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 1]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* PropertyScope;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 1]
	FString DataValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 1]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 1]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 1]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 1]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 1]
	Guid TimelineGuid;//[Offset: 0x80, Size: 1]
	byte TimelineTickGroup;//[Offset: 0x90, Size: 1]
	FName VariableName;//[Offset: 0x94, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 1]
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 1]
	FName FinishedFunctionName;//[Offset: 0xac, Size: 1]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x18, Size: 1]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 1]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 3]
	Vector GetVectorValue(float InTime);// 0x3b6a0d0

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 4]
	float AdjustHue;//[Offset: 0x230, Size: 1]
	float AdjustSaturation;//[Offset: 0x234, Size: 1]
	float AdjustBrightness;//[Offset: 0x238, Size: 1]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 1]
	float AdjustVibrance;//[Offset: 0x240, Size: 1]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 1]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 1]
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x3b6a030
	LinearColor GetLinearColorValue(float InTime);// 0x3b69f60
	LinearColor GetClampedLinearColorValue(float InTime);// 0x3b69620

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 1]
	class Object* ComponentClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 1]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 1]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 1]
	FName SCSVariableName;//[Offset: 0x8, Size: 1]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 1]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 1]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 1]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 1]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 1]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 1]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	float ThresholdPosition;//[Offset: 0x4, Size: 1]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 1]
	float ThresholdUV;//[Offset: 0xc, Size: 1]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 1]
	byte RootMotionMode;//[Offset: 0x30, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 1]
	MulticastInlineDelegateProperty OnMontageBlendingOut;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnAllMontageInstancesEnded;//[Size: 1]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x3b2d210
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3b2d180
	Pawn* TryGetPawnOwner();// 0x3b2d150
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x3b2d080
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3b2cfb0
	void SetRootMotionMode(byte Value);// 0x3b20e50
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x3b2cf20
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x3b2ce90
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x3b2cdc0
	void SavePoseSnapshot(FName SnapshotName);// 0x3b2cd30
	void ResetDynamics(enum InTeleportType);// 0x3b2ccb0
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x3b2ca50
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x3b2c880
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x3b2c7b0
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x3b2c6e0
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x3b2c610
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x3b2c540
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x3b2c430
	void Montage_Resume(const AnimMontage* Montage);// 0x3b2c3a0
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x3b2c1f0
	void Montage_Pause(const AnimMontage* Montage);// 0x3b2c160
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x3b2c090
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x3b2bfc0
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x3b2bf20
	bool Montage_IsActive(const AnimMontage* Montage);// 0x3b2be80
	float Montage_GetPosition(const AnimMontage* Montage);// 0x3b2bde0
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x3b2bd40
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3b2bca0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3b2bc10
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3b2bb70
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3b2baa0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3b2b9d0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3b2b940
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3b2b7e0
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x3b2b710
	bool IsAnyMontagePlaying();// 0x3b2b6e0
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x3b2b610
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3b2b4f0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3b2b440
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x3b2b370
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3b2b2a0
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3b2b1d0
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3b2b100
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x3b2b030
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3b2b000
	bool GetPropagateNotifiesToLinkedInstances();// 0x3b2afd0
	SkeletalMeshComponent* GetOwningComponent();// 0x3b2afa0
	Actor* GetOwningActor();// 0x3b2af70
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x3b2ae80
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x3b2adb0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3b2ad10
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3b2ac70
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3b2ab80
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3b2aae0
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3b2aa10
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3b2a940
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3b2a870
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3b2a7a0
	float GetInstanceMachineWeight(int MachineIndex);// 0x3b2a700
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3b2a660
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3b2a5c0
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3b2a520
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3b2a480
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x3b2a3e0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x3b2a340
	float GetCurveValue(FName CurveName);// 0x3b2a2a0
	FName GetCurrentStateName(int MachineIndex);// 0x3b2a210
	AnimMontage* GetCurrentActiveMontage();// 0x3b2a1e0
	void GetAllCurveNames(out FName[] OutNames);// 0x3b2a130
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x3b2a040
	void ClearMorphTargets();// 0x3b2a020
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3b29f20
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1ef32e0
	void BlueprintPostEvaluateAnimation();// 0x1ef32e0
	void BlueprintLinkedAnimationLayersInitialized();// 0x1ef32e0
	void BlueprintInitializeAnimation();// 0x1ef32e0
	void BlueprintBeginPlay();// 0x1ef32e0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 1]
	FName[] BoneNames;//[Offset: 0x10, Size: 1]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 1]
	FName SnapshotName;//[Offset: 0x28, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 1]
	FName NextMarkerName;//[Offset: 0x8, Size: 1]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 1]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 1]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 1]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 1]
	void SetNumSubsteps(int NumSubsteps);// 0x334df40
	void SetNumIterations(int NumIterations);// 0x334deb0
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x334de20
	void PhysicsAssetUpdated();// 0x2c7def0
	float GetSimulationTime();// 0x334de00
	int GetNumSubsteps();// 0x334dde0
	int GetNumKinematicParticles();// 0x334ddc0
	int GetNumIterations();// 0x334dda0
	int GetNumDynamicParticles();// 0x334dd80
	int GetNumCloths();// 0x334dd60
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0x334dcb0
	void EnableGravityOverride(out const Vector InVector);// 0x334dc20
	void DisableGravityOverride();// 0x2c7dd10
	void ClothConfigUpdated();// 0xca82c0

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 1]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 1]
	float SavedPlayRate;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 1]
	Plane YPlane;//[Offset: 0x10, Size: 1]
	Plane ZPlane;//[Offset: 0x20, Size: 1]
	Plane WPlane;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 12]
	byte Weights;//[Offset: 0x30, Size: 12]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 1]
	float GravityScale;//[Offset: 0x150, Size: 1]
	float MaxStepHeight;//[Offset: 0x154, Size: 1]
	float JumpZVelocity;//[Offset: 0x158, Size: 1]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 1]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 1]
	float WalkableFloorZ;//[Offset: 0x164, Size: 1]
	byte MovementMode;//[Offset: 0x168, Size: 1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 1]
	float GroundFriction;//[Offset: 0x16c, Size: 1]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 1]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 1]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 1]
	float MaxFlySpeed;//[Offset: 0x198, Size: 1]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 1]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 1]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 1]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 1]
	float BrakingFriction;//[Offset: 0x1ac, Size: 1]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 1]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 1]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 1]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 1]
	float AirControl;//[Offset: 0x1c4, Size: 1]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 1]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 1]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 1]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 1]
	float Buoyancy;//[Offset: 0x1d8, Size: 1]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 1]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 1]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 1]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 1]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 1]
	float OutofWaterZ;//[Offset: 0x204, Size: 1]
	float Mass;//[Offset: 0x208, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 1]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 1]
	float PushForceFactor;//[Offset: 0x214, Size: 1]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 1]
	float TouchForceFactor;//[Offset: 0x21c, Size: 1]
	float MinTouchForce;//[Offset: 0x220, Size: 1]
	float MaxTouchForce;//[Offset: 0x224, Size: 1]
	float RepulsionForce;//[Offset: 0x228, Size: 1]
	Vector Acceleration;//[Offset: 0x22c, Size: 1]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 1]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 1]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 1]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 1]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 1]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 1]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 1]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 1]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 1]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 1]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 1]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 1]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 1]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 1]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 1]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 1]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 1]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 1]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 1]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 1]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 1]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 1]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 1]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 1]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 1]
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 1]
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 1]
	byte DefaultLandMovementMode;//[Offset: 0x384, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x385, Size: 1]
	byte GroundMovementMode;//[Offset: 0x386, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x387, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x387, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x387, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x387, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x387, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x388, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x388, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x388, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x388, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x388, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x389, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x389, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x389, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x389, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x389, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x389, Size: 1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x389, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38a, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38a, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38a, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38a, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x39c, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x3a0, Size: 1]
	int AvoidanceUID;//[Offset: 0x3ac, Size: 1]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b0, Size: 1]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b4, Size: 1]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b8, Size: 1]
	float AvoidanceWeight;//[Offset: 0x3bc, Size: 1]
	Vector PendingLaunchVelocity;//[Offset: 0x3c0, Size: 1]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 1]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 1]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 1]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 1]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 1]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 1]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 1]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 1]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x980, Size: 1]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9b8, Size: 1]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa80, Size: 1]
	Vector AnimRootMotionVelocity;//[Offset: 0xac0, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x3b5de70
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x3b5ddf0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x3b5dd20
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x1430df0
	void SetGroupsToIgnore(int GroupFlags);// 0x1430d60
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1430cd0
	void SetGroupsToAvoid(int GroupFlags);// 0x1430c40
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x1430870
	void SetAvoidanceGroup(int GroupFlags);// 0x14307e0
	void SetAvoidanceEnabled(bool bEnable);// 0x3b5dc90
	float K2_GetWalkableFloorZ();// 0x3b5dc60
	float K2_GetWalkableFloorAngle();// 0x3b5dc30
	float K2_GetModifiedMaxAcceleration();// 0x3b5dbf0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x3b5daa0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x3b5d880
	bool IsWalking();// 0x3b3e1b0
	bool IsWalkable(out const HitResult Hit);// 0x3b5d790
	float GetValidPerchRadius();// 0x3b5d760
	float GetPerchRadiusThreshold();// 0x3b5d730
	PrimitiveComponent* GetMovementBase();// 0x3b5d700
	float GetMinAnalogSpeed();// 0x3b5d6c0
	float GetMaxJumpHeightWithJumpTime();// 0x3b5d680
	float GetMaxJumpHeight();// 0x3b5d640
	float GetMaxBrakingDeceleration();// 0x3b5d600
	float GetMaxAcceleration();// 0x3b5d5c0
	Vector GetLastUpdateVelocity();// 0x3b5d590
	Rotator GetLastUpdateRotation();// 0x3b5d540
	Vector GetLastUpdateLocation();// 0x3b5d510
	Vector GetImpartedMovementBaseVelocity();// 0x3b5d4d0
	Vector GetCurrentAcceleration();// 0x3b5d490
	Character* GetCharacterOwner();// 0x3b5d470
	float GetAnalogInputModifier();// 0x3b5d440
	void DisableMovement();// 0x3b5d420
	void ClearAccumulatedForces();// 0x3b5d400
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b5d1e0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x3b5d070
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x3b5cf90
	void AddForce(Vector Force);// 0x3b5cf00

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 1]
	float LineDist;//[Offset: 0x8, Size: 1]
	HitResult HitResult;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	float TickInterval;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 1]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x468, Size: 1]
	float CapsuleRadius;//[Offset: 0x46c, Size: 1]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x3b5bde0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x3b5bd00
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x3b5bc20
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3b59fe0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3b59ef0
	float GetUnscaledCapsuleRadius();// 0x3b59ed0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x3b59ea0
	float GetUnscaledCapsuleHalfHeight();// 0x3b59e80
	float GetShapeScale();// 0x3b59d60
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3b59c40
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3b59b30
	float GetScaledCapsuleRadius();// 0x3b59af0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x3b59aa0
	float GetScaledCapsuleHalfHeight();// 0x3b59a70

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x450, Size: 1]
	class NavAreaBase* AreaClass;//[Offset: 0x458, Size: 1]
	Color ShapeColor;//[Offset: 0x460, Size: 1]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x464, Size: 1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 1]
	Rotator Rotation;//[Offset: 0x1c, Size: 1]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 1]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 1]
	float position;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 1]
	Rotator Rotation;//[Offset: 0x20, Size: 1]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 1]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 1]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 1]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 1]
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 1]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 1]
	HUD* MyHUD;//[Offset: 0x2b0, Size: 1]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 1]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 1]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 1]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 1]
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 1]
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 1]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 1]
	int ClientCap;//[Offset: 0x330, Size: 1]
	CheatManager* CheatManager;//[Offset: 0x338, Size: 1]
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 1]
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 1]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 1]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x3d4, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 1]
	NetConnection* NetConnection;//[Offset: 0x418, Size: 1]
	float InputYawScale;//[Offset: 0x42c, Size: 1]
	float InputPitchScale;//[Offset: 0x430, Size: 1]
	float InputRollScale;//[Offset: 0x434, Size: 1]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 1]
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 1]
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x454, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 1]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 1]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 1]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 1]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	Vector SpawnLocation;//[Offset: 0x558, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x3c49680
	bool WasInputKeyJustPressed(Key Key);// 0x3c49590
	void ToggleSpeaking(bool bInSpeaking);// 0x3c49500
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x3c49430
	void SwitchLevel(FString URL);// 0x3c49390
	void StopHapticEffect(enum Hand);// 0x3c492f0
	void StartFire(byte FireModeNum);// 0x3c48c10
	void SetVirtualJoystickVisibility(bool bVisible);// 0x3c48620
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x3c48480
	void SetName(FString S);// 0x3c483e0
	void SetMouseLocation(const int X, const int Y);// 0x3c48310
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x3c48240
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x3c48000
	void SetDisableHaptics(bool bNewDisabled);// 0x3c47f50
	void SetControllerLightColor(Color Color);// 0x3c47ed0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3c47cf0
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x3c47bc0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x3c47ae0
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x3c479f0
	void ServerViewPrevPlayer();// 0x3c479a0
	void ServerViewNextPlayer();// 0x3c47950
	void ServerVerifyViewTarget();// 0x3c47900
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x3c47840
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x3c47780
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x3c47650
	void ServerUnmutePlayer(UniqueNetIdRepl playerId);// 0x3c474f0
	void ServerToggleAILogging();// 0x3c474a0
	void ServerShortTimeout();// 0x3c47450
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x3c47390
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x3c47250
	void ServerRestartPlayer();// 0x3c47200
	void ServerPause();// 0x3c471b0
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x3c470f0
	void ServerMutePlayer(UniqueNetIdRepl playerId);// 0x3c46f90
	void ServerExecRPC(FString Msg);// 0x3c46ed0
	void ServerExec(FString Msg);// 0x1a4bb80
	void ServerCheckClientPossessionReliable();// 0x3c46e80
	void ServerCheckClientPossession();// 0x3c46e30
	void ServerChangeName(FString S);// 0x3c46d70
	void ServerCamera(FName NewMode);// 0x3c46cb0
	void ServerAcknowledgePossession(Pawn* P);// 0x3c46bf0
	void SendToConsole(FString Command);// 0x3c46b50
	void RestartLevel();// 0x3c46b30
	void ResetControllerLightColor();// 0x3c46b10
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x3c468a0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x3c46740
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x3c46490
	void Pause();// 0x3c45fd0
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x3c45f40
	void LocalTravel(FString URL);// 0x3c45ea0
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x3c45ce0
	bool IsInputKeyDown(Key Key);// 0x3c45bf0
	void GetViewportSize(out int SizeX, out int SizeY);// 0x3c45b10
	SpectatorPawn* GetSpectatorPawn();// 0x3c45af0
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x3c459d0
	Vector GetInputVectorKeyState(Key Key);// 0x3c458c0
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3c45730
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x3c45650
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x3c454c0
	float GetInputKeyTimeDown(Key Key);// 0x3c453c0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3c45290
	float GetInputAnalogKeyState(Key Key);// 0x3c45190
	HUD* GetHUD();// 0x3c44780
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x3c44fc0
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3c44e10
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3c44c60
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x3c44ad0
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3c44940
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3c447b0
	Vector GetFocalLocation();// 0x3c44740
	void FOV(float NewFOV);// 0x3c44590
	void EnableCheats();// 0x3c44570
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x3c443e0
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x3c442e0
	void ConsoleKey(Key Key);// 0x3c441f0
	void ClientWasKicked(const FText KickReason);// 0x3c44130
	void ClientVoiceHandshakeComplete();// 0x3c44110
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x3c44070
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x3c43eb0
	void ClientUnmutePlayer(UniqueNetIdRepl playerId);// 0x3c43d90
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x3c43c10
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x3c43a90
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x3c43920
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x3c43850
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3c43780
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x3c436b0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x3c43620
	void ClientStartOnlineSession();// 0x3c43600
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x3c43530
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3c433c0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3c43330
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x3c43230
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x3c431a0
	void ClientSetHUD(class HUD NewHUDClass);// 0x3c43110
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x3c43000
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x3c42e80
	void ClientSetCameraMode(FName NewCamMode);// 0x3c42df0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x3c42be0
	void ClientSetBlockOnAsyncLoading();// 0x1af25e0
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x3c42b20
	void ClientReturnToMainMenu(FString ReturnReason);// 0x3c42a80
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x3c429f0
	void ClientRestart(Pawn* NewPawn);// 0x3c42960
	void ClientReset();// 0x3c42940
	void ClientRepObjRef(Object* Object);// 0x3c428b0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x3c42710
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x3c425b0
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x3c42490
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x3c42320
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x3c42210
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x3c42120
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x3c41e50
	void ClientMutePlayer(UniqueNetIdRepl playerId);// 0x3c41d30
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x3c41c00
	void ClientIgnoreMoveInput(bool bIgnore);// 0x3c41b70
	void ClientIgnoreLookInput(bool bIgnore);// 0x3c41ae0
	void ClientGotoState(FName NewState);// 0x3c41a50
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x3c41980
	void ClientForceGarbageCollection();// 0x3c41960
	void ClientFlushLevelStreaming();// 0x3c41940
	void ClientEndOnlineSession();// 0x3c41920
	void ClientEnableNetworkVoice(bool bEnable);// 0x1aef870
	void ClientCommitMapChange();// 0x3c41900
	void ClientClearCameraLensEffects();// 0x12c3fb0
	void ClientCapBandwidth(int Cap);// 0x3c41870
	void ClientCancelPendingMapChange();// 0x3c41850
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x3c41720
	void ClearAudioListenerOverride();// 0x3c41700
	void ClearAudioListenerAttenuationOverride();// 0x3c416e0
	bool CanRestartPlayer();// 0x3c416b0
	void Camera(FName NewMode);// 0x3c41620
	void AddYawInput(float Val);// 0x3c41590
	void AddRollInput(float Val);// 0x3c41500
	void AddPitchInput(float Val);// 0x3c41470
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x3c412a0

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 1]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 1]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 1]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 1]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 1]
	FName[] DebugDisplay;//[Offset: 0x250, Size: 1]
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 1]
	Canvas* Canvas;//[Offset: 0x270, Size: 1]
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 1]
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 1]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 1]
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 1]
	void ShowHUD();// 0x1a7dc00
	void ShowDebugToggleSubCategory(FName Category);// 0x3b96a10
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x3b96980
	void ShowDebug(FName DebugType);// 0x3b968f0
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x3b966d0
	void RemoveAllDebugStrings();// 0x3b966b0
	void ReceiveHitBoxRelease(const FName BoxName);// 0x1ef32e0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x1ef32e0
	void ReceiveHitBoxClick(const FName BoxName);// 0x1ef32e0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x1ef32e0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x1ef32e0
	Vector Project(Vector Location);// 0x3b96200
	void PreviousDebugTarget();// 0x3b961e0
	void NextDebugTarget();// 0x3b90570
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x3b956c0
	PlayerController* GetOwningPlayerController();// 0xffec70
	Pawn* GetOwningPawn();// 0x3b95690
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x3b95470
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x3b952c0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x3b94e60
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x3b94c20
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x3b94a60
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x3b94770
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x3b94550
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x3b94180
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x3b93f80
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x3b93e00
	void AddHitBox(Vector2D position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x3b93ae0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x3b93720

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 1]
	float OrgY;//[Offset: 0x2c, Size: 1]
	float ClipX;//[Offset: 0x30, Size: 1]
	float ClipY;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 1]
	int SizeY;//[Offset: 0x44, Size: 1]
	Plane ColorModulate;//[Offset: 0x50, Size: 1]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 1]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 1]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 1]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x3b54f90
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x3b54ea0
	Vector K2_Project(Vector WorldLocation);// 0x3b54df0
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x3b54cc0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x3b54a10
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x3b54650
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x3b544a0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x3b54370
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x3b54130
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x3b53fd0
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x3b53e70
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x3b539e0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x3b538c0

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 1]
	Vector2D V0_UV;//[Offset: 0x8, Size: 1]
	LinearColor V0_Color;//[Offset: 0x10, Size: 1]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 1]
	Vector2D V1_UV;//[Offset: 0x28, Size: 1]
	LinearColor V1_Color;//[Offset: 0x30, Size: 1]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 1]
	Vector2D V2_UV;//[Offset: 0x48, Size: 1]
	LinearColor V2_Color;//[Offset: 0x50, Size: 1]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 1]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 1]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 1]
	FString DebugText;//[Offset: 0x20, Size: 1]
	float TimeRemaining;//[Offset: 0x30, Size: 1]
	float Duration;//[Offset: 0x34, Size: 1]
	Color TextColor;//[Offset: 0x38, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 1]
	Font* Font;//[Offset: 0x50, Size: 1]
	float FontScale;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 1]
	float DefaultFOV;//[Offset: 0x238, Size: 1]
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 1]
	float DefaultAspectRatio;//[Offset: 0x248, Size: 1]
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 1]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x890, Size: 1]
	TViewTarget ViewTarget;//[Offset: 0xe90, Size: 1]
	TViewTarget PendingViewTarget;//[Offset: 0x14a0, Size: 1]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1ae0, Size: 1]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x20e0, Size: 1]
	CameraModifier*[] ModifierList;//[Offset: 0x26e0, Size: 1]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x26f0, Size: 1]
	float FreeCamDistance;//[Offset: 0x2700, Size: 1]
	Vector FreeCamOffset;//[Offset: 0x2704, Size: 1]
	Vector ViewTargetOffset;//[Offset: 0x2710, Size: 1]
	MulticastInlineDelegateProperty OnAudioFadeChangeEvent;//[Size: 1]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2740, Size: 1]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2750, Size: 1]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2758, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2798, Size: 1]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x27b8, Size: 1]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x27c8, Size: 1]
	CameraActor* AnimCameraActor;//[Offset: 0x27d8, Size: 1]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27e0, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27e0, Size: 1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27e0, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27e0, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27e1, Size: 1]
	float ViewPitchMin;//[Offset: 0x27e4, Size: 1]
	float ViewPitchMax;//[Offset: 0x27e8, Size: 1]
	float ViewYawMin;//[Offset: 0x27ec, Size: 1]
	float ViewYawMax;//[Offset: 0x27f0, Size: 1]
	float ViewRollMin;//[Offset: 0x27f4, Size: 1]
	float ViewRollMax;//[Offset: 0x27f8, Size: 1]
	float ServerUpdateCameraTimeout;//[Offset: 0x2800, Size: 1]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x3c49370
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x3c49220
	void StopCameraFade();// 0x3c49200
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x3c49130
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3c49020
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x3c48f50
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x3c48e80
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3c48db0
	void StopAllCameraShakes(bool bImmediately);// 0x3c48d20
	void StopAllCameraAnims(bool bImmediate);// 0x3c48c90
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3c48a20
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3c488a0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x3c486b0
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x3c48110
	void SetGameCameraCutThisFrame();// 0x3c47fe0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x3c46a70
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x3c469e0
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3c46180
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x3c45ff0
	void OnPhotographySessionStart();// 0x3c1c690
	void OnPhotographySessionEnd();// 0x3c1cf20
	void OnPhotographyMultiPartCaptureStart();// 0x102ced0
	void OnPhotographyMultiPartCaptureEnd();// 0x1a7dc00
	PlayerController* GetOwningPlayerController();// 0x3c45ac0
	float GetFOVAngle();// 0x3b5d680
	Rotator GetCameraRotation();// 0x3c44700
	Vector GetCameraLocation();// 0x3c446c0
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x3c44620
	void ClearCameraLensEffects();// 0x1b548a0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x1ef32e0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x3c413d0
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3c41330

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ShakeScale;//[Offset: 0x2c, Size: 1]
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 1]
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 1]
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x3b55570
	CameraShakePattern* GetRootShakePattern();// 0x2ca7a20

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 1]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 1]
	float PlayRate;//[Offset: 0x50, Size: 1]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 1]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 1]
	enum PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x3b558c0
	void SetScale(float NewDuration);// 0x3b55600
	void SetDuration(float NewDuration);// 0x3b552f0

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 1]
	float AnimLength;//[Offset: 0x30, Size: 1]
	Box BoundingBox;//[Offset: 0x34, Size: 1]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 1]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1]
	float BasePostProcessBlendWeight;//[Offset: 0x5c0, Size: 1]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 1]
	FName GroupName;//[Offset: 0x40, Size: 1]
	Color GroupColor;//[Offset: 0x48, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 1]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 1]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 1]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e, Size: 1]
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	byte BloomMethod;//[Offset: 0x21, Size: 1]
	byte AutoExposureMethod;//[Offset: 0x22, Size: 1]
	byte TemperatureType;//[Offset: 0x23, Size: 1]
	float WhiteTemp;//[Offset: 0x24, Size: 1]
	float WhiteTint;//[Offset: 0x28, Size: 1]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 1]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 1]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 1]
	Vector4 ColorGain;//[Offset: 0x60, Size: 1]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 1]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 1]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 1]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 1]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 1]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 1]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 1]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 1]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 1]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 1]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 1]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 1]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 1]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 1]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 1]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 1]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 1]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 1]
	float BlueCorrection;//[Offset: 0x178, Size: 1]
	float ExpandGamut;//[Offset: 0x17c, Size: 1]
	float ToneCurveAmount;//[Offset: 0x180, Size: 1]
	float FilmSlope;//[Offset: 0x184, Size: 1]
	float FilmToe;//[Offset: 0x188, Size: 1]
	float FilmShoulder;//[Offset: 0x18c, Size: 1]
	float FilmBlackClip;//[Offset: 0x190, Size: 1]
	float FilmWhiteClip;//[Offset: 0x194, Size: 1]
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 1]
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 1]
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 1]
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 1]
	float FilmSaturation;//[Offset: 0x1c0, Size: 1]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 1]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 1]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 1]
	float FilmContrast;//[Offset: 0x1f4, Size: 1]
	float FilmToeAmount;//[Offset: 0x1f8, Size: 1]
	float FilmHealAmount;//[Offset: 0x1fc, Size: 1]
	float FilmDynamicRange;//[Offset: 0x200, Size: 1]
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 1]
	float SceneFringeIntensity;//[Offset: 0x214, Size: 1]
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 1]
	float BloomIntensity;//[Offset: 0x21c, Size: 1]
	float BloomThreshold;//[Offset: 0x220, Size: 1]
	float BloomSizeScale;//[Offset: 0x224, Size: 1]
	float Bloom1Size;//[Offset: 0x228, Size: 1]
	float Bloom2Size;//[Offset: 0x22c, Size: 1]
	float Bloom3Size;//[Offset: 0x230, Size: 1]
	float Bloom4Size;//[Offset: 0x234, Size: 1]
	float Bloom5Size;//[Offset: 0x238, Size: 1]
	float Bloom6Size;//[Offset: 0x23c, Size: 1]
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 1]
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 1]
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 1]
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 1]
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 1]
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 1]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 1]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 1]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 1]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 1]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 1]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 1]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 1]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 1]
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 1]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 1]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 1]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 1]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 1]
	float CameraShutterSpeed;//[Offset: 0x300, Size: 1]
	float CameraISO;//[Offset: 0x304, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 1]
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 1]
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 1]
	float AutoExposureBias;//[Offset: 0x314, Size: 1]
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 1]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x328, Size: 1]
	Texture* AutoExposureMeterMask;//[Offset: 0x330, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x338, Size: 1]
	float AutoExposureHighPercent;//[Offset: 0x33c, Size: 1]
	float AutoExposureMinBrightness;//[Offset: 0x340, Size: 1]
	float AutoExposureMaxBrightness;//[Offset: 0x344, Size: 1]
	float AutoExposureSpeedUp;//[Offset: 0x348, Size: 1]
	float AutoExposureSpeedDown;//[Offset: 0x34c, Size: 1]
	float HistogramLogMin;//[Offset: 0x350, Size: 1]
	float HistogramLogMax;//[Offset: 0x354, Size: 1]
	float AutoExposureCalibrationConstant;//[Offset: 0x358, Size: 1]
	float LensFlareIntensity;//[Offset: 0x35c, Size: 1]
	LinearColor LensFlareTint;//[Offset: 0x360, Size: 1]
	float LensFlareBokehSize;//[Offset: 0x370, Size: 1]
	float LensFlareThreshold;//[Offset: 0x374, Size: 1]
	Texture* LensFlareBokehShape;//[Offset: 0x378, Size: 1]
	LinearColor LensFlareTints;//[Offset: 0x380, Size: 8]
	float VignetteIntensity;//[Offset: 0x400, Size: 1]
	float GrainJitter;//[Offset: 0x404, Size: 1]
	float GrainIntensity;//[Offset: 0x408, Size: 1]
	float AmbientOcclusionIntensity;//[Offset: 0x40c, Size: 1]
	float AmbientOcclusionStaticFraction;//[Offset: 0x410, Size: 1]
	float AmbientOcclusionRadius;//[Offset: 0x414, Size: 1]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x41c, Size: 1]
	float AmbientOcclusionFadeRadius;//[Offset: 0x420, Size: 1]
	float AmbientOcclusionDistance;//[Offset: 0x424, Size: 1]
	float AmbientOcclusionPower;//[Offset: 0x428, Size: 1]
	float AmbientOcclusionBias;//[Offset: 0x42c, Size: 1]
	float AmbientOcclusionQuality;//[Offset: 0x430, Size: 1]
	float AmbientOcclusionMipBlend;//[Offset: 0x434, Size: 1]
	float AmbientOcclusionMipScale;//[Offset: 0x438, Size: 1]
	float AmbientOcclusionMipThreshold;//[Offset: 0x43c, Size: 1]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x440, Size: 1]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x448, Size: 1]
	float RayTracingAOIntensity;//[Offset: 0x44c, Size: 1]
	float RayTracingAORadius;//[Offset: 0x450, Size: 1]
	LinearColor IndirectLightingColor;//[Offset: 0x454, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x464, Size: 1]
	enum RayTracingGIType;//[Offset: 0x468, Size: 1]
	int RayTracingGIMaxBounces;//[Offset: 0x46c, Size: 1]
	int RayTracingGISamplesPerPixel;//[Offset: 0x470, Size: 1]
	float ColorGradingIntensity;//[Offset: 0x474, Size: 1]
	Texture* ColorGradingLUT;//[Offset: 0x478, Size: 1]
	float DepthOfFieldSensorWidth;//[Offset: 0x480, Size: 1]
	float DepthOfFieldFocalDistance;//[Offset: 0x484, Size: 1]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x488, Size: 1]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x48c, Size: 1]
	float DepthOfFieldFocalRegion;//[Offset: 0x490, Size: 1]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x494, Size: 1]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x498, Size: 1]
	float DepthOfFieldScale;//[Offset: 0x49c, Size: 1]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4a0, Size: 1]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a4, Size: 1]
	float DepthOfFieldOcclusion;//[Offset: 0x4a8, Size: 1]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4ac, Size: 1]
	float DepthOfFieldVignetteSize;//[Offset: 0x4b0, Size: 1]
	float MotionBlurAmount;//[Offset: 0x4b4, Size: 1]
	float MotionBlurMax;//[Offset: 0x4b8, Size: 1]
	int MotionBlurTargetFPS;//[Offset: 0x4bc, Size: 1]
	float MotionBlurPerObjectSize;//[Offset: 0x4c0, Size: 1]
	float LPVIntensity;//[Offset: 0x4c4, Size: 1]
	float LPVVplInjectionBias;//[Offset: 0x4c8, Size: 1]
	float LPVSize;//[Offset: 0x4cc, Size: 1]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4d0, Size: 1]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4d4, Size: 1]
	float LPVGeometryVolumeBias;//[Offset: 0x4d8, Size: 1]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4dc, Size: 1]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4e0, Size: 1]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4e4, Size: 1]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e8, Size: 1]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4ec, Size: 1]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4f0, Size: 1]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4f4, Size: 1]
	enum ReflectionsType;//[Offset: 0x4f8, Size: 1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4fc, Size: 1]
	float ScreenSpaceReflectionQuality;//[Offset: 0x500, Size: 1]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x504, Size: 1]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x508, Size: 1]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x50c, Size: 1]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x510, Size: 1]
	enum RayTracingReflectionsShadows;//[Offset: 0x514, Size: 1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x515, Size: 1]
	enum TranslucencyType;//[Offset: 0x516, Size: 1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x518, Size: 1]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x51c, Size: 1]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x520, Size: 1]
	enum RayTracingTranslucencyShadows;//[Offset: 0x524, Size: 1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x525, Size: 1]
	int PathTracingMaxBounces;//[Offset: 0x528, Size: 1]
	int PathTracingSamplesPerPixel;//[Offset: 0x52c, Size: 1]
	float PathTracingFilterWidth;//[Offset: 0x530, Size: 1]
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 1]
	float PathTracingMaxPathExposure;//[Offset: 0x538, Size: 1]
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53c, Size: 1]
	float LPVFadeRange;//[Offset: 0x540, Size: 1]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x544, Size: 1]
	float ScreenPercentage;//[Offset: 0x548, Size: 1]
	WeightedBlendables WeightedBlendables;//[Offset: 0x550, Size: 1]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 1]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 1]
	Actor* GroupActor;//[Offset: 0x30, Size: 1]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 1]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 1]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 1]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 1]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 1]
	float LinCurveTension;//[Offset: 0xb8, Size: 1]
	float AngCurveTension;//[Offset: 0xbc, Size: 1]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 1]
	Vector OutVal;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 1]
	Rotator ResetRotation;//[Offset: 0x34, Size: 1]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f8, Size: 1]
	float InnerAttenuationRadius;//[Offset: 0x1fc, Size: 1]
	float OuterAttenuationRadius;//[Offset: 0x200, Size: 1]
	class CameraShakeBase* CameraShake;//[Offset: 0x208, Size: 1]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x3b559e0
	void StopAllCameraShakes(bool bImmediately);// 0x3b55950
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3b55740
	void Start();// 0x3b55720
	float GetAttenuationFactor(out const Vector Location);// 0x3b53670

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x2c, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 1]
	float AlphaInTime;//[Offset: 0x38, Size: 1]
	float AlphaOutTime;//[Offset: 0x3c, Size: 1]
	float Alpha;//[Offset: 0x40, Size: 1]
	bool IsDisabled();// 0x2c9ecb0
	Actor* GetViewTarget();// 0x32067f0
	void EnableModifier();// 0x3b53650
	void DisableModifier(bool bImmediate);// 0x3b535c0
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x1ef32e0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x1ef32e0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 1]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 1]
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 1]
	Transform RelativeTransform;//[Offset: 0x290, Size: 1]
	float BaseFOV;//[Offset: 0x2c0, Size: 1]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 1]
	float DistFromCamera;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 1]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	void ToggleActive();// 0x3b71db0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3b71cd0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x102cef0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3b71c00
	void SetFloatParameter(FName ParameterName, float Param);// 0x3b71b30
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3b71a60
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3b71990
	void OnRep_bCurrentlyActive();// 0x102ced0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x1a772f0
	bool IsActive();// 0x3b71960
	void Deactivate();// 0x3b71940
	void Activate();// 0x3b71920

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x450, Size: 1]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x458, Size: 1]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x468, Size: 1]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x479, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x479, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x479, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x479, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x479, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47a, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47a, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47a, Size: 1]
	byte LODMethod;//[Offset: 0x485, Size: 1]
	enum RequiredSignificance;//[Offset: 0x486, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x488, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	Vector OldPosition;//[Offset: 0x4dc, Size: 1]
	Vector PartSysVelocity;//[Offset: 0x4e8, Size: 1]
	float WarmupTime;//[Offset: 0x4f4, Size: 1]
	float WarmupTickRate;//[Offset: 0x4f8, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0x500, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x508, Size: 1]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x528, Size: 1]
	float CustomTimeDilation;//[Offset: 0x540, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x598, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x5a0, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x5a8, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x5a9, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x5aa, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 1]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3c34610
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3c34580
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3c344b0
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x3c33f60
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x3c33e50
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x3c33d30
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x3c33c10
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x3c33b00
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x3c339e0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x3c33900
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x3c33630
	int GetNumActiveParticles();// 0x3c33510
	MaterialInterface* GetNamedMaterial(FName InName);// 0x3c33470
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x3c33320
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x3c33200
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x3c330e0
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x3c32fc0
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x3c32ea0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x3c32d80
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x3c32c90
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x3c32ad0
	void EndTrails();// 0x3c32ab0
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x3c329e0
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3c327e0

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3c34800
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x3c34770
	void SetIntParameter(FName ParameterName, int Param);// 0x3c343e0
	void SetFloatParameter(FName ParameterName, float Param);// 0x3c34300
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x3c34230
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3c34150
	void SetBoolParameter(FName ParameterName, bool Param);// 0x3c34080
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3c33760
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3c33560
	void ReleaseToPool();// 0x3c33540
	FXSystemAsset* GetFXSystemAsset();// 0x3c33440

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 1]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 1]
	float WarmupTime;//[Offset: 0x38, Size: 1]
	float WarmupTickRate;//[Offset: 0x3c, Size: 1]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 1]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 1]
	float MacroUVRadius;//[Offset: 0x64, Size: 1]
	float[] LODDistances;//[Offset: 0x68, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 1]
	float Delay;//[Offset: 0xa8, Size: 1]
	float DelayLow;//[Offset: 0xac, Size: 1]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 1]
	byte LODMethod;//[Offset: 0xb3, Size: 1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 1]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 1]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 1]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 1]
	bool ContainsEmitterType(class Object TypeData);// 0x3c32940

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 1]
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 1]
	int SubUVDataOffset;//[Offset: 0x30, Size: 1]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 1]
	int PeakActiveParticles;//[Offset: 0x50, Size: 1]
	int InitialAllocationCount;//[Offset: 0x54, Size: 1]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 1]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 1]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 1]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 1]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 1]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 1]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 1]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 1]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 1]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 1]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 1]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 1]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 1]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 1]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 1]
	byte ScreenAlignment;//[Offset: 0x58, Size: 1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	byte SortMode;//[Offset: 0x5a, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	float EmitterDuration;//[Offset: 0x5c, Size: 1]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 1]
	float EmitterDelay;//[Offset: 0xa0, Size: 1]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 1]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 1]
	float RandomImageTime;//[Offset: 0xb8, Size: 1]
	int RandomImageChanges;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	float MacroUVRadius;//[Offset: 0xcc, Size: 1]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	byte BoundingMode;//[Offset: 0xd1, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 1]
	float AlphaThreshold;//[Offset: 0xe0, Size: 1]
	int EmitterLoops;//[Offset: 0xe4, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 1]
	int MaxDrawCount;//[Offset: 0xf0, Size: 1]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 1]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 1]
	float TimeBias;//[Offset: 0x4, Size: 1]
	float[] Values;//[Offset: 0x8, Size: 1]
	byte Op;//[Offset: 0x18, Size: 1]
	byte EntryCount;//[Offset: 0x19, Size: 1]
	byte EntryStride;//[Offset: 0x1a, Size: 1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 1]
	byte LockFlag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 1]
	int CountLow;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 1]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0x98, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xa0, Size: 1]
	RawDistributionFloat BurstScale;//[Offset: 0xb0, Size: 1]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 1]
	int ParticleFrequency;//[Offset: 0x8, Size: 1]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 1]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 1]
	OrbitOptions OffsetOptions;//[Offset: 0x88, Size: 1]
	RawDistributionVector RotationAmount;//[Offset: 0x90, Size: 1]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 1]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 1]
	OrbitOptions RotationRateOptions;//[Offset: 0x128, Size: 1]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	Vector MinValueVec;//[Offset: 0x28, Size: 1]
	Vector MaxValueVec;//[Offset: 0x34, Size: 1]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 1]
	FName EventName;//[Offset: 0x34, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 1]
	int ActiveTab;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 1]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 1]
	float ViewStartInput;//[Offset: 0x20, Size: 1]
	float ViewEndInput;//[Offset: 0x24, Size: 1]
	float ViewStartOutput;//[Offset: 0x28, Size: 1]
	float ViewEndOutput;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 1]
	Color CurveColor;//[Offset: 0x8, Size: 1]
	FString CurveName;//[Offset: 0x10, Size: 1]
	int bHideCurve;//[Offset: 0x20, Size: 1]
	int bColorCurve;//[Offset: 0x24, Size: 1]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 1]
	int bClamp;//[Offset: 0x2c, Size: 1]
	float ClampLow;//[Offset: 0x30, Size: 1]
	float ClampHigh;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x3c1ce30
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x3c1cd60
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x3c1cc70
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x3c1cba0
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x3c1cab0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x3c1c9e0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x3c1c570
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3c1c4c0
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x3c1c420
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3c1c370
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x3c1c2d0
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3c1c220
	float K2_GetScalarParameterValue(FName ParameterName);// 0x3c1c180
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x3c1c0b0
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x3c1bcd0
	void CopyInterpParameters(MaterialInstance* Source);// 0x3c1bc40

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 1]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 1]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 1]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 1]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 1]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 1]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 1]
	Object*[] CachedReferencedTextures;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	float ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Texture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Font* FontValue;//[Offset: 0x10, Size: 1]
	int FontPage;//[Offset: 0x18, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	byte BlendMode;//[Offset: 0x2, Size: 1]
	byte ShadingModel;//[Offset: 0x3, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 1]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 1]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 1]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 1]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 1]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 1]
	bool[] LayerStates;//[Offset: 0x20, Size: 1]
	FString KeyString;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 1]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 1]
	float Scalar_Low;//[Offset: 0x10, Size: 1]
	Vector Vector;//[Offset: 0x14, Size: 1]
	Vector Vector_Low;//[Offset: 0x20, Size: 1]
	Color Color;//[Offset: 0x2c, Size: 1]
	Actor* Actor;//[Offset: 0x30, Size: 1]
	MaterialInterface* Material;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	float FOV;//[Offset: 0x18, Size: 1]
	float DesiredFOV;//[Offset: 0x1c, Size: 1]
	float OrthoWidth;//[Offset: 0x20, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 1]
	float AspectRatio;//[Offset: 0x2c, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	byte ProjectionMode;//[Offset: 0x34, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x38, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5a0, Size: 1]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x600, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 1]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 1]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 1]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 1]
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 1]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	float AspectRatio;//[Offset: 0x244, Size: 1]
	float FOVAngle;//[Offset: 0x248, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 1]
	int GetAutoActivatePlayerIndex();// 0x3b53710

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f8, Size: 1]
	float OrthoWidth;//[Offset: 0x1fc, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x200, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x204, Size: 1]
	float AspectRatio;//[Offset: 0x208, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 1]
	byte ProjectionMode;//[Offset: 0x20d, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x3b55680
	void SetProjectionMode(byte InProjectionMode);// 0x3b554f0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x3b55470
	void SetOrthoWidth(float InOrthoWidth);// 0x1a3f190
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x3b553f0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x3b55370
	void SetFieldOfView(float InFieldOfView);// 0x3291420
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x3b55260
	void SetAspectRatio(float InAspectRatio);// 0x3b551e0
	void RemoveBlendable(interface classNone InBlendableObject);// 0x3b550c0
	void OnCameraMeshHiddenChanged();// 0xca8430
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x3b53740
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x3b53460

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 1]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 1]
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 1]
	void Walk();// 0x2c7dd10
	void ViewSelf();// 0x3b62370
	void ViewPlayer(FString S);// 0x3b622d0
	void ViewClass(class Actor DesiredClass);// 0x3b62240
	void ViewActor(FName ActorName);// 0x3b621b0
	void UpdateSafeArea();// 0x3b62190
	void ToggleServerStatReplicatorUpdateStatNet();// 0x3b62170
	void ToggleServerStatReplicatorClientOverwrite();// 0x3b62150
	void ToggleDebugCamera();// 0x1a37f90
	void ToggleAILogging();// 0x1a37fb0
	void TestCollisionDistance();// 0x3b62130
	void Teleport();// 0xca82c0
	void Summon(FString ClassName);// 0x3b62090
	void StreamLevelOut(FName PackageName);// 0x3b62000
	void StreamLevelIn(FName PackageName);// 0x3b61f70
	void SpawnServerStatReplicator();// 0x3b61f50
	void Slomo(float NewTimeDilation);// 0x3b61ec0
	void SetWorldOrigin();// 0x3b61ea0
	void SetMouseSensitivityToDefault();// 0x3b61e80
	void ServerToggleAILogging();// 0x3b61da0
	void ReceiveInitCheatManager();// 0x1ef32e0
	void ReceiveEndPlay();// 0x1ef32e0
	void PlayersOnly();// 0x3b61d80
	void OnlyLoadLevel(FName PackageName);// 0x3b61cf0
	void LogLoc();// 0x3b61cd0
	void InvertMouse();// 0x3b61cb0
	void God();// 0x3b53650
	void Ghost();// 0x3b61c90
	void FreezeFrame(float Delay);// 0x3b61c00
	void Fly();// 0x3b61be0
	void FlushLog();// 0x3b61bc0
	void EnableDebugCamera();// 0x1b42b60
	void DumpVoiceMutingState();// 0x3b61ba0
	void DumpPartyState();// 0x3b61b80
	void DumpOnlineSessionState();// 0x3b61b60
	void DumpChatState();// 0x3b61b40
	void DisableDebugCamera();// 0x1a94dd0
	void DestroyTarget();// 0x3b61b20
	void DestroyServerStatReplicator();// 0x3b61b00
	void DestroyPawns(class Pawn aClass);// 0x3202ae0
	void DestroyAllPawnsExceptTarget();// 0x3b61ae0
	void DestroyAll(class Actor aClass);// 0x3b61a50
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x3b61980
	void DebugCapsuleSweepPawn();// 0x3b61960
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x3b618d0
	void DebugCapsuleSweepClear();// 0x3b618b0
	void DebugCapsuleSweepChannel(byte Channel);// 0x3b61830
	void DebugCapsuleSweepCapture();// 0x1a3b680
	void DebugCapsuleSweep();// 0x3b61810
	void DamageTarget(float DamageAmount);// 0x3b61780
	void CheatScript(FString ScriptName);// 0x3b61690
	void ChangeSize(float F);// 0x334de20
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x3b614d0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x3b612e0
	void BugIt(FString ScreenShotDescription);// 0x3b61240

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x570, Size: 1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x570, Size: 1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x570, Size: 1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x570, Size: 1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x570, Size: 1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x570, Size: 1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x570, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x578, Size: 1]
	Actor* SelectedActor;//[Offset: 0x580, Size: 1]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x588, Size: 1]
	HitResult SelectedHitPoint;//[Offset: 0x590, Size: 1]
	PlayerController* OriginalControllerRef;//[Offset: 0x618, Size: 1]
	Player* OriginalPlayer;//[Offset: 0x620, Size: 1]
	float SpeedScale;//[Offset: 0x628, Size: 1]
	float InitialMaxSpeed;//[Offset: 0x62c, Size: 1]
	float InitialAccel;//[Offset: 0x630, Size: 1]
	float InitialDecel;//[Offset: 0x634, Size: 1]
	void ToggleDisplay();// 0x3b6a210
	void ShowDebugSelectedInfo();// 0x3b6a1f0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x3b6a170
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x1ef32e0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x1ef32e0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x1ef32e0
	Actor* GetSelectedActor();// 0x3b6a000

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x450, Size: 1]
	float FrustumAngle;//[Offset: 0x454, Size: 1]
	float FrustumAspectRatio;//[Offset: 0x458, Size: 1]
	float FrustumStartDist;//[Offset: 0x45c, Size: 1]
	float FrustumEndDist;//[Offset: 0x460, Size: 1]
	Texture* Texture;//[Offset: 0x468, Size: 1]

--------------------------------
Class: CheatManagerExtension.Object

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 1]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 1]
	void SetMouseSensitivity(const float Sensitivity);// 0x3c4e350
	void SetBind(FName BindName, FString Command);// 0x3c4dcb0
	void InvertAxisKey(const Key AxisKey);// 0x3c4db10
	void InvertAxis(const FName AxisName);// 0x3c4da80
	void ClearSmoothing();// 0x3c4d5a0

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 1]
	FString Command;//[Offset: 0x18, Size: 1]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 1]
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 1]
	MulticastInlineDelegateProperty OnVisibilityChanged;//[Size: 1]
	Margin Padding;//[Offset: 0x190, Size: 1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 1]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 1]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 1]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 1]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 1]
	int Priority;//[Offset: 0x1e0, Size: 1]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 1]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 1]
	void UnregisterInputComponent();// 0x32045c0
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x32044e0
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3204400
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x3204370
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x32042e0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1ef32e0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x3204210
	void StopListeningForAllInputActions();// 0x32041f0
	void StopAnimationsAndLatentActions();// 0x32041d0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x3204140
	void StopAllAnimations();// 0x3204120
	void SetPositionInViewport(Vector2D position, bool bRemoveDPIScale);// 0x3203e20
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3203d50
	void SetPadding(Margin InPadding);// 0x3203cc0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x3203c30
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x3203b60
	void SetInputActionPriority(int NewPriority);// 0x3203900
	void SetInputActionBlocking(bool bShouldBlock);// 0x3203870
	void SetForegroundColor(SlateColor InForegroundColor);// 0x3203700
	void SetDesiredSizeInViewport(Vector2D Size);// 0x3203680
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3203560
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x3203490
	void SetAnchorsInViewport(Anchors Anchors);// 0x3203400
	void SetAlignmentInViewport(Vector2D Alignment);// 0x3203380
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x32032f0
	void RemoveFromViewport();// 0x1a9cd90
	void RegisterInputComponent();// 0x32032d0
	void PreConstruct(bool IsDesignTime);// 0x1ef32e0
	void PlaySound(SoundBase* SoundToPlay);// 0x3203240
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x3203020
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x3202f00
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x3202de0
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x3202c10
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x3202b70
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1ef32e0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1ef32e0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x1ef32e0
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1ef32e0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1ef32e0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x1ef32e0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1ef32e0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1ef32e0
	void OnPaint(out PaintContext Context);// 0x1ef32e0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1ef32e0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1ef32e0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1ef32e0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1ef32e0
	void OnMouseCaptureLost();// 0x1ef32e0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1ef32e0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1ef32e0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x1ef32e0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x1ef32e0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1ef32e0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1ef32e0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x1ef32e0
	void OnInitialized();// 0x1ef32e0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x1ef32e0
	void OnFocusLost(FocusEvent InFocusEvent);// 0x1ef32e0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1ef32e0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1ef32e0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1ef32e0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1ef32e0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x1ef32e0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1ef32e0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x3202ae0
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1b8d8f0
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x1ef32e0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x1ef32e0
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x3202950
	bool IsPlayingAnimation();// 0x3202920
	bool IsListeningForInputAction(FName ActionName);// 0x3202880
	bool IsInViewport();// 0x3202660
	bool IsInteractable();// 0x1ef32e0
	bool IsAnyAnimationPlaying();// 0x3202850
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x32027b0
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3202710
	Pawn* GetOwningPlayerPawn();// 0x32026c0
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x3202690
	bool GetIsVisible();// 0x3202660
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x32025c0
	Anchors GetAnchorsInViewport();// 0x3202580
	Vector2D GetAlignmentInViewport();// 0x3202540
	void FlushAnimations();// 0x3202520
	void Destruct();// 0x1ef32e0
	void Construct();// 0x1ef32e0
	void CancelLatentActions();// 0x32024c0
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x32023e0
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3202300
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x3202180
	void AddToViewport(int ZOrder);// 0x32020f0
	bool AddToPlayerScreen(int ZOrder);// 0x3202050

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 1]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 1]
	FText ToolTipText;//[Offset: 0x40, Size: 1]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 1]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 1]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 1]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 1]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 1]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 1]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	byte Cursor;//[Offset: 0xc1, Size: 1]
	enum Clipping;//[Offset: 0xc2, Size: 1]
	enum Visibility;//[Offset: 0xc3, Size: 1]
	float RenderOpacity;//[Offset: 0xc4, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 1]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 1]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 1]
	void SetVisibility(enum InVisibility);// 0x3207e40
	void SetUserFocus(PlayerController* PlayerController);// 0x3207c10
	void SetToolTipText(out const FText InToolTipText);// 0x3207b40
	void SetToolTip(Widget* Widget);// 0x3207ab0
	void SetRenderTranslation(Vector2D Translation);// 0x32079a0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x3207920
	void SetRenderTransformAngle(float Angle);// 0x32078a0
	void SetRenderTransform(WidgetTransform InTransform);// 0x32077c0
	void SetRenderShear(Vector2D Shear);// 0x3207740
	void SetRenderScale(Vector2D Scale);// 0x32076c0
	void SetRenderOpacity(float InOpacity);// 0x3207640
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x32074e0
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x32073f0
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x3207300
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x3207230
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x3207120
	void SetKeyboardFocus();// 0x3207100
	void SetIsEnabled(bool bInIsEnabled);// 0x3207070
	void SetFocus();// 0x3206fd0
	void SetCursor(byte InCursor);// 0x3206f50
	void SetClipping(enum InClipping);// 0x3206ed0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x3206e00
	void ResetCursor();// 0x3206de0
	void RemoveFromParent();// 0x3206dc0
	EventReply OnReply__DelegateSignature();// 0x1ef32e0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1ef32e0
	bool IsVisible();// 0x3206d90
	bool IsHovered();// 0x2c7dec0
	void InvalidateLayoutAndVolatility();// 0x3206d70
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x3206cd0
	bool HasUserFocus(PlayerController* PlayerController);// 0x3206c30
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x3206b60
	bool HasMouseCapture();// 0x3206b30
	bool HasKeyboardFocus();// 0x3206b00
	bool HasFocusedDescendants();// 0x3206ad0
	bool HasAnyUserFocus();// 0x3206aa0
	Widget* GetWidget__DelegateSignature();// 0x1ef32e0
	enum GetVisibility();// 0x3206a70
	Geometry GetTickSpaceGeometry();// 0x3206950
	FText GetText__DelegateSignature();// 0x1ef32e0
	enum GetSlateVisibility__DelegateSignature();// 0x1ef32e0
	SlateColor GetSlateColor__DelegateSignature();// 0x1ef32e0
	SlateBrush GetSlateBrush__DelegateSignature();// 0x1ef32e0
	float GetRenderTransformAngle();// 0x32068f0
	float GetRenderOpacity();// 0x32068c0
	PanelWidget* GetParent();// 0x3206890
	Geometry GetPaintSpaceGeometry();// 0x3206850
	PlayerController* GetOwningPlayer();// 0x3206820
	LocalPlayer* GetOwningLocalPlayer();// 0x32067f0
	byte GetMouseCursor__DelegateSignature();// 0x1ef32e0
	LinearColor GetLinearColor__DelegateSignature();// 0x1ef32e0
	bool GetIsEnabled();// 0x32067c0
	int GetInt32__DelegateSignature();// 0x1ef32e0
	GameInstance* GetGameInstance();// 0x3206790
	float GetFloat__DelegateSignature();// 0x1ef32e0
	Vector2D GetDesiredSize();// 0x3206720
	enum GetClipping();// 0x32066f0
	enum GetCheckBoxState__DelegateSignature();// 0x1ef32e0
	Geometry GetCachedGeometry();// 0x32066b0
	bool GetBool__DelegateSignature();// 0x1ef32e0
	FText GetAccessibleText();// 0x3206610
	FText GetAccessibleSummaryText();// 0x3206570
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1ef32e0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1ef32e0
	void ForceVolatile(bool bForce);// 0x32064e0
	void ForceLayoutPrepass();// 0x32064c0

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 1]
	Widget* Content;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 1]
	bool RemoveChildAt(int Index);// 0x31f37f0
	bool RemoveChild(Widget* Content);// 0x31f3750
	bool HasChild(Widget* Content);// 0x31f35c0
	bool HasAnyChildren();// 0x31f3590
	int GetChildrenCount();// 0x31f3240
	int GetChildIndex(const Widget* Content);// 0x31f31a0
	Widget* GetChildAt(int Index);// 0x31f3100
	Widget*[] GetAllChildren();// 0x31f3080
	void ClearChildren();// 0x31f2fb0
	PanelSlot* AddChild(Widget* Content);// 0x31f2e70

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 1]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 1]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	FString DisplayLabel;//[Offset: 0x80, Size: 1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3208160
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3208080
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x3207ff0
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x3207f60
	float GetStartTime();// 0x3206920
	float GetEndTime();// 0x3206760
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x32063e0
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3206300

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 1]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x2fd21f0
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x2fd2140

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 1]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 1]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 1]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 1]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 1]
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 1]
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 1]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 1]
	Guid SequenceSignature;//[Offset: 0xa0, Size: 1]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 1]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 1]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 1]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 1]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 1]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 1]
	FName EvaluationGroup;//[Offset: 0x68, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	int[] RowsDisabled;//[Offset: 0x58, Size: 1]
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 1]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 1]
	FrameNumberRange Range;//[Offset: 0x8, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 1]
	enum Flags;//[Offset: 0x1c, Size: 1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 1]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 1]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 1]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 1]
	int RowIndex;//[Offset: 0xa8, Size: 1]
	int OverlapPriority;//[Offset: 0xac, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	float StartTime;//[Offset: 0xb4, Size: 1]
	float EndTime;//[Offset: 0xb8, Size: 1]
	float PrerollTime;//[Offset: 0xbc, Size: 1]
	float PostrollTime;//[Offset: 0xc0, Size: 1]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc9, Size: 1]
	void SetRowIndex(int NewRowIndex);// 0x2fd3b60
	void SetPreRollFrames(int InPreRollFrames);// 0x2fd3ad0
	void SetPostRollFrames(int InPostRollFrames);// 0x2fd3a40
	void SetOverlapPriority(int NewPriority);// 0x2fd3810
	void SetIsLocked(bool bInIsLocked);// 0x2fd3770
	void SetIsActive(bool bInIsActive);// 0x2fd36c0
	void SetCompletionMode(enum InCompletionMode);// 0x2fd3400
	void SetBlendType(enum InBlendType);// 0x2fd3380
	bool IsLocked();// 0x2fd27a0
	bool IsActive();// 0x2fd2770
	int GetRowIndex();// 0x146d020
	int GetPreRollFrames();// 0x2fd26d0
	int GetPostRollFrames();// 0x2fd26b0
	int GetOverlapPriority();// 0x2fd2660
	enum GetCompletionMode();// 0x2fd2410
	OptionalMovieSceneBlendType GetBlendType();// 0x2fd22d0

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum CompletionMode;//[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 1]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 1]
	interface class None* EaseIn;//[Offset: 0x8, Size: 1]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 1]
	interface class None* EaseOut;//[Offset: 0x20, Size: 1]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 1]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 1]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	FrameNumber Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 1]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 1]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 1]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 1]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 1]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 1]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 1]
	FrameRate TickResolution;//[Offset: 0x58, Size: 1]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 1]
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 1]
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 1]
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 1]
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 1]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 1]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 1]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 1]
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 1]
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 1]
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 1]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 1]
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 1]
	FrameTime Offset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	float SubFrame;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 1]
	FrameNumber End;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 1]
	int Denominator;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 1]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 1]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 1]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 1]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 1]
	uint32 EntityID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 1]
	enum Flags;//[Offset: 0x18, Size: 1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingId;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 1]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 1]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 1]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 1]
	int NumEvalPtrs;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 1]
	uint16 NumChildren;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 1]
	enum Flags;//[Offset: 0x2, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 1]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 1]
	uint16 SetupIndex;//[Offset: 0xc, Size: 1]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 1]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]
	uint32 SectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 1]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 1]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 1]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 1]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 1]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 1]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 1]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 1]
	FrameRate TickResolution;//[Offset: 0x108, Size: 1]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 1]
	enum EvaluationType;//[Offset: 0x118, Size: 1]
	enum ClockSource;//[Offset: 0x119, Size: 1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 1]
	FName[] Tags;//[Offset: 0x30, Size: 1]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	Guid Guid;//[Offset: 0x44, Size: 1]
	FString Name;//[Offset: 0x58, Size: 1]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 1]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 1]
	enum Ownership;//[Offset: 0x80, Size: 1]
	FName LevelName;//[Offset: 0x84, Size: 1]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 1]
	Guid Guid;//[Offset: 0x10, Size: 1]
	FString Name;//[Offset: 0x20, Size: 1]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 1]
	Guid ParentGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 1]
	FString BindingName;//[Offset: 0x10, Size: 1]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 1]
	int SequenceID;//[Offset: 0x10, Size: 1]
	int ResolveParentIndex;//[Offset: 0x14, Size: 1]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	FString Label;//[Offset: 0x8, Size: 1]
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 1]
	FName SlotWidgetName;//[Offset: 0x8, Size: 1]
	Guid AnimationGuid;//[Offset: 0x10, Size: 1]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Geometry

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 1]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 1]
	float Top;//[Offset: 0x4, Size: 1]
	float Right;//[Offset: 0x8, Size: 1]
	float Bottom;//[Offset: 0xc, Size: 1]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x260, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x270, Size: 1]
	void SetUserTag(FName InUserTag);// 0x3204010
	FName GetUserTag();// 0x32026f0

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 1]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 1]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 1]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 1]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 1]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 1]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 1]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 1]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 1]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 1]
	Vector2D Scale;//[Offset: 0x8, Size: 1]
	Vector2D Shear;//[Offset: 0x10, Size: 1]
	float Angle;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 1]
	FText AccessibleText;//[Offset: 0x30, Size: 1]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 1]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 1]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 1]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 1]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 1]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 1]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 1]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 1]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 1]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 1]
	Widget* Widget;//[Offset: 0xc, Size: 1]
	delegate CustomDelegate;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 1]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 1]
	FName DestinationProperty;//[Offset: 0x58, Size: 1]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 1]
	Function* CachedFunction;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* Struct;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: EventReply

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 1]
	Margin Margin;//[Offset: 0x10, Size: 1]
	SlateColor TintColor;//[Offset: 0x20, Size: 1]
	Object* ResourceObject;//[Offset: 0x48, Size: 1]
	FName ResourceName;//[Offset: 0x50, Size: 1]
	Box2D UVRegion;//[Offset: 0x58, Size: 1]
	byte DrawAs;//[Offset: 0x6c, Size: 1]
	byte Tiling;//[Offset: 0x6d, Size: 1]
	byte Mirroring;//[Offset: 0x6e, Size: 1]
	byte ImageType;//[Offset: 0x6f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 1]
	Vector2D Max;//[Offset: 0x8, Size: 1]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 1]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int ControllerId;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 1]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 1]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 1]
	World* World;//[Offset: 0x78, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 1]
	void SSSwapControllers();// 0x2c7e150
	void ShowTitleSafeArea();// 0x2c7e170
	void SetConsoleTarget(int PlayerIndex);// 0x3b96860

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 1]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 1]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 1]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 1]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 1]
	class Object* WithinClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 1]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 1]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 1]
	MulticastInlineDelegateProperty OnPawnControllerChangedDelegates;//[Size: 1]
	void ReceiveShutdown();// 0x1ef32e0
	void ReceiveInit();// 0x1ef32e0
	void HandleTravelError(byte FailureType);// 0x1ef32e0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x1ef32e0
	void DebugRemovePlayer(int ControllerId);// 0x3b7d630
	void DebugCreatePlayer(int ControllerId);// 0x3b7d5a0

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 1]
	Vector2D Maximum;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 1]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 1]
	float Duration;//[Offset: 0x108, Size: 1]
	float MaxDistance;//[Offset: 0x10c, Size: 1]
	float TotalSamples;//[Offset: 0x110, Size: 1]
	float Priority;//[Offset: 0x114, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 1]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 1]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 1]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 1]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 1]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 1]
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 1]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 1]
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 1]
	float Pitch;//[Offset: 0x4, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 1]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 1]
	float LFEBleed;//[Offset: 0x10, Size: 1]
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 1]
	float RadioFilterVolume;//[Offset: 0x18, Size: 1]
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 1]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 1]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 1]
	byte OutputTarget;//[Offset: 0x68, Size: 1]
	enum LoadingBehavior;//[Offset: 0x69, Size: 1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 1]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 1]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 1]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 1]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 1]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 1]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 1]
	enum GainMode;//[Offset: 0x68, Size: 1]
	float OutputVolume;//[Offset: 0x6c, Size: 1]
	float WetLevel;//[Offset: 0x70, Size: 1]
	float DryLevel;//[Offset: 0x74, Size: 1]
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x78, Size: 1]
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x88, Size: 1]
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0x98, Size: 1]
	MulticastInlineDelegateProperty OnSubmixRecordedFileDone;//[Size: 1]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x3c7e1d0
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x3c7dfd0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x3c7df40
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x3c7dd60
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x3c7dc90
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x3c7dc00
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x3c7db30
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x3c7da40
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x3c7d740
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x3c7d650

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x170, Size: 1]
	int StreamingPriority;//[Offset: 0x174, Size: 1]
	enum SampleRateQuality;//[Offset: 0x178, Size: 1]
	byte SoundGroup;//[Offset: 0x17a, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17b, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17b, Size: 1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17b, Size: 1]
	enum LoadingBehavior;//[Offset: 0x17c, Size: 1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17d, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17d, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17e, Size: 1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17e, Size: 1]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x180, Size: 1]
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 1]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 1]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 1]
	int InitialChunkSize;//[Offset: 0x1f8, Size: 1]
	FString SpokenText;//[Offset: 0x240, Size: 1]
	float SubtitlePriority;//[Offset: 0x250, Size: 1]
	float Volume;//[Offset: 0x254, Size: 1]
	float Pitch;//[Offset: 0x258, Size: 1]
	int NumChannels;//[Offset: 0x25c, Size: 1]
	int SampleRate;//[Offset: 0x260, Size: 1]
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 1]
	CurveTable* Curves;//[Offset: 0x280, Size: 1]
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 1]

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 1]
	enum PitchRouting;//[Offset: 0x41, Size: 1]
	enum HighpassRouting;//[Offset: 0x42, Size: 1]
	enum LowpassRouting;//[Offset: 0x43, Size: 1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 1]
	int AttackTimeMsec;//[Offset: 0x4, Size: 1]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 1]
	float QFactor;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 1]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 1]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 1]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 1]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 1]
	float InitialDelay;//[Offset: 0x80, Size: 1]
	float FadeInTime;//[Offset: 0x84, Size: 1]
	float Duration;//[Offset: 0x88, Size: 1]
	float FadeOutTime;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 1]
	float Gain0;//[Offset: 0x14, Size: 1]
	float Bandwidth0;//[Offset: 0x18, Size: 1]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 1]
	float Gain1;//[Offset: 0x20, Size: 1]
	float Bandwidth1;//[Offset: 0x24, Size: 1]
	float FrequencyCenter2;//[Offset: 0x28, Size: 1]
	float Gain2;//[Offset: 0x2c, Size: 1]
	float Bandwidth2;//[Offset: 0x30, Size: 1]
	float FrequencyCenter3;//[Offset: 0x34, Size: 1]
	float Gain3;//[Offset: 0x38, Size: 1]
	float Bandwidth3;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 1]
	float VolumeAdjuster;//[Offset: 0x8, Size: 1]
	float PitchAdjuster;//[Offset: 0xc, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 1]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x8, Size: 1]
	float RetriggerTime;//[Offset: 0xc, Size: 1]
	float VolumeScale;//[Offset: 0x10, Size: 1]
	enum VolumeScaleMode;//[Offset: 0x14, Size: 1]
	float VolumeScaleAttackTime;//[Offset: 0x18, Size: 1]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float VolumeScaleReleaseTime;//[Offset: 0x20, Size: 1]
	float VoiceStealReleaseTime;//[Offset: 0x24, Size: 1]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 1]
	float BinauralRadius;//[Offset: 0xb4, Size: 1]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 1]
	float OmniRadius;//[Offset: 0xbc, Size: 1]
	float StereoSpread;//[Offset: 0xc0, Size: 1]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 1]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 1]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 1]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 1]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 1]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 1]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 1]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 1]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 1]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 1]
	float FocusPriorityScale;//[Offset: 0x200, Size: 1]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 1]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 1]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 1]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 1]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 1]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 1]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 1]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 1]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 1]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 1]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 1]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 1]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 1]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 1]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 1]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 1]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 1]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 1]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 1]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 1]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 1]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	byte AttenuationShape;//[Offset: 0x9, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 1]
	enum FalloffMode;//[Offset: 0x10, Size: 1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 1]
	float ConeOffset;//[Offset: 0x20, Size: 1]
	float FalloffDistance;//[Offset: 0x24, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 1]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 1]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 1]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 1]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 1]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 1]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 1]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 1]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 1]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 1]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 1]
	enum SendStage;//[Offset: 0x1, Size: 1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 1]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 1]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 1]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 1]
	float SendLevel;//[Offset: 0x18, Size: 1]
	float MinSendLevel;//[Offset: 0x1c, Size: 1]
	float MaxSendLevel;//[Offset: 0x20, Size: 1]
	float MinSendDistance;//[Offset: 0x24, Size: 1]
	float MaxSendDistance;//[Offset: 0x28, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x370, Size: 1]
	float SourceBusDuration;//[Offset: 0x374, Size: 1]
	AudioBus* AudioBus;//[Offset: 0x378, Size: 1]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 1]
	Object* Payload;//[Offset: 0x38, Size: 1]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 1]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 1]
	MulticastInlineDelegateProperty OnDrop;//[Size: 1]
	MulticastInlineDelegateProperty OnDragCancelled;//[Size: 1]
	MulticastInlineDelegateProperty OnDragged;//[Size: 1]
	void Drop(out const PointerEvent PointerEvent);// 0x31ea750
	void Dragged(out const PointerEvent PointerEvent);// 0x31ea620
	void DragCancelled(out const PointerEvent PointerEvent);// 0x31ea4f0

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 1]
	Widget* Content;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 1]
	bool WasControllerKeyJustReleased(Key Key);// 0x3b9bbb0
	bool WasControllerKeyJustPressed(Key Key);// 0x3b9bbb0
	bool IsControllerKeyDown(Key Key);// 0x3b9bbb0
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3b9ba30
	Vector GetControllerVectorKeyState(Key Key);// 0x3b9b4b0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x3b9b3d0
	float GetControllerKeyTimeDown(Key Key);// 0x3b9b1a0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3b9b2a0
	float GetControllerAnalogKeyState(Key Key);// 0x3b9b1a0

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 1]
	delegate Delegate;//[Offset: 0x8, Size: 1]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 1]
	float Duration;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 1]
	NetDriver* Driver;//[Offset: 0x58, Size: 1]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 1]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 1]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 1]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 1]
	Actor* ViewTarget;//[Offset: 0x90, Size: 1]
	Actor* OwningActor;//[Offset: 0x98, Size: 1]
	int MaxPacket;//[Offset: 0xa0, Size: 1]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	UniqueNetIdRepl playerId;//[Offset: 0x160, Size: 1]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 1]
	Channel*[] ChannelsToTick;//[Offset: 0x1510, Size: 1]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1ba8, Size: 1]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 1]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 1]
	int MaxDownloadSize;//[Offset: 0x50, Size: 1]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 1]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 1]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 1]
	int MaxClientRate;//[Offset: 0x64, Size: 1]
	float ServerTravelPause;//[Offset: 0x68, Size: 1]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 1]
	float RelevantTimeout;//[Offset: 0x70, Size: 1]
	float KeepAliveTime;//[Offset: 0x74, Size: 1]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 1]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 1]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 1]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 1]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 1]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 1]
	World* World;//[Offset: 0x140, Size: 1]
	Package* WorldPackage;//[Offset: 0x148, Size: 1]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 1]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 1]
	FName NetDriverName;//[Offset: 0x190, Size: 1]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 1]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 1]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 1]
	float Time;//[Offset: 0x210, Size: 1]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x700, Size: 1]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 1]
	FName ClassName;//[Offset: 0x8, Size: 1]
	class Object* ChannelClass;//[Offset: 0x10, Size: 1]
	int StaticChannelIndex;//[Offset: 0x18, Size: 1]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 1]
	float ActiveOpacity;//[Offset: 0x38, Size: 1]
	float InactiveOpacity;//[Offset: 0x3c, Size: 1]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 1]
	float TimeUntilReset;//[Offset: 0x44, Size: 1]
	float ActivationDelay;//[Offset: 0x48, Size: 1]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 1]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 1]
	Texture2D* Image2;//[Offset: 0x8, Size: 1]
	Vector2D Center;//[Offset: 0x10, Size: 1]
	Vector2D VisualSize;//[Offset: 0x18, Size: 1]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 1]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 1]
	Vector2D InputScale;//[Offset: 0x30, Size: 1]
	Key MainInputKey;//[Offset: 0x38, Size: 1]
	Key AltInputKey;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x280, Size: 1]
	float BaseLookUpRate;//[Offset: 0x284, Size: 1]
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 1]
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 1]
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 1]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	void TurnAtRate(float Rate);// 0x3b6de60
	void MoveUp_World(float Val);// 0x3b6d360
	void MoveRight(float Val);// 0x3b6d2d0
	void MoveForward(float Val);// 0x3b6d240
	void LookUpAtRate(float Rate);// 0x3b6d1b0

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x468, Size: 1]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x3c859f0
	float GetUnscaledSphereRadius();// 0x3b59e80
	float GetShapeScale();// 0x3c83b50
	float GetScaledSphereRadius();// 0x3c83b00

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x478, Size: 1]
	int PreviousLODLevel;//[Offset: 0x47c, Size: 1]
	int MinLOD;//[Offset: 0x480, Size: 1]
	int SubDivisionStepSize;//[Offset: 0x484, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x488, Size: 1]
	Color WireframeColorOverride;//[Offset: 0x490, Size: 1]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x494, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x494, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x494, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x494, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x494, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x494, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x495, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x495, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x495, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x495, Size: 1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x495, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x498, Size: 1]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x49c, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0x4a0, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x4a4, Size: 1]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4a8, Size: 1]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4b8, Size: 1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4c8, Size: 1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x12c5960
	void SetReverseCulling(bool ReverseCulling);// 0x3c8dd90
	void SetForcedLodModel(int NewForcedLodModel);// 0x3c8d950
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x3c8d8c0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x3c8d640
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x3c8d5b0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x3c8d410

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 1]
	int TextureLevelIndex;//[Offset: 0x4, Size: 1]
	float TexelFactor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 1]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 1]
	float EmissiveBoost;//[Offset: 0xc, Size: 1]
	float DiffuseBoost;//[Offset: 0x10, Size: 1]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 1]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 1]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 1]
	FName Filename;//[Offset: 0x8, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 1]
	int UUID;//[Offset: 0x4, Size: 1]
	FName ExecutionFunction;//[Offset: 0x8, Size: 1]
	Object* CallbackTarget;//[Offset: 0x10, Size: 1]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 1]
	Actor* ChildActor;//[Offset: 0x200, Size: 1]
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 1]
	void SetChildActorClass(class Actor InClass);// 0x3b61df0

--------------------------------
Class: Interface.Object

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 1]
	Vector AngularVelocity;//[Offset: 0xc, Size: 1]
	Vector Location;//[Offset: 0x18, Size: 1]
	Rotator Rotation;//[Offset: 0x24, Size: 1]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 1]
	Rotator RotationOffset;//[Offset: 0x20, Size: 1]
	FName AttachSocket;//[Offset: 0x2c, Size: 1]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 1]
	FName MatineeControllerName;//[Offset: 0x228, Size: 1]
	float PlayRate;//[Offset: 0x230, Size: 1]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 1]
	float ForceStartPosition;//[Offset: 0x238, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 1]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 1]
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	float InterpPosition;//[Offset: 0x284, Size: 1]
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 1]
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	void Stop();// 0x3c1cf20
	void SetPosition(float NewPosition, bool bJump);// 0x3c1c900
	void SetLoopingState(bool bNewLooping);// 0x3c1c870
	void Reverse();// 0x3c1c690
	void Play();// 0x102ced0
	void Pause();// 0x1106430
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x3c1bd60
	void ChangePlaybackDirection();// 0x3b42d90

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 1]
	float PathBuildTime;//[Offset: 0x2c, Size: 1]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 1]
	float EdSectionStart;//[Offset: 0x48, Size: 1]
	float EdSectionEnd;//[Offset: 0x4c, Size: 1]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 1]
	FName[] AllEventNames;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 1]
	Actor*[] Actors;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	float Timestamp;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 1]
	FName MemberName;//[Offset: 0x8, Size: 1]
	Guid MemberGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x1ef32e0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3c03d10
	bool RemoteEvent(FName EventName);// 0x3c03450
	void LevelReset();// 0x1ef32e0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]
	int Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 1]
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 1]
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 1]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x450, Size: 1]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 1]
	float ScreenSize;//[Offset: 0x45c, Size: 1]
	float U;//[Offset: 0x460, Size: 1]
	float UL;//[Offset: 0x464, Size: 1]
	float V;//[Offset: 0x468, Size: 1]
	float VL;//[Offset: 0x46c, Size: 1]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x3b43410
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x3b430e0
	void SetSprite(Texture2D* NewSprite);// 0x2c7e0c0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 1]
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 1]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 1]
	float WorldToMeters;//[Offset: 0x240, Size: 1]
	float KillZ;//[Offset: 0x244, Size: 1]
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 1]
	float WorldGravityZ;//[Offset: 0x250, Size: 1]
	float GlobalGravityZ;//[Offset: 0x254, Size: 1]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 1]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 1]
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 1]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 1]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 1]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 1]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 1]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 1]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 1]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 1]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 1]
	float TimeDilation;//[Offset: 0x2e8, Size: 1]
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 1]
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 1]
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 1]
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 1]
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 1]
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 1]
	PlayerState* Pauser;//[Offset: 0x348, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 1]
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 1]
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 1]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 1]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 1]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 1]
	void OnRep_WorldGravityZ();// 0x1a7dc00

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 1]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 1]
	FName DefaultAgentName;//[Offset: 0x44, Size: 1]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 1]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 1]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 1]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 1]
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 1]
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 1]
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 1]
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 1]
	class HUD* HUDClass;//[Offset: 0x250, Size: 1]
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 1]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 1]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 1]
	GameSession* GameSession;//[Offset: 0x278, Size: 1]
	GameStateBase* GameState;//[Offset: 0x280, Size: 1]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 1]
	FText DefaultPlayerName;//[Offset: 0x290, Size: 1]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	void StartPlay();// 0x1106550
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x3b8b360
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x3b8b240
	bool ShouldReset(Actor* ActorToReset);// 0x3b8ad10
	void ReturnToMainMenuHost();// 0x3b89c30
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x3b89b10
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3b89a40
	void RestartPlayer(Controller* NewPlayer);// 0x3b899b0
	void ResetLevel();// 0x3b89970
	bool PlayerCanRestart(PlayerController* Player);// 0x3b89220
	bool MustSpectate(PlayerController* NewPlayerController);// 0x3b87fd0
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1ef32e0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1ef32e0
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1ef32e0
	void K2_OnLogout(Controller* ExitingController);// 0x1ef32e0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x1ef32e0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x3b87460
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x3b87240
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x1a772f0
	bool HasMatchStarted();// 0x3b644b0
	bool HasMatchEnded();// 0x3b870d0
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x3b86fa0
	int GetNumSpectators();// 0x3b86030
	int GetNumPlayers();// 0x3b86000
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x3b85940
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x3b849e0
	Actor* ChoosePlayerStart(Controller* Player);// 0x3b83c10
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x3b83ae0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x3b839f0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 1]
	int MaxPlayers;//[Offset: 0x224, Size: 1]
	int MaxPartySize;//[Offset: 0x228, Size: 1]
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	FName SessionName;//[Offset: 0x230, Size: 1]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 1]
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 1]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 1]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 1]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 1]
	void OnRep_SpectatorClass();// 0x3b64740
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1106550
	void OnRep_ReplicatedHasBegunPlay();// 0x3b90570
	void OnRep_GameModeClass();// 0x3b64720
	bool HasMatchStarted();// 0x3b903d0
	bool HasMatchEnded();// 0x3b903a0
	bool HasBegunPlay();// 0x3b90370
	float GetServerWorldTimeSeconds();// 0x3b90210
	float GetPlayerStartTime(Controller* Controller);// 0x3b8fd20
	float GetPlayerRespawnDelay(Controller* Controller);// 0x3b8fc80

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	uint32 Channels;//[Offset: 0x224, Size: 1]
	uint32 InRate;//[Offset: 0x228, Size: 1]
	uint32 OutRate;//[Offset: 0x22c, Size: 1]
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 1]
	uint32 InRateClientMax;//[Offset: 0x238, Size: 1]
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 1]
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 1]
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 1]
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 1]
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 1]
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 1]
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 1]
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 1]
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 1]
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 1]
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 1]
	uint32 NetNumClients;//[Offset: 0x268, Size: 1]
	uint32 InPackets;//[Offset: 0x26c, Size: 1]
	uint32 OutPackets;//[Offset: 0x270, Size: 1]
	uint32 InBunches;//[Offset: 0x274, Size: 1]
	uint32 OutBunches;//[Offset: 0x278, Size: 1]
	uint32 OutLoss;//[Offset: 0x27c, Size: 1]
	uint32 InLoss;//[Offset: 0x280, Size: 1]
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 1]
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 1]
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 1]
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 1]
	uint32 PercentInVoice;//[Offset: 0x294, Size: 1]
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 1]
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 1]
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 1]
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 1]
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 1]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 1]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 1]
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 1]
	uint32 NumActors;//[Offset: 0x2b8, Size: 1]
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 1]
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 1]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 1]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 1]
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 1]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 1]
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 1]
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 1]
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 1]
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 1]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 1]
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 1]
	int BadPingThreshold;//[Offset: 0x228, Size: 1]
	int SeverePingThreshold;//[Offset: 0x22c, Size: 1]
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 1]
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 1]
	int TotalNetBandwidth;//[Offset: 0x238, Size: 1]
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 1]
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 1]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 1]
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 1]
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 1]
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 1]
	float PercentForBadPing;//[Offset: 0x258, Size: 1]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 1]
	float MoveRepSize;//[Offset: 0x260, Size: 1]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 1]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 1]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 1]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 1]
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 1]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 1]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 1]
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 1]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 1]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 1]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 1]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 1]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 1]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 1]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 1]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 1]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 1]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 1]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 1]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 1]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 1]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 1]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 1]
	float Volume;//[Offset: 0x18, Size: 1]
	float FadeTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 1]
	float GainHF;//[Offset: 0x30, Size: 1]
	float ReflectionsGain;//[Offset: 0x34, Size: 1]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float LateDelay;//[Offset: 0x3c, Size: 1]
	float DecayTime;//[Offset: 0x40, Size: 1]
	float Density;//[Offset: 0x44, Size: 1]
	float Diffusion;//[Offset: 0x48, Size: 1]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 1]
	float DecayHFRatio;//[Offset: 0x50, Size: 1]
	float LateGain;//[Offset: 0x54, Size: 1]
	float Gain;//[Offset: 0x58, Size: 1]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 1]
	float ExteriorTime;//[Offset: 0x8, Size: 1]
	float ExteriorLPF;//[Offset: 0xc, Size: 1]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 1]
	float InteriorVolume;//[Offset: 0x14, Size: 1]
	float InteriorTime;//[Offset: 0x18, Size: 1]
	float InteriorLPF;//[Offset: 0x1c, Size: 1]
	float InteriorLPFTime;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Box MBPBounds;//[Offset: 0x4, Size: 1]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 1]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 1]
	Actor* InViewer;//[Offset: 0x8, Size: 1]
	Actor* ViewTarget;//[Offset: 0x10, Size: 1]
	Vector ViewLocation;//[Offset: 0x18, Size: 1]
	Vector ViewDir;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 1]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 1]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 1]
	Transform LevelTransform;//[Offset: 0x80, Size: 1]
	int LevelLODIndex;//[Offset: 0xb0, Size: 1]
	int StreamingPriority;//[Offset: 0xb4, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 1]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 1]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 1]
	MulticastInlineDelegateProperty OnLevelLoaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelUnloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelShown;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelHidden;//[Size: 1]
	Level* LoadedLevel;//[Offset: 0x128, Size: 1]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 1]
	bool ShouldBeLoaded();// 0x337aa90
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x3c04c50
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x3b8f830
	void SetPriority(int NewPriority);// 0x3c04a30
	void SetLevelLODIndex(int LODIndex);// 0x3c04340
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x3c042b0
	bool IsStreamingStatePending();// 0x3c02f40
	bool IsLevelVisible();// 0x3c02f10
	bool IsLevelLoaded();// 0x3c02ee0
	FName GetWorldAssetPackageFName();// 0x3c02e70
	Level* GetLoadedLevel();// 0x2ca8040
	LevelScriptActor* GetLevelScriptActor();// 0x3c02dc0
	bool GetIsRequestingUnloadAndRemoval();// 0x3c02d90
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x3c02cb0

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 1]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 1]
	byte StreamingUsage;//[Offset: 0x26c, Size: 1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x858, Size: 1]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xa04, Size: 1]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa28, Size: 1]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa40, Size: 1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 1]
	Level* Level;//[Offset: 0x38, Size: 1]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 1]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 1]
	FName AISystemModuleName;//[Offset: 0x40, Size: 1]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 1]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 1]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 1]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 1]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 1]
	float TestHeightDifference;//[Offset: 0x44, Size: 1]
	float HeightCheckMargin;//[Offset: 0x48, Size: 1]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x3b42db0
	int GetObjectCount();// 0x3b42c90
	int GetNewAvoidanceUID();// 0x3b42c60
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x3b42bb0

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 1]
	Level* PersistentLevel;//[Offset: 0x20, Size: 1]
	<Level*> Levels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 1]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 1]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 1]

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 1]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x229, Size: 1]
	void SetMobility(byte InMobility);// 0x3c8db00

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x220, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	void ToggleEnabled();// 0x3c05010
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x3c047e0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x3c046c0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x3c045c0
	void SetLightColor(LinearColor NewLightColor);// 0x3c043d0
	void SetEnabled(bool bSetEnabled);// 0x3c03f80
	void SetCastShadows(bool bNewValue);// 0x3c03b60
	void SetBrightness(float NewBrightness);// 0x3c039c0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x3c036a0
	void OnRep_bEnabled();// 0x1a7dc00
	bool IsEnabled();// 0x3c02eb0
	LinearColor GetLightColor();// 0x3c02df0
	float GetBrightness();// 0x3c02d60

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x228, Size: 1]
	float MaxDrawDistance;//[Offset: 0x22c, Size: 1]
	float MaxDistanceFadeRange;//[Offset: 0x230, Size: 1]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	int ShadowMapChannel;//[Offset: 0x238, Size: 1]
	float MinRoughness;//[Offset: 0x240, Size: 1]
	float SpecularScale;//[Offset: 0x244, Size: 1]
	float ShadowResolutionScale;//[Offset: 0x248, Size: 1]
	float ShadowBias;//[Offset: 0x24c, Size: 1]
	float ShadowSlopeBias;//[Offset: 0x250, Size: 1]
	float ShadowSharpen;//[Offset: 0x254, Size: 1]
	float ContactShadowLength;//[Offset: 0x258, Size: 1]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25c, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25c, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25c, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25c, Size: 1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x260, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x268, Size: 1]
	Vector LightFunctionScale;//[Offset: 0x270, Size: 1]
	TextureLightProfile* IESTexture;//[Offset: 0x280, Size: 1]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 1]
	float IESBrightnessScale;//[Offset: 0x28c, Size: 1]
	float LightFunctionFadeDistance;//[Offset: 0x290, Size: 1]
	float DisabledBrightness;//[Offset: 0x294, Size: 1]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	float BloomScale;//[Offset: 0x29c, Size: 1]
	float BloomThreshold;//[Offset: 0x2a0, Size: 1]
	float BloomMaxBrightness;//[Offset: 0x2a4, Size: 1]
	Color BloomTint;//[Offset: 0x2a8, Size: 1]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2b0, Size: 1]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x3c04f90
	void SetUseTemperature(bool bNewValue);// 0x3c04f00
	void SetUseIESBrightness(bool bNewValue);// 0x3c04e70
	void SetTransmission(bool bNewValue);// 0x3c04de0
	void SetTemperature(float NewTemperature);// 0x3c04d60
	void SetSpecularScale(float NewValue);// 0x3c04ce0
	void SetShadowSlopeBias(float NewValue);// 0x3c04bd0
	void SetShadowBias(float NewValue);// 0x3c04b50
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x3c04900
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x3c04870
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x3c04750
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x3c04640
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x3c04540
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x3c04460
	void SetIntensity(float NewIntensity);// 0x3c04230
	void SetIndirectLightingIntensity(float NewIntensity);// 0x3c041b0
	void SetIESTexture(TextureLightProfile* NewValue);// 0x3c04120
	void SetIESBrightnessScale(float NewValue);// 0x3c040a0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x3c04010
	void SetEnableLightShaftBloom(bool bNewValue);// 0x3c03ef0
	void SetBloomTint(Color NewValue);// 0x3c03940
	void SetBloomThreshold(float NewValue);// 0x3c038c0
	void SetBloomScale(float NewValue);// 0x3c03840
	void SetBloomMaxBrightness(float NewValue);// 0x3c037c0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x3c03730
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x3c034f0

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1f8, Size: 1]
	float Brightness;//[Offset: 0x208, Size: 1]
	float Intensity;//[Offset: 0x20c, Size: 1]
	Color LightColor;//[Offset: 0x210, Size: 1]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 1]
	float DeepShadowLayerDistribution;//[Offset: 0x218, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x21c, Size: 1]
	float VolumetricScatteringIntensity;//[Offset: 0x220, Size: 1]
	int SamplesPerPixel;//[Offset: 0x224, Size: 1]
	void SetSamplesPerPixel(int NewValue);// 0x3c04ac0
	void SetCastVolumetricShadow(bool bNewValue);// 0x3c03c80
	void SetCastShadows(bool bNewValue);// 0x3c03bf0
	void SetCastRaytracedShadow(bool bNewValue);// 0x3c03ad0
	void SetCastDeepShadow(bool bNewValue);// 0x3c03a40
	void SetAffectReflection(bool bNewValue);// 0x3c03610
	void SetAffectGlobalIllumination(bool bNewValue);// 0x3c03580
	LinearColor GetLightColor();// 0x3c02e30

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x1a0, Size: 1]
	float TextureMultiplier;//[Offset: 0x1a4, Size: 1]

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x248, Size: 1]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x260, Size: 1]
	float Priority;//[Offset: 0x7c0, Size: 1]
	float BlendRadius;//[Offset: 0x7c4, Size: 1]
	float BlendWeight;//[Offset: 0x7c8, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x3c4d2e0

--------------------------------
Class: CrowFxRandomActivator.Actor.Object
	ParticleSystem* ParticleFX;//[Offset: 0x220, Size: 1]
	bool StartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float StartPlayDelayTime;//[Offset: 0x22c, Size: 1]
	float TimeMin;//[Offset: 0x230, Size: 1]
	float TimeMax;//[Offset: 0x234, Size: 1]
	AkAudioEvent*[] LobbyAudioEvents;//[Offset: 0x238, Size: 1]
	AkAudioEvent*[] LobbyAudioStopEvents;//[Offset: 0x248, Size: 1]
	Actor* AudioTarget;//[Offset: 0x258, Size: 1]
	SphereComponent* SphereComponent;//[Offset: 0x270, Size: 1]
	ParticleSystemComponent* FxParticlesComp;//[Offset: 0x278, Size: 1]

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 1]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 1]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 1]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 1]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float MinimumDuration;//[Offset: 0xc0, Size: 1]
	float MaximumDuration;//[Offset: 0xc4, Size: 1]
	float GetMinimumDuration();// 0x127ec80
	float GetMaximumDuration();// 0x127ec50
	float GetMaxAttenuationRadius();// 0x127ec20
	bool GetIsInfinite();// 0x127ebf0

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 1]
	Object*[] UserData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 1]
	FString BankLanguage;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x58, Size: 1]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa8, Size: 1]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x228, Size: 1]

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x220, Size: 1]

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x1f8, Size: 1]
	enum ReflectionSourceType;//[Offset: 0x200, Size: 1]
	enum MobileReflectionCompression;//[Offset: 0x201, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x208, Size: 1]
	float SourceCubemapAngle;//[Offset: 0x210, Size: 1]
	float Brightness;//[Offset: 0x214, Size: 1]
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	float MaxValueRGBM;//[Offset: 0x21c, Size: 1]
	Vector CaptureOffset;//[Offset: 0x220, Size: 1]
	Guid MapBuildDataId;//[Offset: 0x22c, Size: 1]
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x250, Size: 1]

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x220, Size: 1]

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x1f8, Size: 1]
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x228, Size: 1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	uint32 ScalabilityGroup;//[Offset: 0x234, Size: 1]
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x240, Size: 1]
	int StreamLowMips;//[Offset: 0x248, Size: 1]
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 1]
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0x3c5c8c0

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 1]
	uint64 BuildHash;//[Offset: 0x30, Size: 1]

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x1a0, Size: 1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 1]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 1]
	int TileBorderSize;//[Offset: 0x4, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x220, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	void OnRep_bEnabled();// 0x1a7dc00

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x1f8, Size: 1]
	float FogHeightFalloff;//[Offset: 0x1fc, Size: 1]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x200, Size: 1]
	LinearColor FogInscatteringColor;//[Offset: 0x20c, Size: 1]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x220, Size: 1]
	float InscatteringColorCubemapAngle;//[Offset: 0x228, Size: 1]
	LinearColor InscatteringTextureTint;//[Offset: 0x22c, Size: 1]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x23c, Size: 1]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x240, Size: 1]
	float DirectionalInscatteringExponent;//[Offset: 0x244, Size: 1]
	float DirectionalInscatteringStartDistance;//[Offset: 0x248, Size: 1]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x24c, Size: 1]
	float FogMaxOpacity;//[Offset: 0x25c, Size: 1]
	float StartDistance;//[Offset: 0x260, Size: 1]
	float FogCutoffDistance;//[Offset: 0x264, Size: 1]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x26c, Size: 1]
	Color VolumetricFogAlbedo;//[Offset: 0x270, Size: 1]
	LinearColor VolumetricFogEmissive;//[Offset: 0x274, Size: 1]
	float VolumetricFogExtinctionScale;//[Offset: 0x284, Size: 1]
	float VolumetricFogDistance;//[Offset: 0x288, Size: 1]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x28c, Size: 1]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x3b7e160
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x3b7e0e0
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x3b7e050
	void SetVolumetricFogDistance(float NewValue);// 0x3b7dfd0
	void SetVolumetricFogAlbedo(Color NewValue);// 0x3b7df50
	void SetVolumetricFog(bool bNewValue);// 0x3b7dec0
	void SetStartDistance(float Value);// 0x3b7de40
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x3b7ddc0
	void SetInscatteringTextureTint(LinearColor Value);// 0x3b7dcb0
	void SetInscatteringColorCubemapAngle(float Value);// 0x3b7dc30
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x3b7dba0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x3b7db20
	void SetFogMaxOpacity(float Value);// 0x3b7da10
	void SetFogInscatteringColor(LinearColor Value);// 0x3b7d980
	void SetFogHeightFalloff(float Value);// 0x3b3ec30
	void SetFogDensity(float Value);// 0x3b3f4d0
	void SetFogCutoffDistance(float Value);// 0x3b7d900
	void SetDirectionalInscatteringStartDistance(float Value);// 0x3b7d880
	void SetDirectionalInscatteringExponent(float Value);// 0x3b7d800
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x3b7d770

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 1]
	float FogHeightFalloff;//[Offset: 0x4, Size: 1]
	float FogHeightOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowLobbyMainObjectBider.Actor.Object
	Actor*[] MainMenuActors;//[Offset: 0x220, Size: 1]
	Actor* MainMenu_Camera;//[Offset: 0x230, Size: 1]
	Actor* MainMenu_Camera_L;//[Offset: 0x238, Size: 1]
	Actor* MainMenu_Camera_R;//[Offset: 0x240, Size: 1]
	float CameraChangingTime;//[Offset: 0x248, Size: 1]
	Actor*[] MainMenu_SpawnPoint;//[Offset: 0x250, Size: 1]
	class CrowLobbyCharacterPawn* CrowLobbyCharacterPawnClass;//[Offset: 0x260, Size: 1]
	bool LobbyTestMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	CrowLobbyNoiseAnimInfo[] LobbyNoiseAnimInfos;//[Offset: 0x270, Size: 1]
	<enum,SoftObjectPath> RandomBoxSequences;//[Offset: 0x280, Size: 1]
	SoftObjectPath RandomBoxArraySequence;//[Offset: 0x2d0, Size: 1]
	CrowFxRandomActivator*[] FxRandomActivators;//[Offset: 0x2e8, Size: 1]
	CrowFxActivator*[] MainMenu_SpawnPointFxActivators;//[Offset: 0x2f8, Size: 1]
	AkAudioEvent*[] LobbyAudioEvents;//[Offset: 0x308, Size: 1]
	AkAudioEvent*[] LobbyAudioStopEvents;//[Offset: 0x318, Size: 1]
	Actor* AudioTarget;//[Offset: 0x328, Size: 1]
	Actor* MainActorsBounds;//[Offset: 0x330, Size: 1]
	void B_ToggleActorsVisibility();// 0xca8430
	void A_BindActorsInLevel();// 0xca8430

--------------------------------
Class: CrowLobbyCharacterPawn.CrowCharacterBase.CLSCharacter.Character.Pawn.Actor.Object
	CharacterMovementComponent* LobbyCharacterMovement;//[Offset: 0x1138, Size: 1]
	CrowWeaponLobby* CurrrentWeapon;//[Offset: 0x1178, Size: 1]
	uint64 ServerKey;//[Offset: 0x1180, Size: 1]
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x1abb9f0
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x1a339e0

--------------------------------
Class: CrowCharacterBase.CLSCharacter.Character.Pawn.Actor.Object
	CrowCharacterAppearance ReplicatedAppearance;//[Offset: 0xff8, Size: 1]
	CrowClothItemData[] DefaultClothesList;//[Offset: 0x1000, Size: 1]
	uint32[] DefaultTattooIndexList;//[Offset: 0x1010, Size: 1]
	uint32 DefaultResultMVPIndex;//[Offset: 0x1020, Size: 1]
	bool bIsHuman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1024, Size: 1]
	FName PelvisBoneName;//[Offset: 0x1028, Size: 1]
	SoftObjectPath MergedSkinMaterial;//[Offset: 0x1030, Size: 1]
	SoftObjectPath MergedClothMaterial;//[Offset: 0x1048, Size: 1]
	CrowClothItemData[] SortedClothesList;//[Offset: 0x1060, Size: 1]
	MaterialInstanceDynamic* MergedSkinMID;//[Offset: 0x1070, Size: 1]
	MaterialInstanceDynamic* MergedClothMID;//[Offset: 0x1078, Size: 1]
	float ElapsedForceSyncRotation;//[Offset: 0x1080, Size: 1]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1088, Size: 1]
	float PronedEyeHeight;//[Offset: 0x108c, Size: 1]
	CrowCharacterMovement* CrowMovement;//[Offset: 0x1098, Size: 1]
	CrowProneCapsuleComponent* ProneCollisionCapsuleComponent;//[Offset: 0x10a0, Size: 1]
	CrowClothActorComponent* TP_ClothComponent;//[Offset: 0x10a8, Size: 1]
	CrowCharacterTracker* CharacterTracker;//[Offset: 0x10b0, Size: 1]
	CrowCharacterAppearance PendingAppearance;//[Offset: 0x10b8, Size: 1]
	CrowCharacterAppearance CurrentAppearance;//[Offset: 0x10be, Size: 1]
	uint32 CurrentTattooFaceIndex;//[Offset: 0x10c4, Size: 1]
	uint32 CurrentTattooArmIndex;//[Offset: 0x10c8, Size: 1]
	PhysicsAsset* CharacterPhysicsAsset;//[Offset: 0x10d0, Size: 1]
	PhysicsAsset* RagdollPhysicsAsset;//[Offset: 0x10d8, Size: 1]
	CrowThreadWorkerTask* MergeMeshTask;//[Offset: 0x10e0, Size: 1]
	SkeletalMesh* OptimizationWeaponMesh;//[Offset: 0x1108, Size: 1]
	SkeletalMesh* OptimizationCharacterMesh;//[Offset: 0x1110, Size: 1]
	SkeletalMesh* BackupNoOptimizationCharacterMesh;//[Offset: 0x1118, Size: 1]
	MaterialInterface* BackupNoOptimizationCharacterMaterial;//[Offset: 0x1120, Size: 1]
	int CacheMergedMeshIndex;//[Offset: 0x1128, Size: 1]
	class Object* BackupAnimClass;//[Offset: 0x1130, Size: 1]
	void ServerMovePacked_CrowWorld(const CharacterServerMovePackedBits PackedBits, uint32 WorldActorIndex, int16 LayoutItemIndex);// 0x1a3b9e0
	void Server_WeaponFiring(bool IsFiring);// 0x1a3bb70
	void OnRep_IsWeaponFiring();// 0x1a3b9c0
	void OnRep_ChangeDefaultTattooIndexList();// 0x1a3b9a0
	void OnRep_ChangeDefaultClothesList();// 0x1a3b980
	void OnRep_ChangeAppearance();// 0x1a3b960
	void Multicast_DrawDebugLine(Vector LineStart, Vector LineEnd, Color LineColor);// 0x1a3b7e0
	bool IsOnVault();// 0x1a3b7b0
	bool IsOnInteract();// 0x1a3b7b0
	bool IsMale();// 0x1a3b780
	CrowClothActorComponent* GetTP_ClothComponent();// 0x1a3b760
	Vector GetFireTargetPartOffset(enum InPart);// 0x1a3b6c0

--------------------------------
Class: CLSCharacter.Character.Pawn.Actor.Object
	bool IsPressSprintKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	float LadderTopEnterDelay;//[Offset: 0x4cc, Size: 1]
	bool bSkipUpdateMovementRotationWhenThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	bool bIsProned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d4, Size: 1]
	bool bIsSprinted;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d4, Size: 1]
	bool bIsWalked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d4, Size: 1]
	bool bIsLookedFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4d4, Size: 1]
	bool bRightShoulder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4d4, Size: 1]
	bool bIsLookAround;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4d4, Size: 1]
	bool bUnresolvedReplication_IsProned;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4d4, Size: 1]
	bool bUnresolvedReplication_IsCrouched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4d4, Size: 1]
	bool bUnresolvedReplication_IsSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d5, Size: 1]
	bool bUnresolvedReplication_IsWalk;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d5, Size: 1]
	bool bUnresolvedReplication_IsLookFocus;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d5, Size: 1]
	float LookUpDownRate;//[Offset: 0x4d8, Size: 1]
	float LookLeftRightRate;//[Offset: 0x4dc, Size: 1]
	float LookDeltaSeconds;//[Offset: 0x4e0, Size: 1]
	float StandToCrouchAnimRate;//[Offset: 0x4e4, Size: 1]
	float StandToProneAnimRate;//[Offset: 0x4e8, Size: 1]
	float CrouchToStandAnimRate;//[Offset: 0x4ec, Size: 1]
	float CrouchToProneAnimRate;//[Offset: 0x4f0, Size: 1]
	float ProneToStandAnimRate;//[Offset: 0x4f4, Size: 1]
	float ProneToCrouchAnimRate;//[Offset: 0x4f8, Size: 1]
	bool bUseProneLimitedArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fc, Size: 1]
	bool bNotImportantVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	CLSCharacterMovement* CachedCharacterMovement;//[Offset: 0x508, Size: 1]
	CLSCharacterAnimInstance* CachedAnimInstance;//[Offset: 0x510, Size: 1]
	enum AdjustClientRotationMode;//[Offset: 0x518, Size: 1]
	CLSVaultTime VaultTime;//[Offset: 0x51c, Size: 1]
	TimelineComponent* VaultTimeline;//[Offset: 0x550, Size: 1]
	CurveFloat* VaultTimelineCurve;//[Offset: 0x558, Size: 1]
	enum RotationMode;//[Offset: 0x560, Size: 1]
	enum DesiredViewMode;//[Offset: 0x561, Size: 1]
	enum ViewMode;//[Offset: 0x562, Size: 1]
	enum DesiredRotationMode;//[Offset: 0x563, Size: 1]
	enum CurrentMovementMode;//[Offset: 0x564, Size: 1]
	enum PrevMovementMode;//[Offset: 0x565, Size: 1]
	enum MovementAction;//[Offset: 0x566, Size: 1]
	enum WeaponAction;//[Offset: 0x567, Size: 1]
	enum CommonAction;//[Offset: 0x568, Size: 1]
	enum BattleStance;//[Offset: 0x569, Size: 1]
	enum OverlayState;//[Offset: 0x56a, Size: 1]
	enum DesiredPeekState;//[Offset: 0x56b, Size: 1]
	enum ActualPeekState;//[Offset: 0x56c, Size: 1]
	bool bDesiredFiringState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 1]
	bool bActualFiringState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56e, Size: 1]
	Rotator LookingRotation;//[Offset: 0x570, Size: 1]
	Rotator ServerLookingRotation;//[Offset: 0x57c, Size: 1]
	Rotator LookAroundRotation;//[Offset: 0x588, Size: 1]
	Vector Acceleration;//[Offset: 0x594, Size: 1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool bHasMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	Rotator LastVelocityRotation;//[Offset: 0x5a4, Size: 1]
	Rotator LastMovementInputRotation;//[Offset: 0x5b0, Size: 1]
	float Speed;//[Offset: 0x5bc, Size: 1]
	float MovementInputAmount;//[Offset: 0x5c0, Size: 1]
	float AimYawRate;//[Offset: 0x5c4, Size: 1]
	Vector SubRootOffset;//[Offset: 0x5c8, Size: 1]
	float CurrentSlopeAngle;//[Offset: 0x5d4, Size: 1]
	bool bUseArmLOverwrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 1]
	CLSCameraParameters CameraParameters;//[Offset: 0x5d9, Size: 1]
	DataTableRowHandle MovementModel;//[Offset: 0x5e0, Size: 1]
	CLSMovementSettingsData MovementData;//[Offset: 0x5f0, Size: 1]
	Rotator SmoothTargetRotation;//[Offset: 0x710, Size: 1]
	Rotator TurnTargetRotation;//[Offset: 0x71c, Size: 1]
	Rotator InAirRotation;//[Offset: 0x728, Size: 1]
	float YawOffset;//[Offset: 0x734, Size: 1]
	bool bRotateOnChangingProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	bool bPendingGroundRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x739, Size: 1]
	bool bIsKeepWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73a, Size: 1]
	CLSVaultParams VaultParams;//[Offset: 0x740, Size: 1]
	CLSComponentTransform VaultLedgeLS;//[Offset: 0x820, Size: 1]
	Transform VaultTarget;//[Offset: 0x930, Size: 1]
	Transform VaultActualStartOffset;//[Offset: 0x960, Size: 1]
	Transform VaultAnimatedStartOffset;//[Offset: 0x990, Size: 1]
	CLSVaultTraceSettings GroundedTraceSettings;//[Offset: 0x9c0, Size: 1]
	CLSVaultTraceSettings FallingTraceSettings;//[Offset: 0x9dc, Size: 1]
	Vector RagdollLocation;//[Offset: 0x9f8, Size: 1]
	Vector RagdollVelocity;//[Offset: 0xa04, Size: 1]
	bool bRagdollOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 1]
	bool bRagdollFaceUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 1]
	Vector PreviousVelocity;//[Offset: 0xa14, Size: 1]
	float PreviousAimYaw;//[Offset: 0xa20, Size: 1]
	float PreviousSlopeAngle;//[Offset: 0xa24, Size: 1]
	CLSCharacterBattleStanceTime BattleStanceTimeSetting;//[Offset: 0xa28, Size: 1]
	CurveVector* Vault1MCurve;//[Offset: 0xa38, Size: 1]
	CurveVector* Vault2MCurve;//[Offset: 0xa40, Size: 1]
	CLSVaultAsset Vault_2M_Default;//[Offset: 0xa48, Size: 1]
	CLSVaultAsset Vault_2M_Slope;//[Offset: 0xa98, Size: 1]
	CLSVaultAsset Vault_1M_Default;//[Offset: 0xae8, Size: 1]
	CLSVaultAsset Vault_1M_RH;//[Offset: 0xb38, Size: 1]
	CLSVaultAsset Vault_1M_LH;//[Offset: 0xb88, Size: 1]
	CLSVaultAsset Vault_Low70;//[Offset: 0xbd8, Size: 1]
	CLSVaultAsset Vault_Low70_Melee;//[Offset: 0xc28, Size: 1]
	CLSVaultAsset JumpOver_Low70;//[Offset: 0xc78, Size: 1]
	CLSVaultAsset JumpOver_Low70_Melee;//[Offset: 0xcc8, Size: 1]
	CLSVaultAsset JumpOver_1M;//[Offset: 0xd18, Size: 1]
	CLSVaultAsset JumpOver_2M;//[Offset: 0xd68, Size: 1]
	CLSVaultAsset JumpOver_Window;//[Offset: 0xdb8, Size: 1]
	Vector NotMovingPivotOffset;//[Offset: 0xe08, Size: 1]
	Vector WalkingPivotOffset;//[Offset: 0xe14, Size: 1]
	Vector RunningPivotOffset;//[Offset: 0xe20, Size: 1]
	Vector SprintingPivotOffset;//[Offset: 0xe2c, Size: 1]
	Vector CrouchSprintingPivotOffset;//[Offset: 0xe38, Size: 1]
	float CrouchPivotOffsetZRatio;//[Offset: 0xe44, Size: 1]
	float PronePivotOffsetZRatio;//[Offset: 0xe48, Size: 1]
	Vector AddPronePivotOffset;//[Offset: 0xe4c, Size: 1]
	Vector WalkingPivotLerpSpeed;//[Offset: 0xe58, Size: 1]
	Vector RunningPivotLerpSpeed;//[Offset: 0xe64, Size: 1]
	Vector SprintingPivotLerpSpeed;//[Offset: 0xe70, Size: 1]
	Vector CrouchSprintingPivotLerpSpeed;//[Offset: 0xe7c, Size: 1]
	float WalkingAddFOV;//[Offset: 0xe88, Size: 1]
	float RunningAddFOV;//[Offset: 0xe8c, Size: 1]
	float SprintingAddFOV;//[Offset: 0xe90, Size: 1]
	float CrouchSprintingAddFOV;//[Offset: 0xe94, Size: 1]
	float WalkingAddFOVLerpSpeed;//[Offset: 0xe98, Size: 1]
	float RunningAddFOVLerpSpeed;//[Offset: 0xe9c, Size: 1]
	float SprintingAddFOVLerpSpeed;//[Offset: 0xea0, Size: 1]
	float CrouchSprintingAddFOVLerpSpeed;//[Offset: 0xea4, Size: 1]
	Vector DeadPivotOffset;//[Offset: 0xea8, Size: 1]
	float ShoulderViewChangedInterpolationSpeed;//[Offset: 0xeb4, Size: 1]
	CurveFloat* CameraPivotInterpCurve;//[Offset: 0xeb8, Size: 1]
	Vector FPStandingOffset;//[Offset: 0xec0, Size: 1]
	Vector FPCrouchingOffset;//[Offset: 0xecc, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe8, Size: 1]
	void Walk();// 0xcfe3b0
	void VaultUpdateFast(float Playback);// 0xcfe330
	void VaultUpdate(float BlendIn);// 0xcfe2b0
	void VaultStart(float VaultHeight, float VaultEndHeight, out CLSComponentTransform VaultLedgeWS, enum VaultType);// 0xcfe060
	void VaultEnd();// 0xcfe040
	bool VaultCheckGround();// 0xcfe010
	bool VaultCheckFast(CLSVaultTraceSettings TraceSettings);// 0xcfdf50
	bool VaultCheckFalling();// 0xcfdf20
	void UnRagdoll(bool bUseNetworking);// 0xcfde90
	void ToRagdoll(bool bUseNetworking);// 0xcfde00
	void SwimUp();// 0xcfdde0
	void SwimDown();// 0xcfddc0
	void Stand();// 0xcfdda0
	void Sprint();// 0xcfdd80
	void SetWeaponObject(Object* WeaponObject);// 0xcfdcf0
	void SetVehicleObject(Object* VehicleObject);// 0xcfdc60
	void SetRotationMode(enum NewRotationMode);// 0xcfdbe0
	void SetRightShoulder(bool NewRightShoulder);// 0xcfdb50
	void SetPressedSprintState(bool IsPressed);// 0xcfdac0
	void SetBattleStance(enum NewBattleStance);// 0xcfda40
	void Server_VaultStartNetTransform(float VaultHeight, float VaultEndHeight, CLSVaultNetTransform VaultTransformWS, enum VaultType);// 0xcfd7f0
	void Server_VaultStart(float VaultHeight, float VaultEndHeight, CLSComponentTransform VaultLedgeWS, enum VaultType);// 0xcfd360
	void Server_UpdateRagdoll(Vector NewVelocity, Vector NewRagdollLocation, Vector NewActorLocation, Rotator NewActorRotation);// 0xcfd160
	void Server_UnRagdoll(bool bOnGround);// 0xcfd0a0
	void Server_ToRagdoll();// 0xcfd050
	void Server_StopAnimNetworked(CLSAnimation AnimToStop, float BlendOut);// 0xcfcf20
	void Server_StopAnimGroupNetworked(enum GroupType, float BlendOut);// 0xcfce20
	void Server_SetTurnTargetRotation(Rotator NewRotation);// 0xcfcd50
	void Server_SetSmoothTargetRotation(Rotator NewRotation);// 0xcfcc80
	void Server_SetRotationMode(enum NewRotationMode);// 0xcfcbd0
	void Server_SetRightShoulder(bool InRightShoulder);// 0xcfcb10
	void Server_SetLookingRotation(const Rotator NewRotation);// 0xcfca60
	void Server_SetLookAroundRotation(const Rotator NewRotation);// 0xcfc9b0
	void Server_SetLookAround(bool InLookAround);// 0xcfc8f0
	void Server_SetDesiredPeekState(enum NewPeekState);// 0xcfc840
	void Server_SetDesiredFiringState(bool bFiring);// 0xcfc780
	void Server_SetBattleStance(enum NewBattleStance);// 0xcfc6d0
	void Server_ResetRotation(Rotator NewRotation);// 0xcfc600
	void Server_PlayAnimNetworked(CLSAnimation Animation, FName SectionName, float PlayRate, float StartPosition, bool bStopMontages);// 0xcfc3f0
	void Server_MontangeSetNextSection(FName SectionNameToChange, FName NextSection, CLSAnimation Animation);// 0xcfc280
	void Run();// 0xcfc260
	void Prone();// 0xcfc240
	void PeekStop();// 0xcfc220
	void PeekRight(bool Flag);// 0xcfc190
	void PeekLeft(bool Flag);// 0xcfc100
	void OnVaultEndProcess();// 0xcfc0e0
	void OnRep_SetRotationMode();// 0xcfc0c0
	void OnRep_SetRightShoulder();// 0xcfc0a0
	void OnRep_SetLookingRotation();// 0xca8430
	void OnRep_SetBattleStance();// 0xcfc080
	void OnRep_IsWalk();// 0xcfc060
	void OnRep_IsSprint();// 0xcfc040
	void OnRep_IsProned();// 0xcfc020
	void OnRep_IsLookFocus();// 0xcfc000
	void Multicast_VaultTerminated(const Vector_NetQuantize InLocation);// 0xcfbf50
	void Multicast_VaultStartNetTransform(float VaultHeight, float VaultEndHeight, CLSVaultNetTransform VaultTransformWS, enum VaultType);// 0xcfbd00
	void Multicast_VaultStart(float VaultHeight, float VaultEndHeight, CLSComponentTransform VaultLedgeWS, enum VaultType);// 0xcfb870
	void Multicast_UpdateRagdoll(Vector NewLocation, Rotator NewRotation);// 0xcfb730
	void Multicast_UnRagdoll(bool bOnGround);// 0xcfb670
	void Multicast_ToRagdoll();// 0xcfb620
	void Multicast_StopAnimNetworked(CLSAnimation AnimToStop, float BlendOut);// 0xcfb4f0
	void Multicast_StopAnimGroupNetworked(enum GroupType, float BlendOut);// 0xcfb3f0
	void Multicast_SetTurnTargetRotation(Rotator NewRotation);// 0xcfb320
	void Multicast_ResetRotation(Rotator NewRotation);// 0xcfb250
	void Multicast_PlayAnimNetworked(CLSAnimation Animation, FName SectionName, float PlayRate, float StartPosition, bool bStopMontages);// 0xcfb040
	void Multicast_MontageSetNextSection(FName SectionNameToChange, FName NextSection, CLSAnimation Animation);// 0xcfaed0
	void MoveUp(float AxisValue);// 0xcfae40
	void MoveRight(float AxisValue);// 0xcfadb0
	void MoveForward(float AxisValue);// 0xcfad20
	void LookUp(float AxisValue);// 0xcfac90
	void LookRight(float AxisValue);// 0xcfac00
	void LookFocus(bool Value);// 0xcfab70
	void Latent_SmoothRotateOnProne();// 0xcfab50
	void Latent_SetKeepWalking();// 0xcfab30
	void Latent_SetBattleStanceRelaxed();// 0xcfab10
	void Latent_SetBattleStanceReady();// 0xcfaaf0
	void Latent_PendingGroundRotate();// 0xcfaad0
	void Latent_OnLanded();// 0xcfaab0
	void FiringState(bool bFiring);// 0xcfaa20

--------------------------------
Class: CLSCharacterMovement.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bUseSlopeSpeedAtteunation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	bool bUseSprintInhibitionSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf1, Size: 1]
	CLSSpeedAtteunationOnSlope SpeedAtteunationOnSlopeInfo;//[Offset: 0xaf4, Size: 1]
	float StandedHalfHeight;//[Offset: 0xb04, Size: 1]
	float PronedHalfHeight;//[Offset: 0xb08, Size: 1]
	bool bWantsToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0c, Size: 1]
	bool bWantsToSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0d, Size: 1]
	bool bWantsToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0e, Size: 1]
	bool bWantsToLookFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0f, Size: 1]
	float SlideAlongSurfaceValue;//[Offset: 0xb10, Size: 1]
	float SwimImmersionDepth;//[Offset: 0xb14, Size: 1]
	Vector WaterPlaneLocation;//[Offset: 0xb18, Size: 1]
	Vector WaterWaveLocation;//[Offset: 0xb24, Size: 1]
	Vector WaterSurfaceNormal;//[Offset: 0xb30, Size: 1]
	PhysicsVolume* WaterVolumePtr;//[Offset: 0xb3c, Size: 1]
	WaterBody* WaterBodyPtr;//[Offset: 0xb44, Size: 1]
	Actor* WaterPlanePtr;//[Offset: 0xb4c, Size: 1]
	float WaterBodyImmersionDepth;//[Offset: 0xb54, Size: 1]
	CLSCharacter* CachedCharacter;//[Offset: 0xb58, Size: 1]
	void OnWaterPlaneOverlapEnd(Actor* InWaterPlaneActor);// 0xd025d0
	void OnWaterPlaneOverlapBegin(Actor* InWaterPlaneActor);// 0xd02540
	void OnWaterBodyOverlapEnd(WaterBody* InWaterBodyActor);// 0xd024b0
	void OnWaterBodyOverlapBegin(WaterBody* InWaterBodyActor, bool InIsAlight);// 0xd023e0
	void OnCapsuleOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xd02290
	void OnCapsuleOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xd02070
	void CheckWaterAndCallOverlapBegin();// 0xd02050

--------------------------------
Class: WaterBody.Actor.Object
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x230, Size: 1]
	float TargetWaveMaskDepth;//[Offset: 0x238, Size: 1]
	float MaxWaveHeightOffset;//[Offset: 0x23c, Size: 1]
	int WaterBodyIndex;//[Offset: 0x240, Size: 1]
	bool bFillCollisionUnderWaterBodiesForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	UnderwaterPostProcessSettings UnderwaterPostProcessSettings;//[Offset: 0x250, Size: 1]
	enum WaterBodyType;//[Offset: 0x7d0, Size: 1]
	WaterCurveSettings CurveSettings;//[Offset: 0x7d8, Size: 1]
	MaterialInterface* WaterMaterial;//[Offset: 0x7f8, Size: 1]
	MaterialInterface* UnderwaterPostProcessMaterial;//[Offset: 0x800, Size: 1]
	bool bAffectsLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 1]
	bool bGenerateCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809, Size: 1]
	bool bOverrideWaterMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80a, Size: 1]
	StaticMesh* WaterMeshOverride;//[Offset: 0x810, Size: 1]
	int OverlapMaterialPriority;//[Offset: 0x818, Size: 1]
	FName CollisionProfileName;//[Offset: 0x81c, Size: 1]
	WaterSplineComponent* SplineComp;//[Offset: 0x828, Size: 1]
	WaterSplineMetadata* WaterSplineMetadata;//[Offset: 0x830, Size: 1]
	MaterialInstanceDynamic* WaterMID;//[Offset: 0x838, Size: 1]
	MaterialInstanceDynamic* UnderwaterPostProcessMID;//[Offset: 0x840, Size: 1]
	WaterBodyIsland*[] Islands;//[Offset: 0x848, Size: 1]
	WaterBodyExclusionVolume*[] ExclusionVolumes;//[Offset: 0x858, Size: 1]
	LandscapeProxy* Landscape;//[Offset: 0x868, Size: 1]
	WaterBodyServerLandscapeReference[] ServerLandscape;//[Offset: 0x890, Size: 1]
	PostProcessSettings CurrentPostProcessSettings;//[Offset: 0x8b0, Size: 1]
	bool bCanAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe10, Size: 1]
	class NavAreaBase* WaterNavAreaClass;//[Offset: 0xe18, Size: 1]
	WaterWavesBase* WaterWaves;//[Offset: 0xe20, Size: 1]
	void SetWaterWaves(WaterWavesBase* InWaterWaves);// 0xd3e660
	void OnWaterBodyChanged(bool bShapeOrPositionChanged, bool bWeightmapSettingsChanged);// 0xd3e310
	WaterSplineComponent* GetWaterSpline();// 0xd3e020
	MaterialInstanceDynamic* GetWaterMaterialInstance();// 0xd3dff0
	MaterialInterface* GetWaterMaterial();// 0xd3dfd0
	MaterialInstanceDynamic* GetUnderwaterPostProcessMaterialInstance();// 0xd3dfa0
	MaterialInstanceDynamic* GetRiverToOceanTransitionMaterialInstance();// 0xd3deb0
	MaterialInstanceDynamic* GetRiverToLakeTransitionMaterialInstance();// 0xd3de80
	float GetMaxWaveHeight();// 0xd3ddb0
	WaterBodyIsland*[] GetIslands();// 0xd3dae0
	WaterBodyExclusionVolume*[] GetExclusionVolumes();// 0xd3da60

--------------------------------
Class: WaterWavesBase.Object

--------------------------------
Class: WaterSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WaterSplineCurveDefaults WaterSplineDefaults;//[Offset: 0x548, Size: 1]
	WaterSplineCurveDefaults PreviousWaterSplineDefaults;//[Offset: 0x558, Size: 1]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x450, Size: 1]
	InterpCurveVector SplineInfo;//[Offset: 0x4c0, Size: 1]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4d8, Size: 1]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4f0, Size: 1]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x508, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x524, Size: 1]
	float Duration;//[Offset: 0x528, Size: 1]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52f, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 1]
	float LoopPosition;//[Offset: 0x534, Size: 1]
	Vector DefaultUpVector;//[Offset: 0x538, Size: 1]
	void UpdateSpline();// 0x3c86400
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x3c86320
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x3c861b0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x3c85960
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x3c85fe0
	void SetTangentColor(out const LinearColor TangentColor);// 0x3c85960
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x3c85e70
	void SetSplineWorldPoints(out const Vector[] Points);// 0x3c85dc0
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x3c85b80
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x3c85c90
	void SetSplineLocalPoints(out const Vector[] Points);// 0x3c85ad0
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x3c85960
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x3c85850
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x3c856e0
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x3c85570
	void SetDrawDebug(bool bShow);// 0x3c854e0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x3c85400
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x3c852e0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x3c85210
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x3c85140
	bool IsClosedLoop();// 0x3c85110
	Vector GetWorldTangentAtDistanceAlongSpline(float DISTANCE);// 0x3c85060
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x3c84f70
	Rotator GetWorldRotationAtDistanceAlongSpline(float DISTANCE);// 0x3c84ec0
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x3c84dd0
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x3c84d20
	Vector GetWorldLocationAtDistanceAlongSpline(float DISTANCE);// 0x3c84c70
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x3c84b80
	Vector GetWorldDirectionAtDistanceAlongSpline(float DISTANCE);// 0x3c84ad0
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3c849f0
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3c84910
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3c847e0
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c84700
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3c84610
	Vector GetUpVectorAtDistanceAlongSpline(float DISTANCE, byte CoordinateSpace);// 0x3c84520
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x3c84380
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x3c84230
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x3c840d0
	Transform GetTransformAtDistanceAlongSpline(float DISTANCE, byte CoordinateSpace, bool bUseScale);// 0x3c83f70
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3c83e40
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c824b0
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3c83d50
	Vector GetTangentAtDistanceAlongSpline(float DISTANCE, byte CoordinateSpace);// 0x3c83c60
	byte GetSplinePointType(int PointIndex);// 0x3c83bc0
	float GetSplineLength();// 0x3c83b90
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x3c83a10
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x3c83960
	Vector GetScaleAtSplineInputKey(float InKey);// 0x3c838c0
	Vector GetScaleAtDistanceAlongSpline(float DISTANCE);// 0x3c83820
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3c836f0
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c83610
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3c83520
	Rotator GetRotationAtDistanceAlongSpline(float DISTANCE, byte CoordinateSpace);// 0x3c83430
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3c83310
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c83240
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3c83160
	float GetRollAtDistanceAlongSpline(float DISTANCE, byte CoordinateSpace);// 0x3c83080
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3c82f50
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c82e70
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3c82d80
	Vector GetRightVectorAtDistanceAlongSpline(float DISTANCE, byte CoordinateSpace);// 0x3c82c90
	int GetNumberOfSplineSegments();// 0x3c82c60
	int GetNumberOfSplinePoints();// 0x3c82c30
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3c82b00
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c82a20
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3c82930
	Vector GetLocationAtDistanceAlongSpline(float DISTANCE, byte CoordinateSpace);// 0x3c82840
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x3c826c0
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x3c82590
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c824b0
	float GetInputKeyAtDistanceAlongSpline(float DISTANCE);// 0x3c82410
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3c82340
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3c82270
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x3c821d0
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x3c82130
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3c82000
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c81f20
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3c81e30
	Vector GetDirectionAtDistanceAlongSpline(float DISTANCE, byte CoordinateSpace);// 0x3c81d40
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x3c81ca0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3c81bc0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3c81ad0
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x3c81970
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3c81880
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x3c817d0
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3c816e0
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3c81600
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3c81510
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3c81420
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x3c81380
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3c81290
	void ClearSplinePoints(bool bUpdateSpline);// 0x3c81200
	void AddSplineWorldPoint(out const Vector position);// 0x3c81160
	void AddSplinePointAtIndex(out const Vector position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x3c80ff0
	void AddSplinePoint(out const Vector position, byte CoordinateSpace, bool bUpdateSpline);// 0x3c80ed0
	void AddSplineLocalPoint(out const Vector position);// 0x3c80e40
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x3c80d40
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x3c80c30

--------------------------------
Class: WaterSplineCurveDefaults
	float DefaultDepth;//[Offset: 0x0, Size: 1]
	float DefaultWidth;//[Offset: 0x4, Size: 1]
	float DefaultVelocity;//[Offset: 0x8, Size: 1]
	float DefaultAudioIntensity;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SplineCurves
	InterpCurveVector position;//[Offset: 0x0, Size: 1]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 1]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 1]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 1]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 1]
	uint32 Version;//[Offset: 0x68, Size: 1]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 1]
	Quat OutVal;//[Offset: 0x10, Size: 1]
	Quat ArriveTangent;//[Offset: 0x20, Size: 1]
	Quat LeaveTangent;//[Offset: 0x30, Size: 1]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 1]
	float OutVal;//[Offset: 0x4, Size: 1]
	float ArriveTangent;//[Offset: 0x8, Size: 1]
	float LeaveTangent;//[Offset: 0xc, Size: 1]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 1]
	Vector position;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	Rotator Rotation;//[Offset: 0x28, Size: 1]
	Vector Scale;//[Offset: 0x34, Size: 1]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: WaterBodyIsland.Actor.Object
	WaterSplineComponent* SplineComp;//[Offset: 0x228, Size: 1]
	WaterSplineComponent* GetWaterSpline();// 0xd3e040

--------------------------------
Class: WaterBodyExclusionVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bIgnoreAllOverlappingWaterBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	WaterBody*[] WaterBodiesToIgnore;//[Offset: 0x270, Size: 1]

--------------------------------
Class: UnderwaterPostProcessSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Priority;//[Offset: 0x4, Size: 1]
	float BlendRadius;//[Offset: 0x8, Size: 1]
	float BlendWeight;//[Offset: 0xc, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x10, Size: 1]
	MaterialInterface* UnderwaterPostProcessMaterial;//[Offset: 0x570, Size: 1]

--------------------------------
Class: WaterCurveSettings
	bool bUseCurveChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	CurveFloat* ElevationCurveAsset;//[Offset: 0x8, Size: 1]
	float ChannelEdgeOffset;//[Offset: 0x10, Size: 1]
	float ChannelDepth;//[Offset: 0x14, Size: 1]
	float CurveRampWidth;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WaterSplineMetadata.SplineMetadata.Object
	InterpCurveFloat Depth;//[Offset: 0x28, Size: 1]
	InterpCurveFloat WaterVelocityScalar;//[Offset: 0x40, Size: 1]
	InterpCurveFloat RiverWidth;//[Offset: 0x58, Size: 1]
	InterpCurveFloat AudioIntensity;//[Offset: 0x70, Size: 1]
	InterpCurveVector WaterVelocity;//[Offset: 0x88, Size: 1]

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x220, Size: 1]
	Guid LandscapeGuid;//[Offset: 0x228, Size: 1]
	IntPoint LandscapeSectionOffset;//[Offset: 0x238, Size: 1]
	int MaxLODLevel;//[Offset: 0x240, Size: 1]
	float LODDistanceFactor;//[Offset: 0x244, Size: 1]
	byte LODFalloff;//[Offset: 0x248, Size: 1]
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x24c, Size: 1]
	float LOD0ScreenSize;//[Offset: 0x250, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x254, Size: 1]
	float LODDistributionSetting;//[Offset: 0x258, Size: 1]
	float TessellationComponentScreenSize;//[Offset: 0x25c, Size: 1]
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x264, Size: 1]
	int OccluderGeometryLOD;//[Offset: 0x268, Size: 1]
	int StaticLightingLOD;//[Offset: 0x26c, Size: 1]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x270, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x278, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x280, Size: 1]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2a8, Size: 1]
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x2b0, Size: 1]
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	byte MeshHolesMaxLod;//[Offset: 0x2c1, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2c8, Size: 1]
	int VirtualTextureNumLods;//[Offset: 0x2d8, Size: 1]
	int VirtualTextureLodBias;//[Offset: 0x2dc, Size: 1]
	enum VirtualTextureRenderPassType;//[Offset: 0x2e0, Size: 1]
	float NegativeZBoundsExtension;//[Offset: 0x2e4, Size: 1]
	float PositiveZBoundsExtension;//[Offset: 0x2e8, Size: 1]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x2f0, Size: 1]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x300, Size: 1]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x310, Size: 1]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	float StaticLightingResolution;//[Offset: 0x388, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x39d, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x3a4, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x3a8, Size: 1]
	float LDMaxDrawDistance;//[Offset: 0x3ac, Size: 1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3b0, Size: 1]
	int CollisionMipLevel;//[Offset: 0x3c8, Size: 1]
	int SimpleCollisionMipLevel;//[Offset: 0x3cc, Size: 1]
	float CollisionThickness;//[Offset: 0x3d0, Size: 1]
	BodyInstance BodyInstance;//[Offset: 0x3d8, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x534, Size: 1]
	int SubsectionSizeQuads;//[Offset: 0x538, Size: 1]
	int NumSubsections;//[Offset: 0x53c, Size: 1]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x540, Size: 1]
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x540, Size: 1]
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x545, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x546, Size: 1]
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x547, Size: 1]
	<Texture2D*,LandscapeWeightmapUsage*> WeightmapUsageMap;//[Offset: 0x548, Size: 1]
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x2f31130
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x2f31060
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x2f30f90
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0x2f30e70
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x11b8820
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0x2f30ae0
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0x2f30a50
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0x2f309c0
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0x2f30930
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x2f308a0
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x2f30810

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x450, Size: 1]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x460, Size: 1]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x470, Size: 1]
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x2f32c80

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x4e8, Size: 1]
	Vector SplineUpDir;//[Offset: 0x540, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x54c, Size: 1]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x550, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x560, Size: 1]
	float SplineBoundaryMax;//[Offset: 0x568, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56c, Size: 1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56c, Size: 1]
	byte ForwardAxis;//[Offset: 0x56d, Size: 1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x570, Size: 1]
	void UpdateMesh();// 0x3c8a0d0
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x3c89f40
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x3c89e70
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x3c89d90
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x3c89cb0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x3c89be0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x3c89a00
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x3c89920
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x3c89650
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x3c89570
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x3c894a0
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x3c893c0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x3c892e0
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x3c89210
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x3c89130
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x3c89050
	Vector GetStartTangent();// 0x3c88ea0
	Vector2D GetStartScale();// 0x3c88e60
	float GetStartRoll();// 0x3c88e30
	Vector GetStartPosition();// 0x3c88df0
	Vector2D GetStartOffset();// 0x3c88db0
	Vector GetSplineUpDir();// 0x3c88d70
	byte GetForwardAxis();// 0x3c88980
	Vector GetEndTangent();// 0x3c88940
	Vector2D GetEndScale();// 0x3c88900
	float GetEndRoll();// 0x3c888d0
	Vector GetEndPosition();// 0x3c88890
	Vector2D GetEndOffset();// 0x3c88850
	float GetBoundaryMin();// 0x3c88780
	float GetBoundaryMax();// 0x3c88750

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 1]
	Vector StartTangent;//[Offset: 0xc, Size: 1]
	Vector2D StartScale;//[Offset: 0x18, Size: 1]
	float StartRoll;//[Offset: 0x20, Size: 1]
	Vector2D StartOffset;//[Offset: 0x24, Size: 1]
	Vector EndPos;//[Offset: 0x2c, Size: 1]
	Vector2D EndScale;//[Offset: 0x38, Size: 1]
	Vector EndTangent;//[Offset: 0x40, Size: 1]
	float EndRoll;//[Offset: 0x4c, Size: 1]
	Vector2D EndOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 1]
	Rotator Rotation;//[Offset: 0x34, Size: 1]
	float Width;//[Offset: 0x40, Size: 1]
	float LayerWidthRatio;//[Offset: 0x44, Size: 1]
	float SideFalloff;//[Offset: 0x48, Size: 1]
	float LeftSideFalloffFactor;//[Offset: 0x4c, Size: 1]
	float RightSideFalloffFactor;//[Offset: 0x50, Size: 1]
	float LeftSideLayerFalloffFactor;//[Offset: 0x54, Size: 1]
	float RightSideLayerFalloffFactor;//[Offset: 0x58, Size: 1]
	float EndFalloff;//[Offset: 0x5c, Size: 1]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x60, Size: 1]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 1]
	Box Bounds;//[Offset: 0x80, Size: 1]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 1]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 2]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 1]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 1]
	Box Bounds;//[Offset: 0x80, Size: 1]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 1]
	float TangentLen;//[Offset: 0x8, Size: 1]
	FName SocketName;//[Offset: 0xc, Size: 1]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 1]
	Vector Left;//[Offset: 0xc, Size: 1]
	Vector Right;//[Offset: 0x18, Size: 1]
	Vector FalloffLeft;//[Offset: 0x24, Size: 1]
	Vector FalloffRight;//[Offset: 0x30, Size: 1]
	Vector LayerLeft;//[Offset: 0x3c, Size: 1]
	Vector LayerRight;//[Offset: 0x48, Size: 1]
	Vector LayerFalloffLeft;//[Offset: 0x54, Size: 1]
	Vector LayerFalloffRight;//[Offset: 0x60, Size: 1]
	float StartEndFalloff;//[Offset: 0x6c, Size: 1]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x4e0, Size: 1]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 1]
	int SizeY;//[Offset: 0x184, Size: 1]
	LinearColor ClearColor;//[Offset: 0x188, Size: 1]
	byte AddressX;//[Offset: 0x198, Size: 1]
	byte AddressY;//[Offset: 0x199, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19a, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19a, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19a, Size: 1]
	byte RenderTargetFormat;//[Offset: 0x19b, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	byte MipsSamplerFilter;//[Offset: 0x19d, Size: 1]
	byte MipsAddressU;//[Offset: 0x19e, Size: 1]
	byte MipsAddressV;//[Offset: 0x19f, Size: 1]
	byte OverrideFormat;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x178, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 1]
	float Hardness;//[Offset: 0x38, Size: 1]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x450, Size: 1]
	int SectionBaseY;//[Offset: 0x454, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x458, Size: 1]
	int SubsectionSizeQuads;//[Offset: 0x45c, Size: 1]
	int NumSubsections;//[Offset: 0x460, Size: 1]
	MaterialInterface* OverrideMaterial;//[Offset: 0x468, Size: 1]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x470, Size: 1]
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x478, Size: 1]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x488, Size: 1]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x498, Size: 1]
	int8[] LODIndexToMaterialIndex;//[Offset: 0x4a8, Size: 1]
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x4b8, Size: 1]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x4c8, Size: 1]
	Vector4 WeightmapScaleBias;//[Offset: 0x4d0, Size: 1]
	float WeightmapSubsectionOffset;//[Offset: 0x4e0, Size: 1]
	Vector4 HeightmapScaleBias;//[Offset: 0x4f0, Size: 1]
	Box CachedLocalBox;//[Offset: 0x500, Size: 1]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x51c, Size: 1]
	Texture2D* HeightmapTexture;//[Offset: 0x538, Size: 1]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x540, Size: 1]
	Texture2D*[] WeightmapTextures;//[Offset: 0x550, Size: 1]
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x560, Size: 1]
	Guid MapBuildDataId;//[Offset: 0x568, Size: 1]
	Guid[] IrrelevantLights;//[Offset: 0x578, Size: 1]
	int CollisionMipLevel;//[Offset: 0x588, Size: 1]
	int SimpleCollisionMipLevel;//[Offset: 0x58c, Size: 1]
	float NegativeZBoundsExtension;//[Offset: 0x590, Size: 1]
	float PositiveZBoundsExtension;//[Offset: 0x594, Size: 1]
	float StaticLightingResolution;//[Offset: 0x598, Size: 1]
	int ForcedLOD;//[Offset: 0x59c, Size: 1]
	int LODBias;//[Offset: 0x5a0, Size: 1]
	Guid StateId;//[Offset: 0x5a4, Size: 1]
	Guid BakedTextureMaterialGuid;//[Offset: 0x5b4, Size: 1]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x5c8, Size: 1]
	byte MobileBlendableLayerMask;//[Offset: 0x5d0, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x5d8, Size: 1]
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x5e0, Size: 1]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x5f0, Size: 1]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x2f2eee0
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x2f2ee00
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x2f2ed20

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x310, Size: 1]
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x3c1c420
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x3c1c2d0
	float K2_GetScalarParameterValue(FName ParameterName);// 0x3c1c180

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x450, Size: 1]
	int SectionBaseX;//[Offset: 0x460, Size: 1]
	int SectionBaseY;//[Offset: 0x464, Size: 1]
	int CollisionSizeQuads;//[Offset: 0x468, Size: 1]
	float CollisionScale;//[Offset: 0x46c, Size: 1]
	int SimpleCollisionSizeQuads;//[Offset: 0x470, Size: 1]
	byte[] CollisionQuadFlags;//[Offset: 0x478, Size: 1]
	Guid HeightfieldGuid;//[Offset: 0x488, Size: 1]
	Box CachedLocalBox;//[Offset: 0x498, Size: 1]
	LandscapeComponent* RenderComponent;//[Offset: 0x4b4, Size: 1]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x4e0, Size: 1]
	LandscapeComponent* GetRenderComponent();// 0x2f2ef80

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 1]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 1]

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x598, Size: 1]
	int NumBuiltInstances;//[Offset: 0x5a8, Size: 1]
	Box BuiltInstanceBounds;//[Offset: 0x5b0, Size: 1]
	Box UnbuiltInstanceBounds;//[Offset: 0x5cc, Size: 1]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x5e8, Size: 1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x600, Size: 1]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x604, Size: 1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	int InstanceCountToRender;//[Offset: 0x624, Size: 1]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x3b967a0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4e0, Size: 1]
	int NumCustomDataFloats;//[Offset: 0x4f0, Size: 1]
	float[] PerInstanceSMCustomData;//[Offset: 0x4f8, Size: 1]
	int InstancingRandomSeed;//[Offset: 0x508, Size: 1]
	int InstanceStartCullDistance;//[Offset: 0x50c, Size: 1]
	int InstanceEndCullDistance;//[Offset: 0x510, Size: 1]
	int[] InstanceReorderTable;//[Offset: 0x518, Size: 1]
	int NumPendingLightmaps;//[Offset: 0x570, Size: 1]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x578, Size: 1]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x3b9c290
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x3b9c130
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x3b9c060
	bool RemoveInstance(int InstanceIndex);// 0x3b9bfa0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x3b9b620
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x3b9b8b0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x3b9b780
	int GetInstanceCount();// 0x3b9b5f0
	void ClearInstances();// 0x3b9ad80
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x3b9ab80
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x3b9a930
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x3b9a710
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x3b9a7f0
	int AddInstance(out const Transform InstanceTransform);// 0x3b9a630

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 4]
	Guid LayerGuid;//[Offset: 0x48, Size: 1]

--------------------------------
Class: WaterBodyServerLandscapeReference
	byte LandscapeState;//[Offset: 0x0, Size: 1]
	Box LandscapeAABB;//[Offset: 0x4, Size: 1]
	Vector LandscapeCenter;//[Offset: 0x20, Size: 1]
	LandscapeProxy* LandscapeProxy;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CLSSpeedAtteunationOnSlope
	float SpeedAttenuationSlopeStartAngle;//[Offset: 0x0, Size: 1]
	float SpeedAttenuationSlopeEndAngle;//[Offset: 0x4, Size: 1]
	float SpeedAtteunationTotalValue;//[Offset: 0x8, Size: 1]
	float SprintInhibitionSlopeAngle;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CLSCharacterAnimInstance.AnimInstance.Object
	Character* Character;//[Offset: 0x2c8, Size: 1]
	CLSCharacter* CachedCLSCharacter;//[Offset: 0x2d0, Size: 1]
	float CurrentDeltaSeconds;//[Offset: 0x2d8, Size: 1]
	float ConstFloatOne;//[Offset: 0x2dc, Size: 1]
	float ConstFloatZero;//[Offset: 0x2e0, Size: 1]
	float SecondaryMotionAlpha;//[Offset: 0x2e4, Size: 1]
	enum CurrentMovementMode;//[Offset: 0x2e8, Size: 1]
	enum PrevMovementMode;//[Offset: 0x2e9, Size: 1]
	enum MovementAction;//[Offset: 0x2ea, Size: 1]
	enum WeaponAction;//[Offset: 0x2eb, Size: 1]
	enum RotationMode;//[Offset: 0x2ec, Size: 1]
	enum Gait;//[Offset: 0x2ed, Size: 1]
	enum Stance;//[Offset: 0x2ee, Size: 1]
	enum BattleStance;//[Offset: 0x2ef, Size: 1]
	enum ViewMode;//[Offset: 0x2f0, Size: 1]
	enum OverlayState;//[Offset: 0x2f1, Size: 1]
	enum PeekState;//[Offset: 0x2f2, Size: 1]
	bool bUsingFPCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 1]
	Rotator AimingRotation;//[Offset: 0x2f4, Size: 1]
	Rotator CDBoneAimingRotation;//[Offset: 0x300, Size: 1]
	Vector Velocity;//[Offset: 0x30c, Size: 1]
	Vector RelativeVelocityDirection;//[Offset: 0x318, Size: 1]
	Vector Acceleration;//[Offset: 0x324, Size: 1]
	Vector MovementInput;//[Offset: 0x330, Size: 1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	bool bHasMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 1]
	float Speed;//[Offset: 0x340, Size: 1]
	float MovementInputAmount;//[Offset: 0x344, Size: 1]
	float AimYawRate;//[Offset: 0x348, Size: 1]
	float ZoomAmount;//[Offset: 0x34c, Size: 1]
	bool bIsUsingProneOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float StandToCrouchAnimRate;//[Offset: 0x354, Size: 1]
	float StandToProneAnimRate;//[Offset: 0x358, Size: 1]
	float CrouchToStandAnimRate;//[Offset: 0x35c, Size: 1]
	float CrouchToProneAnimRate;//[Offset: 0x360, Size: 1]
	float ProneToStandAnimRate;//[Offset: 0x364, Size: 1]
	float ProneToCrouchAnimRate;//[Offset: 0x368, Size: 1]
	enum AdditionalMainState;//[Offset: 0x36c, Size: 1]
	byte AdditionalSubState;//[Offset: 0x36d, Size: 1]
	enum MovementDirection;//[Offset: 0x36e, Size: 1]
	enum TrackedHipDirection;//[Offset: 0x36f, Size: 1]
	Vector RelativeAccelerationAmount;//[Offset: 0x370, Size: 1]
	bool bShouldMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool bRotate_L;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	bool bRotate_R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e, Size: 1]
	bool bPivot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37f, Size: 1]
	bool bSkipFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool bSkipHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	bool bStopLookAndIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 1]
	bool bStopFootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 1]
	float RotateOffset;//[Offset: 0x384, Size: 1]
	float RotateDistance;//[Offset: 0x388, Size: 1]
	float RotateRate;//[Offset: 0x38c, Size: 1]
	float RotationScale;//[Offset: 0x390, Size: 1]
	float DiagonalScaleAmount;//[Offset: 0x394, Size: 1]
	float WalkRunBlend;//[Offset: 0x398, Size: 1]
	float StandingPlayRate;//[Offset: 0x39c, Size: 1]
	float CrouchingPlayRate;//[Offset: 0x3a0, Size: 1]
	float PronePlayRate;//[Offset: 0x3a4, Size: 1]
	float SwimPlayRate;//[Offset: 0x3a8, Size: 1]
	float StrideBlend;//[Offset: 0x3ac, Size: 1]
	float CrouchingStrideBlend;//[Offset: 0x3b0, Size: 1]
	CLSVelocityBlend VelocityBlend;//[Offset: 0x3b4, Size: 1]
	CLSLeanAmount LeanAmount;//[Offset: 0x3c4, Size: 1]
	float FYaw;//[Offset: 0x3cc, Size: 1]
	float BYaw;//[Offset: 0x3d0, Size: 1]
	float LYaw;//[Offset: 0x3d4, Size: 1]
	float RYaw;//[Offset: 0x3d8, Size: 1]
	enum VehicleType;//[Offset: 0x3dc, Size: 1]
	enum VehicleSeatType;//[Offset: 0x3dd, Size: 1]
	float VehicleMovingDirectionForwardRatio;//[Offset: 0x3e0, Size: 1]
	float VehicleMovingDirectionRightRatio;//[Offset: 0x3e4, Size: 1]
	bool bVehicleInvalidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	Rotator PeekLeftRotation;//[Offset: 0x3ec, Size: 1]
	Rotator PeekRightRotation;//[Offset: 0x3f8, Size: 1]
	float PeekLeftWeight;//[Offset: 0x404, Size: 1]
	float PeekRightWeight;//[Offset: 0x408, Size: 1]
	bool bJumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	float JumpPlayRate;//[Offset: 0x410, Size: 1]
	float FallSpeed;//[Offset: 0x414, Size: 1]
	float LandPrediction;//[Offset: 0x418, Size: 1]
	float SwimImmersionDepth;//[Offset: 0x41c, Size: 1]
	float SwimPelvisAdjust;//[Offset: 0x420, Size: 1]
	float SwimPelvisPitch;//[Offset: 0x424, Size: 1]
	Vector2D SkyDivingInput;//[Offset: 0x428, Size: 1]
	float SkyDivingRoll;//[Offset: 0x430, Size: 1]
	Rotator SmoothedAimingRotation;//[Offset: 0x434, Size: 1]
	Rotator SpineRotation;//[Offset: 0x440, Size: 1]
	Vector2D AimingAngle;//[Offset: 0x44c, Size: 1]
	Vector2D SmoothedAimingAngle;//[Offset: 0x454, Size: 1]
	Vector2D AimOffsetAngle;//[Offset: 0x45c, Size: 1]
	Vector2D VehicleWeaponAimOffsetAngle;//[Offset: 0x464, Size: 1]
	float AimSweepTime;//[Offset: 0x46c, Size: 1]
	float InputYawOffsetTime;//[Offset: 0x470, Size: 1]
	float ForwardYawTime;//[Offset: 0x474, Size: 1]
	float LeftYawTime;//[Offset: 0x478, Size: 1]
	float RightYawTime;//[Offset: 0x47c, Size: 1]
	float Enable_SecondarySight;//[Offset: 0x480, Size: 1]
	Vector CDBoneModificationBySituation;//[Offset: 0x484, Size: 1]
	float LadderStepHeight;//[Offset: 0x490, Size: 1]
	float LadderStepPosition;//[Offset: 0x494, Size: 1]
	enum LadderState;//[Offset: 0x498, Size: 1]
	bool bIsAliving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	enum AlivingStance;//[Offset: 0x49a, Size: 1]
	bool bIsUpSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b, Size: 1]
	float SlopePoseBlendingAlpha;//[Offset: 0x49c, Size: 1]
	float FlailRate;//[Offset: 0x4a0, Size: 1]
	int OverlayOverrideState;//[Offset: 0x4a4, Size: 1]
	float Enable_AimOffset;//[Offset: 0x4a8, Size: 1]
	float Enable_AfterAimOffsetL;//[Offset: 0x4ac, Size: 1]
	float Enable_AfterAimOffsetR;//[Offset: 0x4b0, Size: 1]
	float BasePose_Stand;//[Offset: 0x4b4, Size: 1]
	float BasePose_Crouch;//[Offset: 0x4b8, Size: 1]
	float BasePose_Prone;//[Offset: 0x4bc, Size: 1]
	float Arm_L;//[Offset: 0x4c0, Size: 1]
	float Arm_L_Add;//[Offset: 0x4c4, Size: 1]
	float Arm_L_LS;//[Offset: 0x4c8, Size: 1]
	float Arm_L_MS;//[Offset: 0x4cc, Size: 1]
	float Arm_R;//[Offset: 0x4d0, Size: 1]
	float Arm_R_Add;//[Offset: 0x4d4, Size: 1]
	float Arm_R_LS;//[Offset: 0x4d8, Size: 1]
	float Arm_R_MS;//[Offset: 0x4dc, Size: 1]
	float hand_l;//[Offset: 0x4e0, Size: 1]
	float hand_r;//[Offset: 0x4e4, Size: 1]
	float Legs;//[Offset: 0x4e8, Size: 1]
	float Legs_Add;//[Offset: 0x4ec, Size: 1]
	float Pelvis;//[Offset: 0x4f0, Size: 1]
	float Pelvis_Add;//[Offset: 0x4f4, Size: 1]
	float Spine;//[Offset: 0x4f8, Size: 1]
	float Spine_Add;//[Offset: 0x4fc, Size: 1]
	float Head;//[Offset: 0x500, Size: 1]
	float Head_Add;//[Offset: 0x504, Size: 1]
	float Enable_GripIK_L;//[Offset: 0x508, Size: 1]
	float Enable_GripIK_R;//[Offset: 0x50c, Size: 1]
	int GripIKLFindPriorityIndex;//[Offset: 0x510, Size: 1]
	float Enable_HandIK_L;//[Offset: 0x514, Size: 1]
	float Enable_HandIK_R;//[Offset: 0x518, Size: 1]
	float Enable_TargetIK_L;//[Offset: 0x51c, Size: 1]
	float Enable_TargetIK_R;//[Offset: 0x520, Size: 1]
	float Enable_HandsFollowToHead;//[Offset: 0x524, Size: 1]
	float Enable_HandLFollowToHead;//[Offset: 0x528, Size: 1]
	float Arm_L_Overwrite;//[Offset: 0x52c, Size: 1]
	Transform LeftHandIK;//[Offset: 0x530, Size: 1]
	Transform RightHandIK;//[Offset: 0x560, Size: 1]
	bool bLeftValidHandIKTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool bRightValidHandIKTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
	float Enable_GripPose_L;//[Offset: 0x594, Size: 1]
	float Enable_GripPose_R;//[Offset: 0x598, Size: 1]
	Rotator LastUpdatedRotation;//[Offset: 0x59c, Size: 1]
	float FootLock_L_Alpha;//[Offset: 0x5a8, Size: 1]
	float FootLock_R_Alpha;//[Offset: 0x5ac, Size: 1]
	Vector FootLock_L_Location;//[Offset: 0x5b0, Size: 1]
	Vector FootLock_R_Location;//[Offset: 0x5bc, Size: 1]
	Rotator FootLock_L_Rotation;//[Offset: 0x5c8, Size: 1]
	Rotator FootLock_R_Rotation;//[Offset: 0x5d4, Size: 1]
	Vector FootOffset_L_Location;//[Offset: 0x5e0, Size: 1]
	Vector FootOffset_R_Location;//[Offset: 0x5ec, Size: 1]
	Rotator FootOffset_L_Rotation;//[Offset: 0x5f8, Size: 1]
	Rotator FootOffset_R_Rotation;//[Offset: 0x604, Size: 1]
	Vector PelvisOffset;//[Offset: 0x610, Size: 1]
	Vector PelvisTranslation;//[Offset: 0x61c, Size: 1]
	float PelvisAlpha;//[Offset: 0x628, Size: 1]
	Vector ProneNormal_Pelvis;//[Offset: 0x62c, Size: 1]
	Vector ProneOffset_Pelvis;//[Offset: 0x638, Size: 1]
	Vector ProneOffset_Spine;//[Offset: 0x644, Size: 1]
	Vector ProneOffset_Calf_L;//[Offset: 0x650, Size: 1]
	Vector ProneOffset_Calf_R;//[Offset: 0x65c, Size: 1]
	CLSCharacterAimBobInfo AimBobInfo;//[Offset: 0x668, Size: 1]
	float AimBobAlpha;//[Offset: 0x698, Size: 1]
	float AimBobStartRatio;//[Offset: 0x69c, Size: 1]
	float AimBobPlayRate;//[Offset: 0x6a0, Size: 1]
	float AimBobElapsed;//[Offset: 0x6a4, Size: 1]
	float TurnCheckMinAngle;//[Offset: 0x6a8, Size: 1]
	float Turn180Threshold;//[Offset: 0x6ac, Size: 1]
	float AimYawRateLimit;//[Offset: 0x6b0, Size: 1]
	float ElapsedDelayTime;//[Offset: 0x6b4, Size: 1]
	float MinAngleDelay;//[Offset: 0x6b8, Size: 1]
	float MaxAngleDelay;//[Offset: 0x6bc, Size: 1]
	bool bIsBlendingNoOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	CLSTurnInPlaceAsset Stand_TurnIP_L90;//[Offset: 0x6c8, Size: 1]
	CLSTurnInPlaceAsset Stand_TurnIP_R90;//[Offset: 0x6e8, Size: 1]
	CLSTurnInPlaceAsset Stand_TurnIP_L180;//[Offset: 0x708, Size: 1]
	CLSTurnInPlaceAsset Stand_TurnIP_R180;//[Offset: 0x728, Size: 1]
	CLSTurnInPlaceAsset Crouch_TurnIP_L90;//[Offset: 0x748, Size: 1]
	CLSTurnInPlaceAsset Crouch_TurnIP_R90;//[Offset: 0x768, Size: 1]
	CLSTurnInPlaceAsset Crouch_TurnIP_L180;//[Offset: 0x788, Size: 1]
	CLSTurnInPlaceAsset Crouch_TurnIP_R180;//[Offset: 0x7a8, Size: 1]
	float RotateMinThreshold;//[Offset: 0x7c8, Size: 1]
	float RotateMaxThreshold;//[Offset: 0x7cc, Size: 1]
	float AimYawRateMinRange;//[Offset: 0x7d0, Size: 1]
	float AimYawRateMaxRange;//[Offset: 0x7d4, Size: 1]
	float MinPlayRate;//[Offset: 0x7d8, Size: 1]
	float MaxPlayRate;//[Offset: 0x7dc, Size: 1]
	CurveFloat* DiagonalScaleAmountCurve;//[Offset: 0x7e0, Size: 1]
	CurveFloat* StrideBlend_Stand_Walk;//[Offset: 0x7e8, Size: 1]
	CurveFloat* StrideBlend_Stand_Run;//[Offset: 0x7f0, Size: 1]
	CurveFloat* StrideBlend_Crouch_Walk;//[Offset: 0x7f8, Size: 1]
	CurveFloat* StrideBlend_Crouch_Run;//[Offset: 0x800, Size: 1]
	CurveFloat* StrideBlend_Prone_Walk;//[Offset: 0x808, Size: 1]
	CurveFloat* LandPredictionCurve;//[Offset: 0x810, Size: 1]
	CurveFloat* LeanInAirCurve;//[Offset: 0x818, Size: 1]
	CurveVector* YawOffset_FB;//[Offset: 0x820, Size: 1]
	CurveVector* YawOffset_LR;//[Offset: 0x828, Size: 1]
	float AnimatedWalkSpeed;//[Offset: 0x830, Size: 1]
	float AnimatedRunSpeed;//[Offset: 0x834, Size: 1]
	float AnimatedSprintSpeed;//[Offset: 0x838, Size: 1]
	float AnimatedCrouchWalkSpeed;//[Offset: 0x83c, Size: 1]
	float AnimatedCrouchRunSpeed;//[Offset: 0x840, Size: 1]
	float AnimatedCrouchSprintSpeed;//[Offset: 0x844, Size: 1]
	float AnimatedProneSpeed;//[Offset: 0x848, Size: 1]
	float AnimatedProneWalkSpeed;//[Offset: 0x84c, Size: 1]
	float AnimatedSwimSpeed;//[Offset: 0x850, Size: 1]
	float AnimatedSwimSprintSpeed;//[Offset: 0x854, Size: 1]
	float VelocityBlendInterpSpeed;//[Offset: 0x858, Size: 1]
	float GroundedLeanInterpSpeed;//[Offset: 0x85c, Size: 1]
	float InAirLeanInterpSpeed;//[Offset: 0x860, Size: 1]
	float VehicleLeanInterpSpeed;//[Offset: 0x864, Size: 1]
	float SmoothedAimingRotationInterpSpeed;//[Offset: 0x868, Size: 1]
	float InputYawOffsetInterpSpeed;//[Offset: 0x86c, Size: 1]
	float TriggerPivotSpeedLimit;//[Offset: 0x870, Size: 1]
	float FootHeight;//[Offset: 0x874, Size: 1]
	float IK_TraceDistanceAboveFoot;//[Offset: 0x878, Size: 1]
	float IK_TraceDistanceBelowFoot;//[Offset: 0x87c, Size: 1]
	float IK_TraceDistanceBelowFootOnProne;//[Offset: 0x880, Size: 1]
	float PelvisDownwardTraceDistance;//[Offset: 0x884, Size: 1]
	float PelvisOffsetLerpSpeed;//[Offset: 0x888, Size: 1]
	bool bCanPlayDynamicTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 1]
	CLSGroundPose GroundPose;//[Offset: 0x890, Size: 1]
	CLSVehiclePose VehiclePose;//[Offset: 0x8e8, Size: 1]
	CLSGripPose GripPose;//[Offset: 0x910, Size: 1]
	AnimSequenceBase* AnimOnStandStopR;//[Offset: 0x920, Size: 1]
	AnimSequenceBase* AnimOnStandStopL;//[Offset: 0x928, Size: 1]
	AnimSequenceBase* AnimOnCrouchStop;//[Offset: 0x930, Size: 1]
	AnimSequenceBase* AnimOnStandQuickStop;//[Offset: 0x938, Size: 1]
	AnimSequenceBase* AnimOnRollToIdle;//[Offset: 0x940, Size: 1]
	AnimSequenceBase* AnimOnLandToIdle;//[Offset: 0x948, Size: 1]
	AnimSequenceBase* AnimOnRelaxedToReady;//[Offset: 0x950, Size: 1]
	AnimSequenceBase* AnimOnReadyToRelaxed;//[Offset: 0x958, Size: 1]
	AnimSequenceBase* AnimOnBowRelaxedToReady;//[Offset: 0x960, Size: 1]
	AnimSequenceBase* AnimOnBowReadyToRelaxed;//[Offset: 0x968, Size: 1]
	AnimSequenceBase* AnimOnM4A1RelaxedToReady;//[Offset: 0x970, Size: 1]
	AnimSequenceBase* AnimOnM4A1ReadyToRelaxed;//[Offset: 0x978, Size: 1]
	AnimSequenceBase* AnimOnPistol1HRelaxedToReady;//[Offset: 0x980, Size: 1]
	AnimSequenceBase* AnimOnPistol1HReadyToRelaxed;//[Offset: 0x988, Size: 1]
	AnimSequenceBase* AnimOnPistol2HRelaxedToReady;//[Offset: 0x990, Size: 1]
	AnimSequenceBase* AnimOnPistol2HReadyToRelaxed;//[Offset: 0x998, Size: 1]
	AnimSequenceBase* AnimOnTransitionR;//[Offset: 0x9a0, Size: 1]
	AnimSequenceBase* AnimOnTransitionL;//[Offset: 0x9a8, Size: 1]
	<enum,AnimSequence*> DamageAnimations;//[Offset: 0x9b0, Size: 1]
	float DamageAnimRemainingTime;//[Offset: 0xa00, Size: 1]
	float DamageAnimAdditiveAlpha;//[Offset: 0xa04, Size: 1]
	float StandRelaxedPauseTime;//[Offset: 0xa08, Size: 1]
	float StandRelaxedUpSlopePauseTime;//[Offset: 0xa0c, Size: 1]
	float StandRelaxedDownSlopePauseTime;//[Offset: 0xa10, Size: 1]
	float StandRelaxedMovingPauseTime;//[Offset: 0xa14, Size: 1]
	float StandReadyPauseTime;//[Offset: 0xa18, Size: 1]
	float StandReadyMovingPauseTime;//[Offset: 0xa1c, Size: 1]
	float StandBattlePauseTime;//[Offset: 0xa20, Size: 1]
	float StandBattleUpSlopePauseTime;//[Offset: 0xa24, Size: 1]
	float StandBattleDownSlopePauseTime;//[Offset: 0xa28, Size: 1]
	float StandBattleMovingPauseTime;//[Offset: 0xa2c, Size: 1]
	float StandAimPauseTime;//[Offset: 0xa30, Size: 1]
	float StandAimMovingPauseTime;//[Offset: 0xa34, Size: 1]
	float StandSprintPauseTime;//[Offset: 0xa38, Size: 1]
	float CrouchRelaxedPauseTime;//[Offset: 0xa3c, Size: 1]
	float CrouchRelaxedUpSlopePauseTime;//[Offset: 0xa40, Size: 1]
	float CrouchRelaxedDownSlopePauseTime;//[Offset: 0xa44, Size: 1]
	float CrouchRelaxedMovingPauseTime;//[Offset: 0xa48, Size: 1]
	float CrouchReadyPauseTime;//[Offset: 0xa4c, Size: 1]
	float CrouchReadyMovingPauseTime;//[Offset: 0xa50, Size: 1]
	float CrouchBattlePauseTime;//[Offset: 0xa54, Size: 1]
	float CrouchBattleUpSlopePauseTime;//[Offset: 0xa58, Size: 1]
	float CrouchBattleDownSlopePauseTime;//[Offset: 0xa5c, Size: 1]
	float CrouchBattleMovingPauseTime;//[Offset: 0xa60, Size: 1]
	float CrouchAimPauseTime;//[Offset: 0xa64, Size: 1]
	float CrouchAimMovingPauseTime;//[Offset: 0xa68, Size: 1]
	float ProneRelaxedPauseTime;//[Offset: 0xa6c, Size: 1]
	float ProneRelaxedMovingPauseTime;//[Offset: 0xa70, Size: 1]
	float ProneReadyPauseTime;//[Offset: 0xa74, Size: 1]
	float ProneReadyMovingPauseTime;//[Offset: 0xa78, Size: 1]
	float ProneBattlePauseTime;//[Offset: 0xa7c, Size: 1]
	float ProneBattleMovingPauseTime;//[Offset: 0xa80, Size: 1]
	float ProneAimPauseTime;//[Offset: 0xa84, Size: 1]
	float ProneAimMovingPauseTime;//[Offset: 0xa88, Size: 1]
	float FallingPauseTime;//[Offset: 0xa8c, Size: 1]
	float LandPredictionPauseTime;//[Offset: 0xa90, Size: 1]
	float FallingBattlePauseTime;//[Offset: 0xa94, Size: 1]
	float LandPredictionBattlePauseTime;//[Offset: 0xa98, Size: 1]
	float VaultLowPauseTime;//[Offset: 0xa9c, Size: 1]
	float VaultHighPauseTime;//[Offset: 0xaa0, Size: 1]
	float GetUpDefaultPauseTime;//[Offset: 0xaa4, Size: 1]
	float GetUpInjuredPauseTime;//[Offset: 0xaa8, Size: 1]
	float VehicleBoardingPauseTime;//[Offset: 0xaac, Size: 1]
	float OnVehiclePauseTime;//[Offset: 0xab0, Size: 1]
	float OnVehicleBattlePauseTime;//[Offset: 0xab4, Size: 1]
	float OnHellicopterBattlePauseTime;//[Offset: 0xab8, Size: 1]
	float VehicleRelaxedPauseTime;//[Offset: 0xabc, Size: 1]
	float VehicleBattlePauseTime;//[Offset: 0xac0, Size: 1]
	bool EqualBattleStance_Relaxed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 1]
	bool EqualBattleStance_Ready;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac5, Size: 1]
	bool EqualBattleStance_Directed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac6, Size: 1]
	bool EqualBattleStance_Aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac7, Size: 1]
	bool EqualOrMoreBattleStance_Relaxed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 1]
	bool EqualOrMoreBattleStance_Ready;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac9, Size: 1]
	bool EqualOrMoreBattleStance_Directed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaca, Size: 1]
	bool EqualOrMoreBattleStance_Aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacb, Size: 1]
	bool EqualOrLessBattleStance_Relaxed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacc, Size: 1]
	bool EqualOrLessBattleStance_Ready;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacd, Size: 1]
	bool EqualOrLessBattleStance_Directed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xace, Size: 1]
	bool EqualOrLessBattleStance_Aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacf, Size: 1]
	bool EqualOrMoreBattleStance_Drected_OnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 1]
	bool EqualOverlayState_Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad1, Size: 1]
	bool EqualOverlayState_Rifle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad2, Size: 1]
	bool EqualOverlayState_HandGun1H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad3, Size: 1]
	bool EqualOverlayState_HandGun2H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad4, Size: 1]
	bool EqualOverlayState_Melee1H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad5, Size: 1]
	bool EqualOverlayState_Melee2H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad6, Size: 1]
	bool EqualOverlayState_Item1H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad7, Size: 1]
	bool EqualOverlayState_Item2H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	bool EqualOverlayState_VehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 1]
	bool EqualOverlayState_NotLayering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xada, Size: 1]
	bool NotOverlayState_Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadb, Size: 1]
	bool NotOverlayState_Rifle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 1]
	bool NotOverlayState_HandGun1H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadd, Size: 1]
	bool NotOverlayState_HandGun2H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xade, Size: 1]
	bool NotOverlayState_Melee1H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadf, Size: 1]
	bool NotOverlayState_Melee2H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 1]
	bool NotOverlayState_Item1H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae1, Size: 1]
	bool NotOverlayState_Item2H;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae2, Size: 1]
	bool NotOverlayState_VehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae3, Size: 1]
	bool NotOverlayState_NotLayering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae4, Size: 1]
	bool UseOverlayState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae5, Size: 1]
	CLSLadderAnimSet LaddAnimSet;//[Offset: 0xae8, Size: 1]
	enum HitPart;//[Offset: 0xbd8, Size: 1]
	AnimSequence* LastDamagedAnimation;//[Offset: 0xbe0, Size: 1]
	enum HitDirection;//[Offset: 0xbe8, Size: 1]
	bool HitPartAgain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe9, Size: 1]
	float HoldBreathUpTime;//[Offset: 0xbec, Size: 1]
	float HoldBreathDownTime;//[Offset: 0xbf0, Size: 1]
	CLSLeanAmount PrevVehicleLeanAmmount;//[Offset: 0xbf4, Size: 1]
	bool bUseSimpleAnimPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbfc, Size: 1]
	bool bLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbfd, Size: 1]
	void TraceVerticalOffset(FName SocketName, out Vector InOutOffset, out Vector OutNormal, float OriginalHeight);// 0xd01ac0
	void Latent_StopLookAndIK();// 0xd01aa0
	void Latent_StopFootLock();// 0xd01a80
	void Latent_OnPlayDynamicTransition();// 0xd01a60
	void Latent_OnJumped();// 0xd01a40
	void Latent_OnAnimNotifyPivot();// 0xd01a20
	bool IsSwimMoving(float MinOnSurface, float MinOnUnderWater);// 0xd01940
	bool IsOwnFPCamActive();// 0xd01910
	bool IsEqualOrMoreBattleStance(enum CheckStance);// 0xd01880
	bool IsEqualOrLessBattleStance(enum CheckStance);// 0xd017f0
	bool IsEqualBattleStance(enum CheckStance);// 0xd01760
	bool IsAimThrowableMelee();// 0xd01730
	bool IsAimSecondarySight();// 0xd01700
	Vector InterpOffset(Vector InCurrent, Vector InTarget, float DeltaSeconds, float InterpSpeed);// 0xd01540
	float GetSwimDirection(float MinOnSurface, float MinOnUnderWater);// 0xd01460
	float GetSecondaryMotionAlpha(float InAlpha);// 0xd013c0
	CLSLadderAnimSet GetLadderAnimSet();// 0xd01310
	CLSPoseExplicit GetExplicitVehicle(bool bIsBattle);// 0xd01270
	CLSPoseExplicit GetExplicitGround(enum PoseType);// 0xd011d0
	BlendSpaceBase* GetDriverAO();// 0xd011a0
	BlendSpaceBase* GetAimOffsetVehicle(bool bIsBattle);// 0xd01100
	BlendSpaceBase* GetAimOffsetStand();// 0xca8260
	BlendSpaceBase* GetAimOffsetProne();// 0xca8260
	Vector2D GetAimOffsetAngle();// 0xd010c0
	void AnimNotify_StopTransition();// 0xd010a0
	void AnimNotify_StandStopR();// 0xd01080
	void AnimNotify_StandStopL();// 0xd01060
	void AnimNotify_StandQuickStop();// 0xd01040
	void AnimNotify_RollToIdle();// 0xd01020
	void AnimNotify_ResetGroundedEntryState();// 0xca8430
	void AnimNotify_RelaxedToReady();// 0xd01000
	void AnimNotify_Pivot();// 0xd00fe0
	void AnimNotify_Pistol2HRelaxedToReady();// 0xd00fc0
	void AnimNotify_Pistol2HReadyToRelaxed();// 0xd00fa0
	void AnimNotify_Pistol1HRelaxedToReady();// 0xd00f80
	void AnimNotify_Pistol1HReadyToRelaxed();// 0xd00f60
	void AnimNotify_M4A1RelaxedToReady();// 0xd00f40
	void AnimNotify_M4A1ReadyToRelaxed();// 0xd00f20
	void AnimNotify_LandToIdle();// 0xd00f00
	void AnimNotify_HipsRF();// 0xd00ee0
	void AnimNotify_HipsRB();// 0xd00ec0
	void AnimNotify_HipsLF();// 0xd00ea0
	void AnimNotify_HipsLB();// 0xd00e80
	void AnimNotify_HipsF();// 0xd00e60
	void AnimNotify_HipsB();// 0xd00e40
	void AnimNotify_DamageAnimationSwitcher();// 0xd00e20
	void AnimNotify_DamageAnimationEnd();// 0xd00e00
	void AnimNotify_CrouchStop();// 0xd00de0
	void AnimNotify_BowRelaxedToReady();// 0xd00dc0
	void AnimNotify_BowReadyToRelaxed();// 0xd00da0
	void AnimNotify_BlendOutNoOffset();// 0xd00d80
	void AnimNotify_BlendInNoOffset();// 0xd00d60
	void AnimNoitfy_ReadyToRelaxed();// 0xd00d40

--------------------------------
Class: CLSLadderAnimSet
	CLSAnimation LadderBottomEnter;//[Offset: 0x0, Size: 1]
	CLSAnimation LadderBottomExit;//[Offset: 0x20, Size: 1]
	CLSAnimation LadderTopEnter;//[Offset: 0x40, Size: 1]
	CLSAnimation LadderTopExit;//[Offset: 0x60, Size: 1]
	CLSAnimation LadderIdle;//[Offset: 0x80, Size: 1]
	CLSAnimation LadderUp;//[Offset: 0xa0, Size: 1]
	CLSAnimation LadderDown;//[Offset: 0xc0, Size: 1]
	AnimSequence* NoRootMotionLadderUp;//[Offset: 0xe0, Size: 1]
	AnimSequence* NoRootMotionLadderDown;//[Offset: 0xe8, Size: 1]

--------------------------------
Class: CLSAnimation
	AnimMontage* TP;//[Offset: 0x0, Size: 1]
	AnimMontage* FP;//[Offset: 0x8, Size: 1]
	AnimMontage* TP_Prone;//[Offset: 0x10, Size: 1]
	AnimMontage* FP_Prone;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CLSPoseExplicit
	AnimSequenceBase* Anim;//[Offset: 0x0, Size: 1]
	float ExplicitTime;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float AnimLength;//[Offset: 0x8c, Size: 1]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 3]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 1]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 1]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 1]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 1]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 1]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 3]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 1]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 1]
	Vector SampleValue;//[Offset: 0x8, Size: 1]
	float RateScale;//[Offset: 0x14, Size: 1]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 3]
	float Weights;//[Offset: 0xc, Size: 3]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 1]
	float Min;//[Offset: 0x10, Size: 1]
	float Max;//[Offset: 0x14, Size: 1]
	int GridNum;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CLSVelocityBlend
	float F;//[Offset: 0x0, Size: 1]
	float B;//[Offset: 0x4, Size: 1]
	float L;//[Offset: 0x8, Size: 1]
	float R;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CLSLeanAmount
	float LR;//[Offset: 0x0, Size: 1]
	float FB;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CLSCharacterAimBobInfo
	float AlphaBasis;//[Offset: 0x0, Size: 1]
	float AlphaStand;//[Offset: 0x4, Size: 1]
	float AlphaCrouch;//[Offset: 0x8, Size: 1]
	float AlphaProne;//[Offset: 0xc, Size: 1]
	float CycleSpeed;//[Offset: 0x10, Size: 1]
	CurveFloat* HoldBreathDownSpeedCurve;//[Offset: 0x18, Size: 1]
	CurveFloat* HoldBreathUpSpeedCurve;//[Offset: 0x20, Size: 1]
	Vector2D PlayRateMinMax;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CLSTurnInPlaceAsset
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 1]
	float AnimatedAngle;//[Offset: 0x8, Size: 1]
	FName SlotName;//[Offset: 0xc, Size: 1]
	float PlayRate;//[Offset: 0x14, Size: 1]
	bool bScaleTurnAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: CLSGroundPose
	AnimSequenceBase* BasePose;//[Offset: 0x0, Size: 1]
	<enum,int> PoseFrameMap;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CLSVehiclePose
	BlendSpaceBase* DriverAO;//[Offset: 0x0, Size: 1]
	AnimSequenceBase* BasePose;//[Offset: 0x8, Size: 1]
	int RelaxedFrameIndex;//[Offset: 0x10, Size: 1]
	int BattleFrameIndex;//[Offset: 0x14, Size: 1]
	BlendSpaceBase* AimOffsetRelaxed;//[Offset: 0x18, Size: 1]
	BlendSpaceBase* AimOffsetBattle;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CLSGripPose
	AnimSequence* TP;//[Offset: 0x0, Size: 1]
	AnimSequence* FP;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWeaponLobby.CrowWeaponBase.CrowEquipmentBase.CrowItemMesh.CrowItemBase.Actor.Object

--------------------------------
Class: CrowWeaponBase.CrowEquipmentBase.CrowItemMesh.CrowItemBase.Actor.Object
	bool bVisibleInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	CrowWeaponData WeaponData;//[Offset: 0x358, Size: 1]
	enum WeaponKeyFlags;//[Offset: 0x4c0, Size: 1]
	CrowWeaponAccData WeaponAccData;//[Offset: 0x4c8, Size: 1]
	CrowWeaponData ClientWeaponData;//[Offset: 0x580, Size: 1]
	CrowWeaponAccData ClientWeaponAccData;//[Offset: 0x6e8, Size: 1]
	TimerHandle LimitHoldBreath;//[Offset: 0x7a0, Size: 1]
	TimerHandle HoldBreathCoolTimeHandle;//[Offset: 0x7a8, Size: 1]
	CrowWeaponModel* WeaponModelFirst;//[Offset: 0x7b0, Size: 1]
	CrowWeaponModel* WeaponModelThird;//[Offset: 0x7b8, Size: 1]
	CrowWeaponSpreadComponent* SpreadComponent;//[Offset: 0x7c0, Size: 1]
	CrowWeaponRecoilComponent* RecoilComponent;//[Offset: 0x7c8, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x7d0, Size: 1]
	Controller* Controller;//[Offset: 0x7d8, Size: 1]
	Pawn* WeaponOwner;//[Offset: 0x7e0, Size: 1]
	CrowAimComponentBase* AimComponent;//[Offset: 0x7e8, Size: 1]
	CrowWeaponCrosshairBase* crosshairWidget;//[Offset: 0x7f0, Size: 1]
	CrowGameInvenComponent* GameInventory;//[Offset: 0x7f8, Size: 1]
	MaterialParameterCollectionInstance* MPCWeaponFOVInstance;//[Offset: 0x800, Size: 1]
	class CrowProjectileBase* ProjectileClass;//[Offset: 0x808, Size: 1]
	CrowCharacterPawn* CharacterOwner;//[Offset: 0x810, Size: 1]
	CrowWeaponStateBase*[] WeaponStateArray;//[Offset: 0x818, Size: 1]
	CrowWeaponStateBase* WeaponStateCurrent;//[Offset: 0x828, Size: 1]
	CrowWeaponStateReload* WeaponStateReload;//[Offset: 0x830, Size: 1]
	CrowWeaponSubStateBase* WeaponSubStateFire;//[Offset: 0x838, Size: 1]
	CrowWeaponSubStateAim* WeaponSubStateAim;//[Offset: 0x840, Size: 1]
	bool bIsFirstPerson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	enum WeaponState;//[Offset: 0x849, Size: 1]
	enum SpawnType;//[Offset: 0x84a, Size: 1]
	float DefaultFOV;//[Offset: 0x84c, Size: 1]
	bool bIsAimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	CrowWeaponTableRow WeaponTable;//[Offset: 0x860, Size: 1]
	CrowAmmoTableRow AmmoTable;//[Offset: 0x1bc0, Size: 1]
	CrowWeaponAniStateInfo WeaponAniStateInfo;//[Offset: 0x1e62, Size: 1]
	CrowCharacterAnimWeapon AnimWeaponFirst;//[Offset: 0x1e68, Size: 1]
	CrowCharacterAnimWeapon AnimWeaponThird;//[Offset: 0x1ea8, Size: 1]
	CrowWeaponPartsOptions PartsOptions;//[Offset: 0x1ee8, Size: 1]
	bool UseDefaultSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f88, Size: 1]
	uint32 WeaponIndex;//[Offset: 0x1f8c, Size: 1]
	uint32 PartsBarrel;//[Offset: 0x1f90, Size: 1]
	uint32 PartsMagazine;//[Offset: 0x1f94, Size: 1]
	uint32 PartsMuzzle;//[Offset: 0x1f98, Size: 1]
	uint32 PartsPistolGrip;//[Offset: 0x1f9c, Size: 1]
	uint32 PartsPrimarySight;//[Offset: 0x1fa0, Size: 1]
	uint32 PartsSecondarySight;//[Offset: 0x1fa4, Size: 1]
	uint32 PartsSideBarrel;//[Offset: 0x1fa8, Size: 1]
	uint32 PartsStock;//[Offset: 0x1fac, Size: 1]
	uint32 PartsUnderBarrel;//[Offset: 0x1fb0, Size: 1]
	SkeletalMesh* BackupNoOptimizationWeaponMesh;//[Offset: 0x1fb8, Size: 1]
	MaterialInterface* BackupNoOptimizationWeaponMaterial;//[Offset: 0x1fc0, Size: 1]
	bool bSkipOptimizationMeshTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc8, Size: 1]
	<enum,CrowOptimizationPartsInfo> OptimizationMeshList;//[Offset: 0x1fd0, Size: 1]
	CrowThreadWorkerTask* MergeMeshTask;//[Offset: 0x2020, Size: 1]
	bool IsFailedMergeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2028, Size: 1]
	void RequestSimulatedReloadComplete(byte MaxCount);// 0x1b633f0
	void RequestSimulatedFire(const CrowWeaponFire WeaponFire);// 0x1b63320
	void RequestKeyFlags(byte KeyFlags);// 0x1b63270
	void RequestChangeState(enum NewState);// 0x1b63170
	void OnRep_WeaponData();// 0x1b63150
	void OnEndHoldBreashLimit();// 0x1b630f0
	void OnEndHoldBreashCoolTime();// 0x1b630d0
	void MultiCastSimulatedFire(const CrowWeaponFire WeaponFire);// 0x1b62e30
	void MultiCastSelectImmediately();// 0x1b62e10
	void MultiCastKeyFlags(byte KeyFlags);// 0x1b62d60
	void MultiCastDeselectImmediately();// 0x1b62d40
	void MulticastChangeState(enum NewState);// 0x1b62c90
	void BIE_PlayFireEffect(out const CrowWeaponFire WeaponFire, bool IsLocalFire);// 0x1ef32e0

--------------------------------
Class: CrowEquipmentBase.CrowItemMesh.CrowItemBase.Actor.Object
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	byte SlotIndex;//[Offset: 0x33a, Size: 1]
	void OnRep_SlotIndex();// 0x1a77e00

--------------------------------
Class: CrowItemMesh.CrowItemBase.Actor.Object
	MeshComponent* MeshComponent;//[Offset: 0x2c8, Size: 1]
	ParticleSystemComponent* MeshParticleComponent;//[Offset: 0x2d0, Size: 1]
	ParticleSystemComponent* MeshPointParticleComponent;//[Offset: 0x2d8, Size: 1]
	CrowItemMeshActor* MeshActor;//[Offset: 0x2e0, Size: 1]
	bool bIsMoveMeshOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	SoftObjectPath MeshPath;//[Offset: 0x2f0, Size: 1]
	CrowItemData ItemData;//[Offset: 0x308, Size: 1]

--------------------------------
Class: CrowItemBase.Actor.Object
	float MeshBoundsScale;//[Offset: 0x220, Size: 1]
	BoxComponent* BoxComponent;//[Offset: 0x228, Size: 1]
	CrowItemTableManager* TableManager;//[Offset: 0x230, Size: 1]
	CrowItemSpawner* ParentItemSpawner;//[Offset: 0x238, Size: 1]
	MaterialInstanceDynamic*[] DynamicMaterialArray;//[Offset: 0x240, Size: 1]
	CrowEventHandler EventHandler;//[Offset: 0x250, Size: 1]
	CrowIndicatorViewInfo* ItemDropIndicatorViewInfo;//[Offset: 0x2b0, Size: 1]
	CrowWorldMapIcon* ItemDropWorldMapIcon;//[Offset: 0x2b8, Size: 1]
	void MultiCastDropItem(Vector_NetQuantize100 Location, Rotator Rotation, float DISTANCE);// 0x1aa0e10

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x468, Size: 1]
	float LineThickness;//[Offset: 0x474, Size: 1]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x3b4fc50
	Vector GetUnscaledBoxExtent();// 0x3b4fc20
	Vector GetScaledBoxExtent();// 0x3b4fbc0

--------------------------------
Class: CrowItemMeshActor.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x220, Size: 1]
	MeshComponent*[] MeshArray;//[Offset: 0x228, Size: 1]
	ParticleSystemComponent* Particle;//[Offset: 0x238, Size: 1]

--------------------------------
Class: CrowItemTableManager.Object
	<Object*,int> AssetReferenceCache;//[Offset: 0x28, Size: 1]
	CrowItemAssetElement[] AssetReferenceArray;//[Offset: 0x78, Size: 1]
	<uint32,CrowWeaponTableRow> WeaponTable_I;//[Offset: 0x88, Size: 1]
	<FString,CrowWeaponTableRow> WeaponTable_S;//[Offset: 0xd8, Size: 1]
	<uint32,CrowWeaponVehicleTableRow> WeaponVehicleTable_I;//[Offset: 0x128, Size: 1]
	<FString,CrowWeaponVehicleTableRow> WeaponVehicleTable_S;//[Offset: 0x178, Size: 1]
	<uint32,CrowWeaponPartsBarrelTableRow> WeaponPartsBarrelTable_I;//[Offset: 0x1c8, Size: 1]
	<FString,CrowWeaponPartsBarrelTableRow> WeaponPartsBarrelTable_S;//[Offset: 0x218, Size: 1]
	<uint32,CrowWeaponPartsMagazineTableRow> WeaponPartsMagazineTable_I;//[Offset: 0x268, Size: 1]
	<FString,CrowWeaponPartsMagazineTableRow> WeaponPartsMagazineTable_S;//[Offset: 0x2b8, Size: 1]
	<uint32,CrowWeaponPartsMuzzleTableRow> WeaponPartsMuzzleTable_I;//[Offset: 0x308, Size: 1]
	<FString,CrowWeaponPartsMuzzleTableRow> WeaponPartsMuzzleTable_S;//[Offset: 0x358, Size: 1]
	<uint32,CrowWeaponPartsPistolGripTableRow> WeaponPartsPistolGripTable_I;//[Offset: 0x3a8, Size: 1]
	<FString,CrowWeaponPartsPistolGripTableRow> WeaponPartsPistolGripTable_S;//[Offset: 0x3f8, Size: 1]
	<uint32,CrowWeaponPartsPrimarySightTableRow> WeaponPartsPrimarySightTable_I;//[Offset: 0x448, Size: 1]
	<FString,CrowWeaponPartsPrimarySightTableRow> WeaponPartsPrimarySightTable_S;//[Offset: 0x498, Size: 1]
	<uint32,CrowWeaponPartsSecondarySightTableRow> WeaponPartsSecondarySightTable_I;//[Offset: 0x4e8, Size: 1]
	<FString,CrowWeaponPartsSecondarySightTableRow> WeaponPartsSecondarySightTable_S;//[Offset: 0x538, Size: 1]
	<uint32,CrowWeaponPartsSideBarrelTableRow> WeaponPartsSideBarrelTable_I;//[Offset: 0x588, Size: 1]
	<FString,CrowWeaponPartsSideBarrelTableRow> WeaponPartsSideBarrelTable_S;//[Offset: 0x5d8, Size: 1]
	<uint32,CrowWeaponPartsStockTableRow> WeaponPartsStockTable_I;//[Offset: 0x628, Size: 1]
	<FString,CrowWeaponPartsStockTableRow> WeaponPartsStockTable_S;//[Offset: 0x678, Size: 1]
	<uint32,CrowWeaponPartsUnderBarrelTableRow> WeaponPartsUnderBarrelTable_I;//[Offset: 0x6c8, Size: 1]
	<FString,CrowWeaponPartsUnderBarrelTableRow> WeaponPartsUnderBarrelTable_S;//[Offset: 0x718, Size: 1]
	<uint32,CrowAmmoTableRow> WeaponAmmoTable_I;//[Offset: 0x768, Size: 1]
	<FString,CrowAmmoTableRow> WeaponAmmoTable_S;//[Offset: 0x7b8, Size: 1]
	<uint32,CrowCharacterTableRow> CharacterTable_I;//[Offset: 0x808, Size: 1]
	<FString,CrowCharacterTableRow> CharacterTable_S;//[Offset: 0x858, Size: 1]
	<uint32,CrowClothHairTableRow> ClothItemTableHair_I;//[Offset: 0x8a8, Size: 1]
	<uint32,CrowClothHeadTableRow> ClothItemTableHead_I;//[Offset: 0x8f8, Size: 1]
	<uint32,CrowClothGlassesTableRow> ClothItemTableGlasses_I;//[Offset: 0x948, Size: 1]
	<uint32,CrowClothMaskTableRow> ClothItemTableMask_I;//[Offset: 0x998, Size: 1]
	<uint32,CrowClothTopTableRow> ClothItemTableTop_I;//[Offset: 0x9e8, Size: 1]
	<uint32,CrowClothTableBaseRow> ClothItemTableGloves_I;//[Offset: 0xa38, Size: 1]
	<uint32,CrowClothTableBaseRow> ClothItemTableBottom_I;//[Offset: 0xa88, Size: 1]
	<uint32,CrowClothTableBaseRow> ClothItemTableShoes_I;//[Offset: 0xad8, Size: 1]
	<uint32,CrowClothTableBaseRow> ClothItemTableOuter_I;//[Offset: 0xb28, Size: 1]
	<uint32,CrowClothTableBaseRow> ClothItemTableBackPack_I;//[Offset: 0xb78, Size: 1]
	<uint32,CrowClothTableBaseRow> ClothItemTableCostume_I;//[Offset: 0xbc8, Size: 1]
	<uint32,CrowClothBeardTableRow> ClothItemTableBeard_I;//[Offset: 0xc18, Size: 1]
	<uint32,CrowClothPatchTableRow> ClothItemTablePatch_I;//[Offset: 0xc68, Size: 1]
	<FString,CrowClothHairTableRow> ClothItemTableHair_S;//[Offset: 0xcb8, Size: 1]
	<FString,CrowClothHeadTableRow> ClothItemTableHead_S;//[Offset: 0xd08, Size: 1]
	<FString,CrowClothGlassesTableRow> ClothItemTableGlasses_S;//[Offset: 0xd58, Size: 1]
	<FString,CrowClothMaskTableRow> ClothItemTableMask_S;//[Offset: 0xda8, Size: 1]
	<FString,CrowClothTopTableRow> ClothItemTableTop_S;//[Offset: 0xdf8, Size: 1]
	<FString,CrowClothTableBaseRow> ClothItemTableGloves_S;//[Offset: 0xe48, Size: 1]
	<FString,CrowClothTableBaseRow> ClothItemTableBottom_S;//[Offset: 0xe98, Size: 1]
	<FString,CrowClothTableBaseRow> ClothItemTableShoes_S;//[Offset: 0xee8, Size: 1]
	<FString,CrowClothTableBaseRow> ClothItemTableOuter_S;//[Offset: 0xf38, Size: 1]
	<FString,CrowClothTableBaseRow> ClothItemTableBackPack_S;//[Offset: 0xf88, Size: 1]
	<FString,CrowClothTableBaseRow> ClothItemTableCostume_S;//[Offset: 0xfd8, Size: 1]
	<FString,CrowClothBeardTableRow> ClothItemTableBeard_S;//[Offset: 0x1028, Size: 1]
	<FString,CrowClothPatchTableRow> ClothItemTablePatch_S;//[Offset: 0x1078, Size: 1]
	<uint32,CrowArmorTableRow> ArmorTable_I;//[Offset: 0x10c8, Size: 1]
	<FString,CrowArmorTableRow> ArmorTable_S;//[Offset: 0x1118, Size: 1]
	<uint32,CrowInvenBagRow> InvenBagTable_I;//[Offset: 0x1168, Size: 1]
	<FString,CrowInvenBagRow> InvenBagTable_S;//[Offset: 0x11b8, Size: 1]
	<uint32,CrowCurrencyTableRow> CurrencyTable_I;//[Offset: 0x1208, Size: 1]
	<FString,CrowCurrencyTableRow> CurrencyTable_S;//[Offset: 0x1258, Size: 1]
	<uint32,CrowItemColorTableRowBase> ItemColorTableHair_I;//[Offset: 0x12a8, Size: 1]
	<uint32,CrowItemColorTableRowBase> ItemColorTableBeard_I;//[Offset: 0x12f8, Size: 1]
	<uint32,CrowVictoryPoseTableRow> VictoryPoseTable_I;//[Offset: 0x1348, Size: 1]
	<uint32,CrowVehicleTableRow> VehicleTable_I;//[Offset: 0x1398, Size: 1]
	<FString,CrowVehicleTableRow> VehicleTable_S;//[Offset: 0x13e8, Size: 1]
	<uint32,CrowWeaponCharmTableRow> WeaponPartsCharm_I;//[Offset: 0x1438, Size: 1]
	<FString,CrowWeaponCharmTableRow> WeaponPartsCharm_S;//[Offset: 0x1488, Size: 1]
	<uint32,CrowWeaponStickerTableRow> WeaponStickerTable_I;//[Offset: 0x14d8, Size: 1]
	<FString,CrowWeaponStickerTableRow> WeaponStickerTable_S;//[Offset: 0x1528, Size: 1]
	<uint32,CrowEtcTableRow> EtcTable_I;//[Offset: 0x1578, Size: 1]
	<FString,CrowEtcTableRow> EtcTable_S;//[Offset: 0x15c8, Size: 1]
	<uint32,CrowVehicleSkinTableRow> VehicleSkinTable_I;//[Offset: 0x1618, Size: 1]
	<FString,CrowVehicleSkinTableRow> VehicleSkinTable_S;//[Offset: 0x1668, Size: 1]
	<uint32,CrowBuffTableRow> BuffTable_I;//[Offset: 0x16b8, Size: 1]
	<uint32,CrowEyeColorTableBaseRow> ItemTableEyeColor_I;//[Offset: 0x1708, Size: 1]
	<uint32,CrowTattooTableRow> TattooTable_I;//[Offset: 0x1758, Size: 1]
	<uint32,CrowEmotionTableRow> EmotionTable_I;//[Offset: 0x17a8, Size: 1]
	<uint32,CrowSprayTableRow> SprayTable_I;//[Offset: 0x17f8, Size: 1]
	<uint32,CrowClanMarkTableRow> ClanMark_I;//[Offset: 0x1848, Size: 1]
	<uint32,CrowResultMVPTableRow> ResultMVPTable_I;//[Offset: 0x1898, Size: 1]
	CrowItemRankPointTableRow[] ItemRankPointTable_I;//[Offset: 0x18e8, Size: 1]
	CrowCanEquipParts[] WeaponCanEquipPartsArray;//[Offset: 0x18f8, Size: 1]
	<uint32,CrowRandomBoxTableRow> RandomBoxTable_I;//[Offset: 0x1908, Size: 1]
	<uint32,CrowParachuteSkinTableRow> ParachuteSkinTable_I;//[Offset: 0x1958, Size: 1]
	<uint32,CrowFaceTableBaseRow> FaceData_I;//[Offset: 0x19a8, Size: 1]
	<FString,CrowFaceTableBaseRow> FaceData_S;//[Offset: 0x19f8, Size: 1]
	<uint32,CrowWeaponSkinTableRow> WeaponSkinTable_I;//[Offset: 0x1a48, Size: 1]

--------------------------------
Class: CrowItemAssetElement
	SkeletalMesh* SKC;//[Offset: 0x0, Size: 1]
	StaticMesh* SMC;//[Offset: 0x8, Size: 1]
	MaterialInterface*[] Materials;//[Offset: 0x10, Size: 1]
	bool IsFP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowWeaponTableRow.CrowItemTableBaseRow.TableRowBase
	uint32 GroupIndex;//[Offset: 0x1e0, Size: 1]
	uint32 ShopIndex;//[Offset: 0x1e4, Size: 1]
	FString HelpText;//[Offset: 0x1e8, Size: 1]
	enum WeaponSubType;//[Offset: 0x1f8, Size: 1]
	enum WeaponUIType;//[Offset: 0x1f9, Size: 1]
	enum WeaponDamageType;//[Offset: 0x1fa, Size: 1]
	CrowWeaponPartsOptions WeaponOptions;//[Offset: 0x1fc, Size: 1]
	int ExpTableIndex;//[Offset: 0x250, Size: 1]
	uint32 ExpShareIndex;//[Offset: 0x254, Size: 1]
	class CrowWeaponCrosshairBase* CrosshairFP;//[Offset: 0x258, Size: 1]
	class CrowWeaponCrosshairBase* CrosshairTP;//[Offset: 0x260, Size: 1]
	class CrowWeaponBase* OverrideClass;//[Offset: 0x268, Size: 1]
	uint32 OverrideProjectileWeaponIndex;//[Offset: 0x270, Size: 1]
	bool CanPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool CanPeekRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	bool AttachToBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 1]
	float WeaponModelNoramlFOV;//[Offset: 0x278, Size: 1]
	float WeaponModelAimFOV;//[Offset: 0x27c, Size: 1]
	enum AimMode;//[Offset: 0x280, Size: 1]
	float AimFOV;//[Offset: 0x284, Size: 1]
	float AimTime;//[Offset: 0x288, Size: 1]
	float ReleaseAimTime;//[Offset: 0x28c, Size: 1]
	float AimZoomTime;//[Offset: 0x290, Size: 1]
	CurveFloat* AimCurveX;//[Offset: 0x298, Size: 1]
	CurveFloat* AimCurveY;//[Offset: 0x2a0, Size: 1]
	class CrowWeaponZoomWidget* ZoomWidgetClass;//[Offset: 0x2a8, Size: 1]
	CLSCharacterAimBobInfo AimmingBob;//[Offset: 0x2b0, Size: 1]
	bool IsUseAimTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	float HoldBreathLimitTime;//[Offset: 0x2e4, Size: 1]
	float HoldBreathCoolTime;//[Offset: 0x2e8, Size: 1]
	float HoldBreathLimitOverCoolTime;//[Offset: 0x2ec, Size: 1]
	bool UsePostProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x300, Size: 1]
	SoftObjectPath Mesh1P;//[Offset: 0x860, Size: 1]
	class CrowWeaponPartsActor* MeshClass1P;//[Offset: 0x878, Size: 1]
	class AnimInstance* Mesh1PAnim;//[Offset: 0x880, Size: 1]
	Vector ModelScale1P;//[Offset: 0x888, Size: 1]
	SoftObjectPath Mesh3P;//[Offset: 0x898, Size: 1]
	class CrowWeaponPartsActor* MeshClass3P;//[Offset: 0x8b0, Size: 1]
	class AnimInstance* Mesh3PAnim;//[Offset: 0x8b8, Size: 1]
	SoftObjectPath Mesh3PAttached;//[Offset: 0x8c0, Size: 1]
	SoftObjectPath OptimizationMesh3P;//[Offset: 0x8d8, Size: 1]
	SoftObjectPath LobbyMesh3P;//[Offset: 0x8f0, Size: 1]
	SoftObjectPath[] Materials1P;//[Offset: 0x908, Size: 1]
	SoftObjectPath[] Materials3P;//[Offset: 0x918, Size: 1]
	SoftObjectPath OptimizationMaterial3P;//[Offset: 0x928, Size: 1]
	Vector ModelScale3P;//[Offset: 0x940, Size: 1]
	Vector SubRootOffset;//[Offset: 0x94c, Size: 1]
	WeaponAnimationInfo WeaponAnimation;//[Offset: 0x958, Size: 1]
	CLSWeaponAnimation CharacterAnimation;//[Offset: 0xb08, Size: 1]
	FString BarrelDefaultTextIndex;//[Offset: 0xd38, Size: 1]
	FString MagazineDefaultTextIndex;//[Offset: 0xd48, Size: 1]
	FString MuzzleDefaultTextIndex;//[Offset: 0xd58, Size: 1]
	FString PistolGripDefaultTextIndex;//[Offset: 0xd68, Size: 1]
	FString PrimarySightDefaultTextIndex;//[Offset: 0xd78, Size: 1]
	FString SecondarySightDefaultTextIndex;//[Offset: 0xd88, Size: 1]
	FString SideBarrelDefaultTextIndex;//[Offset: 0xd98, Size: 1]
	FString StockDefaultTextIndex;//[Offset: 0xda8, Size: 1]
	FString UnderBarrelDefaultTextIndex;//[Offset: 0xdb8, Size: 1]
	SoftObjectPath PrimarySightMount1P;//[Offset: 0xdc8, Size: 1]
	SoftObjectPath[] PrimarySightMountMaterials1P;//[Offset: 0xde0, Size: 1]
	SoftObjectPath PrimarySightMount3P;//[Offset: 0xdf0, Size: 1]
	SoftObjectPath LobbyPrimarySightMount3P;//[Offset: 0xe08, Size: 1]
	SoftObjectPath[] PrimarySightMountMaterials3P;//[Offset: 0xe20, Size: 1]
	SoftObjectPath SecondarySightMount1P;//[Offset: 0xe30, Size: 1]
	SoftObjectPath[] SecondarySightMountMaterials1P;//[Offset: 0xe48, Size: 1]
	SoftObjectPath SecondarySightMount3P;//[Offset: 0xe58, Size: 1]
	SoftObjectPath LobbySecondarySightMount3P;//[Offset: 0xe70, Size: 1]
	SoftObjectPath[] SecondarySightMountMaterials3P;//[Offset: 0xe88, Size: 1]
	SoftObjectPath SideBarrelMount1P;//[Offset: 0xe98, Size: 1]
	SoftObjectPath[] SideBarrelMountMaterials1P;//[Offset: 0xeb0, Size: 1]
	SoftObjectPath SideBarrelMount3P;//[Offset: 0xec0, Size: 1]
	SoftObjectPath LobbySideBarrelMount3P;//[Offset: 0xed8, Size: 1]
	SoftObjectPath[] SideBarrelMountMaterials3P;//[Offset: 0xef0, Size: 1]
	SoftObjectPath UnderBarrelMount1P;//[Offset: 0xf00, Size: 1]
	SoftObjectPath[] UnderBarrelMountMaterials1P;//[Offset: 0xf18, Size: 1]
	SoftObjectPath UnderBarrelMount3P;//[Offset: 0xf28, Size: 1]
	SoftObjectPath LobbyUnderBarrelMount3P;//[Offset: 0xf40, Size: 1]
	SoftObjectPath[] UnderBarrelMountMaterials3P;//[Offset: 0xf58, Size: 1]
	uint32 DefaultCharmIndex;//[Offset: 0xf68, Size: 1]
	bool IsEquipCharm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6c, Size: 1]
	FName[] StickerSocketNames;//[Offset: 0xf70, Size: 1]
	Vector[] StickerScale;//[Offset: 0xf80, Size: 1]
	float[] StickerAngle;//[Offset: 0xf90, Size: 1]
	int StickerSocketMaxCount;//[Offset: 0xfa0, Size: 1]
	int[] DefaultSticker;//[Offset: 0xfa8, Size: 1]
	FString AmmoTextIndex;//[Offset: 0xfb8, Size: 1]
	CurveFloat* AmmoSpeedCurve;//[Offset: 0xfc8, Size: 1]
	CurveFloat* TrajectoryCurve;//[Offset: 0xfd0, Size: 1]
	WeaponDefaultAmmoCount GameModeAmmoCount;//[Offset: 0xfd8, Size: 1]
	int DefaultAmmoInClip;//[Offset: 0xff0, Size: 1]
	WeaponDamageSettings DamageSettings;//[Offset: 0xff8, Size: 1]
	float AmmoSpeed;//[Offset: 0x1020, Size: 1]
	float AmmoLifeTime;//[Offset: 0x1024, Size: 1]
	float AmmoDistance;//[Offset: 0x1028, Size: 1]
	float AmmoGravityScale;//[Offset: 0x102c, Size: 1]
	float PenetrationPower;//[Offset: 0x1030, Size: 1]
	float PenetrationDistance;//[Offset: 0x1034, Size: 1]
	float PenetrationDecrease;//[Offset: 0x1038, Size: 1]
	bool bIsInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 1]
	float AmmoDamageUIValue;//[Offset: 0x1040, Size: 1]
	WeaponShellEjectInfo ShellEjectInfo;//[Offset: 0x1048, Size: 1]
	class CrowProjectileShell* ShellClipClass;//[Offset: 0x1068, Size: 1]
	float FireSpeed;//[Offset: 0x1070, Size: 1]
	float BurstFireSpeed;//[Offset: 0x1074, Size: 1]
	int FireCount;//[Offset: 0x1078, Size: 1]
	float FireSpeedUIValue;//[Offset: 0x107c, Size: 1]
	ParticleSystem* MuzzleFX_1P;//[Offset: 0x1080, Size: 1]
	NiagaraSystem* MuzzleFX_1P_N;//[Offset: 0x1088, Size: 1]
	bool Attach_MuzzleFX_1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1090, Size: 1]
	ParticleSystem* MuzzleFX_3P;//[Offset: 0x1098, Size: 1]
	NiagaraSystem* MuzzleFX_3P_N;//[Offset: 0x10a0, Size: 1]
	bool Attach_MuzzleFX_3P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 1]
	uint32 SpawnSmokeFireCount;//[Offset: 0x10ac, Size: 1]
	ParticleSystem* MuzzleSmokeFX;//[Offset: 0x10b0, Size: 1]
	ParticleSystem* Backblast_3P;//[Offset: 0x10b8, Size: 1]
	NiagaraSystem* Backblast_3P_N;//[Offset: 0x10c0, Size: 1]
	class CrowFoliageAffectorActor* FoliageAffector;//[Offset: 0x10c8, Size: 1]
	float AttackRange;//[Offset: 0x10d0, Size: 1]
	float TraceRadius;//[Offset: 0x10d4, Size: 1]
	float SafeMuzzleDistance;//[Offset: 0x10d8, Size: 1]
	bool IsEnableSingleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dc, Size: 1]
	bool IsEnableBurstShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dd, Size: 1]
	bool IsEnableNormalShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10de, Size: 1]
	int BurstShotCount;//[Offset: 0x10e0, Size: 1]
	float BurstShotDelay;//[Offset: 0x10e4, Size: 1]
	bool IsCanCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 1]
	float CookTime;//[Offset: 0x10ec, Size: 1]
	float MeleeTraceRadiusUIValue;//[Offset: 0x10f0, Size: 1]
	float MeleeDamageUIValue;//[Offset: 0x10f4, Size: 1]
	float MeleeThrowDistanceUIValue;//[Offset: 0x10f8, Size: 1]
	Color DynamicLightColor;//[Offset: 0x10fc, Size: 1]
	float DynamicLightRadiusMin;//[Offset: 0x1100, Size: 1]
	float DynamicLightRadiusMax;//[Offset: 0x1104, Size: 1]
	float DynamicLightIntensityMin;//[Offset: 0x1108, Size: 1]
	float DynamicLightIntensityMax;//[Offset: 0x110c, Size: 1]
	AkAudioEvent* SelectSound_W;//[Offset: 0x1110, Size: 1]
	AkAudioEvent* FireSound_W;//[Offset: 0x1118, Size: 1]
	AkAudioEvent* ContinuousFireSound_1P_W;//[Offset: 0x1120, Size: 1]
	AkAudioEvent* FireEndSound_1P_W;//[Offset: 0x1128, Size: 1]
	AkAudioEvent* FireSound_3P_W;//[Offset: 0x1130, Size: 1]
	AkAudioEvent* ContinuousFireSound_3P_W;//[Offset: 0x1138, Size: 1]
	AkAudioEvent* FireEndSound_3P_W;//[Offset: 0x1140, Size: 1]
	AkAudioEvent* DryFireSound_W;//[Offset: 0x1148, Size: 1]
	AkAudioEvent* AimAnmationSound_W;//[Offset: 0x1150, Size: 1]
	bool IsEnableSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 1]
	float SpreadMax;//[Offset: 0x115c, Size: 1]
	float SpreadUIValue;//[Offset: 0x1160, Size: 1]
	WeaponSpreadInfo NormalSpreadInfo;//[Offset: 0x1168, Size: 1]
	WeaponSpreadInfo AimSpreadInfo;//[Offset: 0x1218, Size: 1]
	bool IsEnableRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c8, Size: 1]
	float RecoilUIValue;//[Offset: 0x12cc, Size: 1]
	float RecoilDecrease;//[Offset: 0x12d0, Size: 1]
	WeaponRecoilInfo NormalRecoilInfo;//[Offset: 0x12d8, Size: 1]
	WeaponRecoilInfo AimRecoilInfo;//[Offset: 0x12f8, Size: 1]
	WeaponCameraShakeInfo CameraShakeInfo;//[Offset: 0x1318, Size: 1]
	PaperSprite* WeaponEquipSlotSprite;//[Offset: 0x1330, Size: 1]
	float ReloadUIValue;//[Offset: 0x1338, Size: 1]
	float TrajectoryMaxDistance;//[Offset: 0x133c, Size: 1]
	float TrajectoryLastSlope;//[Offset: 0x1340, Size: 1]
	float DropMaxDistance;//[Offset: 0x1344, Size: 1]
	FString[] DefaultTextArray;//[Offset: 0x1348, Size: 1]
	bool bIsEnableWeaponAni;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1358, Size: 1]

--------------------------------
Class: CrowItemTableBaseRow.TableRowBase
	FString TextIndex;//[Offset: 0x10, Size: 1]
	FText Name;//[Offset: 0x20, Size: 1]
	FText ItemTypeName;//[Offset: 0x38, Size: 1]
	FText Description;//[Offset: 0x50, Size: 1]
	FText ItemInfoWidgetDesc;//[Offset: 0x68, Size: 1]
	bool bIsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bIsPreLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	enum ItemGrade;//[Offset: 0x82, Size: 1]
	SoftObjectPath DefaultIcon;//[Offset: 0x88, Size: 1]
	SoftObjectPath PictogramIcon;//[Offset: 0xa0, Size: 1]
	int MaxStackCount;//[Offset: 0xb8, Size: 1]
	byte InventorySortOrder;//[Offset: 0xbc, Size: 1]
	int MaxInvenItemCount;//[Offset: 0xc0, Size: 1]
	bool ItemDeleteCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	float ItemDeleteTime;//[Offset: 0xc8, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfo;//[Offset: 0xd0, Size: 1]
	SoftObjectPath PingSound;//[Offset: 0x158, Size: 1]
	float MeshBoundsScale;//[Offset: 0x170, Size: 1]
	bool CalcBoundsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	SoftObjectPath DragStartSound;//[Offset: 0x178, Size: 1]
	SoftObjectPath EquipSound;//[Offset: 0x190, Size: 1]
	SoftObjectPath AddInvenSound;//[Offset: 0x1a8, Size: 1]
	SoftObjectPath DropItemSound;//[Offset: 0x1c0, Size: 1]
	ParticleSystem* DropItemEffect;//[Offset: 0x1d8, Size: 1]

--------------------------------
Class: TableRowBase

--------------------------------
Class: CrowGameIconDisplayInfo
	enum IconType;//[Offset: 0x0, Size: 1]
	bool bIsEnableWorldMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	class CrowWidgetBase* WorldMapIconClass;//[Offset: 0x8, Size: 1]
	float WorldMapIconScale;//[Offset: 0x10, Size: 1]
	bool WorldMapDisplayName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float DisplayMapIconDistance;//[Offset: 0x18, Size: 1]
	bool IsEnableScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIsEnableIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class CrowWidgetBase* IndicatorIconClass;//[Offset: 0x20, Size: 1]
	float IndicatorIconScale;//[Offset: 0x28, Size: 1]
	float IndicatorHeightOffset;//[Offset: 0x2c, Size: 1]
	bool LockIndicatorInScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DisplaySymbolMinDistance;//[Offset: 0x34, Size: 1]
	float DisplaySymbolDistance;//[Offset: 0x38, Size: 1]
	float DisplayNameMinDistance;//[Offset: 0x3c, Size: 1]
	float DisplayNameDistance;//[Offset: 0x40, Size: 1]
	float DisplayDistanceMinDistance;//[Offset: 0x44, Size: 1]
	float DisplayDistanceDistance;//[Offset: 0x48, Size: 1]
	float DisplayDistanceDecimalPoint;//[Offset: 0x4c, Size: 1]
	float ScaleMin;//[Offset: 0x50, Size: 1]
	float ScaleMax;//[Offset: 0x54, Size: 1]
	float ScaleMinDistance;//[Offset: 0x58, Size: 1]
	float ScaleMaxDistance;//[Offset: 0x5c, Size: 1]
	float AlphaMin;//[Offset: 0x60, Size: 1]
	float AlphaMax;//[Offset: 0x64, Size: 1]
	float AlphaMinDistance;//[Offset: 0x68, Size: 1]
	float AlphaMaxDistance;//[Offset: 0x6c, Size: 1]
	float IconChangeMinDistance;//[Offset: 0x70, Size: 1]
	float IconCenterAlpha;//[Offset: 0x74, Size: 1]
	float ScanTargetDistance;//[Offset: 0x78, Size: 1]
	enum IconPingType;//[Offset: 0x7c, Size: 1]
	bool LockRotateMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]

--------------------------------
Class: CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetBase* EventHandler;//[Offset: 0x268, Size: 1]
	class CrowWidgetBase* EventHandlerWidgetType;//[Offset: 0x270, Size: 1]
	FString HandlerWidgetName;//[Offset: 0x278, Size: 1]
	enum Event;//[Offset: 0x288, Size: 1]
	AkAudioEvent* VisibleSound;//[Offset: 0x290, Size: 1]
	AkAudioEvent* InvisibleSound;//[Offset: 0x298, Size: 1]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x2a0, Size: 1]
	CrowWidgetTweenBase*[] TweenerArray;//[Offset: 0x300, Size: 1]
	CrowWidgetManager* WidgetManager;//[Offset: 0x310, Size: 1]
	CrowWidgetBase* MasterWidget;//[Offset: 0x318, Size: 1]
	void OnPlayAkAudio(AkAudioEvent* AudioEvent);// 0x1b77950
	void OnFadeOutComplete();// 0x1b77910
	void OnFadeInComplete();// 0x1b778f0
	CrowPlayerControllerBase* GetCrowPlayerController();// 0x1b77680
	CrowGameInstance* GetCrowGameInstance();// 0x1b77650
	CrowCharacterPawn* GetCrowCharacterPawn();// 0x1b77620
	void Close();// 0x1b774d0

--------------------------------
Class: CrowPlayerControllerBase.CLSPlayerController.PlayerController.Controller.Actor.Object
	Pawn* PawnBeforeSpectatingState;//[Offset: 0x578, Size: 1]
	bool bIsCharacterDesytroyWhenEndSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	CrowUserInfoBase ServerUserInfo;//[Offset: 0x588, Size: 1]
	TimerHandle RevertEnableSpawnPawnHandle;//[Offset: 0xeb8, Size: 1]
	CrowTriggerDisplay* TriggerDisplay;//[Offset: 0xec0, Size: 1]
	bool bAllowGameActions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xecc, Size: 1]
	MaterialParameterCollection* WeaponFOVCollection;//[Offset: 0xed0, Size: 1]
	uint32[] EmotionIndexsInSlot;//[Offset: 0xed8, Size: 1]
	CrowPassenger* Passenger;//[Offset: 0xee8, Size: 1]
	Actor* BaseControlActor;//[Offset: 0xef0, Size: 1]
	Rotator BaseControlRotation;//[Offset: 0xef8, Size: 1]
	Vector2D BaseControlPitchMinMax;//[Offset: 0xf04, Size: 1]
	Vector2D BaseControlYawMinMax;//[Offset: 0xf0c, Size: 1]
	Rotator BaseControlAddedRotation;//[Offset: 0xf14, Size: 1]
	Rotator CharacterLookingRotation;//[Offset: 0xf20, Size: 1]
	FName PrevCharacterCamera;//[Offset: 0xf2c, Size: 1]
	Pawn* RespawnTargetPawn;//[Offset: 0xf38, Size: 1]
	CrowProjectileChecker* ProjectileChecker;//[Offset: 0xf40, Size: 1]
	Actor* PickItem;//[Offset: 0xf48, Size: 1]
	enum CameraLimitMode;//[Offset: 0xf50, Size: 1]
	Vector LastDeathLocation;//[Offset: 0xf6c, Size: 1]
	Rotator LastInputAxis;//[Offset: 0xf78, Size: 1]
	FString DoorTriggerMessage;//[Offset: 0xf88, Size: 1]
	void UpdateHeadLocation(const Vector_NetQuantize HeadLocation);// 0x1ae7eb0
	void SetCharacterLookingRotation(Rotator NewCharacterLookingRotation);// 0x1ae7e20
	void ServerSelectTeam(const CrowTeamInfo selectTeam);// 0x1ae7c00
	void ServerPossess(Pawn* TargetPawn);// 0x1ae7b40
	void ServerCheatCommand_Internal(FString CommandString);// 0x1ae7a80
	void Server_Revive();// 0x1ae7dd0
	void Server_ReLocation();// 0x1ae7db0
	void Server_KillMe();// 0x1ae7d90
	void Server_HitMe(float Damage);// 0x1ae7d00
	void Server_ChangeZombie();// 0x1ae7ce0
	void RequestVaultDamageMulti(float ClientWorldTime, const CrowVaultDamageInfo[] InVaultDamageArray, const Vector InImpactNormal);// 0x1ae7850
	void RequestVaultDamage(float ClientWorldTime, uint32 InWorldActorIndex, int16 InLayoutItemIndex, const Vector InImpactPoint, const Vector InImpactNormal);// 0x1ae7660
	void RequestTakeDamage(const CrowTakePointDamage PointDamage);// 0x1ae7540
	void RequestStartBattle();// 0x1ae74f0
	void RequestSpawnSpray(uint64 InServerKey, int InSprayIndex, const Vector InLocation, Rotator Rotation);// 0x1ae7340
	void RequestSkyDivingToAirPlane(Vector Location, Rotator Rotation);// 0x1ae7250
	void RequestShortTimeout();// 0x1ae7230
	void RequestSettingLoadoutPreset(byte PresetIndex, byte LoadoutType, const CrowWeaponSlot[] WeaponSlotArray);// 0x1ae7080
	void RequestSetShowRecordLog(bool bIsShow);// 0x1ae6fc0
	void RequestSetResultMVPIndex(uint32 Index);// 0x1ae6f00
	void RequestSetLocalUserInfo(const CrowAuthorizeUserInfo AuthorizeUserInfo);// 0x1ae6e30
	void RequestSetEnableSpawnPawn(bool bValue, bool bDestroyPawn);// 0x1ae6d60
	void RequestSetCharacterLookingRotation(Rotator NewCharacterLookingRotation);// 0x1ae6c90
	void RequestSetCameraModeByType(enum NewCamMode, bool bIsImmediately);// 0x1ae6b90
	void RequestSelectSkydivingRespawn(Vector InLocation, float InYRotation);// 0x1ae6a70
	void RequestSelectServerKeyRespawn(uint64 InServerKey);// 0x1ae69e0
	void RequestSelectPawnRespawn(Pawn* TargetPawn);// 0x1ae6920
	void RequestSelectLoadoutBoxUse(int LoadoutPresetIndex, CrowLoadoutBoxActor* TargetActor);// 0x1ae6820
	void RequestSelectLastWeapon(CrowCharacterPawn* InCharacterPawn, bool bImmediately);// 0x1ae6750
	void RequestSelectFirstRespawn(uint32 AreaID, const CrowFirstRespawnInfo FirstRespawnInfo);// 0x1ae6640
	void RequestSelectAreaRespawn(uint32 AreaID);// 0x1ae6580
	void RequestMeleeThrowDamage(float ClientWorldTime, const CrowTakePointDamage PointDamage, uint32 ProjectileUID, CrowWeaponBase* WeaponBase);// 0x1ae62d0
	void RequestMeleeDamage(float ClientWorldTime, const CrowTakePointDamage[] PointDamageArray, bool IsHitScan, CrowWeaponBase* WeaponBase, CrowCharacterBase* OwnerCharacter, const Vector InOwnerLocation);// 0x1ae6070
	void RequestFreeViewSpectating();// 0x1ae6050
	void RequestFireClientProjectiles(float ClientWorldTime, const CrowWeaponFire WeaponFire, const uint32[] InProjectileIDArray, const Vector_NetQuantizeNormal InViewNormal, float InZeroingPitch, const Vector_NetQuantize InOwnerLocation, CrowWeaponBase* WeaponBase, CrowCharacterBase* OwnerCharacter, CrowVehiclePawn* OwnerVehicle);// 0x1ae5d10
	void RequestFireClientNetProjectiles(float ClientWorldTime, const CrowNetWeaponFire NetWeaponFire);// 0x1ae5ba0
	void RequestFindAttachedPlayerWhenSpectating(uint64 InAttachedServerKey, bool bIsPrev);// 0x1ae5aa0
	void RequestExitWorld(enum Type);// 0x1ae5a20
	void RequestDetachedPlayerWhenSpectating(uint64 InAttachedServerKey);// 0x1ae5960
	void RequestDemolitionMissionArea(CrowMissionArea* ConquestArea);// 0x1ae58a0
	void RequestClientProjectileDamages(float ClientWorldTime, const CrowTakePointDamage[] PointDamages);// 0x1ae5530
	void RequestClientProjectileDamage(float ClientWorldTime, const CrowTakePointDamage PointDamage);// 0x1ae53c0
	void RequestClientNetProjectileDamages(float ClientWorldTime, const CrowNetProjectileDamage[] PointDamages);// 0x1ae52b0
	void RequestClientNetProjectileDamage(float ClientWorldTime, const CrowNetProjectileDamage PointDamage);// 0x1ae5140
	void RequestChangeSquadLoadout(const CrowWeaponSlot[] WeaponSlotArray);// 0x1ae5010
	void RequestChangeMainLoadout(byte PresetIndex);// 0x1ae4f60
	void RequestAttachedPlayerWhenSpectating(uint64 InAttachedServerKey);// 0x1ae4ea0
	void RequestAttachedPlayerPosition(uint64 InAttachedServerKey, bool IsKiller);// 0x1ae4da0
	void Request_FPS_Ping(uint16 FPS, uint16 Ping);// 0x1ae79b0
	void NotifyProjectileChecker(FString inString);// 0x1ae4ce0
	void MulticastDrawDebugBox(const Vector Location, const Vector Extents, Color Color, float LifeTime, float Thickness);// 0x1ae4a40
	CrowPassenger* GetPassenger();// 0x1ae4a20
	Rotator GetLastInputAxis();// 0x1ae49e0
	enum GetCurrentCameraMode();// 0x1ae49b0
	Rotator GetCharacterLookingRotation();// 0x1ae4980
	void ClientSetSpectatorCamera(Vector CameraLocation, Rotator CameraRotation);// 0x1ae4890
	void ClientSelectTeam(const CrowTeamInfo selectTeam);// 0x1ae47b0
	void ClientPawnRespawnError();// 0x1ae4790
	void ClientHitMark(bool IsKill, enum InCauser, enum InHittingAreaThpe);// 0x1ae4670
	void ClientGameStarted();// 0x1ae4650
	void ClientExitWorld(enum Type);// 0x1ae45d0
	void ClientDestroyVehicle(enum Type);// 0x1ae4550
	void ClientDestroyEmptyVehicle(enum Type);// 0x1ae44d0
	void ClientDebugDrawSphere(Vector Center, float Radius, int Segments, Color Color, float LifeTime, float Thickness);// 0x1ae42e0
	void ClientBattleReport(const CrowTeamInfo WinnerTeam);// 0x1ae4220
	void ClientAutoManageActiveCameraTarget(bool bActive);// 0x1ae4190
	void ClientAttachedPlayerWhenSpectating(uint64 InAttachedServerKey, Transform InAttachedPlayerTransform, bool IsKiller);// 0x1ae3fd0

--------------------------------
Class: CLSPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: CrowTeamInfo
	byte TeamID;//[Offset: 0x0, Size: 1]
	FString SquadKey;//[Offset: 0x8, Size: 1]
	enum SquadRole;//[Offset: 0x18, Size: 1]
	uint32 SquadPoint;//[Offset: 0x1c, Size: 1]
	FString SquadName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowVaultDamageInfo
	uint32 WorldActorIndex;//[Offset: 0x0, Size: 1]
	int16 LayoutItemIndex;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowTakePointDamage
	uint32 ProjectileID;//[Offset: 0x0, Size: 1]
	uint16 WeaponIndex;//[Offset: 0x4, Size: 1]
	uint16 AmmoIndex;//[Offset: 0x6, Size: 1]
	enum ItemType;//[Offset: 0x8, Size: 1]
	PointDamageEvent DamageEvent;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 1]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 1]
	HitResult HitInfo;//[Offset: 0x20, Size: 1]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWeaponSlot
	byte Slot;//[Offset: 0x0, Size: 1]
	uint32 ItemIndex;//[Offset: 0x4, Size: 1]
	uint32 SkinIndex;//[Offset: 0x8, Size: 1]
	uint32 CharmIndex;//[Offset: 0xc, Size: 1]
	int[] Stickers;//[Offset: 0x10, Size: 1]
	CrowWeaponPartsSlot[] WearParts;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowWeaponPartsSlot
	byte PartsSlot;//[Offset: 0x0, Size: 1]
	uint32 ItemIndex;//[Offset: 0x4, Size: 1]
	int[] Stickers;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowAuthorizeUserInfo
	uint64 ServerKey;//[Offset: 0x0, Size: 1]
	FString AuthToken;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowLoadoutBoxActor.Actor.Object
	CrowWorldIconActor* RewardIconActor;//[Offset: 0x230, Size: 1]
	ParticleSystemComponent* RewardSmokeEffect;//[Offset: 0x238, Size: 1]
	BoxComponent* BoxComponent;//[Offset: 0x240, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x248, Size: 1]
	CrowSimpleBuoyancyComponent* BuoyancyComponent;//[Offset: 0x250, Size: 1]
	class CrowSupplyEventParachuteActor* ParachuteClass;//[Offset: 0x258, Size: 1]
	AnimationAsset* ParachuteDownAni;//[Offset: 0x260, Size: 1]
	AnimationAsset* ParachuteUpAni;//[Offset: 0x268, Size: 1]
	float DropHeight;//[Offset: 0x270, Size: 1]
	float MaxSpeed;//[Offset: 0x274, Size: 1]
	uint32 MaxSupplyCount;//[Offset: 0x278, Size: 1]
	AkAudioEvent* UseSound;//[Offset: 0x280, Size: 1]
	float LifeTime;//[Offset: 0x288, Size: 1]
	float HP;//[Offset: 0x28c, Size: 1]
	ParticleSystem* DestroyEffect;//[Offset: 0x290, Size: 1]
	AkAudioEvent* DestroySound;//[Offset: 0x298, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfo;//[Offset: 0x2a0, Size: 1]
	byte BoxTeam;//[Offset: 0x328, Size: 1]
	byte SquadRewardIndex;//[Offset: 0x329, Size: 1]
	uint32 RemainSupplyCount;//[Offset: 0x32c, Size: 1]
	float RemainLifeTime;//[Offset: 0x330, Size: 1]
	uint64[] UsedPlayerArray;//[Offset: 0x338, Size: 1]
	enum LoadoutBoxState;//[Offset: 0x348, Size: 1]
	CrowSupplyEventParachuteActor* ParachuteActor;//[Offset: 0x350, Size: 1]
	float CurrentHP;//[Offset: 0x358, Size: 1]
	bool bUpdateIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	TimerHandle CheckLifeTimer;//[Offset: 0x360, Size: 1]
	bool bIsSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	Vector LandLocation;//[Offset: 0x36c, Size: 1]
	bool bIsAttachedParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult HitResult);// 0x1ab7ca0
	void MulticastDetroyed();// 0x1a7dc00

--------------------------------
Class: CrowWorldIconActor.Actor.Object
	BoxComponent* Root;//[Offset: 0x220, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x228, Size: 1]
	Actor* TargetActor;//[Offset: 0x230, Size: 1]

--------------------------------
Class: CrowSimpleBuoyancyComponent.ActorComponent.Object
	PrimitiveComponent* TargetComponent;//[Offset: 0xc0, Size: 1]
	PhysicalMaterial* WaterMaterial;//[Offset: 0xc8, Size: 1]
	float MinWaveMoveValue;//[Offset: 0xd0, Size: 1]
	float WaveMoveDecreaseRate;//[Offset: 0xd4, Size: 1]
	WaterBody* CachedOceanActor;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: CrowSupplyEventParachuteActor.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 1]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x228, Size: 1]
	SkeletalMeshComponent* Mesh;//[Offset: 0x230, Size: 1]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf0, Size: 1]
	float MaxSpeed;//[Offset: 0xf4, Size: 1]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf8, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf8, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf8, Size: 1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf8, Size: 1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf8, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf8, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf9, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf9, Size: 1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf9, Size: 1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf9, Size: 1]
	float PreviousHitTime;//[Offset: 0xfc, Size: 1]
	Vector PreviousHitNormal;//[Offset: 0x100, Size: 1]
	float ProjectileGravityScale;//[Offset: 0x10c, Size: 1]
	float Buoyancy;//[Offset: 0x110, Size: 1]
	float Bounciness;//[Offset: 0x114, Size: 1]
	float Friction;//[Offset: 0x118, Size: 1]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x11c, Size: 1]
	float MinFrictionFraction;//[Offset: 0x120, Size: 1]
	MulticastInlineDelegateProperty OnProjectileBounce;//[Size: 1]
	MulticastInlineDelegateProperty OnProjectileStop;//[Size: 1]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 1]
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x158, Size: 1]
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 1]
	float InterpLocationTime;//[Offset: 0x160, Size: 1]
	float InterpRotationTime;//[Offset: 0x164, Size: 1]
	float InterpLocationMaxLagDistance;//[Offset: 0x168, Size: 1]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x16c, Size: 1]
	void StopSimulating(out const HitResult HitResult);// 0x3c59130
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x3c590a0
	void SetInterpolatedComponent(SceneComponent* Component);// 0x3c58f00
	void ResetInterpolation();// 0x2c9ef70
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x1ef32e0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x1ef32e0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x3c58c90
	Vector LimitVelocity(Vector NewVelocity);// 0x3c58be0
	bool IsVelocityUnderSimulationThreshold();// 0x3c58b80
	bool IsInterpolationComplete();// 0x3c58b50

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowCharacterPawn.CrowCharacterBase.CLSCharacter.Character.Pawn.Actor.Object
	CrowPlayerStateBase* CachedPlayerState;//[Offset: 0x1148, Size: 1]
	bool bHoldingLimitOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1150, Size: 1]
	CrowCharacterVaultCache VauleInfoCache;//[Offset: 0x1158, Size: 1]
	bool bStopAdditionalCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 1]
	bool bUseViewDependsOnManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1181, Size: 1]
	float ItemOutlineTickTime;//[Offset: 0x1184, Size: 1]
	CrowPlayerStateBase* SavedPlayerState;//[Offset: 0x1208, Size: 1]
	Vector ServerHeadLocation;//[Offset: 0x1214, Size: 1]
	bool bEnableDrownedMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1220, Size: 1]
	FName HeadCollisionSocketName;//[Offset: 0x1224, Size: 1]
	FName NeckBoneName;//[Offset: 0x122c, Size: 1]
	float SprintingAngleLimit;//[Offset: 0x1234, Size: 1]
	FName CamSocketName;//[Offset: 0x1238, Size: 1]
	float TurnOffsetTest;//[Offset: 0x1240, Size: 1]
	CrowCharacterLookLimitStance LimitControlRotation;//[Offset: 0x1244, Size: 1]
	CrowCharacterLookLimitStance LimitAimOffset;//[Offset: 0x12f0, Size: 1]
	float ProneLimitCheckDistance;//[Offset: 0x139c, Size: 1]
	float ProneLimitCheckRadius;//[Offset: 0x13a0, Size: 1]
	float ProneLimitFrontBackVelocityFactor;//[Offset: 0x13a4, Size: 1]
	float ProneLimitSideVelocityFactor;//[Offset: 0x13a8, Size: 1]
	float ProneLimitNotMovingBaseLength;//[Offset: 0x13ac, Size: 1]
	float ProneLimitNotMovingCheckDistance;//[Offset: 0x13b0, Size: 1]
	CrowVehiclePawn* BoardingVehicle;//[Offset: 0x13b8, Size: 1]
	FName VehicleName;//[Offset: 0x13c0, Size: 1]
	byte SeatIndex;//[Offset: 0x13c8, Size: 1]
	enum SeatType;//[Offset: 0x13c9, Size: 1]
	float SeatLeanForward;//[Offset: 0x13cc, Size: 1]
	float SeatLeanBackward;//[Offset: 0x13d0, Size: 1]
	float SeatLeanSide;//[Offset: 0x13d4, Size: 1]
	float ProneAddedPitchValue;//[Offset: 0x13d8, Size: 1]
	byte VehicleSpringArmId;//[Offset: 0x13dc, Size: 1]
	Rotator DefaultVehicleControlInput;//[Offset: 0x13e0, Size: 1]
	Vector2D VehicleControlPitchMinMax;//[Offset: 0x13ec, Size: 1]
	Vector2D VehicleControlYawMinMax;//[Offset: 0x13f4, Size: 1]
	Vector2D VehicleControlFirePitchMinMax;//[Offset: 0x13fc, Size: 1]
	Vector2D VehicleControlFireYawMinMax;//[Offset: 0x1404, Size: 1]
	CrowVehiclePawn* ReservedVehicle;//[Offset: 0x1410, Size: 1]
	bool bIsReservedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1418, Size: 1]
	float PickupItemCheckerSize;//[Offset: 0x141c, Size: 1]
	float PickItemEffectCheckerSize;//[Offset: 0x1420, Size: 1]
	bool bOptmizationFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1424, Size: 1]
	bool bEnteringVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1425, Size: 1]
	bool bSprintMaintainToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1426, Size: 1]
	bool IsPressUSEKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 1]
	bool IsPressSubUSEKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1429, Size: 1]
	CrowInputBase* InputDefault;//[Offset: 0x1430, Size: 1]
	CrowInputBase* InputFindConstructionSite;//[Offset: 0x1438, Size: 1]
	CrowInputBase* InputConstruction;//[Offset: 0x1440, Size: 1]
	CrowInputBase* InputUI;//[Offset: 0x1448, Size: 1]
	CrowInputBase* InputOnTablet;//[Offset: 0x1450, Size: 1]
	CrowTeleportationActorComponent* CrowTeleportationActorComponent;//[Offset: 0x1458, Size: 1]
	CrowGasMaskComponent* CrowGasMaskComponent;//[Offset: 0x1460, Size: 1]
	CrowCharacterPeekSetup PeekSetup;//[Offset: 0x1468, Size: 1]
	bool bIsLeftFoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 1]
	bool bIsShootablePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1471, Size: 1]
	Vector UpdatedAnimationPelvisOffset;//[Offset: 0x1478, Size: 1]
	float AimDelayDefault;//[Offset: 0x1494, Size: 1]
	float AimDelaySlow;//[Offset: 0x1498, Size: 1]
	CrowThreadWorkerTask* MergeMeshTask_FPArm;//[Offset: 0x14a0, Size: 1]
	CrowThreadWorkerTask* MergeMeshTask_FPBody;//[Offset: 0x14a8, Size: 1]
	bool bSkipOptimizationByScreensize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b0, Size: 1]
	enum CrowConditionFlags;//[Offset: 0x14b4, Size: 1]
	bool bIsSkydivingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b8, Size: 1]
	CrowCharacterSkydivingComponent* SkydivingComponent;//[Offset: 0x14c0, Size: 1]
	bool bResetRelativeMeshTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c8, Size: 1]
	CrowWorldMapIcon* WorldMapIcon;//[Offset: 0x14d0, Size: 1]
	CrowIndicatorViewInfo* IndicatorInfo;//[Offset: 0x14d8, Size: 1]
	bool bIsSpectatorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e0, Size: 1]
	bool bIsAimAtSpectatorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e1, Size: 1]
	byte SpectatorCameraMode;//[Offset: 0x14e2, Size: 1]
	byte PrevSpectatorCameraMode;//[Offset: 0x14e3, Size: 1]
	TimerHandle EndPlayEmotionTimerHandle;//[Offset: 0x14e8, Size: 1]
	byte PrevEmotionCameraMode;//[Offset: 0x14f0, Size: 1]
	bool bIsPlayEmotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f1, Size: 1]
	uint32 CurrentEmotionIndex;//[Offset: 0x14f4, Size: 1]
	float SwimingOxygen;//[Offset: 0x14f8, Size: 1]
	CrowZombieComponent* ZombieComponent;//[Offset: 0x1500, Size: 1]
	float MaxSwimingOxygen;//[Offset: 0x1508, Size: 1]
	float ConsumeOxygen;//[Offset: 0x150c, Size: 1]
	float ConsumeOxygenPerSecond;//[Offset: 0x1510, Size: 1]
	float RecoveryOxygen;//[Offset: 0x1514, Size: 1]
	float RecoveryOxygenPerSecond;//[Offset: 0x1518, Size: 1]
	float LackOfOxygenDamage;//[Offset: 0x151c, Size: 1]
	float SwimGroundDustDelay;//[Offset: 0x1520, Size: 1]
	TimerHandle ConsumeOxygenTimerHandle;//[Offset: 0x1528, Size: 1]
	TimerHandle RecoveryOxygenTimerHandler;//[Offset: 0x1530, Size: 1]
	float PrevSwimImmersionDepth;//[Offset: 0x1538, Size: 1]
	float SwimGroundDustTime;//[Offset: 0x153c, Size: 1]
	float RandSwimGroundDustDelay;//[Offset: 0x1540, Size: 1]
	FName PrevPhysicsVolumeName;//[Offset: 0x1544, Size: 1]
	float ElapsedHeadLocationUpdateTime;//[Offset: 0x154c, Size: 1]
	CrowStatusBreathWidget* StatusWidget;//[Offset: 0x1550, Size: 1]
	CrowVehicleOceanTracker* OceanTracker;//[Offset: 0x1558, Size: 1]
	CrowBattleSetup BattleSetup;//[Offset: 0x1564, Size: 1]
	CrowCharacterSoundSetup SoundSetup;//[Offset: 0x1588, Size: 1]
	CrowCharacterSoundSetup ZombieSoundSetup;//[Offset: 0x1640, Size: 1]
	CrowCharacterSoundSetup CurrentSoundSetup;//[Offset: 0x16f8, Size: 1]
	CrowBattleContainer BattleContainer;//[Offset: 0x17b0, Size: 1]
	CrowSpringArmComponent* SpringArmTP;//[Offset: 0x17d0, Size: 1]
	CameraComponent* CameraTP;//[Offset: 0x17d8, Size: 1]
	CameraComponent* CameraFP;//[Offset: 0x17e0, Size: 1]
	SceneComponent* FPMeshPeekAxis;//[Offset: 0x17e8, Size: 1]
	SceneComponent* FPMeshSightAxis;//[Offset: 0x17f0, Size: 1]
	CrowSkeletalMeshComponent* MeshFPBody;//[Offset: 0x17f8, Size: 1]
	CrowSkeletalMeshComponent* MeshFPArm;//[Offset: 0x1800, Size: 1]
	PointLightComponent* LightFP;//[Offset: 0x1808, Size: 1]
	class PointLightComponent* LightFPType;//[Offset: 0x1810, Size: 1]
	Vector LightFPOffset;//[Offset: 0x1818, Size: 1]
	CrowClothActorComponent* FPBody_ClothComponent;//[Offset: 0x1828, Size: 1]
	CrowClothActorComponent* FPArm_ClothComponent;//[Offset: 0x1830, Size: 1]
	CrowCharacterMovementCollision* CharacterMovementCollision;//[Offset: 0x1838, Size: 1]
	CrowCharacterTriggerControl* TriggerControl;//[Offset: 0x1840, Size: 1]
	CrowGameInvenComponent* GameInventory;//[Offset: 0x1848, Size: 1]
	CrowPlayerConstruction* PlayerConstruction;//[Offset: 0x1850, Size: 1]
	CrowWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1858, Size: 1]
	class Actor* TargetActor;//[Offset: 0x1860, Size: 1]
	CrowCharacterFallsComponent* FallsComp;//[Offset: 0x1868, Size: 1]
	ArrowComponent* ThrowProjectileFireDirection;//[Offset: 0x1870, Size: 1]
	class UserWidget* hudWidgetClass;//[Offset: 0x1878, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoEnemy;//[Offset: 0x1888, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x1910, Size: 1]
	CrowIntegratedIndicatorWidget* CachedIntegratedIndicatorWidget;//[Offset: 0x1918, Size: 1]
	CrowWorldMapWidget* CachedWorldMapWidget;//[Offset: 0x1920, Size: 1]
	CrowMinimapInfoWidget* CachedMiniMapWidget;//[Offset: 0x1928, Size: 1]
	CrowRespawnMapWidget* CachedRespawnMapWidget;//[Offset: 0x1930, Size: 1]
	FString IndicatorDrawRejectedReason;//[Offset: 0x1988, Size: 1]
	float SoundSprinTime;//[Offset: 0x199c, Size: 1]
	AkComponent* IdleBreathSoundComponent;//[Offset: 0x19a0, Size: 1]
	AkComponent* GasMaskSoundComponent;//[Offset: 0x19a8, Size: 1]
	float SoundBreathTime;//[Offset: 0x19b0, Size: 1]
	CrowInDoorTriggerVolume*[] InDoorTriggerList;//[Offset: 0x19c0, Size: 1]
	SkeletalMeshComponent* SaveHealKitMeshComp;//[Offset: 0x19e0, Size: 1]
	SkeletalMesh* SaveHealKitSkelMesh_1P;//[Offset: 0x19e8, Size: 1]
	SkeletalMesh* SaveHealKitSkelMesh_3P;//[Offset: 0x19f0, Size: 1]
	CrowDecalInfo InjuredBloodOnGroundDecal;//[Offset: 0x19f8, Size: 1]
	float InjuredBloodDecalDist;//[Offset: 0x1a58, Size: 1]
	float AddedMoveDist;//[Offset: 0x1a5c, Size: 1]
	CrowSoundStateComponent* SoundStateComponent;//[Offset: 0x1a60, Size: 1]
	CrowDotDamageInfo[] DotDamageArray;//[Offset: 0x1a68, Size: 1]
	float GodModeAlphaMin;//[Offset: 0x1a98, Size: 1]
	float GodModeAlphaMax;//[Offset: 0x1a9c, Size: 1]
	float GodModeAlphaInTime;//[Offset: 0x1aa0, Size: 1]
	float GodModeAlphaOutTime;//[Offset: 0x1aa4, Size: 1]
	<uint64,CrowDamageExpInfo> DamageExpMap;//[Offset: 0x1aa8, Size: 1]
	CLSAnimation AniFlashBangBegin;//[Offset: 0x1af8, Size: 1]
	CLSAnimation AniFlashBangLoop;//[Offset: 0x1b18, Size: 1]
	CLSAnimation AniFlashBangEnd;//[Offset: 0x1b38, Size: 1]
	CLSAnimation AniGasBegin;//[Offset: 0x1b58, Size: 1]
	CLSAnimation AniGasLoop;//[Offset: 0x1b78, Size: 1]
	CLSAnimation AniGasEnd;//[Offset: 0x1b98, Size: 1]
	CLSAnimation AniWallBegin;//[Offset: 0x1bb8, Size: 1]
	CLSAnimation AniWallEnd;//[Offset: 0x1bd8, Size: 1]
	int SequencePawnID;//[Offset: 0x1bf8, Size: 1]
	<uint64,Actor*> UAVReconMap;//[Offset: 0x1c00, Size: 1]
	CrowFoliageAffectorComponent*[] FoliageAffectors;//[Offset: 0x1c60, Size: 1]
	bool bAutoCustomDepthUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c70, Size: 1]
	bool bIsPlunderMineral;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c78, Size: 1]
	AnimMontage* LookingWeaponMontage;//[Offset: 0x1c80, Size: 1]
	bool IsLookingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c88, Size: 1]
	CrowCharacterAimComponent* CharacterAimComponent;//[Offset: 0x1c98, Size: 1]
	CrowSoundScriptData[] SoundScriptDatas;//[Offset: 0x1ca8, Size: 1]
	float SoundScriptExecutableTime;//[Offset: 0x1cb8, Size: 1]
	enum ServerCurrentScopeSightRate;//[Offset: 0x1cbc, Size: 1]
	bool bEnablePickingItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cbd, Size: 1]
	void UpdateSwiming(float DeltaSeconds);// 0x1a43440
	void UpdateLadder(float DeltaSeconds);// 0x1a433c0
	void UpdateInjuredBloodOnGround();// 0x1a433a0
	void UpdateCharacterMovementCollision(float DeltaSeconds);// 0x1a43320
	void TriggerTest();// 0x1a43300
	void StopLookingWeaponMontage();// 0x1a432e0
	void StartAimDelayed();// 0x1a432c0
	void SinglecastEnergy(uint16 Energy);// 0x1a43230
	void SinglecastDotHealTime(float Current, float Max);// 0x1a43160
	void SetRevive();// 0x1a43140
	void SetProneAimState();// 0x1a43120
	void SetFolaigeAffectorOffset(enum InCrowCameraMode);// 0x1a430a0
	void SetDyingState(bool isDying);// 0x1a43010
	void SetActiveHeadCollision(bool bActive);// 0x1a42f80
	void ServerReadyToSkydiving();// 0x1a42b10
	void Server_UseWeaponBox(CrowSupplyWeaponActor* WeaponBox);// 0x1a42ec0
	void Server_UseAmmoBox(CrowSupplyAmmoActor* AmmoBox);// 0x1a42e00
	void Server_Teleport(const Vector Location);// 0x1a42d50
	void Server_FlySpeed(float NewSpeed);// 0x1a42c90
	void Server_EndFlashBangFX();// 0x1a42c70
	void Server_CreshWindow(float MaxWindowHeightSize, Vector TargetLocation);// 0x1a42b50
	void Server_BeginFlashBangFX();// 0x1a42b30
	void ReloadCrowConditionFlag();// 0x1a42af0
	void RecoveryOxygenTimer();// 0x1a42ad0
	void OnUpdateNearItemEffect();// 0x1a42ab0
	void OnRep_IsPlunderMineral();// 0x1a42a90
	void OnPressedWeaponLooking();// 0x1a42a70
	void OnLadderMiddleExit();// 0x1a42a50
	void OnLadderAnimEndNotify(enum InNotifyEndState);// 0x1a429d0
	void OnDestroyVehicle_CharPawn(Actor* DestroyedActor);// 0x1a42940
	void OnCompleteMergedMeshFPBody(SkeletalMesh* InMergedMesh);// 0x1a428b0
	void OnCompleteMergedMeshFPArm(SkeletalMesh* InMergedMesh);// 0x1a42820
	void OnChangedLadderState(enum NewLadderState);// 0x1a427a0
	void OnCapsuleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1a425c0
	void OnCapsuleEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1a42460
	void OnCapsuleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1a42240
	void MulticastSetSkydivingMode(bool InValue);// 0x1a41fb0
	void Multicast_FlySpeed(float NewSpeed);// 0x1a42180
	void Multicast_EndGasFX();// 0x1a42160
	void Multicast_EndFlashBangFX();// 0x1a42140
	void Multicast_ChangeCrowConditionFlag(enum CCFlag);// 0x1a42080
	void Multicast_BeginGasFX();// 0x1a42060
	void Multicast_BeginFlashBangFX();// 0x1a42040
	void Latent_OnDrownedMoving();// 0x1a41f90
	void Latent_OnDeath();// 0x1a41f70
	void Latent_LadderStateUpdateDelay();// 0xca8430
	void Latent_LadderFootStepSoundRight();// 0x1a41f50
	void Latent_LadderFootStepSoundLeft();// 0x1a41f30
	bool IsSkydiving();// 0x1a41f00
	bool IsPossibleProneArea();// 0x1a41ed0
	FName GetVehicleName();// 0x1a41eb0
	float GetStopBleedingPercent();// 0x1a41e80
	CrowStatusBreathWidget* GetStatusWidget();// 0x1a41e50
	CrowSoundStateComponent* GetSoundStateComponent();// 0x1a41e20
	enum GetSeatType();// 0x1a41e00
	byte GetSeatIndex();// 0x1a41de0
	float GetReviveSecond();// 0x1a41db0
	float GetOverBleedingPercent();// 0x1a41d80
	CrowVehicleOceanTracker* GetOceanTracker();// 0x1a41d60
	bool GetIsDyingState();// 0x1a41d30
	CrowClothActorComponent* GetFPBody_ClothComponent();// 0x1a41cf0
	CrowClothActorComponent* GetFPArm_ClothComponent();// 0x1a41cd0
	CrowCharacterFallsComponent* GetFallsComponent();// 0x1a41d10
	float GetDyingSecond();// 0x1a41ca0
	CrowCharacterMovementCollision* GetCrowCharacterMovementCollision();// 0x1a41c80
	CrowBattleContainer GetCrowBattleContainer();// 0x1a41c50
	CrowVehiclePawn* GetBoardingVehicle();// 0x1a41c30
	void EndLookingWeaponMontage();// 0x1a41c10
	void ConsumeOxygenTimer();// 0x1a41bf0
	void Client_UseWeaponBox(CrowSupplyWeaponActor* WeaponBox);// 0x1a41b30
	void Client_UseAmmoBox(CrowSupplyAmmoActor* AmmoBox);// 0x1a41a70
	void Client_TeleportComplete(const Vector Location);// 0x1a419f0

--------------------------------
Class: CrowPlayerStateBase.PlayerState.Info.Actor.Object
	FString PlayerNickName;//[Offset: 0x328, Size: 1]
	FString UnknownNickName;//[Offset: 0x338, Size: 1]
	CrowTeamInfo TeamInfo;//[Offset: 0x348, Size: 1]
	enum CurrentState;//[Offset: 0x378, Size: 1]
	uint32 RevivalCount;//[Offset: 0x37c, Size: 1]
	uint32 EnemyDyingCount;//[Offset: 0x380, Size: 1]
	uint32 KillCount;//[Offset: 0x384, Size: 1]
	uint32 DeathCount;//[Offset: 0x388, Size: 1]
	uint32 ComboKillCount;//[Offset: 0x38c, Size: 1]
	uint32 Level;//[Offset: 0x390, Size: 1]
	uint64 UserExp;//[Offset: 0x398, Size: 1]
	uint32 ClassLevel;//[Offset: 0x3a0, Size: 1]
	uint32 ClassRank;//[Offset: 0x3a4, Size: 1]
	uint32 PreLevel;//[Offset: 0x3a8, Size: 1]
	uint64 PreUserExp;//[Offset: 0x3b0, Size: 1]
	uint32 SquadScore;//[Offset: 0x3b8, Size: 1]
	enum BleedingType;//[Offset: 0x3bc, Size: 1]
	float AddedDyingSecond;//[Offset: 0x3c0, Size: 1]
	bool IsReviving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	bool bIsFirstRespawnSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	CrowSaveGameServerExpInfo SaveGameServerExpInfo;//[Offset: 0x3c8, Size: 1]
	CrowTakeExpInfo TakeExpInfo;//[Offset: 0x420, Size: 1]
	uint32 TakeTotalExp;//[Offset: 0x4b0, Size: 1]
	uint32 TotalScore;//[Offset: 0x4b4, Size: 1]
	uint64 ServerKey;//[Offset: 0x4b8, Size: 1]
	int8 VehicleSeatIndex;//[Offset: 0x4c0, Size: 1]
	int BattleMoneyCount;//[Offset: 0x4c4, Size: 1]
	bool bIsDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	enum SkydivingState;//[Offset: 0x4c9, Size: 1]
	float CurrentFilterDurability;//[Offset: 0x4cc, Size: 1]
	bool bGasMaskOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	uint32[] TypedClothItemIndexArray;//[Offset: 0x4d8, Size: 1]
	TimerHandle FilterContaminateTimerHandle;//[Offset: 0x4e8, Size: 1]
	CharacterHitInfo LastHitInfo;//[Offset: 0x4f0, Size: 1]
	CrowGameInvenComponent* GameInventory;//[Offset: 0x618, Size: 1]
	CrowWeaponData[] DefaultWeaponArray;//[Offset: 0x620, Size: 1]
	CrowItemData[] DefaultEquipItemArray;//[Offset: 0x630, Size: 1]
	CrowItemData[] DefaultInvenItemArray;//[Offset: 0x640, Size: 1]
	class Object* PickupInventoryClass;//[Offset: 0x650, Size: 1]
	CrowCharacterPawn* LastCharacterPawn;//[Offset: 0x658, Size: 1]
	Pawn* LastReplicatedPawn;//[Offset: 0x660, Size: 1]
	CrowSquadInfo* SquadInfo;//[Offset: 0x668, Size: 1]
	CrowWidgetDying* DyingWidget;//[Offset: 0x670, Size: 1]
	CharacterHitInfo DyingLastHitInfo;//[Offset: 0x678, Size: 1]
	CrowIngameChatHandler* ChatHandler;//[Offset: 0x7a0, Size: 1]
	CrowPassengerInventory* PassengerInventory;//[Offset: 0x7a8, Size: 1]
	CrowClothActorComponent* ClothActorComponent;//[Offset: 0x7b0, Size: 1]
	TimerHandle SpectatingWaitTimerHandle;//[Offset: 0x7b8, Size: 1]
	Transform LastCharacterPawnTransform;//[Offset: 0x7c0, Size: 1]
	CrowResultTopPlayerInfo BackupPlayerInfo;//[Offset: 0x7f0, Size: 1]
	CrowIngameRecordManager* IngameRecordManager;//[Offset: 0x998, Size: 1]
	byte SquadNumber;//[Offset: 0x9a0, Size: 1]
	Actor* Ladder;//[Offset: 0x9a8, Size: 1]
	byte LadderState;//[Offset: 0x9b0, Size: 1]
	bool bGameOperator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1, Size: 1]
	enum CrowMatchStartType;//[Offset: 0x9b2, Size: 1]
	CrowPlayerStateBase* SpectatingPlayerState;//[Offset: 0x9b8, Size: 1]
	uint16[] FPSArray;//[Offset: 0x9c0, Size: 1]
	uint16[] PingArray;//[Offset: 0x9d0, Size: 1]
	float FilterContaminationPerSecond;//[Offset: 0x9e0, Size: 1]
	float MaxFilterDurablility;//[Offset: 0x9e4, Size: 1]
	uint32 SupplyTableIndex;//[Offset: 0x9f4, Size: 1]
	<enum,int> DestroyVehicleInfoMap;//[Offset: 0x9f8, Size: 1]
	uint32 KillVehicleWeaponCount;//[Offset: 0xa48, Size: 1]
	bool bIsGodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7d, Size: 1]
	TimerHandle GodModeTimerHandle;//[Offset: 0xa88, Size: 1]
	CrowPlayerControllerBase* OwnerPlayerController;//[Offset: 0xa90, Size: 1]
	CrowPlayerStateBase*[] ArrayKillPlayerState;//[Offset: 0xac8, Size: 1]
	CrowPlayerStateBase* LastKillMePlayerState;//[Offset: 0xad8, Size: 1]
	Actor* KitBomberTargetActor;//[Offset: 0xae0, Size: 1]
	Vector KitBomberUsePos;//[Offset: 0xae8, Size: 1]
	Vector KitBomberTargetPos;//[Offset: 0xaf4, Size: 1]
	int BombingTableIndex;//[Offset: 0xb00, Size: 1]
	CrowWorldMapIcon* WorldMapIcon;//[Offset: 0xb08, Size: 1]
	Actor*[] SquadRespawnArray;//[Offset: 0xb10, Size: 1]
	CrowMissionSystemManager* MissionSystem;//[Offset: 0xb60, Size: 1]
	<enum,float> SupplyBoxPublicLastUsingTimes;//[Offset: 0xb68, Size: 1]
	CrowBattleStatus* BattleStatus;//[Offset: 0xbb8, Size: 1]
	void UpdateMissionInfoByKill(out const CrowKillInfo KillInfo);// 0x1af3710
	void UpdateMissionInfoByFirst(enum MissinType);// 0x1af3690
	void StartSpawnKitBomberTimer(Vector FireCharacterPos, Vector TargetPos, Actor* KitTargetActor, int TableIndex);// 0x1af3500
	void SpawnKitBomber();// 0x1af34e0
	void SingleCastWorldEventResult(CrowWorldEventBase* Event, bool IsSuccess);// 0x1af2d50
	void SinglecastWeaponLevelInfo(int WeaponIndex, uint32 ChangedWeaponLevel, uint32 ChangedWeaponExp, const CrowWeaponEventInfo[] WeaponEventInfos);// 0x1af30e0
	void SinglecastUserLevelInfo(uint32 ChangedLevel, uint64 ChangedUserExp, const CrowWeaponEventInfo[] WeaponEventInfos);// 0x1af2fb0
	void SingleCastUpdateAddedInputRotation(CrowVehiclePawn* InVehiclePawn, byte SpringArmId, byte ClientRoll, uint32 View);// 0x1af2c00
	void SingleCastSquadLocation(CrowPlayerStateBase* TargetPS, Vector_NetQuantize Location);// 0x1af2b20
	void SingleCastSpawnPing(const CrowPingData PingData);// 0x1af2a40
	void SinglecastShowWeaponLevelTest(int WeaponIndex, uint32 WeaponLevel, uint32 WeaponExp);// 0x1af2eb0
	void SingleCastShowRespawnMap();// 0x1af2a20
	void SingleCastSetSquadPointSpectatingPlayer(int InSquadPoint, const uint64[] InTargetServerKeys);// 0x1af2940
	void SingleCastSetSquadPoint(int SquadPoint);// 0x1af28b0
	void SingleCastSetSpectator(float SpectatorTime);// 0x1af2820
	void SingleCastSetCustomModeSyncPlayerInfo(CrowPlayerStateBase* TargetPS, Vector_NetQuantize Location, byte HealthRate);// 0x1af26f0
	void SingleCastReplyPing(CrowPlayerStateBase* Sender, uint16 PingKey);// 0x1af2620
	void SingleCastRecvGasDamage();// 0x1af2600
	void SinglecastReconnected(Vector Location);// 0x1af2e20
	void SingleCastPlayerReJoin();// 0x1af25e0
	void SingleCastOpenSafeBox(CrowSafeBoxEventActor* TargetActor, float ProgressTime);// 0x1af2500
	void SingleCastGameStateMatch(byte InTeamID, enum StartType);// 0x1af2430
	void SingleCastGameState(enum GameState);// 0x1af23b0
	void SingleCastDropSquadPoint(CrowPlayerStateBase* TargetPS, int DropPoint);// 0x1af22e0
	void SingleCastDrawDebugSphere(const Vector Center, float Radius, int Segments, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x1af2080
	void SingleCastDrawDebugLine(const Vector LineStart, const Vector LineEnd, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x1af1e70
	void SingleCastDrawDebugDirectionalArrow(const Vector LineStart, const Vector LineEnd, float ArrowSize, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x1af1c10
	void SingleCastDrawDebugBox(const Vector Center, const Vector Box, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x1af1a00
	void SingleCastChangeTakeWeaponExpInfo(uint32 ExpShareIndex, uint32 WaeponExp, uint32 WaeponBuffExp, uint32 WeaponKillCount, uint32 WeaponHeadShotCount);// 0x1af1870
	void SingleCastChangeTakeExpInfo(const CrowTakeExpInfo InTakeExpInfo);// 0x1af1780
	void SingleCastChangeTakeExp(enum TakeExpType, const uint32 Exp, const uint32 BufExp);// 0x1af1670
	void SingleCastChangeMissionStateInfo(const CrowMissionInfo[] MissionStateInfo);// 0x1af15d0
	void SingleCastCancelPing(uint16 PingKey);// 0x1af1540
	void SingleCastAddMedalType(enum MedalType);// 0x1af14c0
	void SingleCastAddMedal(enum ModPointIndex, int Exp);// 0x1af13f0
	void SingleCastAddBattleMoney(int InBattleMoneyCount);// 0x1af1360
	void Singlecast_StartTutorial(CrowMissionInfo MissionInfo);// 0x1af3430
	void Singlecast_ComplateTutorial(CrowMissionInfo MissionInfo, int PrevMissionID, bool IsComplate);// 0x1af32f0
	void Singlecast_AddMissionPopup(CrowMissionInfo MissionInfo);// 0x1af3240
	void SetWinnerTeam(byte TeamID);// 0x1af12e0
	void SetKilledMePlayerState(CrowPlayerStateBase* Last);// 0x1af11c0
	void Server_UseSquadPoint(const uint32 nUseSquadPoint);// 0x1af1130
	void Server_SpawnKitBomber(Vector FireCharacterPos, Vector TargetPos, Actor* KitTargetActor, int TableIndex);// 0x1af0f90
	void Server_ShowWeaponLevelTest(uint32 WeaponIndex);// 0x1af0f00
	void Server_SetWeaponLevelTest(uint32 WeaponIndex, uint32 WeaponLevel, uint64 WeaponExp);// 0x1af0e00
	void Server_SetLadderState(enum NewLadderState);// 0x1af0d50
	void Server_SetLadder(Actor* NewLadder);// 0x1af0c90
	void Server_SetIsStopBleeding(enum _bleedingType);// 0x1af0c10
	void Server_RequestGasMaskOn(bool InMaskOn);// 0x1af0b50
	void Server_LadderTopEntry(Actor* NewLader);// 0x1af0a90
	void Server_LadderMiddleExit();// 0x1af0a40
	void Server_GasMaskOnAnimation();// 0x1af09f0
	void Server_ClearLadder();// 0x1af09a0
	void Server_AddSquadPoint(const uint32 nAddSquadPoint);// 0x1af0910
	void RespondSoundTimer();// 0xca8430
	void RequestStopEmotion();// 0x1af08c0
	void RequestSpawnPing(const CrowPingData PingData);// 0x1af07e0
	void RequestSetReviving(CrowPlayerStateBase* DyingPS, bool InRevive);// 0x1af0710
	void RequestSafeBoxStateChange(CrowSafeBoxEventActor* TargetActor, enum NewState);// 0x1af0640
	void RequestReviviePlayer(CrowPlayerStateBase* DyingPS, bool bIsMySelf);// 0x1af0570
	void RequestReplyPing(uint16 PingKey);// 0x1af04e0
	void RequestPlayEmotion(uint32 EmotionIndex);// 0x1af0420
	void RequestEndSpectating();// 0x1af0400
	void RequestCollectClaymoreMine(CrowProjectileClaymoreMine* ClaymoreMine);// 0x1af0260
	void RequestCancelPing(uint16 PingKey);// 0x1af01d0
	void RequestCallHelp();// 0x1af01b0
	void RequestBattleMoney(int InBattleMoneyCount);// 0x1af0120
	void OnRep_SimpleClothItemData();// 0x1af0070
	void OnRep_IsDisconnected();// 0x1af0050
	void OnRep_GasMaskOn();// 0x1af0030
	void OnFilterContaminateTimer();// 0x1af0010
	void MulticastStopEmotion();// 0x1aefb30
	void MulticastStartSpectating();// 0x1aefb10
	void MulticastStartForcedSpectating(Transform lastCharacterTransform);// 0x1aefa20
	void MulticastSetObserver(bool Value);// 0x1aef990
	void MulticastSetGodMode(bool bValue);// 0x1aef900
	void MulticastReviveAni(bool InRevive);// 0x1aef870
	void MulticastPlayerHit(const CharacterHitInfoClient HitInfo, enum _damageType);// 0x1aef770
	void MulticastPlayEmotion(uint32 EmotionIndex);// 0x1aef6b0
	void MulticastGetOffPassenger(int InSeatIndex, CrowVehiclePawn* InVehiclePawn, Pawn* InPassenger, const Vector InExitLocation, const Rotator InExitRotation);// 0x1aef510
	void MulticastDrawEnableSpawn(Vector Target);// 0x1aef480
	void MulticastChangeTeamInfo(const CrowTeamInfo InTeamInfo);// 0x1aef3c0
	void MulticastChangeState(enum OldState, enum NewState, const CharacterHitInfoClient HitInfo);// 0x1aef280
	void MultiCastCallHelp();// 0x1aef260
	void Multicast_UseSupplyBox(enum InSupplyBoxType, float UsedServerTime);// 0x1aefef0
	void Multicast_SetLadderState(enum NewLadderState);// 0x1aefe40
	void Multicast_SetLadder(Actor* NewLadder);// 0x1aefd80
	void Multicast_LadderTopEntry(Actor* NewLadder);// 0x1aefcc0
	void Multicast_LadderMiddleExit();// 0x1aefc70
	void Multicast_GasMaskOnAnimation();// 0x1aefc20
	void Multicast_ClearLadderWithLocallyControlled();// 0x1aefbd0
	void Multicast_ClearLadder();// 0x1aefb80
	bool IsTwiceKill(CrowPlayerStateBase* VictimPlayerState);// 0x1aef1c0
	bool IsOnVehicle();// 0x1aef190
	CrowTeamInfo GetTeam();// 0x1aef120
	CrowTakeExpInfo GetTakeExpInfo();// 0x1aeef80
	uint32 GetSupplyTableIndex();// 0x1aeef60
	CrowSaveGameServerExpInfo GetSaveGameServerExpInfo();// 0x1aeeed0
	FString GetPlayerNickName();// 0x1aeee50
	CrowPlayerStateBase* GetLastKillMePlayerState();// 0x1aeee20
	void ClearKillState();// 0x1aeeaf0
	void AddTakeMissionEXP(out const CrowMissionInfo MissionInfo);// 0x1aeea50

--------------------------------
Class: CrowKillInfo
	CrowPlayerStateBase* Attacker;//[Offset: 0x0, Size: 1]
	CrowPlayerStateBase* Victim;//[Offset: 0x8, Size: 1]
	enum DamageCauser;//[Offset: 0x10, Size: 1]
	enum ItemType;//[Offset: 0x11, Size: 1]
	uint32 WeaponIndex;//[Offset: 0x14, Size: 1]
	float ActualDamage;//[Offset: 0x18, Size: 1]
	FName BoneName;//[Offset: 0x1c, Size: 1]
	bool IsFirstKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: CrowWorldEventBase.Actor.Object
	BoxComponent* Root;//[Offset: 0x228, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x230, Size: 1]
	bool Reactivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	float LeftTimeAfterActivation;//[Offset: 0x23c, Size: 1]
	float TimeLimit;//[Offset: 0x240, Size: 1]
	FText EventActivationTitle;//[Offset: 0x248, Size: 1]
	FText EventActivationDescription;//[Offset: 0x260, Size: 1]
	FString[] EventActivationDescriptionList;//[Offset: 0x278, Size: 1]
	FText BeforeObjectiveTitle;//[Offset: 0x288, Size: 1]
	FText BeforeObjective;//[Offset: 0x2a0, Size: 1]
	FText AfterObjectiveTitle;//[Offset: 0x2b8, Size: 1]
	FText AfterObjective;//[Offset: 0x2d0, Size: 1]
	bool DisplaySuccessUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	FText SuccessText;//[Offset: 0x2f0, Size: 1]
	Object* SuccessIcon;//[Offset: 0x308, Size: 1]
	bool DisplayFailUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	FText FailText;//[Offset: 0x318, Size: 1]
	Object* FailIcon;//[Offset: 0x330, Size: 1]
	WorldEventInfo EventInfo;//[Offset: 0x338, Size: 1]
	Actor*[] EventObjectiveActorArray;//[Offset: 0x340, Size: 1]
	CrowWorldEventSetting* WorldEventSetting;//[Offset: 0x350, Size: 1]
	void OnRep_EventInfo();// 0x1b7af30
	void MulticastEventState(enum NewState);// 0x1acc640
	void MulticastActive();// 0x1b7ad90

--------------------------------
Class: WorldEventInfo
	float RemainTime;//[Offset: 0x0, Size: 1]
	enum EventState;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowWorldEventSetting.Actor.Object
	BoxComponent* Root;//[Offset: 0x228, Size: 1]
	bool bIsEnableEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	CrowWorldEventModeInfo EventInfo;//[Offset: 0x238, Size: 1]
	bool bIsDisplayUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	CrowWorldEventGroup*[] GroupArray;//[Offset: 0x258, Size: 1]
	CrowWorldEventBase*[] ActiveEventArray;//[Offset: 0x268, Size: 1]
	CrowWorldEventWidgetInfo[] EventInfoArray;//[Offset: 0x280, Size: 1]
	CrowWorldEventAlarmWidget* WB_EventAlarm;//[Offset: 0x290, Size: 1]
	CrowWorldEventAlarmWidget* WB_EventSuccess;//[Offset: 0x298, Size: 1]
	CrowWorldEventAlarmWidget* WB_EventFail;//[Offset: 0x2a0, Size: 1]
	CrowWorldEventWidgetInfo CurrentEventInfo;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: CrowWorldEventModeInfo
	int ActivationEventLimit;//[Offset: 0x0, Size: 1]
	CrowWorldEventGroupInfo[] Groups;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldEventGroupInfo
	float ActivationTimeMin;//[Offset: 0x0, Size: 1]
	float ActivationTimeMax;//[Offset: 0x4, Size: 1]
	float ReactivationTimeMin;//[Offset: 0x8, Size: 1]
	float ReactivationTimeMax;//[Offset: 0xc, Size: 1]
	enum ActivationType;//[Offset: 0x10, Size: 1]
	CrowWorldEventBase*[] EventList;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldEventGroup.ActorComponent.Object
	CrowWorldEventBase*[] DisableEventList;//[Offset: 0xb8, Size: 1]
	CrowWorldEventGroupInfo GroupInfo;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: CrowWorldEventWidgetInfo
	enum Type;//[Offset: 0x0, Size: 1]
	FText Titile;//[Offset: 0x8, Size: 1]
	FText Description;//[Offset: 0x20, Size: 1]
	Object* Image;//[Offset: 0x38, Size: 1]
	CrowWorldEventBase* EventBase;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowWorldEventAlarmWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Title;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Desc;//[Offset: 0x350, Size: 1]
	Image* IMG_Icon;//[Offset: 0x358, Size: 1]
	WidgetAnimation* AniShow;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniHide;//[Offset: 0x368, Size: 1]
	CrowWorldEventSetting* WorldEventSetting;//[Offset: 0x370, Size: 1]
	void OnAniFinished();// 0x1b7ade0

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 1]
	delegate TextDelegate;//[Offset: 0x140, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 1]
	SlateFontInfo Font;//[Offset: 0x188, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 1]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 1]
	float MinDesiredWidth;//[Offset: 0x290, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	enum TextTransformPolicy;//[Offset: 0x296, Size: 1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x31fd700
	void SetText(FText InText);// 0x31fd610
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x31fd510
	void SetShadowOffset(Vector2D InShadowOffset);// 0x31fd270
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x31fd1e0
	void SetOpacity(float InOpacity);// 0x31fd160
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x31fce40
	void SetFont(SlateFontInfo InFontInfo);// 0x31fc880
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x31fc610
	void SetAutoWrapText(bool InAutoTextWrap);// 0x31fc580
	FText GetText();// 0x31fc1a0
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x31fbf60
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x31fbf30

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 1]
	byte Justification;//[Offset: 0x10b, Size: 1]
	enum WrappingPolicy;//[Offset: 0x10c, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 1]
	float WrapTextAt;//[Offset: 0x110, Size: 1]
	Margin Margin;//[Offset: 0x114, Size: 1]
	float LineHeightPercentage;//[Offset: 0x124, Size: 1]
	void SetJustification(byte InJustification);// 0x31fcb20

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 1]
	Object* FontMaterial;//[Offset: 0x8, Size: 1]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 1]
	FName TypefaceFontName;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x48, Size: 1]
	int LetterSpacing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 1]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 1]
	delegate BrushDelegate;//[Offset: 0x190, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 1]
	void SetOpacity(float InOpacity);// 0x31efe90
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x31ef820
	void SetBrushTintColor(SlateColor TintColor);// 0x31ef6a0
	void SetBrushSize(Vector2D DesiredSize);// 0x31ef620
	void SetBrushResourceObject(Object* ResourceObject);// 0x31ef590
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x1b8dd60
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x31ef4c0
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x31ef370
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x31ef260
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x31ef1d0
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x31ef0e0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x31ef050
	void SetBrush(out const SlateBrush InBrush);// 0x31eef40
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x31ee710

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0x180, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowWeaponEventInfo
	enum EventType;//[Offset: 0x0, Size: 1]
	enum PartsType;//[Offset: 0x1, Size: 1]
	uint32 Index;//[Offset: 0x4, Size: 1]
	uint32 WeaponLevel;//[Offset: 0x8, Size: 1]
	uint32 PartsIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowVehiclePawn.Pawn.Actor.Object
	CrowWorldIconActor* RewardIconActor;//[Offset: 0x2a8, Size: 1]
	ParticleSystemComponent* RewardSmokeEffect;//[Offset: 0x2b0, Size: 1]
	uint32 VehicleIndex;//[Offset: 0x2b8, Size: 1]
	FString VehicleTextIndex;//[Offset: 0x2c0, Size: 1]
	FName SkidMarkIndex;//[Offset: 0x2d0, Size: 1]
	CrowComponentContainer* ComponentContainer;//[Offset: 0x2d8, Size: 1]
	class CrowVehicleFacadeBase* VehicleFacadeClass;//[Offset: 0x2e0, Size: 1]
	RepMovementTolerance ReplicatedMovementTolerance;//[Offset: 0x2e8, Size: 1]
	CrowVehicleParam* VehicleParam;//[Offset: 0x2f8, Size: 1]
	SceneComponent* SceneComp;//[Offset: 0x300, Size: 1]
	<enum,CrowFoliageAffectorComponent*> MapVehicleFoliageAffector;//[Offset: 0x308, Size: 1]
	CrowFoliageAffectorComponent*[] FoliageAffectors;//[Offset: 0x358, Size: 1]
	CrowVehicleFacadeBase* VehicleFacade;//[Offset: 0x368, Size: 1]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x370, Size: 1]
	CrowVehicleFSM* FSM;//[Offset: 0x3b0, Size: 1]
	CrowRotorFSM* RotorFSM;//[Offset: 0x3b8, Size: 1]
	CrowVehicleEventDispatcher* EventDispatcher;//[Offset: 0x3c0, Size: 1]
	CrowVehicleFloodingComponent* VehicleFloodingComponent;//[Offset: 0x3c8, Size: 1]
	CrowImpactDamageControl* VehicleImpactDamageControl;//[Offset: 0x3d0, Size: 1]
	CrowBattleContainer BattleContainer;//[Offset: 0x3d8, Size: 1]
	bool bPostEditMoveInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	Rotator DefaultCamera3PRotate;//[Offset: 0x3fc, Size: 1]
	enum IconType;//[Offset: 0x408, Size: 1]
	uint32 EmptySeatCount;//[Offset: 0x40c, Size: 1]
	CrowWorldMapIcon* MapIcon;//[Offset: 0x410, Size: 1]
	CrowIndicatorViewInfo* IndiViewInfo;//[Offset: 0x418, Size: 1]
	bool bVehicleAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	enum LastVehicleState;//[Offset: 0x424, Size: 1]
	<uint64,CrowDamageExpInfo> DamageExpMap;//[Offset: 0x428, Size: 1]
	Vector PrevVelocity;//[Offset: 0x47c, Size: 1]
	Vector DebugSpawnerLocation;//[Offset: 0x490, Size: 1]
	Vector DebugSpawnerLocationTeleport;//[Offset: 0x49c, Size: 1]
	enum VehicleType;//[Offset: 0x4a8, Size: 1]
	AkAudioEvent* ImpactSound;//[Offset: 0x4b0, Size: 1]
	AkAudioEvent* LandingSound;//[Offset: 0x4b8, Size: 1]
	float LandingSoundHeight;//[Offset: 0x4c0, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoLocal;//[Offset: 0x4c8, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoMySquad;//[Offset: 0x550, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoMyTeam;//[Offset: 0x5d8, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoEnemy;//[Offset: 0x660, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoEmpty;//[Offset: 0x6e8, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoObserver;//[Offset: 0x770, Size: 1]
	<enum,CrowVehicleIconInfo> ModeIconSet;//[Offset: 0x7f8, Size: 1]
	float MaxLeanAccelerationForward;//[Offset: 0x848, Size: 1]
	float MaxLeanAccelerationRight;//[Offset: 0x84c, Size: 1]
	CrowVehicleDeltaVelocity[] CachedDeltaVelocities;//[Offset: 0x850, Size: 1]
	Vector CachedBodyVelocity;//[Offset: 0x860, Size: 1]
	Vector2D PassengerLeanValue;//[Offset: 0x86c, Size: 1]
	int ReadyFrameCount;//[Offset: 0x874, Size: 1]
	float SyncPhysicsIgnoreTime;//[Offset: 0x878, Size: 1]
	Vector PrevWorldOrigin;//[Offset: 0x87c, Size: 1]
	BoxComponent* FloodingCheckBox;//[Offset: 0x888, Size: 1]
	uint32 OverrideSkinIndex;//[Offset: 0x890, Size: 1]
	bool bIsFlooding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	byte SquadRewardIndex;//[Offset: 0x895, Size: 1]
	TimerHandle FloodingCheckTimerHandle;//[Offset: 0x898, Size: 1]
	float CurrentFloodingSecond;//[Offset: 0x8a0, Size: 1]
	bool IsCrowVehicleComponentUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	byte OwnerTeamID;//[Offset: 0x8a5, Size: 1]
	enum LockOnState;//[Offset: 0x8a6, Size: 1]
	PhysicalMaterial* RadialDamagePhysicsMaterial;//[Offset: 0x8a8, Size: 1]
	CrowCharacterPawn*[] LockOnCharacterList;//[Offset: 0x8b8, Size: 1]
	CrowCharacterPawn*[] TargetingCharacterList;//[Offset: 0x8c8, Size: 1]
	void UseImpedimentsWeapon();// 0xca8430
	float TakeDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1b55ef0
	void SetVehicleParam(CrowVehicleParam* InVehicleParam);// 0x1b55e60
	void SetLockOnTargeting(CrowCharacterPawn* NewTargetingCharacter);// 0x1b55d00
	void SetIsLockOn(CrowCharacterPawn* NewLockOnCharacter);// 0x1b55c70
	void SetCrowBattleContainer(out const CrowBattleContainer InBattleContainer);// 0x1b55bc0
	void RemoveTargetingCharacter(CrowCharacterPawn* RemoveCharacter);// 0x1b558e0
	void RemoveLockonCharacter(CrowCharacterPawn* RemoveCharacter);// 0x1b55850
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult HitResult);// 0x1b2f7a0
	void OnRep_OverrideSkinIndex();// 0x1b55810
	void OnImmerge(Vector InWaterLocation);// 0x1b55760
	void OnFloodingExit();// 0x1b55740
	void OnFloodingEnter();// 0x1b55720
	void OnFloodingDepthAndElapsedTime(float InDepth, float InElapsedTime);// 0x1b55650
	void OnFloodingDamage(float InDamage);// 0x1b555d0
	void OnAxisLookUp(float Val);// 0x1b55100
	void OnAxisLookRight(float Val);// 0x1b55080
	bool IsLockOnUser();// 0x1b54fb0
	bool IsContainLockOnUser(CrowCharacterPawn* FindPawn);// 0x1b54d80
	enum GetVehicleType();// 0x1b54f80
	CrowVehicleParam* GetVehicleParam();// 0x1b54f60
	CrowVehicleFacadeBase* GetVehicleFacade();// 0x1b54f40
	Vector GetLockOnPosition();// 0x1b54ec0
	bool GetIsLockOnTargeting(CrowCharacterPawn* CheckCharacter);// 0x1b54e20
	bool GetIsLockOn(CrowCharacterPawn* CheckCharacter);// 0x1b54d80
	CrowBattleContainer GetCrowBattleContainer();// 0x1b54be0
	void DetachedControll();// 0x1b54bc0
	void ClientSetLockOnTargeting(CrowCharacterPawn* NewTargetingCharacter);// 0x1b54b30
	void ClientSetIsLockOn(CrowCharacterPawn* NewLockOnCharacter);// 0x1b54aa0
	void ClientRemoveTargetingCharacter(CrowCharacterPawn* RemoveCharacter);// 0x1b54a10
	void ClientRemoveLockonCharacter(CrowCharacterPawn* RemoveCharacter);// 0x1b54980
	bool ChangeSimulationPhysics(bool bSimulation);// 0x1b548c0
	void AttachedControll();// 0x1b548a0
	void AfterPossess();// 0xca8430

--------------------------------
Class: CrowComponentContainer.ActorComponent.Object
	<class Object,CrowBinderActorComponent*> Binders;//[Offset: 0xb0, Size: 1]
	<class Object,CrowActorComponentBase*> CrowComponents;//[Offset: 0x100, Size: 1]
	<uint32,CrowObjectBase*> CrowObjects;//[Offset: 0x150, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1a0, Size: 1]
	void CollectAll(Actor* TargetActor);// 0x1a59720
	void ClearAll();// 0x1a59700

--------------------------------
Class: CrowBinderActorComponent.ActorComponent.Object
	CrowComponentContainer* OwnerContainer;//[Offset: 0xb0, Size: 1]
	Actor* CrowComponentOwnerActor;//[Offset: 0xb8, Size: 1]
	void SetOwnerContainer(CrowComponentContainer* ComponentContainer, Actor* OwnerActor);// 0x1a1a770
	class Object BNE_GetBinderClassType();// 0x1a2b9c0

--------------------------------
Class: CrowActorComponentBase.ActorComponent.Object
	CrowComponentContainer* OwnerContainer;//[Offset: 0xb0, Size: 1]
	Actor* CrowComponentOwnerActor;//[Offset: 0xb8, Size: 1]
	void SetOwnerContainer(CrowComponentContainer* ComponentContainer, Actor* OwnerActor);// 0x1a1a770
	class Object BNE_GetCrowComponentType();// 0x1a1a210

--------------------------------
Class: CrowObjectBase.Object
	CrowComponentContainer* OwnerContainer;//[Offset: 0x28, Size: 1]
	Actor* CrowComponentOwnerActor;//[Offset: 0x30, Size: 1]
	void SetOwnerContainer(CrowComponentContainer* ComponentContainer, Actor* OwnerActor);// 0x1ad4ec0

--------------------------------
Class: CrowVehicleFacadeBase.CrowActorInitializerBase.ActorComponent.Object
	CrowVehiclePawn* VehiclePawn;//[Offset: 0xc0, Size: 1]
	CrowVehicleMovementBase* MovementBase;//[Offset: 0xc8, Size: 1]
	VehicleDamageParameter[] DamageParameterList;//[Offset: 0xd0, Size: 1]
	float PrevSpeed;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: CrowActorInitializerBase.ActorComponent.Object
	Actor* TargetActor;//[Offset: 0xb0, Size: 1]
	CrowComponentContainer* ComponentContainer;//[Offset: 0xb8, Size: 1]
	static CrowActorInitializerBase* SafeNewInitializer(Actor* TargetActor, class Object Class);// 0x1a1a620

--------------------------------
Class: CrowVehicleMovementBase.ActorComponent.Object
	bool UseSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	Pawn* OwnerPawn;//[Offset: 0xc8, Size: 1]
	PrimitiveComponent* BodyComponent;//[Offset: 0xd0, Size: 1]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0xd8, Size: 1]
	SpringArmComponent* SpringArm;//[Offset: 0xe0, Size: 1]
	Rotator SpringArmInitialRotation;//[Offset: 0xe8, Size: 1]
	Rotator SpringArmCurrentRotation;//[Offset: 0xf4, Size: 1]
	Transform RootBoneRelativeTransform;//[Offset: 0x100, Size: 1]
	float CurrentThrottleInput;//[Offset: 0x130, Size: 1]
	float CurrentSteeringInput;//[Offset: 0x134, Size: 1]
	float LastRequestThrottleInput;//[Offset: 0x138, Size: 1]
	float LastRequestSteeringInput;//[Offset: 0x13c, Size: 1]
	float BoundsRadius;//[Offset: 0x140, Size: 1]
	bool IsReadyForDriving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool IsBlockedPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	float LinearDamping;//[Offset: 0x148, Size: 1]
	float LimitSteeringRatio;//[Offset: 0x14c, Size: 1]
	void RequestUpdateInput(float ThrottleInput, float SteeringInput);// 0x1165280
	void MulticastResetInput();// 0x1164c40
	void MulticastInput(float ThrottleInput, float SteeringInput);// 0x1164a80

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1f8, Size: 1]
	Vector SocketOffset;//[Offset: 0x1fc, Size: 1]
	Vector TargetOffset;//[Offset: 0x208, Size: 1]
	float ProbeSize;//[Offset: 0x214, Size: 1]
	byte ProbeChannel;//[Offset: 0x218, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21c, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21c, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21c, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21c, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21c, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21c, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21d, Size: 1]
	float CameraLagSpeed;//[Offset: 0x220, Size: 1]
	float CameraRotationLagSpeed;//[Offset: 0x224, Size: 1]
	float CameraLagMaxTimeStep;//[Offset: 0x228, Size: 1]
	float CameraLagMaxDistance;//[Offset: 0x22c, Size: 1]
	bool IsCollisionFixApplied();// 0x3c88f90
	Vector GetUnfixedCameraPosition();// 0x3c88f50
	Rotator GetTargetRotation();// 0x3c88f10

--------------------------------
Class: VehicleDamageParameter
	enum Type;//[Offset: 0x0, Size: 1]
	float Parameter;//[Offset: 0x4, Size: 1]
	bool ClearParameter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowVehicleParam.CrowActorComponentBase.ActorComponent.Object
	VehicleSetup Setup;//[Offset: 0xc0, Size: 1]
	CrowVehicleDamageSetup DamageSetup;//[Offset: 0xd0, Size: 1]
	CrowVehicleDustType* DustType;//[Offset: 0x168, Size: 1]
	VehicleEffectSetup EffectSetup;//[Offset: 0x170, Size: 1]
	CameraComponent* Camera;//[Offset: 0x178, Size: 1]
	enum VehicleShieldingType;//[Offset: 0x180, Size: 1]
	CrowVehicleSightComponent* VehicleSight;//[Offset: 0x188, Size: 1]
	CrowVehicleWheelEffect* WheelEffect;//[Offset: 0x190, Size: 1]
	CrowPassengerManager* PassengerManager;//[Offset: 0x198, Size: 1]
	CrowVehicleEventDispatcher* EventDispatcher;//[Offset: 0x1a0, Size: 1]
	WidgetComponent* IndicatorWidgetComp;//[Offset: 0x1a8, Size: 1]
	CrowPartDamageBox*[] PartDamageBoxList;//[Offset: 0x1b0, Size: 1]
	CrowVehicleWeaponManager* WeaponManager;//[Offset: 0x1c0, Size: 1]
	CrowVehicleFloodingComponent* FloodingComp;//[Offset: 0x1c8, Size: 1]
	void SetParams(SkeletalMeshComponent* InMesh, SceneComponent* InCameraRoot);// 0x1b55d90
	CrowIndicatorInfo* GetIndicatorWidget();// 0xca8260

--------------------------------
Class: CrowIndicatorInfo.CrowPingWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_IndicatorInSide;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_LocateArrow;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_VehicleIcon;//[Offset: 0x388, Size: 1]
	CanvasPanel* CP_MyTeamIcon;//[Offset: 0x390, Size: 1]
	VerticalBox* VB_DriverNickName;//[Offset: 0x398, Size: 1]
	VerticalBox* VB_UserNickName;//[Offset: 0x3a0, Size: 1]
	VerticalBox* VB_Name;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_UserDistance;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_VehicleName;//[Offset: 0x3b8, Size: 1]
	TextBlock* TB_VehicleDistance;//[Offset: 0x3c0, Size: 1]
	CrowPlayerControllerBase* LocalPlayerController;//[Offset: 0x3c8, Size: 1]
	CrowPlayerStateBase* LocalPlayerState;//[Offset: 0x3d0, Size: 1]
	CrowPlayerStateBase* TargetPlayerState;//[Offset: 0x3d8, Size: 1]
	SizeBox* SB_MyTeam;//[Offset: 0x3e0, Size: 1]
	SizeBox* SB_Vehicle;//[Offset: 0x3e8, Size: 1]
	TextBlock* TB_UserNickName;//[Offset: 0x3f0, Size: 1]
	Image* IMG_VehicleIcon;//[Offset: 0x3f8, Size: 1]
	WidgetSwitcher* WS_AllyIcon;//[Offset: 0x400, Size: 1]
	Image* IMG_Icon_SquadLeader;//[Offset: 0x408, Size: 1]
	Image* IMG_Squad_Color;//[Offset: 0x410, Size: 1]
	WidgetSwitcher* WS_StatusIcon;//[Offset: 0x418, Size: 1]
	TextBlock* TB_SquadNum;//[Offset: 0x420, Size: 1]
	Image* IMG_2ndWindGauge;//[Offset: 0x428, Size: 1]
	MaterialInstanceDynamic* GaugeMaterial;//[Offset: 0x430, Size: 1]
	SlateBrush IMG_Icon_Tank;//[Offset: 0x440, Size: 1]
	SlateBrush IMG_Icon_Helicopter;//[Offset: 0x4c8, Size: 1]
	SlateBrush IMG_Icon_Car;//[Offset: 0x550, Size: 1]
	SlateBrush IMG_Icon_Boat;//[Offset: 0x5d8, Size: 1]
	LinearColor colorVehicleEmpty;//[Offset: 0x660, Size: 1]
	LinearColor colorVehicleMyTeam;//[Offset: 0x670, Size: 1]
	LinearColor colorVehicleMySquad;//[Offset: 0x680, Size: 1]
	Actor* TargetActor;//[Offset: 0x690, Size: 1]
	byte indicatorType;//[Offset: 0x698, Size: 1]
	CrowGameIconDisplayInfo DisplayInfo;//[Offset: 0x6a0, Size: 1]
	FName StopBleedingAnimName;//[Offset: 0x728, Size: 1]
	FName FastBleedingAnimName;//[Offset: 0x730, Size: 1]
	FName CallHelpAnimName;//[Offset: 0x738, Size: 1]
	void UpdateIndicator();// 0x1a9cf60
	void SetWidgetData(byte indiType, Actor* Target);// 0x1a9ce90

--------------------------------
Class: CrowPingWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Actor* PingTargetActor;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_Ping;//[Offset: 0x350, Size: 1]
	WidgetAnimation* AniPingTargetStart;//[Offset: 0x358, Size: 1]
	WidgetAnimation* AniPingTargetLoop;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniPingHoverLoop;//[Offset: 0x368, Size: 1]
	void OnPingTargetStartFinished();// 0x1ae0b70

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x31e6040

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 1]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int ZOrder;//[Offset: 0x64, Size: 1]
	void SetZOrder(int InZOrder);// 0x31e82d0
	void SetSize(Vector2D InSize);// 0x31e7df0
	void SetPosition(Vector2D InPosition);// 0x31e7bf0
	void SetOffsets(Margin InOffset);// 0x31e7810
	void SetMinimum(Vector2D InMinimumAnchors);// 0x31e7700
	void SetMaximum(Vector2D InMaximumAnchors);// 0x31e7680
	void SetLayout(out const AnchorData InLayoutData);// 0x31e74b0
	void SetAutoSize(bool InbAutoSize);// 0x31e68f0
	void SetAnchors(Anchors InAnchors);// 0x31e67d0
	void SetAlignment(Vector2D InAlignment);// 0x31e6750
	int GetZOrder();// 0x31e6690
	Vector2D GetSize();// 0x31e63f0
	Vector2D GetPosition();// 0x31e63b0
	Margin GetOffsets();// 0x31e6370
	AnchorData GetLayout();// 0x31e62e0
	bool GetAutoSize();// 0x31e6250
	Anchors GetAnchors();// 0x31e6210
	Vector2D GetAlignment();// 0x31e61d0

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 1]
	Anchors Anchors;//[Offset: 0x10, Size: 1]
	Vector2D Alignment;//[Offset: 0x20, Size: 1]

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x3206260

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 1]
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3207ca0
	void SetSize(SlateChildSize InSize);// 0x3207a20
	void SetPadding(Margin InPadding);// 0x32075b0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3206ff0

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 1]
	byte SizeRule;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x130, Size: 1]
	float HeightOverride;//[Offset: 0x134, Size: 1]
	float MinDesiredWidth;//[Offset: 0x138, Size: 1]
	float MinDesiredHeight;//[Offset: 0x13c, Size: 1]
	float MaxDesiredWidth;//[Offset: 0x140, Size: 1]
	float MaxDesiredHeight;//[Offset: 0x144, Size: 1]
	float MinAspectRatio;//[Offset: 0x148, Size: 1]
	float MaxAspectRatio;//[Offset: 0x14c, Size: 1]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 1]
	void SetWidthOverride(float InWidthOverride);// 0x31f9800
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x31f8b70
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x31f8a70
	void SetMinAspectRatio(float InMinAspectRatio);// 0x31f89f0
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x31f8970
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x31f88f0
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x31f8870
	void SetHeightOverride(float InHeightOverride);// 0x31f8660
	void ClearWidthOverride();// 0x31f6ec0
	void ClearMinDesiredWidth();// 0x31f6ea0
	void ClearMinDesiredHeight();// 0x31f6e80
	void ClearMinAspectRatio();// 0x31f6e60
	void ClearMaxDesiredWidth();// 0x31f6e40
	void ClearMaxDesiredHeight();// 0x31f6e20
	void ClearMaxAspectRatio();// 0x31f6e00
	void ClearHeightOverride();// 0x31f6de0

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x31eb0d0
	PanelSlot* GetContentSlot();// 0x31ea9f0
	Widget* GetContent();// 0x31ea9c0

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x120, Size: 1]
	void SetActiveWidgetIndex(int Index);// 0x3211ef0
	void SetActiveWidget(Widget* Widget);// 0x31ef1d0
	Widget* GetWidgetAtIndex(int Index);// 0x32114d0
	int GetNumWidgets();// 0x3211220
	int GetActiveWidgetIndex();// 0x3210f50
	Widget* GetActiveWidget();// 0x3210f20

--------------------------------
Class: VehicleSetup
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 1]
	SceneComponent* CameraRoot;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowVehicleDamageSetup
	class Actor* DestroyedActorTemplate;//[Offset: 0x0, Size: 1]
	Vector DestroyedActorSpawnOffset;//[Offset: 0x8, Size: 1]
	float MaxHP;//[Offset: 0x14, Size: 1]
	float SevereHP;//[Offset: 0x18, Size: 1]
	float BurningDotDamage;//[Offset: 0x1c, Size: 1]
	class CrowDamageType* DamageType;//[Offset: 0x20, Size: 1]
	WeaponDamageSettings DamageSettings;//[Offset: 0x28, Size: 1]
	CrowVehicleDamageEffect[] DamageEffectList;//[Offset: 0x50, Size: 1]
	CrowVehicleEnginePowerDrop EnginePowerDrop;//[Offset: 0x60, Size: 1]

--------------------------------
Class: CrowDamageType.DamageType.Object
	float KillImpulse;//[Offset: 0x40, Size: 1]
	enum DamageSourceType;//[Offset: 0x44, Size: 1]
	float BuildingDamageMultiply;//[Offset: 0x48, Size: 1]
	float PropDamageMultiply;//[Offset: 0x4c, Size: 1]
	bool IsForcedDamageToArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	float ArmorMultiflyDamge;//[Offset: 0x54, Size: 1]

--------------------------------
Class: WeaponDamageSettings
	float MinDamege;//[Offset: 0x0, Size: 1]
	float MaxDamege;//[Offset: 0x4, Size: 1]
	float MinRadius;//[Offset: 0x8, Size: 1]
	float MaxRadius;//[Offset: 0xc, Size: 1]
	float Falloff;//[Offset: 0x10, Size: 1]
	CurveFloat* DropDistanceCurve;//[Offset: 0x18, Size: 1]
	float FriendlyFireDamage;//[Offset: 0x20, Size: 1]
	int DotDamageSeconds;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CrowVehicleDamageEffect
	float ActivateHP;//[Offset: 0x0, Size: 1]
	VehicleDamageParameter[] DamageParameterList;//[Offset: 0x8, Size: 1]
	FxReplicator_FxTemplate[] FxTemplateList;//[Offset: 0x18, Size: 1]
	CrowFxReplicatorComponent* FxReplicator;//[Offset: 0x28, Size: 1]

--------------------------------
Class: FxReplicator_FxTemplate
	FName AttachSocketName;//[Offset: 0x0, Size: 1]
	ParticleSystem* FX;//[Offset: 0x8, Size: 1]
	Vector Location;//[Offset: 0x10, Size: 1]
	Rotator Rotation;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowFxReplicatorComponent.ActorComponent.Object
	InitializeFxReplicator InitializeData;//[Offset: 0xb0, Size: 1]
	ParticleSystemComponent*[] CreatedFxList;//[Offset: 0xf0, Size: 1]
	AudioComponent*[] CreatedAudioList;//[Offset: 0x100, Size: 1]
	WwiseEventPlayingInfo[] WwiseEventPlayingInfos;//[Offset: 0x110, Size: 1]
	bool IsVehicleFx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	CrowVehiclePawn* VehiclePawn;//[Offset: 0x124, Size: 1]
	SkeletalMeshComponent* BodySKC;//[Offset: 0x12c, Size: 1]
	float SpeedMax;//[Offset: 0x134, Size: 1]
	void MulticastActivateFxReplicator(const InitializeFxReplicator InitData);// 0x1a81520

--------------------------------
Class: InitializeFxReplicator
	SceneComponent* AttachToComponent;//[Offset: 0x0, Size: 1]
	FName[] HideBoneNameList;//[Offset: 0x8, Size: 1]
	FxReplicator_FxTemplate[] FxTemplateList;//[Offset: 0x18, Size: 1]
	FxReplicator_WwiseAudioTemplate[] WwiseAudioTemplateList;//[Offset: 0x28, Size: 1]
	bool bIsFirstPlayerOnBoardingFP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: FxReplicator_WwiseAudioTemplate
	bool bIsCheckViewToggleEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName AttachPointName;//[Offset: 0x4, Size: 1]
	AkAudioEvent* FPEvent;//[Offset: 0x10, Size: 1]
	AkAudioEvent* TPEvent;//[Offset: 0x18, Size: 1]
	AkAudioEvent* FPEndEvent;//[Offset: 0x20, Size: 1]
	AkAudioEvent* TPEndEvent;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1f8, Size: 1]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x200, Size: 1]
	SoundClass* SoundClassOverride;//[Offset: 0x210, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 1]
	FName AudioComponentUserID;//[Offset: 0x220, Size: 1]
	float PitchModulationMin;//[Offset: 0x228, Size: 1]
	float PitchModulationMax;//[Offset: 0x22c, Size: 1]
	float VolumeModulationMin;//[Offset: 0x230, Size: 1]
	float VolumeModulationMax;//[Offset: 0x234, Size: 1]
	float VolumeMultiplier;//[Offset: 0x238, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x23c, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x240, Size: 1]
	float Priority;//[Offset: 0x244, Size: 1]
	float SubtitlePriority;//[Offset: 0x248, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x250, Size: 1]
	float PitchMultiplier;//[Offset: 0x258, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x25c, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 1]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 1]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x610, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x618, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x674, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x675, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x676, Size: 1]
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x678, Size: 1]
	MulticastInlineDelegateProperty OnAudioPlayStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioVirtualizationChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioFinished;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioPlaybackPercent;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioSingleEnvelopeValue;//[Size: 1]
	MulticastInlineDelegateProperty OnAudioMultiEnvelopeValue;//[Size: 1]
	delegate OnQueueSubtitles;//[Offset: 0x7b0, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 1]
	void StopDelayed(float DelayTime);// 0x3b3f750
	void Stop();// 0x3b3f730
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x3b3f660
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x3b3f5e0
	void SetUISound(bool bInUISound);// 0x3b3f550
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x3b3f400
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x3b3f2b0
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x3b3f1e0
	void SetSound(SoundBase* NewSound);// 0x3b3f150
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x3b3efb0
	void SetPaused(bool bPause);// 0x3b3ef20
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x3b3ee90
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x3b3ee10
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x3b3ed80
	void SetIntParameter(FName InName, int inInt);// 0x3b3ecb0
	void SetFloatParameter(FName InName, float InFloat);// 0x3b3eb60
	void SetBoolParameter(FName InName, bool InBool);// 0x3b3e780
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x3b3e6b0
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x3b3e5e0
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x3b3e2a0
	void Play(float StartTime);// 0x3b3e210
	bool IsVirtualized();// 0x3b3e1e0
	bool IsPlaying();// 0x3b3e1b0
	bool HasCookedFFTData();// 0x3b3e180
	bool HasCookedAmplitudeEnvelopeData();// 0x3b3e150
	enum GetPlayState();// 0x3b3e120
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x3b3e040
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x3b3df20
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x3b3de60
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x3b3ddb0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x3b3dc90
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x3b3db30
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x3b3d940
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x3b3cd50
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x3b3cc80

--------------------------------
Class: QuartzClockHandle.Object
	QuartzSubsystem* QuartzSubsystem;//[Offset: 0x168, Size: 1]
	World* WorldPtr;//[Offset: 0x188, Size: 1]
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary, out QuartzClockHandle* ClockHandle);// 0x3293200
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3293120
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x3292ef0
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x3292db0
	void StopClock(const Object* WorldContextObject, bool CancelPendingEvents, out QuartzClockHandle* ClockHandle);// 0x3292a60
	void StartOtherClock(const Object* WorldContextObject, FName OtherClockName, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate);// 0x3292620
	void StartClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3290d90
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float TicksPerSecond);// 0x32920b0
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float ThirtySecondsNotesPerMinute);// 0x3291ec0
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float SecondsPerTick);// 0x3291730
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float MillisecondsPerTick);// 0x32914b0
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float BeatsPerMinute);// 0x3290fc0
	void ResumeClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x3290d90
	void ResetTransportQuantized(const Object* WorldContextObject, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, out QuartzClockHandle* ClockHandle);// 0x3290bf0
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x3290b00
	void PauseClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x32902f0
	bool IsClockRunning(const Object* WorldContextObject);// 0x328fba0
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x328fa30
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x328f990
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x328f8f0
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x328f410
	float GetEstimatedRunTime(const Object* WorldContextObject);// 0x328efd0
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, out const enum QuantizationType, float Multiplier);// 0x328ec50
	QuartzTransportTimeStamp GetCurrentTimestamp(const Object* WorldContextObject);// 0x328ebb0
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x328ea30

--------------------------------
Class: QuartzSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsQuartzEnabled();// 0x328fd40
	bool IsClockRunning(const Object* WorldContextObject, FName ClockName);// 0x328fc40
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x328f850
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x328f7b0
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x328f710
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x328f1b0
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x328f110
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x328f110
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x328f070
	float GetEstimatedClockRunTime(const Object* WorldContextObject, out const FName InClockName);// 0x328eef0
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, FName ClockName, out const enum QuantizationType, float Multiplier);// 0x328ed70
	QuartzTransportTimeStamp GetCurrentClockTimestamp(const Object* WorldContextObject, out const FName InClockName);// 0x328ead0
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x328ea00
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x328e9d0
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x328e9a0
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x328e8d0
	void DeleteClockByName(const Object* WorldContextObject, FName ClockName);// 0x328e800
	void DeleteClockByHandle(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle);// 0x328e720
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager);// 0x328e550

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: QuartzTransportTimeStamp
	int Bars;//[Offset: 0x0, Size: 1]
	int Beat;//[Offset: 0x4, Size: 1]
	float BeatFraction;//[Offset: 0x8, Size: 1]
	float Seconds;//[Offset: 0xc, Size: 1]

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 1]
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 1]
	enum BeatType;//[Offset: 0x4, Size: 1]
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 1]

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 1]
	enum PulseDuration;//[Offset: 0x4, Size: 1]

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 1]
	float Multiplier;//[Offset: 0x4, Size: 1]
	enum CountingReferencePoint;//[Offset: 0x8, Size: 1]
	bool bFireOnClockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 1]
	float FloatParam;//[Offset: 0x8, Size: 1]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int IntParam;//[Offset: 0x10, Size: 1]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 1]
	float PlaybackTime;//[Offset: 0x10, Size: 1]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 1]
	float Magnitude;//[Offset: 0x4, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 1]
	float PlaybackTime;//[Offset: 0x4, Size: 1]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WwiseEventPlayingInfo
	int EventPlayingID;//[Offset: 0x0, Size: 1]
	AkComponent* AkPlayingComponent;//[Offset: 0x8, Size: 1]
	bool bIsCheckViewToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bIsFirstPlayerOnBoardingFPEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	AkAudioEvent* FPEvent;//[Offset: 0x18, Size: 1]
	AkAudioEvent* TPEvent;//[Offset: 0x20, Size: 1]
	AkAudioEvent* FPEndEvent;//[Offset: 0x28, Size: 1]
	AkAudioEvent* TPEndEvent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	byte OcclusionCollisionChannel;//[Offset: 0x220, Size: 1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	float OuterRadius;//[Offset: 0x228, Size: 1]
	float InnerRadius;//[Offset: 0x22c, Size: 1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x230, Size: 1]
	FString EarlyReflectionAuxBusName;//[Offset: 0x238, Size: 1]
	int EarlyReflectionOrder;//[Offset: 0x248, Size: 1]
	float EarlyReflectionBusSendGain;//[Offset: 0x24c, Size: 1]
	float EarlyReflectionMaxPathLength;//[Offset: 0x250, Size: 1]
	float roomReverbAuxBusGain;//[Offset: 0x254, Size: 1]
	int diffractionMaxEdges;//[Offset: 0x258, Size: 1]
	int diffractionMaxPaths;//[Offset: 0x25c, Size: 1]
	float diffractionMaxPathLength;//[Offset: 0x260, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x26c, Size: 1]
	float OcclusionRefreshInterval;//[Offset: 0x270, Size: 1]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x12801b0
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x127ffc0
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x127fdd0
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x127fd40
	void SetOutputBusVolume(float BusVolume);// 0x127fcc0
	void SetListeners(out const AkComponent*[] Listeners);// 0x127fc10
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x127fab0
	void SetEarlyReflectionsVolume(float SendVolume);// 0x127fa30
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x127f990
	void SetAttenuationScalingFactor(float Value);// 0x127f890
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x127f620
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x127f450
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x127f2e0
	int PostAkEventByName(FString in_EventName);// 0x127f230
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x127f060
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x127ee70
	float GetAttenuationRadius();// 0x127eb30

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x1f8, Size: 1]
	FString EventName;//[Offset: 0x200, Size: 1]
	void Stop();// 0x1285f20
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x12853a0
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x1283650
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x12834b0
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x1282cf0
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x1282ac0
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x1281fa0

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 1]

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 1]
	uint32 GroupShortID;//[Offset: 0x50, Size: 1]

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 1]
	FString MediaName;//[Offset: 0x30, Size: 1]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Object*[] UserData;//[Offset: 0x48, Size: 1]
	FString Language;//[Offset: 0x58, Size: 1]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x68, Size: 1]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	FString Language;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 1]
	enum CodecID;//[Offset: 0x10, Size: 1]
	FString Filename;//[Offset: 0x18, Size: 1]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 1]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: CrowVehicleEnginePowerDrop
	float ActivateDamagePercent;//[Offset: 0x0, Size: 1]
	float DropRate;//[Offset: 0x4, Size: 1]
	float DurationTimeSecond;//[Offset: 0x8, Size: 1]
	float RecoverTimeSecond;//[Offset: 0xc, Size: 1]
	FxReplicator_FxTemplate[] FxTemplateList;//[Offset: 0x10, Size: 1]
	FxReplicator_WwiseAudioTemplate[] WwiseAudioTemplateList;//[Offset: 0x20, Size: 1]
	CrowFxReplicatorComponent* FxReplicator;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowVehicleDustType.DataAsset.Object
	<byte,VehicleDustInfo> DustTypes;//[Offset: 0x30, Size: 1]
	VehicleDustInfo DefaultDustInfo;//[Offset: 0x80, Size: 1]
	VehicleDustInfo GetDustInfo(PhysicalMaterial* PhysMaterial);// 0x1b54ce0
	ParticleSystem* GetDustFX(PhysicalMaterial* PhysMaterial, float WheelSpeed);// 0x1b54c10

--------------------------------
Class: VehicleDustInfo
	ParticleSystem* FX;//[Offset: 0x0, Size: 1]
	float MinSpeed;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VehicleEffectSetup
	float BodySpeedMax;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowVehicleSightComponent.ActorComponent.Object
	<byte,CrowVehicleSightInfo> SightInfos;//[Offset: 0xb0, Size: 1]
	<byte,CrowBarrelInfo> BarrelInfos;//[Offset: 0x100, Size: 1]
	CrowSpringArmComponent* CurrentSpringArm;//[Offset: 0x150, Size: 1]
	bool IsBarrelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	CrowInputLerp YawInputLerp;//[Offset: 0x15c, Size: 1]
	CrowInputLerp PitchInputLerp;//[Offset: 0x16c, Size: 1]
	CrowInputLerp YawBarrelModeInputLerp;//[Offset: 0x17c, Size: 1]
	CrowInputLerp PitchBarrelModeInputLerp;//[Offset: 0x18c, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x1a0, Size: 1]
	void MulticastUpdateAddedInputRotation(byte SpringArmId, byte ClientRoll, uint32 View);// 0x1b599a0
	Rotator GetBarrelForward(byte SpringArmId);// 0x1b59870

--------------------------------
Class: CrowVehicleSightInfo
	CrowSpringArmComponent* ActivatedSpringArm;//[Offset: 0x0, Size: 1]
	CrowSpringArmComponent* SpringArmFP;//[Offset: 0x8, Size: 1]
	CrowSpringArmComponent* SpringArmTP;//[Offset: 0x10, Size: 1]
	Vector DefaultFPSocketOffset;//[Offset: 0x18, Size: 1]
	Vector DefaultTPSocketOffset;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CrowSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	byte SpringArmId;//[Offset: 0x280, Size: 1]
	FName InheritYawBoneName;//[Offset: 0x284, Size: 1]
	bool UseLocalInheritYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	bool UseDriverRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 1]
	bool UseStabilizationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e, Size: 1]
	bool ApplyWorldYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f, Size: 1]
	float AmountStabilizationPitch;//[Offset: 0x290, Size: 1]
	float DriverRotationMaxPitch;//[Offset: 0x294, Size: 1]
	float DriverRotationMaxYaw;//[Offset: 0x298, Size: 1]
	float DriverRotationMaxRoll;//[Offset: 0x29c, Size: 1]
	bool UseTickGroupOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	byte TickGroupOverride;//[Offset: 0x2a1, Size: 1]
	bool IgnoreAddedInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 1]
	bool UseCameraRotationLagWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3, Size: 1]
	float CameraRotationLagWeight;//[Offset: 0x2a4, Size: 1]
	Vector2D YawMinMax;//[Offset: 0x2a8, Size: 1]
	Vector2D PitchMinMax;//[Offset: 0x2b0, Size: 1]
	CameraComponent* ChildCamera;//[Offset: 0x2b8, Size: 1]
	Actor*[] SkipCollisionActorList;//[Offset: 0x2c0, Size: 1]
	SceneComponent* DefaultParent;//[Offset: 0x2d0, Size: 1]
	FName DefaultParentSocketName;//[Offset: 0x2d8, Size: 1]
	Transform DefaultLocalTransform;//[Offset: 0x2e0, Size: 1]
	Transform DefaultCameraLocalTransform;//[Offset: 0x310, Size: 1]
	Transform DefaultRootWorldTransform;//[Offset: 0x340, Size: 1]
	Rotator AddedInputRotation;//[Offset: 0x370, Size: 1]
	Rotator RootMovedRotation;//[Offset: 0x37c, Size: 1]
	Rotator DriverRotation;//[Offset: 0x388, Size: 1]
	Rotator StabilizationRotation;//[Offset: 0x394, Size: 1]
	byte GetSpringArmId();// 0x1b36900

--------------------------------
Class: CrowBarrelInfo
	bool UseDirectForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Rotator BarrelForward;//[Offset: 0x4, Size: 1]
	Rotator RootForward;//[Offset: 0x10, Size: 1]
	Rotator LerpAddedInputRotation;//[Offset: 0x1c, Size: 1]
	float OffsetForwardPitch;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowInputLerp
	float MaxInputValue;//[Offset: 0x0, Size: 1]
	float LerpAmount;//[Offset: 0x4, Size: 1]
	float MovedValuePerSecond;//[Offset: 0x8, Size: 1]
	float CurrentAddedInputAlpha;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowVehicleWheelEffect.CrowActorComponentBase.ActorComponent.Object
	CrowVehiclePawn* VehiclePawn;//[Offset: 0xc0, Size: 1]
	CrowVehicleParam* VehicleParam;//[Offset: 0xc8, Size: 1]
	CrowImpactDamageControl* ImpactDamageControl;//[Offset: 0xd0, Size: 1]
	FName[] ParticleSystemParameterNames;//[Offset: 0xd8, Size: 1]
	CurveFloat* EffectCurveRotation;//[Offset: 0xe8, Size: 1]
	float MaxWheelRotationSpeed;//[Offset: 0xf0, Size: 1]
	CurveFloat* EffectCurveSlip;//[Offset: 0xf8, Size: 1]
	float MaxWheelSlip;//[Offset: 0x100, Size: 1]
	float WheelLatSlipMultiplier;//[Offset: 0x104, Size: 1]
	bool UseWheelRotationBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	float WheelBlurRotationSpeed;//[Offset: 0x10c, Size: 1]
	ParticleSystem* FxDefaultWheelBlur;//[Offset: 0x110, Size: 1]
	CrowWheelEffectBlur[] WheelBlurOverrides;//[Offset: 0x118, Size: 1]
	int WheelCount;//[Offset: 0x128, Size: 1]
	ParticleSystemComponent*[] WheelParticles;//[Offset: 0x130, Size: 1]
	ParticleSystemComponent*[] WheelBlurParticles;//[Offset: 0x140, Size: 1]
	CrowWheelEffectDissolve[] DissolvingParticles;//[Offset: 0x150, Size: 1]
	ParticleSystemComponent*[] WheelSlipParticles;//[Offset: 0x160, Size: 1]
	CrowWheelEffectDissolve[] DissolvingSlipParticles;//[Offset: 0x170, Size: 1]
	bool[] IsSkiddings;//[Offset: 0x180, Size: 1]
	enum[] TireStates;//[Offset: 0x190, Size: 1]
	float SkiddingValue;//[Offset: 0x1a0, Size: 1]
	float SkiddingFlatValue;//[Offset: 0x1a4, Size: 1]
	float SkiddingDestroyValue;//[Offset: 0x1a8, Size: 1]
	FString ContactPhysicalMatName;//[Offset: 0x1b0, Size: 1]
	float WheelSpin;//[Offset: 0x1c0, Size: 1]
	bool IsInAirNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	float InAirZ;//[Offset: 0x1c8, Size: 1]
	void UpdateFxWheelBlur(int WheelIndex, float RotationSpeed);// 0x1b59f10
	void ShowHideBones(bool Show, out const FName[] BoneNames);// 0x1b59e10
	ParticleSystemComponent* ReplaceToNewParticleTemplate(out ParticleSystemComponent*[] InWheelParticle, out CrowWheelEffectDissolve[] InEffectDissolving, int16 WheelIndex, ParticleSystem* NewParticleSystem, float NewInitialParameter);// 0x1b59c30
	void Init(CrowVehicleParam* VehicleParam);// 0x1b59910
	void DestroyFxWheelBlur(int WheelIndex);// 0x1b597e0
	ParticleSystemComponent* CreateParticleSystem(int WheelIndex);// 0x1b59610
	ParticleSystemComponent* CreateFxWheelBlur(int WheelIndex, CrowVehicleFacadeCar* VehicleFacadeCar);// 0x1b59540

--------------------------------
Class: CrowImpactDamageControl.CrowActorComponentBase.ActorComponent.Object
	float HideObjectSecond;//[Offset: 0xc0, Size: 1]
	float MultiplyImpulse;//[Offset: 0xc4, Size: 1]
	float TireDestroyDistanceDriven;//[Offset: 0xc8, Size: 1]
	bool bIsTakeDamageImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	float TakeMultiplyImpactDamage;//[Offset: 0xd0, Size: 1]
	float MultiplyImpactDivideDamge;//[Offset: 0xd4, Size: 1]
	bool bIsTakeDamageUnderCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	float IgnoreOtherActorTakeDamage;//[Offset: 0xdc, Size: 1]
	<FName,ST_BrokenBone> ArrayCanBrokenBones;//[Offset: 0xe0, Size: 1]
	<FName,ST_DamageMaterial> ArrayDamageMaterials;//[Offset: 0x130, Size: 1]
	<FName,ST_DamageWheel> ArrayCanBrokenWheel;//[Offset: 0x180, Size: 1]
	FName[] IgnorePrimitiveNames;//[Offset: 0x1d0, Size: 1]
	class DamageType* DamageType;//[Offset: 0x1e0, Size: 1]
	SkeletalMeshComponent* BodySKC;//[Offset: 0x1e8, Size: 1]
	float BodyMass;//[Offset: 0x1f0, Size: 1]
	TimerHandle TickTimerHandle;//[Offset: 0x1f8, Size: 1]
	<int,ST_PreImpactInfo> ImpactActorInfos;//[Offset: 0x200, Size: 1]
	<FName,float> ImpactBoneInfos;//[Offset: 0x250, Size: 1]
	<FName,float> BonesToHide;//[Offset: 0x2a0, Size: 1]
	float fImpactDivideDamage;//[Offset: 0x2f0, Size: 1]
	float LastSpawnImpactFxTime;//[Offset: 0x2f4, Size: 1]
	void TickTimerCallback();// 0x1a988c0
	void OnHitCallbackClient(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1a986c0
	void OnHitCallback(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1a984e0
	void OnBeginOverlapCallback(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1a982c0
	void MultiCast_UpdateTireState(int InBoneIndex, enum InNewTireState);// 0x1a98150
	void MultiCast_UpdateDamage(int InBoneIndex, float Damage, float MorphWeight, float MaterialWeight);// 0x1a97fc0
	void MultiCast_BeginSwing(int InBoneIndex);// 0x1a97f00
	void MultiCast_BeginDetach(int InBoneIndex);// 0x1a97e40

--------------------------------
Class: ST_BrokenBone
	bool bIsDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ImpulseDetachPower;//[Offset: 0x4, Size: 1]
	bool bIsImmediatelyHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	ParticleSystem* ImpactParticle;//[Offset: 0x10, Size: 1]
	FName SocketParticle;//[Offset: 0x18, Size: 1]
	AkAudioEvent* ImpactAudioEvent;//[Offset: 0x20, Size: 1]
	bool IsDamageDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool IsCanTakeDamageBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool IsNoDamageToBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool bIsSwing1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	bool bIsSwing2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	float Swing1Limit;//[Offset: 0x30, Size: 1]
	float Swing1Offset;//[Offset: 0x34, Size: 1]
	float Swing2Limit;//[Offset: 0x38, Size: 1]
	float Swing2Offset;//[Offset: 0x3c, Size: 1]
	float Durability_Morph;//[Offset: 0x40, Size: 1]
	float Durability_Swing;//[Offset: 0x44, Size: 1]
	float Durability;//[Offset: 0x48, Size: 1]
	float Durability_MorphMAX;//[Offset: 0x4c, Size: 1]
	bool bIsDetachedAlready;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsSwingAlready;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	FName[] WithTakeDamageBoneNames;//[Offset: 0x58, Size: 1]
	ST_DamageMaterialSlot DamageMaterialSlot;//[Offset: 0x68, Size: 1]
	FName[] GroupConstraintNames;//[Offset: 0x78, Size: 1]
	float LastMorphWeight;//[Offset: 0x88, Size: 1]
	float LastMaterialWeight;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: ST_DamageMaterialSlot
	FName DamageMaterialSlotName;//[Offset: 0x0, Size: 1]
	FName DamageMaterialParamName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ST_DamageMaterial
	<FName,ST_DamageMaterialDurability> DamageMaterialParams;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ST_DamageMaterialDurability
	float currentDurability;//[Offset: 0x0, Size: 1]
	float DurabilityMAX;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ST_DamageWheel
	enum TireState;//[Offset: 0x0, Size: 1]
	byte WheelNumber;//[Offset: 0x1, Size: 1]
	uint32 TireDurability;//[Offset: 0x4, Size: 1]
	FName TireBoneName;//[Offset: 0x8, Size: 1]
	float fDistanceDriven;//[Offset: 0x10, Size: 1]
	ParticleSystem* FlatParticle;//[Offset: 0x18, Size: 1]
	ParticleSystem* DestroyParticle;//[Offset: 0x20, Size: 1]

--------------------------------
Class: ST_PreImpactInfo
	Vector LastLocation;//[Offset: 0x0, Size: 1]
	float LastHitTime;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowWheelEffectBlur
	ParticleSystem* FxAsset;//[Offset: 0x0, Size: 1]
	FName AttachSocketName;//[Offset: 0x8, Size: 1]
	Vector Location;//[Offset: 0x10, Size: 1]
	Rotator Rotation;//[Offset: 0x1c, Size: 1]
	FName[] HideBoneNames;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowWheelEffectDissolve
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowVehicleFacadeCar.CrowVehicleFacadeBase.CrowActorInitializerBase.ActorComponent.Object
	CrowVehicleMovementLandWheels* VehicleMovement;//[Offset: 0xe8, Size: 1]

--------------------------------
Class: CrowVehicleMovementLandWheels.CrowVehicleMovementBase.ActorComponent.Object
	class CrowLandWheelsConfigEngine* EngineConfigClass;//[Offset: 0x190, Size: 1]
	class CrowLandWheelsConfigBody* BodyConfigClass;//[Offset: 0x198, Size: 1]
	CrowLandWheelsEngineSetting EngineSetting;//[Offset: 0x1a0, Size: 1]
	CrowLandWheelsSingleWheelState[] WheelStates;//[Offset: 0x280, Size: 1]
	int UpdateCacheIndex;//[Offset: 0x290, Size: 1]
	<Actor*,CrowLandWheelsSqueezeDamage> DamagesByWheel;//[Offset: 0x298, Size: 1]
	float LastDamageTime;//[Offset: 0x2e8, Size: 1]

--------------------------------
Class: CrowLandWheelsConfigEngine.Object
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	CrowLandWheelsEngineSetting Setting;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowLandWheelsEngineSetting
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	CrowVehicleInputSetting AccelerationInput;//[Offset: 0x4, Size: 1]
	CrowVehicleInputSetting BrakeInput;//[Offset: 0xc, Size: 1]
	float MaxRPM;//[Offset: 0x14, Size: 1]
	float MaxRPMReverse;//[Offset: 0x18, Size: 1]
	float MaxTorque;//[Offset: 0x1c, Size: 1]
	float IdleBrake;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve TorqueCurveNormalized;//[Offset: 0x28, Size: 1]
	CrowLandWheelsGearSetting[] GearBox;//[Offset: 0xb0, Size: 1]
	float GearFinalRatio;//[Offset: 0xc0, Size: 1]
	float GearSwitchDelay;//[Offset: 0xc4, Size: 1]
	float GearKeepDelay;//[Offset: 0xc8, Size: 1]
	float GearResetRPM;//[Offset: 0xcc, Size: 1]

--------------------------------
Class: CrowVehicleInputSetting
	float InputRaise;//[Offset: 0x0, Size: 1]
	float InputFall;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowLandWheelsGearSetting
	int16 GearIndex;//[Offset: 0x0, Size: 1]
	float GearUpRatioRPM;//[Offset: 0x4, Size: 1]
	float GearDownRatioRPM;//[Offset: 0x8, Size: 1]
	float GearRatioTorque;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowLandWheelsConfigBody.Object
	CrowLandWheelsBodySetting Setting;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowLandWheelsBodySetting
	bool UpdateBoneTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool LocalSpaceKinematics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool LocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool SimulationGenerateHitEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool BeginWithReadyForDriving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float SpeedMaxKmPH;//[Offset: 0x8, Size: 1]
	float SpeedReverseMaxKmPH;//[Offset: 0xc, Size: 1]
	float AccelerationRollForce;//[Offset: 0x10, Size: 1]
	float AccelerationPitchForce;//[Offset: 0x14, Size: 1]
	float AccelerationCameraYaw;//[Offset: 0x18, Size: 1]
	float AccelerationCameraSpeed;//[Offset: 0x1c, Size: 1]
	float WheelRollingResistance;//[Offset: 0x20, Size: 1]
	float InAirAngularResistance;//[Offset: 0x24, Size: 1]
	float InAirAngularRecoverRoll;//[Offset: 0x28, Size: 1]
	float InAirAngularRecoverPitch;//[Offset: 0x2c, Size: 1]
	float ChasisMass;//[Offset: 0x30, Size: 1]
	float ChasisMassInWater;//[Offset: 0x34, Size: 1]
	Vector ChasisSize;//[Offset: 0x38, Size: 1]
	Vector DirectionalDragRatio;//[Offset: 0x44, Size: 1]
	float FallRestitution;//[Offset: 0x50, Size: 1]
	float SpeedDragThreshold;//[Offset: 0x54, Size: 1]
	float SlopeSlipPower;//[Offset: 0x58, Size: 1]
	class DamageType* HitExtraDamageTypeClass;//[Offset: 0x60, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x68, Size: 1]
	float WheelSqueezeDamagePerSecond;//[Offset: 0x70, Size: 1]
	CrowLandWheelsTireAndWheel[] WheelSetup;//[Offset: 0x78, Size: 1]
	CrowLandWheelsGripForce GripSetup;//[Offset: 0x88, Size: 1]

--------------------------------
Class: CrowLandWheelsTireAndWheel
	bool IsFlipWheelRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool UseWheelEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool ShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool UseOverrideWheelLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	FName BodySocketName;//[Offset: 0x4, Size: 1]
	FName SkeletalBoneName;//[Offset: 0xc, Size: 1]
	Vector OverrideWheelLocation;//[Offset: 0x14, Size: 1]
	Vector Offset;//[Offset: 0x20, Size: 1]
	Vector SweepOffset;//[Offset: 0x2c, Size: 1]
	class CrowLandWheelsConfigTireAndWheel* WheelConfigClass;//[Offset: 0x38, Size: 1]
	class CrowLandWheelsConfigTireAndWheel* WheelConfigClassFlat;//[Offset: 0x40, Size: 1]
	class CrowLandWheelsConfigTireAndWheel* WheelConfigClassDestroyed;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowLandWheelsConfigTireAndWheel.Object
	CrowTireAndWheelSetting Setting;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowTireAndWheelSetting
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsDrivingWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool ApplyBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	CrowLandWheelsWheelSetting Wheel;//[Offset: 0x4, Size: 1]
	CrowLandWheelsBrakeSetting Brake;//[Offset: 0x14, Size: 1]
	CrowLandWheelsFrictionSetting Friction;//[Offset: 0x20, Size: 1]
	CrowLandWheelsSteeringSetting Steering;//[Offset: 0x38, Size: 1]
	CrowLandWheelsSuspensionSetting Suspension;//[Offset: 0xd0, Size: 1]
	CrowLandWheelsDamageSetting Damage;//[Offset: 0xf0, Size: 1]
	float StationaryTime;//[Offset: 0x104, Size: 1]
	float StationaryDistanceSquare;//[Offset: 0x108, Size: 1]
	float StationaryRotationSpeedDegree;//[Offset: 0x10c, Size: 1]

--------------------------------
Class: CrowLandWheelsWheelSetting
	float WheelRadius;//[Offset: 0x0, Size: 1]
	float WheelWidth;//[Offset: 0x4, Size: 1]
	float WheelMassInKg;//[Offset: 0x8, Size: 1]
	float WheelRotationDampingRatio;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowLandWheelsBrakeSetting
	float MaxTorque;//[Offset: 0x0, Size: 1]
	float MaxTorqueNoSlip;//[Offset: 0x4, Size: 1]
	float Speed;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowLandWheelsFrictionSetting
	float FrictionLongSlip;//[Offset: 0x0, Size: 1]
	float FrictionLatSlip;//[Offset: 0x4, Size: 1]
	float FrictionMagnitudeMax;//[Offset: 0x8, Size: 1]
	float SlipRatioLongMax;//[Offset: 0xc, Size: 1]
	float SlipForceLongMax;//[Offset: 0x10, Size: 1]
	float SlipRatioThresholdSpeed;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CrowLandWheelsSteeringSetting
	float MaxAngle;//[Offset: 0x0, Size: 1]
	float RaiseSpeed;//[Offset: 0x4, Size: 1]
	float FallSpeed;//[Offset: 0x8, Size: 1]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowLandWheelsSuspensionSetting
	byte SuspensionTraceChannel;//[Offset: 0x0, Size: 1]
	float SuspensionLength;//[Offset: 0x4, Size: 1]
	float SuspensionOffset;//[Offset: 0x8, Size: 1]
	float SuspensionTopBump;//[Offset: 0xc, Size: 1]
	float SuspensionBottomBump;//[Offset: 0x10, Size: 1]
	float SpringPower;//[Offset: 0x14, Size: 1]
	float DampingRatio;//[Offset: 0x18, Size: 1]
	float MultiplyOnSkeletalMesh;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowLandWheelsDamageSetting
	float DrivingForceMultiply;//[Offset: 0x0, Size: 1]
	float WheelDampingRatioAdd;//[Offset: 0x4, Size: 1]
	float TireBumpForSuspension;//[Offset: 0x8, Size: 1]
	float TireBumpFrequency;//[Offset: 0xc, Size: 1]
	float EngineTorqueLimit;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowLandWheelsGripForce
	float SuspensionMax;//[Offset: 0x0, Size: 1]
	RuntimeFloatCurve GripForceBySpeed;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowLandWheelsSingleWheelState
	Vector WorldPosition;//[Offset: 0x0, Size: 1]
	Vector OverlapPosition;//[Offset: 0xc, Size: 1]
	float RotationSpeed;//[Offset: 0x18, Size: 1]
	float SlipForward;//[Offset: 0x1c, Size: 1]
	float SlipRight;//[Offset: 0x20, Size: 1]
	float Slip;//[Offset: 0x24, Size: 1]
	float SpringLengthRatio;//[Offset: 0x28, Size: 1]
	bool InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSpringSqueezed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSpringStretched;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 1]
	PhysicalMaterial* OverlapMaterial;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowLandWheelsSqueezeDamage
	HitResult HitResult;//[Offset: 0x0, Size: 1]
	float Damage;//[Offset: 0x88, Size: 1]

--------------------------------
Class: CrowPassengerManager.CrowActorComponentBase.ActorComponent.Object
	byte OwnerTeamID;//[Offset: 0xc0, Size: 1]
	float WaitTimeBeforeAction;//[Offset: 0xc4, Size: 1]
	FName DefaultExitSocketName;//[Offset: 0xc8, Size: 1]
	FName[] EmergencyExitSocketName;//[Offset: 0xd0, Size: 1]
	float DefaultCameraSpeed;//[Offset: 0xe0, Size: 1]
	PassengerSeatData[] SeatDatas;//[Offset: 0xe8, Size: 1]
	PassengerSeat[] PassengerSeats;//[Offset: 0xf8, Size: 1]
	SkeletalMeshComponent* VehicleBody;//[Offset: 0x108, Size: 1]
	void ServerPassengerGetOffAll();// 0x1add1e0
	void ServerMoveToSeat(Pawn* Passenger, int SeatIndex);// 0x1add110
	void ServerMoveToPrevSeat(Pawn* Passenger);// 0x1add080
	void ServerMoveToNextSeat(Pawn* Passenger);// 0x1adcff0
	void OnRep_ChangePassengerSeat();// 0x1adcfd0
	void MulticastOnBoardPassenger(int SeatIndex, Pawn* Passenger);// 0x1adce40
	void MulticastMoveToSeatPassenger(int PrevSeatIndex, int SeatIndex, Pawn* Passenger);// 0x1adcd40
	bool IsVacancy(int SeatIndex);// 0x1adcca0

--------------------------------
Class: PassengerSeatData
	FName SeatSoketName;//[Offset: 0x0, Size: 1]
	FName ExitSocketName;//[Offset: 0x8, Size: 1]
	bool HiddenPassenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool HiddenPassengerWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool UseReadyToFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool ForcePassenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	class CrowPassengerInput* PassengerInputClass;//[Offset: 0x18, Size: 1]
	int InputPriority;//[Offset: 0x20, Size: 1]
	bool BlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	class CrowVehiclePreHUDBase* PassengerPreHUDClass;//[Offset: 0x28, Size: 1]
	class CrowVehicleHUDBase* PassengerHUDClass;//[Offset: 0x30, Size: 1]
	int[] WeaponItems;//[Offset: 0x38, Size: 1]
	int SpecialWeaponItem;//[Offset: 0x48, Size: 1]
	byte SpringArmId;//[Offset: 0x4c, Size: 1]
	bool SyncViewPointSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	Vector2D FPPitchMinMax;//[Offset: 0x50, Size: 1]
	Vector2D FPYawMinMax;//[Offset: 0x58, Size: 1]
	Vector2D TPPitchMinMax;//[Offset: 0x60, Size: 1]
	Vector2D TPYawMinMax;//[Offset: 0x68, Size: 1]
	Vector2D FPFirePitchMinMax;//[Offset: 0x70, Size: 1]
	Vector2D FPFireYawMinMax;//[Offset: 0x78, Size: 1]
	FName CharacterFPArmSocketName;//[Offset: 0x80, Size: 1]
	bool IsCanChangeCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	enum FixedCameraMode;//[Offset: 0x89, Size: 1]
	bool EnableBoard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 1]
	PassengerSeatLeanAmount LeanAmountMultiply;//[Offset: 0x8c, Size: 1]
	FName BreakBoneWhenAiming;//[Offset: 0x98, Size: 1]
	bool bHiddenBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]

--------------------------------
Class: CrowPassengerInput.InputComponent.ActorComponent.Object
	CrowVehiclePawn* VehiclePawn;//[Offset: 0x138, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x140, Size: 1]
	int SeatIndex;//[Offset: 0x148, Size: 1]
	static CrowPassengerInput* SafeNewPassengerInput(Object* Outer, class Object Class);// 0x1ad9440

--------------------------------
Class: CrowVehiclePreHUDBase.CrowWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CrowVehicleHUDBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowVehiclePawn* VehiclePawn;//[Offset: 0x348, Size: 1]
	SizeBox* SB_Vehicle_Croshair;//[Offset: 0x350, Size: 1]
	SizeBox* SB_Buttom;//[Offset: 0x358, Size: 1]
	CanvasPanel* CP_HUD_Vehicle;//[Offset: 0x360, Size: 1]
	UserWidget* WB_LockOnAlert;//[Offset: 0x368, Size: 1]
	CrowWeaponCrosshairBase* crosshairWidget;//[Offset: 0x370, Size: 1]
	CrowWeaponCrosshairBase* SpecialCrosshairWidget;//[Offset: 0x378, Size: 1]
	AkAudioEvent* LockOnStartEvent;//[Offset: 0x380, Size: 1]
	int LockOnEventID;//[Offset: 0x388, Size: 1]
	void OnDestroyVehicle_VehicleHUD(Actor* DestroyedActor);// 0x1b553a0

--------------------------------
Class: CrowWeaponCrosshairBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	LinearColor CrosshairColor;//[Offset: 0x350, Size: 1]

--------------------------------
Class: PassengerSeatLeanAmount
	float LeanForward;//[Offset: 0x0, Size: 1]
	float LeanBackward;//[Offset: 0x4, Size: 1]
	float LeanSide;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PassengerSeat
	int Index;//[Offset: 0x0, Size: 1]
	Pawn* Passenger;//[Offset: 0x8, Size: 1]
	bool EnableBoard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	enum SeatType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: CrowVehicleEventDispatcher.ActorComponent.Object
	VehicleEventSetup EventSetup;//[Offset: 0xb0, Size: 1]
	CrowVehiclePawn* VehiclePawn;//[Offset: 0xe0, Size: 1]
	VehicleEvent[] EventList;//[Offset: 0xe8, Size: 1]
	VehicleEvent[] SubEventList;//[Offset: 0xf8, Size: 1]
	VehicleEventSync[] EventListReplicated;//[Offset: 0x108, Size: 1]
	VehicleEventSync[] SubEventListReplicated;//[Offset: 0x118, Size: 1]
	bool bIsFirstPlayerOnBoardingFP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	void RequestOnSubEvent(enum EventId);// 0x1b55a30
	void RequestOnEvent(enum EventId);// 0x1b55970
	float GetSpeed();// 0x1b54f20
	float GetRPM();// 0x1b54f00

--------------------------------
Class: VehicleEventSetup
	VehicleEventParameterFactor EventParameterFactor;//[Offset: 0x0, Size: 1]
	VehicleEvent[] EventList;//[Offset: 0x10, Size: 1]
	VehicleEvent[] SubEventList;//[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleEventParameterFactor
	float MaxSpeed;//[Offset: 0x0, Size: 1]
	float MaxRPM;//[Offset: 0x4, Size: 1]
	float MaxWheelSpin;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VehicleEvent
	enum StartEventID;//[Offset: 0x0, Size: 1]
	bool IsEndWithAnyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	enum[] EndEventList;//[Offset: 0x8, Size: 1]
	enum[] IgnoreEndEventList;//[Offset: 0x18, Size: 1]
	FName[] HideBoneNameList;//[Offset: 0x28, Size: 1]
	FxReplicator_FxTemplate[] FxTemplateList;//[Offset: 0x38, Size: 1]
	FxReplicator_WwiseAudioTemplate[] WwiseAudioTemplateList;//[Offset: 0x48, Size: 1]
	enum PassOverWwiseAudioEventID;//[Offset: 0x58, Size: 1]
	bool IsStartEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	CrowFxReplicatorComponent* FxReplicator;//[Offset: 0x60, Size: 1]

--------------------------------
Class: VehicleEventSync
	bool IsStartEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	CrowFxReplicatorComponent* FxReplicator;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x478, Size: 1]
	enum TimingPolicy;//[Offset: 0x479, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x480, Size: 1]
	IntPoint DrawSize;//[Offset: 0x488, Size: 1]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	float RedrawTime;//[Offset: 0x494, Size: 1]
	IntPoint CurrentDrawSize;//[Offset: 0x4a0, Size: 1]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	Vector2D Pivot;//[Offset: 0x4ac, Size: 1]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 1]
	enum WindowVisibility;//[Offset: 0x4b6, Size: 1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b7, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x4b8, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x4c0, Size: 1]
	LinearColor TintColorAndOpacity;//[Offset: 0x4d0, Size: 1]
	float OpacityFromTexture;//[Offset: 0x4e0, Size: 1]
	enum BlendMode;//[Offset: 0x4e4, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e6, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x4e8, Size: 1]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x4f0, Size: 1]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x4f8, Size: 1]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x500, Size: 1]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x508, Size: 1]
	MaterialInterface* MaskedMaterial;//[Offset: 0x510, Size: 1]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x518, Size: 1]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x520, Size: 1]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x528, Size: 1]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	FName SharedLayerName;//[Offset: 0x534, Size: 1]
	int LayerZOrder;//[Offset: 0x53c, Size: 1]
	enum GeometryMode;//[Offset: 0x540, Size: 1]
	float CylinderArcAngle;//[Offset: 0x544, Size: 1]
	enum TickMode;//[Offset: 0x548, Size: 1]
	UserWidget* Widget;//[Offset: 0x570, Size: 1]
	void SetWindowVisibility(enum InVisibility);// 0x320f100
	void SetWindowFocusable(bool bInWindowFocusable);// 0x320edc0
	void SetWidgetSpace(enum NewSpace);// 0x320ed40
	void SetWidget(UserWidget* Widget);// 0x320ecb0
	void SetTwoSided(const bool bWantTwoSided);// 0x320ec20
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x320eb90
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x320eb00
	void SetTickMode(enum InTickMode);// 0x320ea80
	void SetRedrawTime(float InRedrawTime);// 0x320ea00
	void SetPivot(out const Vector2D InPivot);// 0x320e970
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x320e8e0
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x320e720
	void SetGeometryMode(enum InGeometryMode);// 0x320e030
	void SetDrawSize(Vector2D Size);// 0x320df90
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x320df00
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x320de80
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x320db40
	void RequestRenderUpdate();// 0x320db00
	void RequestRedraw();// 0x320dae0
	bool IsWidgetVisible();// 0x320d390
	enum GetWindowVisiblility();// 0x320d2d0
	bool GetWindowFocusable();// 0x320d2b0
	enum GetWidgetSpace();// 0x320d290
	UserWidget* GetWidget();// 0x320d260
	UserWidget* GetUserWidgetObject();// 0x320d200
	bool GetTwoSided();// 0x320d1e0
	bool GetTickWhenOffscreen();// 0x320d1c0
	TextureRenderTarget2D* GetRenderTarget();// 0x320d010
	float GetRedrawTime();// 0x320cff0
	Vector2D GetPivot();// 0x320cfc0
	LocalPlayer* GetOwnerPlayer();// 0x320cf90
	MaterialInstanceDynamic* GetMaterialInstance();// 0x320cf60
	bool GetManuallyRedraw();// 0x2c7dde0
	enum GetGeometryMode();// 0x320c990
	Vector2D GetDrawSize();// 0x320c840
	bool GetDrawAtDesiredSize();// 0x320c820
	float GetCylinderArcAngle();// 0x320c7d0
	Vector2D GetCurrentDrawSize();// 0x320c790

--------------------------------
Class: CrowPartDamageBox.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float DamageMultiply;//[Offset: 0x478, Size: 1]
	bool GetDamgeMultiply(out const Vector ImpactPoint, out float OutDamageMultiply);// 0x1ad8790

--------------------------------
Class: CrowVehicleWeaponManager.ActorComponent.Object
	CrowWeaponVehicle*[] EmptyWeapons;//[Offset: 0xb0, Size: 1]
	<int,CrowVehicleSeatWeaponData> EquipmentWeaponMap;//[Offset: 0xc0, Size: 1]
	<int,CrowWeaponVehicle*> SpecialWeaponMap;//[Offset: 0x110, Size: 1]
	Actor*[] ChildActorList;//[Offset: 0x160, Size: 1]

--------------------------------
Class: CrowWeaponVehicle.CrowWeaponBase.CrowEquipmentBase.CrowItemMesh.CrowItemBase.Actor.Object
	bool bInitializeVehicleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2030, Size: 1]
	CrowWeaponAnimGatling* WeaponAnimGatlingComponent;//[Offset: 0x2038, Size: 1]
	CrowVehiclePawn* VehicleOwner;//[Offset: 0x2040, Size: 1]
	CrowVehicleParam* VehicleParam;//[Offset: 0x2048, Size: 1]
	CrowWeaponVehicleTableRow WeaponVehicleTable;//[Offset: 0x2050, Size: 1]
	int VehicleSeatIndex;//[Offset: 0x34b0, Size: 1]
	byte SpringArmId;//[Offset: 0x34b4, Size: 1]
	float TurnAlpha;//[Offset: 0x34b8, Size: 1]
	AudioComponent* BarrelMoveAC;//[Offset: 0x34c0, Size: 1]
	float BarrelMoveVolume;//[Offset: 0x34c8, Size: 1]
	AkComponent* AkComponent;//[Offset: 0x34d0, Size: 1]
	Rotator BarrelViewPoint;//[Offset: 0x34d8, Size: 1]
	Rotator IntervalBetweenViewToBarrel;//[Offset: 0x34e4, Size: 1]
	Rotator BarrelForward;//[Offset: 0x34f0, Size: 1]
	float BarrelLerpSpeed;//[Offset: 0x34fc, Size: 1]
	Actor*[] IgnoredActorList;//[Offset: 0x3500, Size: 1]
	Rotator StartBarrelViewPoint;//[Offset: 0x3510, Size: 1]
	Rotator EndBarrelViewPoint;//[Offset: 0x351c, Size: 1]
	float BarrelViewPointAlpha;//[Offset: 0x3528, Size: 1]
	Rotator StartAddedInputRotation;//[Offset: 0x352c, Size: 1]
	Rotator EndAddedInputRotation;//[Offset: 0x3538, Size: 1]
	float AddedInputAlpha;//[Offset: 0x3544, Size: 1]
	float IncAddedInputAlpha;//[Offset: 0x3548, Size: 1]
	void RequestUpdateBarrelViewPoint(Rotator NewBarrelViewPoint);// 0x1b73150
	CrowVehiclePawn* GetVehicleOwner();// 0x1b73130

--------------------------------
Class: CrowWeaponAnimGatling.ActorComponent.Object
	enum State;//[Offset: 0xb0, Size: 1]
	float Speed;//[Offset: 0xb4, Size: 1]
	Rotator RotorRotator;//[Offset: 0xb8, Size: 1]
	float Accelerator;//[Offset: 0xc4, Size: 1]
	float RotatorPerSecond;//[Offset: 0xc8, Size: 1]
	void SetRotatorPerSecond(float NewRotatorPerSecond);// 0x1b5e690
	void RequestState(byte NewState, float NewSpeed);// 0x1b5e4e0
	Rotator GetRotorRotator();// 0x1b5e110

--------------------------------
Class: CrowWeaponVehicleTableRow.CrowWeaponTableRow.CrowItemTableBaseRow.TableRowBase
	FString VehicleHelpText;//[Offset: 0x1360, Size: 1]
	FName MuzzleSocketName;//[Offset: 0x1370, Size: 1]
	FName BackblastSocketName;//[Offset: 0x1378, Size: 1]
	FName MuzzleSocketNameDualWiedling;//[Offset: 0x1380, Size: 1]
	FName BackblastSocketNameDualWiedling;//[Offset: 0x1388, Size: 1]
	bool SimultaneousFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1390, Size: 1]
	FName DaulWiedlingViewPointSocketName;//[Offset: 0x1394, Size: 1]
	float DaulWiedlingViewPointMinDistance;//[Offset: 0x139c, Size: 1]
	float ReboundForce;//[Offset: 0x13a0, Size: 1]
	bool UseAimingBarrel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a4, Size: 1]
	float FPBarrelSpeed;//[Offset: 0x13a8, Size: 1]
	float FPBarrelLerpSecond;//[Offset: 0x13ac, Size: 1]
	float TPBarrelSpeed;//[Offset: 0x13b0, Size: 1]
	float TPBarrelLerpSpeed;//[Offset: 0x13b4, Size: 1]
	CurveFloat* BarrelPitchMinCurve;//[Offset: 0x13b8, Size: 1]
	SoundBase* BarrelMoveSound;//[Offset: 0x13c0, Size: 1]
	AkAudioEvent* BarrelMoveSound_W;//[Offset: 0x13c8, Size: 1]
	CurveFloat* BarrelMoveLerpSoundCurve;//[Offset: 0x13d0, Size: 1]
	CurveFloat* BarrelMoveSoundCurve;//[Offset: 0x13d8, Size: 1]
	FName RootBoneName;//[Offset: 0x13e0, Size: 1]
	FName AttachedBoneName;//[Offset: 0x13e8, Size: 1]
	float PreHeating;//[Offset: 0x13f0, Size: 1]
	float OverHeating;//[Offset: 0x13f4, Size: 1]
	float Cooling;//[Offset: 0x13f8, Size: 1]
	float ApproachOverHeating;//[Offset: 0x13fc, Size: 1]
	AkAudioEvent* PreHeatingSoundStart_W;//[Offset: 0x1400, Size: 1]
	AkAudioEvent* PreHeatingSoundEnd_W;//[Offset: 0x1408, Size: 1]
	AkAudioEvent* FireSoundStart_W;//[Offset: 0x1410, Size: 1]
	AkAudioEvent* FireSoundEnd_W;//[Offset: 0x1418, Size: 1]
	CrowAnimPoseSet CharacterFire;//[Offset: 0x1420, Size: 1]
	CurveVector* AimSocketOffsetCurve;//[Offset: 0x1438, Size: 1]
	AkAudioEvent* OverHeatingSoundStart_W;//[Offset: 0x1440, Size: 1]
	AkAudioEvent* OverHeatingSoundEnd_W;//[Offset: 0x1448, Size: 1]
	AkAudioEvent* CoolingSoundStart_W;//[Offset: 0x1450, Size: 1]
	AkAudioEvent* CoolingSoundEnd_W;//[Offset: 0x1458, Size: 1]

--------------------------------
Class: CrowAnimPoseSet
	AnimationAsset* WeaponNormal1P;//[Offset: 0x0, Size: 1]
	AnimationAsset* WeaponNormal3P;//[Offset: 0x8, Size: 1]
	AnimationAsset* WeaponProne3P;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowVehicleSeatWeaponData
	CrowWeaponVehicle*[] WeaponArray;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowVehicleFloodingComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float TimeSecondToFlooding;//[Offset: 0x4c8, Size: 1]
	float FloodingDamageTime;//[Offset: 0x4cc, Size: 1]
	float FloodingDamage;//[Offset: 0x4d0, Size: 1]
	CurveFloat* WaterCrashImpulseCurve;//[Offset: 0x4d8, Size: 1]
	CurveFloat* Immerge_LinearDampingCurve;//[Offset: 0x4e0, Size: 1]
	CurveFloat* WaterLinearDampingCurve;//[Offset: 0x4e8, Size: 1]
	bool bCheckValidHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	float ValidHeight_DrivingFX;//[Offset: 0x4f4, Size: 1]
	class CrowVehicleFloodingEffectSetting* FloodingEffectSettingClass;//[Offset: 0x4f8, Size: 1]
	CrowVehicleMovementWaterInfo WaterInfo;//[Offset: 0x500, Size: 1]
	PrimitiveComponent* UpdatedComponent;//[Offset: 0x560, Size: 1]
	enum LastFloodingWaterType;//[Offset: 0x568, Size: 1]
	CrowVehicleFloodingEffectSetting* FloodingEffectSetting;//[Offset: 0x570, Size: 1]
	enum FloodingState;//[Offset: 0x578, Size: 1]
	bool bFlooding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	float ElapsedOverlapTime;//[Offset: 0x57c, Size: 1]
	float ElapsedFloodingTime;//[Offset: 0x580, Size: 1]
	float DamageTimer;//[Offset: 0x584, Size: 1]
	float CurrentFloodingDepth;//[Offset: 0x588, Size: 1]
	float CurrentFloodingDepthClamped;//[Offset: 0x58c, Size: 1]
	float WaterLinearDamping;//[Offset: 0x590, Size: 1]
	float PrevOwnerVelocityZ;//[Offset: 0x594, Size: 1]
	float WaterCrashImpulse;//[Offset: 0x598, Size: 1]
	ParticleSystemComponent* ParticleComponentImmerge;//[Offset: 0x5a0, Size: 1]
	ParticleSystemComponent* ParticleComponentBubble;//[Offset: 0x5a8, Size: 1]
	ParticleSystemComponent* ParticleComponentDrivingForward;//[Offset: 0x5b0, Size: 1]
	ParticleSystemComponent* ParticleComponentDrivingBackward;//[Offset: 0x5b8, Size: 1]
	ParticleSystemComponent* ParticleComponentGroundDust;//[Offset: 0x5c0, Size: 1]
	Transform RelativeTM_Bubble;//[Offset: 0x5d0, Size: 1]
	Transform RelativeTM_Driving;//[Offset: 0x600, Size: 1]
	Transform RelativeTM;//[Offset: 0x630, Size: 1]
	PrimitiveComponent* BodyComponent;//[Offset: 0x660, Size: 1]
	bool bFadeOutDrivingParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	void UpdateWaterLinearDamping(float DeltaTime);// 0x1165620
	void UpdateFlooding(float DeltaTime);// 0x11655a0
	void UpdateDrivingParticle(ParticleSystemComponent* InParticle, out const FName InSocketName, float InSpeedForwardRatio, float InSpeedRightRatio, bool InReverse);// 0x11653e0
	void SetupFx();// 0x11653c0
	void SetupBodyComponent();// 0x11653a0
	void Reset();// 0x1165380
	void RequestChangeState(enum NewState);// 0x1165140
	void OnWaterPlaneOverlapEnd(Actor* InWaterPlaneActor);// 0x11650b0
	void OnWaterPlaneOverlapBegin(Actor* InWaterPlaneActor);// 0x1165020
	void OnWaterBodyOverlapEnd(WaterBody* InWaterBodyActor);// 0x1164f90
	void OnWaterBodyOverlapBegin(WaterBody* InWaterBodyActor);// 0x1164f00
	void OnImmerge(Vector InWaterLocation, Vector InWaterNormal);// 0x1164e20
	void OnFloodingExit();// 0x1164e00
	void OnFloodingEnter();// 0x1164de0
	void OnFloodingDepthAndElapsedTime(float InDepth, float InDeltaTime);// 0x1164d10
	void OnDamage(float InDamage);// 0x1164c90
	Vector GetBodyVelocity();// 0x1164860
	void FadeOutParticle(float DeltaTime, ParticleSystemComponent* InParticle);// 0x1164760
	void FadeOutDrivingParticles(float DeltaTime);// 0x11646e0
	void DeactivateDrivingParticles();// 0x11646c0
	void DeactivateBubbleParticle();// 0x11646a0
	ParticleSystemComponent* CreateParticleSystem(ParticleSystem* InFxAsset, FName InAttachSocketName);// 0x11645d0
	void ClientUpdateParticles(float DeltaTime);// 0x1164550
	void ActivateDrivingParticles();// 0x1164530
	void ActivateBubbleParticle();// 0x1164510

--------------------------------
Class: CrowVehicleFloodingEffectSetting.Object
	ParticleSystem* FxImmerge;//[Offset: 0x28, Size: 1]
	FName AttachSocketName_Bubble;//[Offset: 0x30, Size: 1]
	ParticleSystem* FxBubble;//[Offset: 0x38, Size: 1]
	FName AttachSocketName_DrivingForward;//[Offset: 0x40, Size: 1]
	FName AttachSocketName_DrivingBackward;//[Offset: 0x48, Size: 1]
	ParticleSystem* FxDriving;//[Offset: 0x50, Size: 1]
	ParticleSystem* FxGroundDust;//[Offset: 0x58, Size: 1]
	float SpeedForwardMax;//[Offset: 0x60, Size: 1]
	float SpeedRightMax;//[Offset: 0x64, Size: 1]
	FName ParamNameSpeedForward;//[Offset: 0x68, Size: 1]
	FName ParamNameSpeedRight;//[Offset: 0x70, Size: 1]

--------------------------------
Class: CrowVehicleMovementWaterInfo
	Actor* WaterActor;//[Offset: 0x18, Size: 1]
	PhysicsVolume* WaterPhysicsVolume;//[Offset: 0x20, Size: 1]
	CrowVehicleOceanTracker* OceanTracker;//[Offset: 0x38, Size: 1]
	Actor* OceanActor;//[Offset: 0x40, Size: 1]
	PhysicsVolume* OceanPhysicsVolume;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowVehicleOceanTracker.ActorComponent.Object
	MaterialParameterCollection* TargetCollection;//[Offset: 0xb0, Size: 1]
	bool DrawDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	float OceanDefaultZ;//[Offset: 0xbc, Size: 1]
	float Intensity1;//[Offset: 0xc0, Size: 1]
	float Intensity2;//[Offset: 0xc4, Size: 1]
	float Intensity3;//[Offset: 0xc8, Size: 1]
	float Speed1;//[Offset: 0xcc, Size: 1]
	float Speed2;//[Offset: 0xd0, Size: 1]
	float Speed3;//[Offset: 0xd4, Size: 1]
	float WaveScale1;//[Offset: 0xd8, Size: 1]
	float WaveScale2;//[Offset: 0xdc, Size: 1]
	float WaveScale3;//[Offset: 0xe0, Size: 1]
	float MasterSpeed;//[Offset: 0xe4, Size: 1]
	float MasterIntensity;//[Offset: 0xe8, Size: 1]
	float Offset;//[Offset: 0xec, Size: 1]
	float ServerWorldTime;//[Offset: 0xf0, Size: 1]
	bool OceanFollowCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	Actor* OceanActor;//[Offset: 0xf8, Size: 1]
	Vector OceanActorLocation;//[Offset: 0x100, Size: 1]
	WaterBody* WaterBodyOceanActor;//[Offset: 0x110, Size: 1]

--------------------------------
Class: CrowBattleContainer
	CrowBattleShape* BattleShape;//[Offset: 0x0, Size: 1]
	CrowBattleStatus* BattleStatus;//[Offset: 0x8, Size: 1]
	CrowBattleIdentity* BattleIdentity;//[Offset: 0x10, Size: 1]
	CrowBattleDamageHandlerBase* BattleDamageHandler;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowBattleShape.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 1]
	PrimitiveComponent* CenterComponent;//[Offset: 0x30, Size: 1]
	void SetCenter(PrimitiveComponent* NewCenterComponent);// 0x1a292c0
	void Init(Actor* NewOwnerActor);// 0x1a28bb0
	Vector GetCentralPoint();// 0x1a28b30
	PrimitiveComponent* GetCenterComponent();// 0x1a28b00

--------------------------------
Class: CrowBattleStatus.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0xb0, Size: 1]
	float Health;//[Offset: 0xb8, Size: 1]
	float MaxHealth;//[Offset: 0xbc, Size: 1]
	float DyingHealth;//[Offset: 0xc0, Size: 1]
	float HeadArmorCurrent;//[Offset: 0xc4, Size: 1]
	float HeadArmorMax;//[Offset: 0xc8, Size: 1]
	float BodyArmorCurrent;//[Offset: 0xcc, Size: 1]
	float BodyArmorMax;//[Offset: 0xd0, Size: 1]
	void SetOwnerActor(Actor* NewOwnerActor);// 0x1a25090
	void MulticastSynchronizeHealth(float SyncHealth, float SyncDyingHealth);// 0x1a28e60
	void MulticastSetHealth(float NewHealth, bool UseContaminationCameraShake);// 0x1a28d80
	bool IsAlive();// 0x1a28d50
	void Init(Actor* NewOwnerActor, float NewHealth, float DyingHealth);// 0x1a28c40
	float GetMaxHealth();// 0x1a28b90
	float GetHealth();// 0x1a28b70
	void CheckCharacterDying(out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1a289e0
	void ChangeHealthRate(float Rate);// 0x1a28960
	void ChangeHealth(float Delta, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1a287e0
	void AddHealth(float Delta);// 0x1a28760

--------------------------------
Class: CrowBattleIdentity.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0xb0, Size: 1]
	FText UIName;//[Offset: 0xb8, Size: 1]
	void SetUIName(FText NewName);// 0x1a259a0
	bool IsEnemyOf(CrowBattleIdentity* Other);// 0x1a25210
	void Init(Actor* NewOwnerActor);// 0x1a25090
	FText GetUIName();// 0x1a25000

--------------------------------
Class: CrowBattleDamageHandlerBase.ActorComponent.Object

--------------------------------
Class: RepMovementTolerance
	float position;//[Offset: 0x0, Size: 1]
	float LinearVelocity;//[Offset: 0x4, Size: 1]
	float Rotation;//[Offset: 0x8, Size: 1]
	float AngularVelocity;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowFoliageAffectorComponent.SceneComponent.ActorComponent.Object
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	MulticastInlineDelegateProperty OnTimeAnimationFinished;//[Size: 1]
	bool bVolatileAffector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool bAlwaysRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	bool bWindAffector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 1]
	bool bStartWithBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213, Size: 1]
	bool bChangeViewModeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	Vector Location_FP;//[Offset: 0x218, Size: 1]
	Vector Location_TP;//[Offset: 0x224, Size: 1]
	MaterialInterface* MI;//[Offset: 0x230, Size: 1]
	CrowFoliageAffectByDistance AffectByDistance;//[Offset: 0x238, Size: 1]
	class CrowFoliageAffectorAnimData* AnimData;//[Offset: 0x258, Size: 1]
	bool IsVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	<enum> BindVehicleState;//[Offset: 0x268, Size: 1]
	float ScaleMultiplier;//[Offset: 0x2b8, Size: 1]
	float PowerMultiplier;//[Offset: 0x2bc, Size: 1]
	MaterialInstanceDynamic* MIDBrush;//[Offset: 0x2c0, Size: 1]
	CrowRotorFSM* RotorFSM;//[Offset: 0x2c8, Size: 1]
	CrowFoliageAffectorAnimData* AnimDataInstance;//[Offset: 0x2d0, Size: 1]
	CrowFoliageAffectorDrawParam DrawParam;//[Offset: 0x2d8, Size: 1]
	bool bRegisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bNeedRegister;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	Vector LocationByViewMode;//[Offset: 0x314, Size: 1]
	enum CurrentVehicleState;//[Offset: 0x320, Size: 1]
	void UnregisterAffector();// 0x1a7dc40
	void Stop();// 0x1a7dc20
	void Start();// 0x1a7dbe0
	void SetScaleMultiplier(float InScaleMultiplier);// 0x1a7db60
	void SetPowerMultiplier(float InPowerMultiplier);// 0x1a7dae0
	void RegisterAffector();// 0x1a7dac0
	void OnTimeAnimFinished();// 0x1a7da80
	void OnChangedViewMode(bool InFirstPerson);// 0x1a7d850
	void OnChangedVehicleFSM(enum InCurrentState);// 0x1a7d7c0
	Vector Internal_AnimateScale(float InCurveInput);// 0x1a7d700
	void Internal_AnimateHead();// 0x1a7d6e0
	float Internal_AnimateAlpha(float InCurveInput);// 0x1a7d640
	void GetMultiplierByDistance(out float OutScale, out float OutPower);// 0x1a7d560
	float GetElapsedTime(out bool OutTimeout);// 0x1a7d4c0
	void EditorUnregisterAffector();// 0xca8430
	void EditorRegisterAffector();// 0xca8430
	void D_ApplyOffset3P();// 0xca8430
	void C_ApplyOffset1P();// 0xca8430
	void B_Stop();// 0xca8430
	CrowFoliageAffectorDrawParam Animate(float DeltaTime);// 0x1a7d410
	void A_Start();// 0xca8430

--------------------------------
Class: CrowFoliageAffectorDrawParam
	bool bOwnerWasRecentlyRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWind;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum AnimState;//[Offset: 0x1, Size: 1]
	float DistanceFromCamera;//[Offset: 0x4, Size: 1]
	float StartAnimTime;//[Offset: 0x8, Size: 1]
	float AffectorAlpha;//[Offset: 0xc, Size: 1]
	float AffectorRotation;//[Offset: 0x10, Size: 1]
	Vector AffectorScale;//[Offset: 0x14, Size: 1]
	Vector AffectorLocation;//[Offset: 0x20, Size: 1]
	MaterialInstanceDynamic* Mid;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowFoliageAffectByDistance
	bool UseDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float AffectDistanceMax;//[Offset: 0x4, Size: 1]
	float ScaleInterpStartDist;//[Offset: 0x8, Size: 1]
	float ScaleMin;//[Offset: 0xc, Size: 1]
	float ScaleMax;//[Offset: 0x10, Size: 1]
	float PowerInterpStartDist;//[Offset: 0x14, Size: 1]
	float PowerMin;//[Offset: 0x18, Size: 1]
	float PowerMax;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowFoliageAffectorAnimData.Object
	enum AffectorAnimType;//[Offset: 0x28, Size: 1]
	float AnimTime;//[Offset: 0x2c, Size: 1]
	CurveFloat* AlphaCurveData;//[Offset: 0x30, Size: 1]
	CurveVector* ScaleCurveData;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowRotorFSM.CrowVehicleFSM.ActorComponent.Object
	CrowRotorSpinSetup SpinSetup;//[Offset: 0x170, Size: 1]
	DataTable* GroundFxDataTable;//[Offset: 0x1a0, Size: 1]
	SoundCue* EjectWarningAudioTamplate;//[Offset: 0x1a8, Size: 1]
	AkAudioEvent* EjectCaution_W;//[Offset: 0x1b0, Size: 1]
	CrowCameraPivotHeliComponent* CameraPivotTP;//[Offset: 0x1b8, Size: 1]
	float RotorSpinFactor;//[Offset: 0x1c0, Size: 1]

--------------------------------
Class: CrowVehicleFSM.ActorComponent.Object
	FName VehicleName;//[Offset: 0xb0, Size: 1]
	CrowVehiclePawn* VehiclePawn;//[Offset: 0xb8, Size: 1]
	enum CurrentStateID;//[Offset: 0xc0, Size: 1]
	CrowVehicleStateBase* CurrentState;//[Offset: 0xc8, Size: 1]
	<enum,CrowVehicleStateBase*> StateMap;//[Offset: 0xd0, Size: 1]
	<enum,CrowVehicleTaskBase*> TaskMap;//[Offset: 0x120, Size: 1]
	static CrowVehicleFSM* SafeNewVehicleFSM(Object* Outer, class Object Class);// 0x1b55af0
	void OnRep_ChangedState();// 0x1b557f0

--------------------------------
Class: CrowVehicleStateBase.Object
	enum StateId;//[Offset: 0x28, Size: 1]
	CrowVehicleFSM* FSM;//[Offset: 0x30, Size: 1]
	uint32 InputBlockMask;//[Offset: 0x38, Size: 1]
	CrowVehicleStateParameter StateParameter;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowVehicleStateParameter

--------------------------------
Class: CrowVehicleTaskBase.Object
	enum TaskID;//[Offset: 0x28, Size: 1]
	CrowVehicleFSM* FSM;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowRotorSpinSetup
	float EngineStartTime;//[Offset: 0x0, Size: 1]
	CurveFloat* EngineStartRotorCurve;//[Offset: 0x8, Size: 1]
	float ShutDownTime;//[Offset: 0x10, Size: 1]
	CurveFloat* ShutDownRotorCurve;//[Offset: 0x18, Size: 1]
	CrowRotorSpinInfo[] RotorSpinInfoList;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowRotorSpinInfo
	FName RotorBoneName;//[Offset: 0x0, Size: 1]
	float RotorSpinPerSec;//[Offset: 0x8, Size: 1]
	Vector RotorAxis;//[Offset: 0xc, Size: 1]
	FName[] HideRotorBoneNames;//[Offset: 0x18, Size: 1]
	CrowVehicleFxTemplate StartEngineFxTemplate;//[Offset: 0x28, Size: 1]
	CrowVehicleFxTemplate ReadyFxTemplate;//[Offset: 0x80, Size: 1]
	CrowVehicleFxTemplate ShutDownFxTemplate;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: CrowVehicleFxTemplate
	FxReplicator_FxTemplate FxTemplate;//[Offset: 0x0, Size: 1]
	FxReplicator_WwiseAudioTemplate WwiseAudioTemplate;//[Offset: 0x28, Size: 1]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 1]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	FString ImportKeyField;//[Offset: 0x88, Size: 1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 1]
	SoundNode* FirstNode;//[Offset: 0x178, Size: 1]
	float VolumeMultiplier;//[Offset: 0x180, Size: 1]
	float PitchMultiplier;//[Offset: 0x184, Size: 1]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x188, Size: 1]
	float SubtitlePriority;//[Offset: 0x528, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 1]
	int CookedQualityIndex;//[Offset: 0x534, Size: 1]
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x538, Size: 1]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowCameraPivotHeliComponent.SceneComponent.ActorComponent.Object
	float MinPitch;//[Offset: 0x1f8, Size: 1]
	float MaxPitch;//[Offset: 0x1fc, Size: 1]
	CurveFloat* RollCurve;//[Offset: 0x200, Size: 1]
	void Pitch(float IVal);// 0x1a387d0

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 position;//[Offset: 0x0, Size: 1]
	Quat Quaternion;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 1]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 1]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowWorldMapIcon.Object
	enum IconType;//[Offset: 0x28, Size: 1]
	Actor* TargetActor;//[Offset: 0x30, Size: 1]
	Actor* ParentActor;//[Offset: 0x38, Size: 1]
	CrowWidgetBase*[] IconWidgetArray;//[Offset: 0x40, Size: 1]
	CrowGameIconDisplayInfo DisplayInfo;//[Offset: 0x50, Size: 1]
	Vector2D IconOffset;//[Offset: 0xd8, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	CrowEventParam EventParam;//[Offset: 0xe8, Size: 1]
	bool bIsEnableScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool bIsUseMapScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	CrowPingData PingData;//[Offset: 0x120, Size: 1]

--------------------------------
Class: CrowEventParam
	Object* UObjectParam;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowPingData
	CrowPlayerStateBase* Owner;//[Offset: 0x0, Size: 1]
	enum PingType;//[Offset: 0x8, Size: 1]
	uint16 PingKey;//[Offset: 0xa, Size: 1]
	Vector Location;//[Offset: 0xc, Size: 1]
	Actor* TargetActor;//[Offset: 0x18, Size: 1]
	FString TargetName;//[Offset: 0x20, Size: 1]
	enum TargetItemType;//[Offset: 0x30, Size: 1]
	uint32 TargetItemIndex;//[Offset: 0x34, Size: 1]
	Actor* ParentActor;//[Offset: 0x38, Size: 1]
	FString ParentName;//[Offset: 0x40, Size: 1]
	bool bIsIconPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	enum TargetVehicleIdentity;//[Offset: 0x51, Size: 1]
	TimerHandle LifeTimer;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CrowIndicatorViewInfo.Object
	Actor* TargetActor;//[Offset: 0x28, Size: 1]
	SceneComponent* TargetComponent;//[Offset: 0x30, Size: 1]
	SkeletalMeshComponent* TargetSkeletalMesh;//[Offset: 0x38, Size: 1]
	CrowPingData PingData;//[Offset: 0x40, Size: 1]
	CrowGameIconDisplayInfo DisplayInfo;//[Offset: 0xa8, Size: 1]
	CrowWidgetBase* MainWidget;//[Offset: 0x130, Size: 1]
	Widget* RootWidget;//[Offset: 0x138, Size: 1]
	Widget* ArrowPanel;//[Offset: 0x140, Size: 1]
	CrowWidgetCacheBase RootWidgetCache;//[Offset: 0x148, Size: 1]
	CrowWidgetCacheBase ArrowPanelCache;//[Offset: 0x170, Size: 1]
	CrowWidgetCacheBase[] IconArray;//[Offset: 0x198, Size: 1]
	CrowWidgetCacheBase[] NameArray;//[Offset: 0x1a8, Size: 1]
	CrowIndicatorDistance[] DistanceArray;//[Offset: 0x1b8, Size: 1]
	Vector2D PrevPixelPos;//[Offset: 0x1c8, Size: 1]

--------------------------------
Class: CrowWidgetCacheBase
	Widget* Widget;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowIndicatorDistance
	TextBlock* TextBlock;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowDamageExpInfo
	uint64 ServerKey;//[Offset: 0x0, Size: 1]
	float DamagePercent;//[Offset: 0x8, Size: 1]
	double DamageTime;//[Offset: 0x10, Size: 1]
	CrowAssistDamageInfo[] AssistDamageInfos;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowAssistDamageInfo
	float ActualDamage;//[Offset: 0x0, Size: 1]
	enum DamageCauser;//[Offset: 0x4, Size: 1]
	enum ItemType;//[Offset: 0x5, Size: 1]
	uint16 ItemIndex;//[Offset: 0x6, Size: 1]
	float Percent;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowVehicleIconInfo
	CrowGameIconDisplayInfo Local;//[Offset: 0x0, Size: 1]
	CrowGameIconDisplayInfo MySquad;//[Offset: 0x88, Size: 1]
	CrowGameIconDisplayInfo MyTeam;//[Offset: 0x110, Size: 1]
	CrowGameIconDisplayInfo Enemy;//[Offset: 0x198, Size: 1]
	CrowGameIconDisplayInfo Empty;//[Offset: 0x220, Size: 1]
	CrowGameIconDisplayInfo Observer;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: CrowVehicleDeltaVelocity
	float Forward;//[Offset: 0x0, Size: 1]
	float Right;//[Offset: 0x4, Size: 1]
	float Duration;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowSaveGameServerExpInfo
	uint32 TotalBuffExpPoint;//[Offset: 0x8, Size: 1]
	uint32 TakeExpPoint;//[Offset: 0xc, Size: 10]
	CrowTakeWeaponExpInfo[] TakeWeaponExpInfo;//[Offset: 0x38, Size: 1]
	CrowMissionInfo[] MissionStateInfo;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowTakeWeaponExpInfo
	uint32 ExpShareIndex;//[Offset: 0x0, Size: 1]
	uint32 WaeponExp;//[Offset: 0x4, Size: 1]
	uint32 WaeponBuffExp;//[Offset: 0x8, Size: 1]
	uint32 KillCount;//[Offset: 0xc, Size: 1]
	uint32 HeadShotCount;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowMissionInfo
	byte MissionType;//[Offset: 0x0, Size: 1]
	byte MissionModeType;//[Offset: 0x1, Size: 1]
	uint32 EndDate;//[Offset: 0x4, Size: 1]
	uint32 MissionID;//[Offset: 0x8, Size: 1]
	uint32 DoCount;//[Offset: 0xc, Size: 1]
	uint32 GoalCount;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowTakeExpInfo.CrowSaveGameServerExpInfo
	uint32 TakeExpBuffPoint;//[Offset: 0x58, Size: 10]
	CrowWeaponEventInfo[] WeaponEventInfo;//[Offset: 0x80, Size: 1]

--------------------------------
Class: CharacterHitInfo
	float ActualDamage;//[Offset: 0x0, Size: 1]
	class Object* DamageTypeClass;//[Offset: 0x8, Size: 1]
	int DamageEventClassID;//[Offset: 0x10, Size: 1]
	Actor* DamageCauser;//[Offset: 0x18, Size: 1]
	FName BoneName;//[Offset: 0x20, Size: 1]
	Controller* DamageController;//[Offset: 0x28, Size: 1]
	DamageEvent GeneralDamageEvent;//[Offset: 0x30, Size: 1]
	PointDamageEvent PointDamageEvent;//[Offset: 0x40, Size: 1]
	RadialDamageEvent RadialDamageEvent;//[Offset: 0xe8, Size: 1]

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x10, Size: 1]
	Vector Origin;//[Offset: 0x24, Size: 1]
	HitResult[] ComponentHits;//[Offset: 0x30, Size: 1]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 1]
	float MinimumDamage;//[Offset: 0x4, Size: 1]
	float InnerRadius;//[Offset: 0x8, Size: 1]
	float OuterRadius;//[Offset: 0xc, Size: 1]
	float DamageFalloff;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowGameInvenComponent.ActorComponent.Object
	CrowItemBase*[] EquipArray;//[Offset: 0xb0, Size: 1]
	CrowItemBase*[] InvenArray;//[Offset: 0xc0, Size: 1]
	uint32 CurrentWeaponKey;//[Offset: 0xd0, Size: 1]
	uint32 CurrentWeaponIndex;//[Offset: 0xd4, Size: 1]
	byte CurrentWeaponSlotIndex;//[Offset: 0xd8, Size: 1]
	byte EquipCount;//[Offset: 0xd9, Size: 1]
	CrowItemBase*[] ServerOnlyItemArray;//[Offset: 0xe0, Size: 1]
	CrowPlayerStateBase* OwnerPS;//[Offset: 0xf0, Size: 1]
	CrowWeaponBase* CachedCurrentWeapon;//[Offset: 0x100, Size: 1]
	CrowItemBase*[] LearLootItemList;//[Offset: 0x108, Size: 1]
	CrowCharacterPawn* CharacterOwner;//[Offset: 0x118, Size: 1]
	int InvenSlotCount;//[Offset: 0x120, Size: 1]
	CrowPickupInventory* CurrentPickupInventory;//[Offset: 0x128, Size: 1]
	float CurrentRot;//[Offset: 0x130, Size: 1]
	float CurrentDist;//[Offset: 0x134, Size: 1]
	float DropAddDist;//[Offset: 0x138, Size: 1]
	void SinglecastOpenPickupInventory(CrowPickupInventory* Inven);// 0x1a89510
	void RequestUnequipCurrentWeapon();// 0x1a894c0
	void RequestSwapWeaponParts(int WeaponSlot1, int WeaponSlot2, enum PartsType);// 0x1a89380
	void RequestSwapEquipWeaponParts(CrowItemBase* CurrEquipWeapon, CrowItemBase* NewWeapon);// 0x1a89270
	void RequestSplitInventoryItem(byte SlotIndex, int SplitCount);// 0x1a89160
	void RequestRemoveWeapon(uint16 WeaponKey);// 0x1a890a0
	void RequestRemoveInventory(byte SlotIndex);// 0x1a88ff0
	void RequestRemoveEquipmentThrow(byte SlotIndex, bool IsDestroyActor, bool AutoChangeWeaponThrow);// 0x1a88ea0
	void RequestRemoveEquipment(byte SlotIndex, bool IsDestroyActor);// 0x1a88da0
	void RequestOpenPickupInventory(CrowPickupInventory* Inven);// 0x1a88ce0
	void RequestMoveWeaponPartsToInven(byte EquipSlot, enum PartsType, byte InvenSlot);// 0x1a88b90
	void RequestMovePickupInvenToInventory(CrowPickupInventory* Inven, byte PickupSlot, byte InvenSlot, Actor* NewOwner);// 0x1a88a00
	void RequestMovePickupInvenToEquipment(CrowPickupInventory* Inven, byte PickupSlot, byte EquipSlot, Actor* NewOwner);// 0x1a88870
	void RequestMoveInvenToWeaponParts(byte InvenSlot, byte EquipSlot, enum PartsType, uint32 OldWeaponPartsIndex);// 0x1a885e0
	void RequestMoveInventory(byte Slot1, byte Slot2);// 0x1a88770
	void RequestMoveInvenToEquip(byte InvenSlot, byte EquipSlot);// 0x1a884e0
	void RequestMoveEquipToInven(byte EquipSlot, byte InvenSlot);// 0x1a882e0
	void RequestMoveEquipment(byte Slot1, byte Slot2);// 0x1a883e0
	void RequestEquipWeaponParts(byte EquipSlot, CrowItemBase* ItemData, enum PartsType, CrowPickupInventory* Inven, Actor* NewOwner);// 0x1a88100
	void RequestEquipWeapon(CrowItemBase* ItemData, byte EquipSlot, Actor* NewOwner, bool RefillAmmo, bool EnableDrop);// 0x1a87f10
	void RequestEquipQuickSlot(CrowItemBase* Item, byte SlotIndex, byte PickupInvenSlot, CrowPickupInventory* Inven);// 0x1a87d80
	void RequestEquipItemKit(CrowItemBase* Item, int ItemIndex, int AmmoCount, CrowPickupInventory* Inven, Actor* NewOwner);// 0x1a87ba0
	void RequestDropParts(const CrowWeaponPartsDropDataServer WeaponPartsDrop, enum DropType);// 0x1a87a70
	void RequestDropItem(const CrowItemDropDataServer DropData, enum DropType);// 0x1a87940
	void RequestDecreaseInvenItemCount(int InvenSlot, int Count);// 0x1a87840
	void RequestClosePickupInventory(CrowPickupInventory* Inven);// 0x1a87780
	void RequestChangeEquipment(byte SlotIndex);// 0x1a876d0
	void RequestAddInventory(CrowItemBase* Item, byte InvenSlot, Actor* Owner);// 0x1a87590

--------------------------------
Class: CrowPickupInventory.Actor.Object
	CrowItemBase*[] PickupInvenItemList;//[Offset: 0x220, Size: 1]
	FString PlayerNickName;//[Offset: 0x230, Size: 1]
	enum InvenState;//[Offset: 0x240, Size: 1]
	float RemainTime;//[Offset: 0x244, Size: 1]
	float BaseLimitTime;//[Offset: 0x248, Size: 1]
	bool bIsWorldSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	BoxComponent* BoxComponent;//[Offset: 0x250, Size: 1]
	MeshComponent*[] MeshComponent;//[Offset: 0x258, Size: 1]
	MaterialInstanceDynamic*[] DynamicMaterialArray;//[Offset: 0x268, Size: 1]
	CrowItemSpawner* OwnerSpawner;//[Offset: 0x278, Size: 1]
	float CorpseLootBoxLimitTime;//[Offset: 0x280, Size: 1]
	float CorpseLootBoxDelayTime;//[Offset: 0x284, Size: 1]
	float CorpseLootBoxFadeTime;//[Offset: 0x288, Size: 1]
	CrowCharacterPawn* InvenUser;//[Offset: 0x290, Size: 1]
	void MultiCastSetInvenState(enum State);// 0x1ae0a70
	void MultiCastDropItem(Vector_NetQuantize100 Location, Rotator Rotation, float DISTANCE);// 0x1ae0940

--------------------------------
Class: CrowItemSpawner.Actor.Object
	enum SpawnerType;//[Offset: 0x220, Size: 1]
	bool bIsSpawnRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	uint32 RandomIndex;//[Offset: 0x224, Size: 1]
	bool bIsSpawnGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	uint32 GroupIndex;//[Offset: 0x22c, Size: 1]
	bool bIsSpawnMineral;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	uint32 MineralIndex;//[Offset: 0x234, Size: 1]
	int MineralType;//[Offset: 0x238, Size: 1]
	bool bIsSpawnFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	uint32 FixIndex;//[Offset: 0x240, Size: 1]
	bool bIsSpawnRespawnFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	uint32 RespawnFixIndex;//[Offset: 0x248, Size: 1]
	CrowItemBase*[] SpawnedItemArray;//[Offset: 0x280, Size: 1]
	CrowPickupInventory*[] SpawnedInvenArray;//[Offset: 0x290, Size: 1]

--------------------------------
Class: CrowWeaponPartsDropDataServer
	Rotator Rotation;//[Offset: 0x0, Size: 1]
	uint16 WeaponKey;//[Offset: 0xc, Size: 1]
	enum PartsType;//[Offset: 0xe, Size: 1]
	uint32 PartsIndex;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowItemDropDataServer
	bool IsEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte SlotIndex;//[Offset: 0x1, Size: 1]
	Rotator Rotation;//[Offset: 0x4, Size: 1]
	int ItemCount;//[Offset: 0x10, Size: 1]
	float DISTANCE;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CrowWeaponData.CrowItemData
	uint32 WeaponKey;//[Offset: 0x30, Size: 1]
	enum WeaponSubType;//[Offset: 0x34, Size: 1]
	int16 AmmoCount;//[Offset: 0x36, Size: 1]
	int16 AmmoInClip;//[Offset: 0x38, Size: 1]
	int16 MaxAmmoInClip;//[Offset: 0x3a, Size: 1]
	CrowWeaponPartsData PartsDatas;//[Offset: 0x40, Size: 9]

--------------------------------
Class: CrowItemData
	enum ItemType;//[Offset: 0x8, Size: 1]
	uint32 ItemIndex;//[Offset: 0xc, Size: 1]
	int ItemCount;//[Offset: 0x10, Size: 1]
	uint64 ItemInvenNo;//[Offset: 0x18, Size: 1]
	byte ItemState;//[Offset: 0x20, Size: 1]
	int ItemCost;//[Offset: 0x24, Size: 1]
	byte ItemTeamID;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowWeaponPartsData
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint32 Index;//[Offset: 0x4, Size: 1]
	bool bNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int[] Stickers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowSquadInfo.Object
	byte TeamID;//[Offset: 0x34, Size: 1]
	FString SquadKey;//[Offset: 0x38, Size: 1]
	int SquadKeyID;//[Offset: 0x48, Size: 1]
	FString SquadName;//[Offset: 0x50, Size: 1]
	CrowSquadPlayer[] PlayerArray;//[Offset: 0x60, Size: 1]
	int PlayerCount;//[Offset: 0x70, Size: 1]
	uint32 SquadPoint;//[Offset: 0x74, Size: 1]
	CrowMissionArea* WaitRespawnArea;//[Offset: 0x78, Size: 1]
	uint32 TotalRetreivedMineral;//[Offset: 0x80, Size: 1]
	enum[] UpdateModePointIndexArray;//[Offset: 0x88, Size: 1]
	CrowPingData[] PingDataArray;//[Offset: 0x98, Size: 1]
	CrowSquadRewardInfo[] RewardInfoArray;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CrowSquadPlayer
	CrowPlayerStateBase* PlayerState;//[Offset: 0x0, Size: 1]
	enum SquadRole;//[Offset: 0x8, Size: 1]
	uint64 SquadOrder;//[Offset: 0x10, Size: 1]
	uint32 FirstRespawnAreaID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowMissionArea.Actor.Object
	BoxComponent* Root;//[Offset: 0x228, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x230, Size: 1]
	StaticMeshComponent* AreaRotation;//[Offset: 0x238, Size: 1]
	enum[] EnableGameModes;//[Offset: 0x240, Size: 1]
	bool bIsEnableIndicatorPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	float IndicatorPingLifeTime;//[Offset: 0x254, Size: 1]
	<uint32,CrowActorOverlapRef> ActorOverlapRefMap;//[Offset: 0x258, Size: 1]
	ShapeComponent*[] CollisionShapeArray;//[Offset: 0x2a8, Size: 1]
	CrowMissionAreaComponent*[] ComponentArray;//[Offset: 0x2b8, Size: 1]
	CrowMissionAreaRespawn* RespawnComponent;//[Offset: 0x2c8, Size: 1]
	uint32 AreaID;//[Offset: 0x2d0, Size: 1]
	CrowEventHandler EventHandler;//[Offset: 0x2e0, Size: 1]
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1acc970
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult HitResultInfo);// 0x1acc710

--------------------------------
Class: CrowActorOverlapRef
	CrowCharacterPawn* TargetCharacter;//[Offset: 0x0, Size: 1]
	uint32 RefCount;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowMissionAreaComponent.SceneComponent.ActorComponent.Object
	CrowMissionArea* ParentArea;//[Offset: 0x1f8, Size: 1]
	CrowEventHandler EventHandler;//[Offset: 0x200, Size: 1]

--------------------------------
Class: CrowEventHandler
	Object* TargetObject;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowMissionAreaRespawn.CrowMissionAreaComponent.SceneComponent.ActorComponent.Object
	ShapeComponent*[] RespawnShapeArray;//[Offset: 0x218, Size: 1]

--------------------------------
Class: CrowSquadRewardInfo
	byte Index;//[Offset: 0x0, Size: 1]
	enum State;//[Offset: 0x1, Size: 1]

--------------------------------
Class: CrowWidgetDying.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Message;//[Offset: 0x348, Size: 1]
	CrowHealGauge* WB_HealGauge;//[Offset: 0x350, Size: 1]
	BackgroundBlur* BG_Blur;//[Offset: 0x358, Size: 1]
	Image* IMG_Vignette;//[Offset: 0x360, Size: 1]
	float MaxBlurValue;//[Offset: 0x368, Size: 1]
	FName NormalLoopAniName;//[Offset: 0x36c, Size: 1]
	FName StopBleedingAnimName;//[Offset: 0x374, Size: 1]
	FName FastBleedingAnimName;//[Offset: 0x37c, Size: 1]
	FName CallHelpAnimName;//[Offset: 0x384, Size: 1]
	SoftObjectPath GroggySound;//[Offset: 0x390, Size: 1]
	FString NameHeartBeat;//[Offset: 0x3a8, Size: 1]
	AkComponent* AkComponent;//[Offset: 0x3b8, Size: 1]
	enum PreBleedingType;//[Offset: 0x3c0, Size: 1]

--------------------------------
Class: CrowHealGauge.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Gauge;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_Center;//[Offset: 0x350, Size: 1]
	TextBlock* TB_HealCount;//[Offset: 0x358, Size: 1]
	MaterialInstanceDynamic* GaugeMaterial;//[Offset: 0x360, Size: 1]
	LinearColor Color_Bleeding;//[Offset: 0x368, Size: 1]
	FName InjuredLoopAnimName;//[Offset: 0x378, Size: 1]

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x120, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x130, Size: 1]
	byte VerticalAlignment;//[Offset: 0x131, Size: 1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 1]
	float BlurStrength;//[Offset: 0x134, Size: 1]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	int BlurRadius;//[Offset: 0x13c, Size: 1]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x140, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x31e8050
	void SetPadding(Margin InPadding);// 0x31e78a0
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x31e7570
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x31e71a0
	void SetBlurStrength(float InStrength);// 0x31e6aa0
	void SetBlurRadius(int InBlurRadius);// 0x31e6a10
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x31e6860

--------------------------------
Class: CrowIngameChatHandler.ActorComponent.Object
	void Server_SendChatMessage(const CrowChatData ChatData);// 0x1a9cdb0
	void MulticastSendChatMessage(const CrowChatData ChatData);// 0x1a9cbc0

--------------------------------
Class: CrowChatData
	enum ChatType;//[Offset: 0x0, Size: 1]
	uint64 playerId;//[Offset: 0x8, Size: 1]
	FString ServerAppID;//[Offset: 0x10, Size: 1]
	FString ChatMessage;//[Offset: 0x20, Size: 1]
	FString SendedPlayerNickname;//[Offset: 0x30, Size: 1]
	CrowPlayerStateBase* SendedPlayerState;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowPassengerInventory.ActorComponent.Object
	CrowWeaponVehicle*[] EquipArray;//[Offset: 0xb0, Size: 1]
	CrowWeaponVehicle*[] PrevEquipArray;//[Offset: 0xc0, Size: 1]
	CrowWeaponVehicle* SpecialWeapon;//[Offset: 0xd0, Size: 1]
	CrowWeaponVehicle* PrevSpecialWeapon;//[Offset: 0xd8, Size: 1]
	int8 CurrentSlotIndex;//[Offset: 0xe0, Size: 1]
	int8 CurrentWeaponKey;//[Offset: 0xe1, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0xe8, Size: 1]
	CrowGameHUDBase* CrowInGameHUD;//[Offset: 0xf0, Size: 1]
	void RequestResetEquipArray();// 0x1ad8f50
	void RequestEquipArray(const CrowWeaponVehicle*[] NewEquipArray, CrowWeaponVehicle* NewSpecialWeapon);// 0x1ad8bb0
	void RequestChangeWeapon(int8 SlotIndex);// 0x1ad8b00

--------------------------------
Class: CrowGameHUDBase.CrowHUDBase.HUD.Actor.Object
	class CrowHUDWidgetDefault* MainWidgetClassDefault;//[Offset: 0x400, Size: 1]
	class CrowHUDWidgetFullScreenBottom* MainWidgetClassFullScreenBottom;//[Offset: 0x408, Size: 1]
	class CrowHUDWidgetFullScreenTop* MainWidgetClassFullScreenTop;//[Offset: 0x410, Size: 1]
	class CrowSquadWidget* InGameSquadWidgetClass;//[Offset: 0x418, Size: 1]
	class UserWidget* InvetoryWidget;//[Offset: 0x420, Size: 1]
	class UserWidget* WorldMapWidgetClass;//[Offset: 0x428, Size: 1]
	class UserWidget* RespawnMapWidgetClass;//[Offset: 0x430, Size: 1]
	class UserWidget* ObjectiveWidgetClass;//[Offset: 0x438, Size: 1]
	class UserWidget* IndicatorSpaceClass;//[Offset: 0x440, Size: 1]
	class UserWidget* RadialMenuThrowWidgetClass;//[Offset: 0x448, Size: 1]
	class UserWidget* RadialMenuHealKitWidgetClass;//[Offset: 0x450, Size: 1]
	class UserWidget* RadialMenuPingWidgetClass;//[Offset: 0x458, Size: 1]
	class UserWidget* RadialMenuSprayWidgetClass;//[Offset: 0x460, Size: 1]
	class UserWidget* RadialMenuEmotionWidgetClass;//[Offset: 0x468, Size: 1]
	class UserWidget* PingWorldMapWidgetClass;//[Offset: 0x470, Size: 1]
	class UserWidget* PingIndicatorWidgetClass;//[Offset: 0x478, Size: 1]
	class UserWidget* GetItemIndicatorClass;//[Offset: 0x480, Size: 1]
	class UserWidget* CountdownWidgetClass;//[Offset: 0x488, Size: 1]
	class UserWidget* FadeScreenWidgetClass;//[Offset: 0x490, Size: 1]
	class UserWidget* LootInventoryWidget;//[Offset: 0x498, Size: 1]
	class UserWidget* RequireMineralWidgetClass;//[Offset: 0x4a0, Size: 1]
	class UserWidget* RequireBattleMoneyWidgetClass;//[Offset: 0x4a8, Size: 1]
	class UserWidget* ResultSceneWidgetClass;//[Offset: 0x4b0, Size: 1]
	class UserWidget* ResultSceneIconWidgetClass;//[Offset: 0x4b8, Size: 1]
	class UserWidget* ESCMenuWidgetClass;//[Offset: 0x4c0, Size: 1]
	class UserWidget* InputGuideWidgeteClass;//[Offset: 0x4c8, Size: 1]
	class UserWidget* DialogTooltipWidgetClass;//[Offset: 0x4d0, Size: 1]
	class UserWidget* ScoreBoardWidgetClass;//[Offset: 0x4d8, Size: 1]
	class UserWidget* GameResultWidgetClass;//[Offset: 0x4e0, Size: 1]
	class UserWidget* ChatWidgetClass;//[Offset: 0x4e8, Size: 1]
	class UserWidget* SpectatorModeWidgetClass;//[Offset: 0x4f0, Size: 1]
	class UserWidget* SpectatorCustomModeWidgetClass;//[Offset: 0x4f8, Size: 1]
	class UserWidget* TooltipWidgetClass;//[Offset: 0x500, Size: 1]
	class UserWidget* CustomCursorSpaceClass;//[Offset: 0x508, Size: 1]
	class UserWidget* InGameModeGuideWidgetClass;//[Offset: 0x510, Size: 1]
	class UserWidget* GasMaskFilterWidgetClass;//[Offset: 0x518, Size: 1]
	class CrowFlashBangFxWidget* FlashBangFxWidgetClass;//[Offset: 0x520, Size: 1]
	class CrowFlashBangFxWidget* ExplosionFxWidgetClass;//[Offset: 0x528, Size: 1]
	class CrowMissionComplatePopup* MissionComplatePopupClass;//[Offset: 0x530, Size: 1]
	class CrowPlayerReportWidget* PlayerReportWidgetClass;//[Offset: 0x538, Size: 1]
	ParticleSystem* BurningFX;//[Offset: 0x540, Size: 1]
	float ShowPingWidgetDistanceLow;//[Offset: 0x548, Size: 1]
	float ShowPingWidgetDistanceFar;//[Offset: 0x54c, Size: 1]
	ParticleSystemComponent* AttachedBurningFX;//[Offset: 0x550, Size: 1]
	bool SkipHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	CrowHUDWidgetDefault* MainWidgetDefault;//[Offset: 0x560, Size: 1]
	CrowHUDWidgetFullScreenBottom* MainWidgetFullScreenBottom;//[Offset: 0x568, Size: 1]
	CrowHUDWidgetFullScreenTop* MainWidgetFullScreenTop;//[Offset: 0x570, Size: 1]
	CrowHUDWidgetBase*[] MainWidgetArray;//[Offset: 0x578, Size: 1]
	CrowWidgetBase*[] SubWidgetArray;//[Offset: 0x588, Size: 1]
	CrowWeaponBase* CurrentWeaponBase;//[Offset: 0x598, Size: 1]
	CrowBattleInventoryWidget* CrowInventory;//[Offset: 0x5a0, Size: 1]
	CrowPingItemInfoWidget* CrowGetItemDescWidget;//[Offset: 0x5a8, Size: 1]
	CrowWorldMapWidget* WorldMapWidget;//[Offset: 0x5b0, Size: 1]
	CrowRespawnMapWidget* RespawnMapWidget;//[Offset: 0x5b8, Size: 1]
	CrowObjectiveWidget* ObjectiveWidget;//[Offset: 0x5c0, Size: 1]
	CrowIndicatorSpaceWidget* IndicatorSpaceWidget;//[Offset: 0x5c8, Size: 1]
	CrowRadialMenuThrowWidget* RadialMenuThrowWidget;//[Offset: 0x5d0, Size: 1]
	CrowRadialMenuHealKitWidget* RadialMenuHealKitWidget;//[Offset: 0x5d8, Size: 1]
	CrowRadialMenuSprayWidget* RadialMenuSprayWidget;//[Offset: 0x5e0, Size: 1]
	CrowRadialMenuPingWidget* RadialMenuPingWidget;//[Offset: 0x5e8, Size: 1]
	CrowRadialMenuEmotionWidget* RadialMenuEmotionWidget;//[Offset: 0x5f0, Size: 1]
	CrowWidgetBase* ScoreBoardWidget;//[Offset: 0x5f8, Size: 1]
	CrowCountdownWidget* CountdownWidget;//[Offset: 0x600, Size: 1]
	CrowFadeScreenWidget* FadeScreenWidget;//[Offset: 0x608, Size: 1]
	CrowBattleInventoryLoot* CrowLootInventory;//[Offset: 0x610, Size: 1]
	CrowRequirePointWidget* RequireMineralWidget;//[Offset: 0x618, Size: 1]
	CrowRequirePointWidget* RequireBattleMoneyWidget;//[Offset: 0x620, Size: 1]
	CrowResultSceneWidget* ResultSceneWidget;//[Offset: 0x628, Size: 1]
	CrowESCMenuWidget* ESCMenuWidget;//[Offset: 0x630, Size: 1]
	CrowWidgetBase* InputGuideWidget;//[Offset: 0x638, Size: 1]
	CrowDialogTooltip* DialogTooltipWidget;//[Offset: 0x640, Size: 1]
	CrowWidgetBase* GameResultWidget;//[Offset: 0x648, Size: 1]
	CrowChatWidget* ChatWidget;//[Offset: 0x650, Size: 1]
	CrowWidgetTooltip* ToolTipWidget;//[Offset: 0x658, Size: 1]
	CrowCustomCursorSpaceWidget* CustomCursorSpace;//[Offset: 0x660, Size: 1]
	CrowSquadWidget* SquadWidget;//[Offset: 0x668, Size: 1]
	CrowInGameModeGuideWidget* InGameModeGuideWidget;//[Offset: 0x670, Size: 1]
	CrowGasMaskFilterWidget* GasMaskFilterWidget;//[Offset: 0x678, Size: 1]
	CrowFlashBangFxWidget* FlashBangFxWidget;//[Offset: 0x680, Size: 1]
	CrowFlashBangFxWidget* ExplosionFxWidget;//[Offset: 0x688, Size: 1]
	bool IsVehicleMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	CrowSceneGame* SceneGame;//[Offset: 0x698, Size: 1]
	Actor* PreCameraTarget;//[Offset: 0x6a0, Size: 1]
	CrowPlayerReportWidget* PlayerReportWidget;//[Offset: 0x6a8, Size: 1]
	CrowRadialMenuWidgetBase* RadialMenuWidget;//[Offset: 0x6b0, Size: 1]
	byte PrevSpectatorCameraMode;//[Offset: 0x6b8, Size: 1]
	CrowWeaponBase* CurrentAttachedWeapon;//[Offset: 0x6c0, Size: 1]
	CrowWeaponCrosshairBase* AttachedWeaponCrosshairWidget;//[Offset: 0x6c8, Size: 1]
	CrowSpectatorWidget* SpectatorModeWidget;//[Offset: 0x6d0, Size: 1]
	CrowSpectatorCustomModeWidget* SpectatorCustomModeWidget;//[Offset: 0x6d8, Size: 1]
	bool bIsSpectatorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	CrowMissionComplatePopup* MissionComplatePopup;//[Offset: 0x6e8, Size: 1]

--------------------------------
Class: CrowHUDBase.HUD.Actor.Object
	CrowWidgetBase*[] WidgetClassList;//[Offset: 0x310, Size: 1]
	<ClassMapKey,CrowWeaponCrosshairBase*> CrosshairMap;//[Offset: 0x320, Size: 1]
	<ClassMapKey,CrowWeaponZoomWidget*> ZoomWidgetMap;//[Offset: 0x370, Size: 1]
	CrowLoadingBoxWidget* LoadingBoxWidget;//[Offset: 0x3c0, Size: 1]
	CrowFullScreenWidgetBase* CurrentFullScreenWidget;//[Offset: 0x3c8, Size: 1]
	CrowSettingsWidget* CrowSettingsWidget;//[Offset: 0x3d0, Size: 1]
	CrowMovieWidget* CrowMovieWidget;//[Offset: 0x3d8, Size: 1]
	CrowSettingsBrightnessWidget* CrowSettingsBrightnessWidget;//[Offset: 0x3e0, Size: 1]
	TimerHandle WidgetInteractionTimer;//[Offset: 0x3e8, Size: 1]
	CrowWeaponCrosshairBase* CurrentCrosshair;//[Offset: 0x3f0, Size: 1]

--------------------------------
Class: CrowHUDWidgetDefault.CrowHUDWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowStatusWidget* WB_StatusWidget;//[Offset: 0x348, Size: 1]
	CrowToastMessageWidget* WB_ToastMessage;//[Offset: 0x350, Size: 1]
	CrowCompassInfoWIdget* WB_CompassInfo;//[Offset: 0x358, Size: 1]
	CrowKillFeedWidget* WB_KillfeedWidget;//[Offset: 0x360, Size: 1]
	CrowProgressBarWidget* WB_InteractionProgress;//[Offset: 0x368, Size: 1]
	CrowTutorialInfoWidget* WB_TutorialInfo_01;//[Offset: 0x370, Size: 1]
	CrowTutorialInfoWidget* WB_TutorialInfo;//[Offset: 0x378, Size: 1]
	CrowTutorialInfoWidget* WB_TutorialInfo_02;//[Offset: 0x380, Size: 1]
	CrowTutorialInfoWidget* WB_TutorialDoor;//[Offset: 0x388, Size: 1]
	CrowMedalInfoWidget* WB_MedalInfo;//[Offset: 0x390, Size: 1]
	CrowMinimapInfoWidget* WB_Minimap;//[Offset: 0x398, Size: 1]
	CrowHealWidget* WB_HealWidget;//[Offset: 0x3a0, Size: 1]
	CrowHitMarkerWidget* WB_HitMarker;//[Offset: 0x3a8, Size: 1]
	CrowPlayerWeaponListWidget* WB_Weapon_List_Player;//[Offset: 0x3b0, Size: 1]
	CrowToolTipPingWidget* WB_ToolTip_Ping;//[Offset: 0x3b8, Size: 1]
	CrowInteractionProgressCircleWidget* WB_InteractionProgress_Circle;//[Offset: 0x3c0, Size: 1]
	CrowZeroingWidget* WB_zeroing;//[Offset: 0x3c8, Size: 1]
	CrowInGameMissionAlarmWidget* WB_InGameMissionAlarm;//[Offset: 0x3d0, Size: 1]
	CrowFPSWidget* WB_CrowHUD_FPS;//[Offset: 0x3d8, Size: 1]
	CrowGuideMessageWidget* WB_Tutorial_Heal_Bottom;//[Offset: 0x3e0, Size: 1]
	CrowHUDWeaponUnlockWidget* WB_HUD_WeaponUnlock;//[Offset: 0x3e8, Size: 1]
	CrowGasMaskStatusWidget* WB_StatusGasMask;//[Offset: 0x3f0, Size: 1]
	CrowParachuteStatusWidget* WB_StatusParachute;//[Offset: 0x3f8, Size: 1]
	CrowSupplyGainMessage* WB_DeathMatch_Obtain;//[Offset: 0x400, Size: 1]
	CrowIntegratedIndicatorWidget* WB_IntegratedIndicator;//[Offset: 0x408, Size: 1]
	CrowBuffWidget* WB_Buff;//[Offset: 0x410, Size: 1]
	WidgetAnimation* HideAnimation;//[Offset: 0x418, Size: 1]
	CrowObjectiveWidget* WB_Objective_Mod;//[Offset: 0x420, Size: 1]
	CrowObjectiveBombMissionWidget* WB_Objective_BombMission;//[Offset: 0x428, Size: 1]
	CrowCharacterPawn* CrowCharacterPawn;//[Offset: 0x430, Size: 1]
	<Actor*,CrowIndicatorInfo*> Indicators;//[Offset: 0x438, Size: 1]
	CrowWeaponEventInfo[] WeaponUIEventInfoQueue;//[Offset: 0x488, Size: 1]

--------------------------------
Class: CrowHUDWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CrowStatusWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_CharacterState;//[Offset: 0x348, Size: 1]
	CrowWeaponInfoWidget* CrowWeaponInfoWidget;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_EquipGadget;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_EquipHeal;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_EquipGrenade;//[Offset: 0x368, Size: 1]
	Image* IMG_Item_G;//[Offset: 0x370, Size: 1]
	Image* IMG_Item_H;//[Offset: 0x378, Size: 1]
	Image* IMG_Item_T;//[Offset: 0x380, Size: 1]
	TextBlock* TB_RemainCount_G;//[Offset: 0x388, Size: 1]
	TextBlock* TB_RemainCount_H;//[Offset: 0x390, Size: 1]
	TextBlock* TB_RemainCount_T;//[Offset: 0x398, Size: 1]
	CrowInputMappingWidget* RTB_Key_Gadget;//[Offset: 0x3a0, Size: 1]
	CrowInputMappingWidget* RTB_Key_Gadget_BombMission;//[Offset: 0x3a8, Size: 1]
	CrowInputMappingWidget* RTB_Key_Heal;//[Offset: 0x3b0, Size: 1]
	CrowInputMappingWidget* RTB_Key_Grenade;//[Offset: 0x3b8, Size: 1]
	Image* IMG_Gauge_G;//[Offset: 0x3c0, Size: 1]
	CanvasPanel* CP_Gadget;//[Offset: 0x3c8, Size: 1]
	CanvasPanel* CP_Grenade;//[Offset: 0x3d0, Size: 1]
	CanvasPanel* CP_Heal;//[Offset: 0x3d8, Size: 1]
	MaterialInstanceDynamic* GrenadeCoolTimeGauge;//[Offset: 0x3e0, Size: 1]
	CrowWidgetCacheWidgetSwitcher WS_CharacterStateCache;//[Offset: 0x3e8, Size: 1]
	<byte,CrowStatusWidgetItem> WidgetItems;//[Offset: 0x420, Size: 1]
	CrowVivoxManager* VivoxManager;//[Offset: 0x480, Size: 1]
	FName GrenadeBehaviorName;//[Offset: 0x4ac, Size: 1]
	FName SpecialWeaponBehaviorName;//[Offset: 0x4b4, Size: 1]

--------------------------------
Class: CrowWeaponInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_WeaponMode;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_VehicleAmmoCount;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_NomalAmmoCount;//[Offset: 0x358, Size: 1]
	CrowWidgetImage* IMG_Weapon;//[Offset: 0x360, Size: 1]
	TextBlock* TB_WeaponName;//[Offset: 0x368, Size: 1]
	TextBlock* TB_VehicleAmmo;//[Offset: 0x370, Size: 1]
	TextBlock* TB_AmmoCount;//[Offset: 0x378, Size: 1]
	TextBlock* TB_ReaminAmmo;//[Offset: 0x380, Size: 1]
	HorizontalBox* HB_BurstType;//[Offset: 0x388, Size: 1]
	VerticalBox* VB_AmmoInfo;//[Offset: 0x390, Size: 1]
	CanvasPanel* CP_VehicleReload;//[Offset: 0x398, Size: 1]
	Image* IMG_Gauge_Reload;//[Offset: 0x3a0, Size: 1]
	CanvasPanel* CP_VehicleHeat;//[Offset: 0x3a8, Size: 1]
	Image* IMG_Gauge_Heat;//[Offset: 0x3b0, Size: 1]
	Border* BD_SemiAuto;//[Offset: 0x3b8, Size: 1]
	Image* IMG_SemiAuto;//[Offset: 0x3c0, Size: 1]
	Border* BD_Burst;//[Offset: 0x3c8, Size: 1]
	Image* IMG_Burst;//[Offset: 0x3d0, Size: 1]
	Border* BD_Auto;//[Offset: 0x3d8, Size: 1]
	Image* IMG_Auto;//[Offset: 0x3e0, Size: 1]
	CrowInputMappingWidget* RTB_Key_ChangeType;//[Offset: 0x3e8, Size: 1]
	HorizontalBox* HB_SightType;//[Offset: 0x3f0, Size: 1]
	Image* IMG_MainSight;//[Offset: 0x3f8, Size: 1]
	Image* IMG_CantedSight;//[Offset: 0x400, Size: 1]
	Border* BD_MainSight;//[Offset: 0x408, Size: 1]
	Border* BD_CantedSight;//[Offset: 0x410, Size: 1]
	CrowWidgetCacheTextBlock TB_RemainAmmoCache;//[Offset: 0x418, Size: 1]
	CrowWidgetCacheBase VB_AmmoInfoCache;//[Offset: 0x460, Size: 1]
	MaterialInstanceDynamic* GaugeReloadMaterial;//[Offset: 0x488, Size: 1]
	MaterialInstanceDynamic* GaugeHeatMaterial;//[Offset: 0x490, Size: 1]
	Image*[] BurstImageList;//[Offset: 0x498, Size: 1]
	TextBlock* TB_AmmoType;//[Offset: 0x4a8, Size: 1]
	enum PrevFireMode;//[Offset: 0x4b0, Size: 1]
	bool IsGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 1]

--------------------------------
Class: CrowWidgetImage.Image.Widget.Visual.Object
	enum LimitType;//[Offset: 0x210, Size: 1]
	float LimitValue;//[Offset: 0x214, Size: 1]

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x31edfd0

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	SlateChildSize Size;//[Offset: 0x50, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x31f05e0
	void SetSize(SlateChildSize InSize);// 0x31f0450
	void SetPadding(Margin InPadding);// 0x31effa0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x31efb40

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x120, Size: 1]
	byte VerticalAlignment;//[Offset: 0x121, Size: 1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x122, Size: 1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x124, Size: 1]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x134, Size: 1]
	Margin Padding;//[Offset: 0x144, Size: 1]
	SlateBrush Background;//[Offset: 0x158, Size: 1]
	delegate BackgroundDelegate;//[Offset: 0x1e0, Size: 1]
	LinearColor BrushColor;//[Offset: 0x1f0, Size: 1]
	delegate BrushColorDelegate;//[Offset: 0x200, Size: 1]
	Vector2D DesiredSizeScale;//[Offset: 0x210, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x21c, Size: 1]
	delegate OnMouseButtonUpEvent;//[Offset: 0x22c, Size: 1]
	delegate OnMouseMoveEvent;//[Offset: 0x23c, Size: 1]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x24c, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x31e8150
	void SetPadding(Margin InPadding);// 0x31e79c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x31e72a0
	void SetDesiredSizeScale(Vector2D InScale);// 0x31e7120
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x31e7090
	void SetBrushFromTexture(Texture2D* Texture);// 0x31e6df0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x31e6d60
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x31e6cd0
	void SetBrushColor(LinearColor InBrushColor);// 0x31e6c40
	void SetBrush(out const SlateBrush InBrush);// 0x31e6b30
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x31e62b0

--------------------------------
Class: CrowInputMappingWidget.ScaledRichTextBlock.RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bIsActionKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	FName BehaviourName;//[Offset: 0x6a4, Size: 1]
	void OnInputKeyModified();// 0x1aa10a0

--------------------------------
Class: ScaledRichTextBlock.RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bUseWidthLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	bool bUseHeightLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 1]
	byte VerticalAlignment;//[Offset: 0x68a, Size: 1]
	Vector2D FallbackSize;//[Offset: 0x68c, Size: 1]
	Vector2D AdditionalOffset;//[Offset: 0x694, Size: 1]

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 1]
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 1]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 1]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x160, Size: 1]
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 1]
	enum TextTransformPolicy;//[Offset: 0x3d4, Size: 1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x3d8, Size: 1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x648, Size: 1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x31f9580
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x31f94f0
	void SetText(out const FText InText);// 0x31f9420
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x31f8af0
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x31f85b0
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x31f84a0
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x31f8420
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x31f8390
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x31f8270
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x31f8180
	void SetAutoWrapText(bool InAutoTextWrap);// 0x31f8070
	FText GetText();// 0x31f7420
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x31f71a0
	void ClearAllDefaultStyleOverrides();// 0x31f6dc0

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 1]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 1]
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 1]
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x160, Size: 1]
	SlateBrush UnderlineBrush;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: CrowWidgetCacheTextBlock.CrowWidgetCacheBase
	TextBlock* TextBlock;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowWidgetCacheWidgetSwitcher.CrowWidgetCacheBase
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowStatusWidgetItem
	CrowItemBase* ItemBase;//[Offset: 0x8, Size: 1]
	CrowWidgetCacheTextBlock TextBlockCache;//[Offset: 0x10, Size: 1]
	CrowWidgetCacheWidgetSwitcher WidgetSwitcherCache;//[Offset: 0x58, Size: 1]
	CrowWidgetCacheImage ItemImageCache;//[Offset: 0x90, Size: 1]
	CrowWidgetCacheBase KeyImageCache;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: CrowWidgetCacheImage.CrowWidgetCacheBase
	Image* Image;//[Offset: 0x28, Size: 1]
	PaperSprite* PaperSprite;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 1]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 1]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 1]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 1]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 1]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 1]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 1]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 1]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 1]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 1]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 1]
	FName SocketName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowVivoxManager.Object

--------------------------------
Class: CrowToastMessageWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	RichTextBlock* RTB_Message;//[Offset: 0x348, Size: 1]
	CrowWidgetTweenAlpha* AlphaTweener;//[Offset: 0x350, Size: 1]

--------------------------------
Class: CrowWidgetTweenAlpha.CrowWidgetTweenBase.Object

--------------------------------
Class: CrowWidgetTweenBase.Object
	Widget* TargetWidget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowCompassInfoWIdget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	MaterialInstance* CompassMaterialIns;//[Offset: 0x348, Size: 1]
	MaterialInstanceDynamic* CompassMaterialInsDynamic;//[Offset: 0x350, Size: 1]
	Image* IMG_Compass;//[Offset: 0x358, Size: 1]
	Image* IMG_EnemyFire_Left;//[Offset: 0x360, Size: 1]
	Image* IMG_EnemyFire_Right;//[Offset: 0x368, Size: 1]
	ImageStamper* Stamper_EnemyFire;//[Offset: 0x370, Size: 1]
	float TimeEnemyMarkerFade;//[Offset: 0x378, Size: 1]
	float EnemyMarkerScale;//[Offset: 0x37c, Size: 1]
	float EnemyMarkerFadeMin;//[Offset: 0x380, Size: 1]
	float EnemyMarkerFadeMax;//[Offset: 0x384, Size: 1]
	Color EnemyMarkerColor;//[Offset: 0x388, Size: 1]
	CrowCompassEnemyMarker[] EnemyMarkerShowArray;//[Offset: 0x390, Size: 1]
	CrowCompassEnemyMarker[] EnemyMarkerFadeArray;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: ImageStamper.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 1]
	delegate BrushDelegate;//[Offset: 0x190, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 1]
	void SetOpacity(float InOpacity);// 0x1b8e190
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x1b8e100
	void SetBrushTintColor(SlateColor TintColor);// 0x1b8e010
	void SetBrushSize(Vector2D DesiredSize);// 0x1b8df90
	void SetBrushResourceObject(Object* ResourceObject);// 0x1b8df00
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x1b8de30
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x1b8dd60
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x1b8dc10
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x1b8db00
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x1b8da70
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x1b8d980
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x1b8d8f0
	void SetBrush(out const SlateBrush InBrush);// 0x1b8d7e0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x1b8d7b0

--------------------------------
Class: CrowCompassEnemyMarker
	Actor* EnemyActor;//[Offset: 0x0, Size: 1]
	Vector ShootLocation;//[Offset: 0x8, Size: 1]
	float RemainTime;//[Offset: 0x14, Size: 1]
	float MarkerOpacity;//[Offset: 0x18, Size: 1]
	float CompassAngle;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowKillFeedWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* VB_KillfeedList;//[Offset: 0x348, Size: 1]
	class CrowKillFeedItemWidget* KillFeedItem;//[Offset: 0x350, Size: 1]
	int KillFeedListMAX;//[Offset: 0x358, Size: 1]
	VerticalBoxSlot*[] Arr_KillFeedItems;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowKillFeedItemWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowPlayerStateBase* LocalPlayerState;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Killer;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Victim;//[Offset: 0x358, Size: 1]
	CrowWidgetImage* IMG_KillFeedIcon;//[Offset: 0x360, Size: 1]
	Image* IMG_HeadShot;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_Killer_Squad;//[Offset: 0x370, Size: 1]
	Image* IMG_Killer_SquadColor;//[Offset: 0x378, Size: 1]
	TextBlock* TB_Killer_SquadNum;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_Victim_Squad;//[Offset: 0x388, Size: 1]
	Image* IMG_Victim_SquadColor;//[Offset: 0x390, Size: 1]
	TextBlock* TB_Victim_SquadNum;//[Offset: 0x398, Size: 1]
	Image* IMG_Killer_Zombie;//[Offset: 0x3a0, Size: 1]
	Image* IMG_Victim_Zombie;//[Offset: 0x3a8, Size: 1]
	TimerHandle HideTimerHandle;//[Offset: 0x3b0, Size: 1]
	float hideTimeDelaySecond;//[Offset: 0x3b8, Size: 1]
	float hideSmoothSecond;//[Offset: 0x3bc, Size: 1]

--------------------------------
Class: CrowProgressBarWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	ProgressBar* PB_Progress;//[Offset: 0x348, Size: 1]
	TextBlock* TXT_Progress;//[Offset: 0x350, Size: 1]
	Border* BD_Notice;//[Offset: 0x358, Size: 1]
	RichTextBlock* RTXT_Notice;//[Offset: 0x360, Size: 1]
	TimerHandle ProgressTimerHandle;//[Offset: 0x388, Size: 1]
	float RunningTimeSecond;//[Offset: 0x390, Size: 1]
	float StartTimeSeconds;//[Offset: 0x394, Size: 1]

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 1]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 1]
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 1]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 1]
	float Percent;//[Offset: 0x2c8, Size: 1]
	byte BarFillType;//[Offset: 0x2cc, Size: 1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 1]
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 1]
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 1]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 1]
	void SetPercent(float InPercent);// 0x31f3f30
	void SetIsMarquee(bool InbIsMarquee);// 0x31f3cf0
	void SetFillColorAndOpacity(LinearColor InColor);// 0x31f3a20

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush FillImage;//[Offset: 0x90, Size: 1]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 1]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: CrowTutorialInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	RichTextBlock* RTB_Message;//[Offset: 0x348, Size: 1]
	TimerHandle VisibleTimer;//[Offset: 0x350, Size: 1]
	LinearColor BackgroundBlockColor;//[Offset: 0x358, Size: 1]
	LinearColor BackgroundRedColor;//[Offset: 0x368, Size: 1]

--------------------------------
Class: CrowMedalInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* MedalListPanel;//[Offset: 0x348, Size: 1]
	TextBlock* TB_MedalTitle;//[Offset: 0x350, Size: 1]
	TextBlock* TB_TotalEXP;//[Offset: 0x358, Size: 1]
	CanvasPanel* CP_TextList;//[Offset: 0x360, Size: 1]
	CrowMedalAniWidgetBase*[] MedalIconList;//[Offset: 0x390, Size: 1]
	CrowMedalCountInfo[] MedalTextArray;//[Offset: 0x3a0, Size: 1]
	class UserWidget* MedalIconClass;//[Offset: 0x3b0, Size: 1]
	float IconSpawnDelayTime;//[Offset: 0x3b8, Size: 1]
	float RemainIconSpawnDelayTime;//[Offset: 0x3bc, Size: 1]
	class UserWidget* MedalTextClass;//[Offset: 0x3c0, Size: 1]
	CrowGetEXPPointItemWidget*[] TextItemArray;//[Offset: 0x3c8, Size: 1]
	float TextSpawnDelayTime;//[Offset: 0x3d8, Size: 1]
	float TextDisplayTime;//[Offset: 0x3dc, Size: 1]
	AkAudioEvent* TextEventSound;//[Offset: 0x3e0, Size: 1]
	AkAudioEvent* HeadShotEventSound;//[Offset: 0x3e8, Size: 1]
	float RemainTextSpawnDelayTime;//[Offset: 0x3f0, Size: 1]
	void OnHideAniFinished();// 0x1ac9730

--------------------------------
Class: CrowMedalAniWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	float DelayTime;//[Offset: 0x348, Size: 1]
	float CurrTime;//[Offset: 0x34c, Size: 1]
	WidgetAnimation*[] AnimationList;//[Offset: 0x360, Size: 1]
	int CurrentAniIndex;//[Offset: 0x370, Size: 1]
	bool IsPlayingFinishAni;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	void PlayFinishAnimation(FName AnimationName);// 0x1ac97e0
	void OnAnimationFinish();// 0x1ac9380

--------------------------------
Class: CrowMedalCountInfo
	CrowModPointInfo PointInfo;//[Offset: 0x0, Size: 1]
	CrowMedalType MedalType;//[Offset: 0x40, Size: 1]
	int Count;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowModPointInfo
	enum Index;//[Offset: 0x0, Size: 1]
	uint32 Exp;//[Offset: 0x4, Size: 1]
	uint32 Money;//[Offset: 0x8, Size: 1]
	enum MedalShowType;//[Offset: 0xc, Size: 1]
	FString MedalNameKey;//[Offset: 0x10, Size: 1]
	PaperSprite* MedalIconSprite;//[Offset: 0x20, Size: 1]
	FString MedalSoundName;//[Offset: 0x28, Size: 1]
	uint32 Param;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowMedalType
	enum MedalType;//[Offset: 0x0, Size: 1]
	int Param;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowGetEXPPointItemWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_EXPType;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Multiply;//[Offset: 0x350, Size: 1]
	void OnHideAniComplete();// 0x1a94bf0

--------------------------------
Class: CrowMinimapInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	AkAudioEvent* UAVSpottedSound_Loop;//[Offset: 0x348, Size: 1]
	AkAudioEvent* UAVSpottedSound_End;//[Offset: 0x350, Size: 1]
	CrowWorldMap* WB_Map;//[Offset: 0x358, Size: 1]
	CanvasPanel* CompassOverlay;//[Offset: 0x360, Size: 1]
	CanvasPanel* MapOverlay;//[Offset: 0x368, Size: 1]
	TextBlock* TB_ZoomRange;//[Offset: 0x370, Size: 1]
	float[] ArrayZoomMeter;//[Offset: 0x378, Size: 1]
	int CurrIndex;//[Offset: 0x388, Size: 1]
	bool IsRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	float PrevAngle;//[Offset: 0x390, Size: 1]
	Vector2D CompassBaseSize;//[Offset: 0x394, Size: 1]
	Texture2D* WorldMapImage;//[Offset: 0x3a0, Size: 1]
	WidgetAnimation* AniEnemyPatrolZoneStart;//[Offset: 0x3a8, Size: 1]
	WidgetAnimation* AniEnemyPatrolZoneLoop;//[Offset: 0x3b0, Size: 1]
	WidgetAnimation* AniEnemyPatrolZoneEnd;//[Offset: 0x3b8, Size: 1]
	void OnStartAniFinished();// 0x1accb30

--------------------------------
Class: CrowWorldMap.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Vector2D WorldSize;//[Offset: 0x384, Size: 1]
	CrowWorldMapIcon*[] IconArray;//[Offset: 0x390, Size: 1]
	<uint32,CrowWidgetBase*> IconWidgetMap;//[Offset: 0x3a0, Size: 1]
	CanvasPanel* CP_MapImage;//[Offset: 0x3f0, Size: 1]
	CanvasPanel* CP_Location;//[Offset: 0x3f8, Size: 1]
	CanvasPanel* CP_Grid;//[Offset: 0x400, Size: 1]
	CanvasPanel* LinePanel;//[Offset: 0x408, Size: 1]
	CanvasPanel* IconPanel;//[Offset: 0x410, Size: 1]
	Image* IMG_Map;//[Offset: 0x418, Size: 1]
	Image* IMG_Ping;//[Offset: 0x420, Size: 1]
	Image* IMG_SupplyPing;//[Offset: 0x428, Size: 1]
	CanvasPanel* CP_MapGridLangh;//[Offset: 0x430, Size: 1]
	CanvasPanel* CP_MapGridLanghMeter;//[Offset: 0x438, Size: 1]
	TextBlock* TB_GridSize;//[Offset: 0x440, Size: 1]
	TextBlock* TB_GridSizeMeter;//[Offset: 0x448, Size: 1]
	CanvasPanel* GasAreaPanel;//[Offset: 0x450, Size: 1]
	CrowWorldMapGridWidget* GridKm;//[Offset: 0x458, Size: 1]
	CrowWorldMapGridWidget* GridM;//[Offset: 0x460, Size: 1]
	CrowWorldMapLocationWidget* GridLocation;//[Offset: 0x468, Size: 1]
	Image* PanelSize;//[Offset: 0x470, Size: 1]
	CrowIntegratedMapMarkerWidget* WB_IntegratedMapMarker;//[Offset: 0x478, Size: 1]
	class CrowConquestLineWidget* ConquestLineClass;//[Offset: 0x480, Size: 1]
	Vector2D LimitSize;//[Offset: 0x488, Size: 1]
	Vector2D MapStartPos;//[Offset: 0x490, Size: 1]
	enum MapType;//[Offset: 0x498, Size: 1]
	LinearColor KMGridColor;//[Offset: 0x49c, Size: 1]
	LinearColor MGridColor;//[Offset: 0x4ac, Size: 1]
	float MaxZoomMultiply;//[Offset: 0x4bc, Size: 1]
	float LerpsTime;//[Offset: 0x4c0, Size: 1]
	float ZoomSpeed;//[Offset: 0x4c4, Size: 1]
	Vector2D MapSizeDefault;//[Offset: 0x4c8, Size: 1]
	Vector2D MapSizeCurrent;//[Offset: 0x4d0, Size: 1]
	Vector2D MapSizeMax;//[Offset: 0x4d8, Size: 1]
	float[] ArrayZoomMultiply;//[Offset: 0x4e0, Size: 1]
	float[] ArrayWorldMapZoomMultiply;//[Offset: 0x4f0, Size: 1]
	float[] ArrayMinimapZoomMultiply;//[Offset: 0x500, Size: 1]
	Vector2D ScreenSize;//[Offset: 0x510, Size: 1]
	Vector2D ZoomPosition;//[Offset: 0x518, Size: 1]
	Vector2D SelectMouseMapPos;//[Offset: 0x520, Size: 1]
	Vector2D CurrentMouseMapPos;//[Offset: 0x528, Size: 1]
	Vector2D StartBombingPos;//[Offset: 0x530, Size: 1]
	Vector SelectMouseWorldPos;//[Offset: 0x538, Size: 1]
	bool bIsCheckMapReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	bool bIsObjectReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 1]
	CanvasPanelSlot* ClipingPanelSlot;//[Offset: 0x548, Size: 1]
	CanvasPanelSlot* LocationPanelSlot;//[Offset: 0x550, Size: 1]
	CanvasPanelSlot* GridLenthPanelSlot;//[Offset: 0x558, Size: 1]
	CanvasPanelSlot* GridLenthPanelSlotMeter;//[Offset: 0x560, Size: 1]
	CrowConquestLineLink* ConquestLineLink;//[Offset: 0x568, Size: 1]
	float PrevMagnification;//[Offset: 0x570, Size: 1]
	float Magnification;//[Offset: 0x574, Size: 1]
	float MaxMagnification;//[Offset: 0x578, Size: 1]
	float CurrentTime;//[Offset: 0x57c, Size: 1]
	float PivotTime;//[Offset: 0x580, Size: 1]
	int CurrentZoomIndex;//[Offset: 0x584, Size: 1]
	bool IsEnableIconScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	Vector TopLeftPos;//[Offset: 0x58c, Size: 1]
	Vector BottomRightPos;//[Offset: 0x598, Size: 1]
	Vector CharacterPosAddValue;//[Offset: 0x5a4, Size: 1]
	Vector2D BombingAreaSize;//[Offset: 0x5b0, Size: 1]
	bool bIsEnableZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	float GridScale;//[Offset: 0x5bc, Size: 1]
	Vector2D SelectPivot;//[Offset: 0x5c0, Size: 1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cb, Size: 1]
	Vector2D OriginMousePos;//[Offset: 0x5cc, Size: 1]
	Vector2D OriginMapPos;//[Offset: 0x5d4, Size: 1]
	Vector2D PrevMapPos;//[Offset: 0x5dc, Size: 1]
	Vector BombingTopLeft;//[Offset: 0x5e4, Size: 1]
	Vector BombingBottomRight;//[Offset: 0x5f0, Size: 1]
	Vector2D SupplyPingPivot;//[Offset: 0x5fc, Size: 1]
	Vector2D BombingPivot;//[Offset: 0x604, Size: 1]
	float SupplySpawnDistance;//[Offset: 0x60c, Size: 1]

--------------------------------
Class: CrowWorldMapGridWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	float CurrMagnification;//[Offset: 0x348, Size: 1]
	class UserWidget* GridSlot;//[Offset: 0x350, Size: 1]
	Vector2D GridLineSize;//[Offset: 0x358, Size: 1]
	float GridSize;//[Offset: 0x360, Size: 1]
	PaperSprite* HorizentalImage;//[Offset: 0x368, Size: 1]
	PaperSprite* VerticalImage;//[Offset: 0x370, Size: 1]
	bool TileImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	HorizontalBox* GridPanelX;//[Offset: 0x380, Size: 1]
	VerticalBox* GridPanelY;//[Offset: 0x388, Size: 1]
	CrowWorldMapGridSlot*[] HorizontalSlotList;//[Offset: 0x390, Size: 1]
	CrowWorldMapGridSlot*[] VerticalSlotList;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: CrowWorldMapGridSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	bool bIsHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float GridSize;//[Offset: 0x34c, Size: 1]
	float LineSizeH;//[Offset: 0x350, Size: 1]
	float LineSizeV;//[Offset: 0x354, Size: 1]
	float LineLength;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS;//[Offset: 0x360, Size: 1]
	Image* H_Spacer;//[Offset: 0x368, Size: 1]
	Image* H_Line;//[Offset: 0x370, Size: 1]
	Image* V_Spacer;//[Offset: 0x378, Size: 1]
	Image* V_Line;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowWorldMapLocationWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	float GridSize;//[Offset: 0x348, Size: 1]
	FText[] ArrayHorizonText;//[Offset: 0x350, Size: 1]
	FText[] ArrayVerticalText;//[Offset: 0x360, Size: 1]
	HorizontalBox* GridPanelX;//[Offset: 0x378, Size: 1]
	VerticalBox* GridPanelY;//[Offset: 0x380, Size: 1]
	CrowWorldMapLocationSlot*[] HorizontalSlotList;//[Offset: 0x388, Size: 1]
	CrowWorldMapLocationSlot*[] VerticalSlotList;//[Offset: 0x398, Size: 1]
	class UserWidget* GridSlot;//[Offset: 0x3a8, Size: 1]
	CanvasPanelSlot* PanelSlotX;//[Offset: 0x3b0, Size: 1]
	CanvasPanelSlot* PanelSlotY;//[Offset: 0x3b8, Size: 1]
	Vector2D DefaultSlotPosX;//[Offset: 0x3c0, Size: 1]
	Vector2D DefaultSlotPosY;//[Offset: 0x3c8, Size: 1]

--------------------------------
Class: CrowWorldMapLocationSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	bool bIsHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS;//[Offset: 0x350, Size: 1]
	Image* H_LeftSpacer;//[Offset: 0x358, Size: 1]
	Image* H_RightSpacer;//[Offset: 0x360, Size: 1]
	Image* V_LeftSpacer;//[Offset: 0x368, Size: 1]
	Image* V_RightSpacer;//[Offset: 0x370, Size: 1]
	TextBlock* TB_HLocation;//[Offset: 0x378, Size: 1]
	TextBlock* TB_VLocation;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowIntegratedMapMarkerWidget.CrowIntegratedIndicatorWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* CP_MainSlot;//[Offset: 0x320, Size: 1]

--------------------------------
Class: CrowIntegratedIndicatorWidget.UserWidget.Widget.Visual.Object
	<enum,IntegratedIndicatorDisplayRule> IntegratedIndicatorDisplayRules;//[Offset: 0x270, Size: 1]
	<enum,ImageStamper*> ImageStampers;//[Offset: 0x2c0, Size: 1]
	CrowClientManager* CachedClientManager;//[Offset: 0x310, Size: 1]

--------------------------------
Class: IntegratedIndicatorDisplayRule
	bool bIgnoreDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIgnoreInsideDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float BaseDistanceToMinimum;//[Offset: 0x4, Size: 1]
	float BaseDistanceToMaximum;//[Offset: 0x8, Size: 1]
	float BaseDistanceToInvisible;//[Offset: 0xc, Size: 1]
	float IgnoreInsideDistance;//[Offset: 0x10, Size: 1]
	float MinimumOpacity;//[Offset: 0x14, Size: 1]
	float MaximumOpacity;//[Offset: 0x18, Size: 1]
	float MinimumScale;//[Offset: 0x1c, Size: 1]
	float MaximumSclae;//[Offset: 0x20, Size: 1]
	float MinimumOffsetZ;//[Offset: 0x24, Size: 1]
	float MaximumOffsetZ;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowClientManager.Object
	Actor* LastTriggerTarget;//[Offset: 0x40, Size: 1]
	CrowGameStateBase* GameState;//[Offset: 0x48, Size: 1]
	CrowPlayerStateBase* PlayerState;//[Offset: 0x50, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x58, Size: 1]
	CrowCharacterPawn* Character;//[Offset: 0x60, Size: 1]
	CrowPostProcessVolume* PostProcessVolume;//[Offset: 0x68, Size: 1]
	CrowMergedSkeletalMeshCacheActor* MergedSkeletalMeshCacheActor;//[Offset: 0x70, Size: 1]
	CrowSurfaceEffectKeeperActor* SurfaceEffectKeeperActor;//[Offset: 0x78, Size: 1]
	CrowObjectPoolActor* ObjectPoolActor;//[Offset: 0x80, Size: 1]
	CrowQualitySwitchActor* QualitySwitchActor;//[Offset: 0x88, Size: 1]
	CrowUserInfoBase UserInfo;//[Offset: 0x90, Size: 1]
	CrowWorldMapIcon*[] WorldMapIconArray;//[Offset: 0x990, Size: 1]
	CrowIndicatorViewInfo*[] IndicatorArray;//[Offset: 0x9a0, Size: 1]
	CrowHUDWidgetDefault* MainWidgetDefault;//[Offset: 0x9b0, Size: 1]
	CrowHUDWidgetFullScreenBottom* MainWidgetFullScreenBottom;//[Offset: 0x9b8, Size: 1]
	CrowHUDWidgetFullScreenTop* MainWidgetFullScreenTop;//[Offset: 0x9c0, Size: 1]
	<uint64,CrowPlayerStateBase*> TeamPlayerStateMap;//[Offset: 0x9c8, Size: 1]
	CrowScopeEffect ScopeEffect;//[Offset: 0xa18, Size: 1]
	CrowPlayerStateBase*[] AddPlayerArray;//[Offset: 0xa88, Size: 1]
	CrowPlayerStateBase*[] RemovePlayerArray;//[Offset: 0xa98, Size: 1]
	CrowGameModeInfo GemeModeInfo;//[Offset: 0xaa8, Size: 1]
	int GetExpInfo;//[Offset: 0xae8, Size: 1]
	Vector ViewMatrices_ViewOrigin;//[Offset: 0xaec, Size: 1]
	Matrix ViewMatrices_ProjectionMatrix;//[Offset: 0xb00, Size: 1]
	Vector FirstLocalPlayerLastViewLocation;//[Offset: 0xb40, Size: 1]
	Rotator FirstLocalPlayerLastViewRotationXY;//[Offset: 0xb4c, Size: 1]
	Vector2D CurrentViewportSize;//[Offset: 0xb58, Size: 1]
	float CurrentFOV;//[Offset: 0xb60, Size: 1]
	CrowCharacterPawn*[] CharacterPawns;//[Offset: 0xb68, Size: 1]
	<uint32,CrowOptimizationInfo> ComponentIdToOptimizationInfo;//[Offset: 0xb78, Size: 1]
	CrowModPointInfo[] ModPointInfoArray;//[Offset: 0xc08, Size: 1]
	CrowMedalType[] MedalTypeArray;//[Offset: 0xc18, Size: 1]
	CrowLobbyNoticeInfo[] LobbyNoticeInfoArray;//[Offset: 0xc28, Size: 1]
	CrowAppSettingInfo AppSettingInfo;//[Offset: 0xc38, Size: 1]
	CrowTeamInfo InvalidTeam;//[Offset: 0xd58, Size: 1]
	CrowDialogManager DialogManager;//[Offset: 0xd90, Size: 1]
	void TimeNoticeDelegate();// 0x1a51ae0
	void OnWorldMapIconDestroyed(Actor* DestroyedActor);// 0x1a51a50
	void OnTimerExitWorld(enum Type);// 0x1a519d0
	void OnIndicatorDestroyed(Actor* DestroyedActor);// 0x1a518b0

--------------------------------
Class: CrowGameStateBase.GameState.GameStateBase.Info.Actor.Object
	CrowPlayerStateBase*[] CrowPlayerArray;//[Offset: 0x298, Size: 1]
	CrowPlayerStateBase*[] CrowObserverPlayerArray;//[Offset: 0x2a8, Size: 1]
	CrowConquestAreaSquadRespawn*[] SquadRespawnArray;//[Offset: 0x2b8, Size: 1]
	float StartCameraWorkTime;//[Offset: 0x2c8, Size: 1]
	int MaxDotHealTime;//[Offset: 0x2cc, Size: 1]
	float DisableRespawnHitTime;//[Offset: 0x2d0, Size: 1]
	CrowRemainTimeSync* TimeSync;//[Offset: 0x2d8, Size: 1]
	CrowSquadInfo*[] SquadArray;//[Offset: 0x2e0, Size: 1]
	float TotalBattleTime;//[Offset: 0x2f0, Size: 1]
	bool bIsDeleteWorldItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	CrowRespawnTimeInfo RespawnTimeInfo;//[Offset: 0x2f8, Size: 1]
	bool bIsShareAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	int8 MaxPlayer;//[Offset: 0x30d, Size: 1]
	bool bEnableChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 1]
	bool bChatAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f, Size: 1]
	bool bChatTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bChatSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	bool bChatGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 1]
	int DumpHitchTime;//[Offset: 0x314, Size: 1]
	bool bIsCustoMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	CrowMissionArea*[] MissionAreaArray;//[Offset: 0x320, Size: 1]
	CrowMissionArea*[] WaitRespawnAreaArray;//[Offset: 0x330, Size: 1]
	CrowResultSceneInfo* ResultSceneActor;//[Offset: 0x340, Size: 1]
	CrowRespawnPickupInventory*[] RespawnFixInvenArray;//[Offset: 0x348, Size: 1]
	CrowItemSpawnerGridActor* ItemSpawnerGridActor;//[Offset: 0x358, Size: 1]
	CrowDeathZoneManager* DeathZoneManager;//[Offset: 0x360, Size: 1]
	CrowVehicleSpawnerGroup* VehicleSpawnerGroup;//[Offset: 0x368, Size: 1]
	CrowLevelSequencePlayer* LevelSequencePlayer;//[Offset: 0x370, Size: 1]
	CrowCharacterPartsInfo[] CharacterPartsInfoArray;//[Offset: 0x378, Size: 1]
	TimerHandle HandleEndSequence;//[Offset: 0x388, Size: 1]
	<Object*,int> AssetReferenceCounts;//[Offset: 0x390, Size: 1]
	CrowActiveSpawnerCount WaitUserSpawnerCount;//[Offset: 0x3e8, Size: 1]
	CrowActiveSpawnerCount MatchSpawnerCount;//[Offset: 0x40c, Size: 1]
	class CrowSpectatorPawnCustomMode* SpectatorCustomModeClass;//[Offset: 0x450, Size: 1]
	void OnResultScene_Unloaded();// 0xca8430
	void OnResultScene_Loaded();// 0xca8430
	void OnRep_EnableHitchLog();// 0xca8430
	void MulticastSpawnSpray(uint64 InServerKey, int InSprayIndex, const Vector InLocation, Rotator InRotation);// 0x1a91710
	void MulticastKillMessage(const CrowKillInfo KillInfo);// 0x1a911d0
	void MulticastCookedExplosion(uint16 AmmoIndex, class CrowProjectileBase ProjectileClass, Vector_NetQuantize100 Location);// 0x1a90bb0

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x270, Size: 1]
	FName PreviousMatchState;//[Offset: 0x278, Size: 1]
	int ElapsedTime;//[Offset: 0x280, Size: 1]
	void OnRep_MatchState();// 0x3b90550
	void OnRep_ElapsedTime();// 0x3b89970

--------------------------------
Class: CrowConquestAreaSquadRespawn.CrowConquestArea.CrowMissionArea.Actor.Object
	<uint64,Actor*> UAVReconMap;//[Offset: 0xbb8, Size: 1]
	float MaxConstructDistance;//[Offset: 0xc08, Size: 1]
	float MaxHealth;//[Offset: 0xc0c, Size: 1]
	float CurrentHealth;//[Offset: 0xc10, Size: 1]
	SkeletalMeshComponent* Body;//[Offset: 0xc18, Size: 1]
	byte RespawnCount;//[Offset: 0xc20, Size: 1]
	byte RemainRespawnCount;//[Offset: 0xc21, Size: 1]
	byte TeamID;//[Offset: 0xc22, Size: 1]
	FString SquadKey;//[Offset: 0xc28, Size: 1]
	uint64 OwnerServerKey;//[Offset: 0xc38, Size: 1]
	CrowPlayerStateBase* OwnerPlayerState;//[Offset: 0xc40, Size: 1]
	CrowNoSquadRespawnMesh*[] NoSquadRespawnMeshArray;//[Offset: 0xc48, Size: 1]
	bool bBuildable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	CrowItemIndicatorWidget* ItemIndicator;//[Offset: 0xc60, Size: 1]
	void OnRepRemainRespawnCount();// 0x1a5cb80

--------------------------------
Class: CrowConquestArea.CrowMissionArea.Actor.Object
	FText AreaName;//[Offset: 0x2f8, Size: 1]
	FString AlphabetName;//[Offset: 0x310, Size: 1]
	FString GroupKey;//[Offset: 0x320, Size: 1]
	byte InitialTeam;//[Offset: 0x330, Size: 1]
	bool bIsEnableConquest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	byte ResourcePointAdd;//[Offset: 0x332, Size: 1]
	byte ResourcePointAddTime;//[Offset: 0x333, Size: 1]
	byte ConquestPoint;//[Offset: 0x334, Size: 1]
	CrowConquestPointInfo ConquestPointInfo;//[Offset: 0x335, Size: 1]
	byte NeturalRecoveryPoint;//[Offset: 0x345, Size: 1]
	byte NeturalRecoveryTimeLimit;//[Offset: 0x346, Size: 1]
	byte ConquestRecoveryPoint;//[Offset: 0x347, Size: 1]
	byte ConquestRecoveryTimeLimit;//[Offset: 0x348, Size: 1]
	int SupplyBaseTableIndex;//[Offset: 0x34c, Size: 1]
	AkAudioEvent* CaptureCompleteSound;//[Offset: 0x350, Size: 1]
	AkAudioEvent* CapturingSound;//[Offset: 0x358, Size: 1]
	AkAudioEvent* LosingSound;//[Offset: 0x360, Size: 1]
	AkAudioEvent* LostSound;//[Offset: 0x368, Size: 1]
	CrowGameIconDisplayInfo IconNeutralityNormal;//[Offset: 0x370, Size: 1]
	CrowGameIconDisplayInfo IconMyTeamNormal;//[Offset: 0x3f8, Size: 1]
	CrowGameIconDisplayInfo IconEnemyNormal;//[Offset: 0x480, Size: 1]
	CrowGameIconDisplayInfo IconNeutralityChange;//[Offset: 0x508, Size: 1]
	CrowGameIconDisplayInfo IconMyTeamChange;//[Offset: 0x590, Size: 1]
	CrowGameIconDisplayInfo IconEnemyChange;//[Offset: 0x618, Size: 1]
	CrowGameIconDisplayInfo IconNeutralityNormalDisable;//[Offset: 0x6a0, Size: 1]
	CrowGameIconDisplayInfo IconMyTeamNormalDisable;//[Offset: 0x728, Size: 1]
	CrowGameIconDisplayInfo IconEnemyNormalDisable;//[Offset: 0x7b0, Size: 1]
	CrowGameIconDisplayInfo IconNeutralityChangeDisable;//[Offset: 0x838, Size: 1]
	CrowGameIconDisplayInfo IconMyTeamChangeDisable;//[Offset: 0x8c0, Size: 1]
	CrowGameIconDisplayInfo IconEnemyChangeDisable;//[Offset: 0x948, Size: 1]
	bool bIsDisplayHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 1]
	class CrowWidgetBase* HUD_IconNeutrality;//[Offset: 0x9d8, Size: 1]
	class CrowWidgetBase* HUD_IconMyTeam;//[Offset: 0x9e0, Size: 1]
	class CrowWidgetBase* HUD_IconEnemy;//[Offset: 0x9e8, Size: 1]
	class CrowWidgetBase* HUD_IconNeutralityDisable;//[Offset: 0x9f0, Size: 1]
	class CrowWidgetBase* HUD_IconMyTeamDisable;//[Offset: 0x9f8, Size: 1]
	class CrowWidgetBase* HUD_IconEnemyDisable;//[Offset: 0xa00, Size: 1]
	CrowGameIconDisplayInfo AreaMinimapIcon;//[Offset: 0xa08, Size: 1]
	float PlunderDistance;//[Offset: 0xa90, Size: 1]
	CrowGaugeInterpolate* RedGaugeInterpolate;//[Offset: 0xa98, Size: 1]
	CrowGaugeInterpolate* BlueGaugeInterpolate;//[Offset: 0xaa0, Size: 1]
	CrowConquestAreaGauge* IconIndicator;//[Offset: 0xaa8, Size: 1]
	CrowWorldMapIcon* WorldMapIcon;//[Offset: 0xab0, Size: 1]
	CrowIndicatorViewInfo* IndicatorViewInfo;//[Offset: 0xab8, Size: 1]
	CrowConquestVehicleSpawnerGround*[] ConquestVehicleSpawnerGroundArray;//[Offset: 0xac0, Size: 1]
	CrowConquestAreaInfo ConquestAreaInfo;//[Offset: 0xae0, Size: 1]
	byte RedBluePlayerRate;//[Offset: 0xb20, Size: 1]
	byte BlueRedPlayerRate;//[Offset: 0xb21, Size: 1]
	CrowConquestAreaVehicleSpawner*[] VehicleSpawnerArray;//[Offset: 0xb28, Size: 1]
	byte LastConquestDirection;//[Offset: 0xb66, Size: 1]
	float PlunderElapsedTime;//[Offset: 0xb68, Size: 1]
	bool bIsPlunding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 1]
	CrowPlayerStateBase*[] PlunderPSArray;//[Offset: 0xb70, Size: 1]
	CrowConquestPlunderMineralInfo PlunderMineralInfo;//[Offset: 0xb84, Size: 1]
	void OnRep_RedBluePlayerRate();// 0x1a59ce0
	void OnRep_PlunderElapsedTime();// 0x1a59cc0
	void OnRep_ConquestAreaInfo();// 0x1a59ca0
	void OnRep_BlueRedPlayerRate();// 0x1a59c80
	void MultiCastEnableConqeustTeam(byte TeamID, bool IsEnable);// 0x1a59a00
	void MultiCastChangeTeam(byte Team);// 0x1a59980
	void MultiCastChangeGroupTeam(byte Team);// 0x1a59900
	void MultiCastChangeGauge(byte Red, byte Blue);// 0x1a59830
	void MultiCastChangeBattleState(enum Team);// 0x1a597b0

--------------------------------
Class: CrowNoSquadRespawnMesh.Actor.Object
	SceneComponent* Root;//[Offset: 0x220, Size: 1]
	bool bHiddenInGameCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1ad4b10
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult HitResultInfo);// 0x1ad47b0

--------------------------------
Class: CrowItemIndicatorWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Root;//[Offset: 0x348, Size: 1]
	ScaleBox* SB_Count;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Count;//[Offset: 0x358, Size: 1]
	ScaleBox* SB_Icon;//[Offset: 0x360, Size: 1]
	Image* IMG_Icon;//[Offset: 0x368, Size: 1]
	ScaleBox* SB_CoolTime;//[Offset: 0x370, Size: 1]
	TextBlock* TB_CoolTime;//[Offset: 0x378, Size: 1]

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x120, Size: 1]
	byte StretchDirection;//[Offset: 0x121, Size: 1]
	float UserSpecifiedScale;//[Offset: 0x124, Size: 1]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x31f9600
	void SetStretchDirection(byte InStretchDirection);// 0x31f93a0
	void SetStretch(byte InStretch);// 0x31f9320
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x31f87e0

--------------------------------
Class: CrowConquestPointInfo
	byte RedTeam_ToFriendly_OnePeople;//[Offset: 0x0, Size: 1]
	byte RedTeam_ToFriendly_TwoPeople;//[Offset: 0x1, Size: 1]
	byte RedTeam_ToFriendly_ThreePeople;//[Offset: 0x2, Size: 1]
	byte RedTeam_ToFriendly_MorePeople;//[Offset: 0x3, Size: 1]
	byte RedTeam_ToNeutral_OnePeople;//[Offset: 0x4, Size: 1]
	byte RedTeam_ToNeutral_TwoPeople;//[Offset: 0x5, Size: 1]
	byte RedTeam_ToNeutral_ThreePeople;//[Offset: 0x6, Size: 1]
	byte RedTeam_ToNeutral_MorePeople;//[Offset: 0x7, Size: 1]
	byte BlueTeam_ToFriendly_OnePeople;//[Offset: 0x8, Size: 1]
	byte BlueTeam_ToFriendly_TwoPeople;//[Offset: 0x9, Size: 1]
	byte BlueTeam_ToFriendly_ThreePeople;//[Offset: 0xa, Size: 1]
	byte BlueTeam_ToFriendly_MorePeople;//[Offset: 0xb, Size: 1]
	byte BlueTeam_ToNeutral_OnePeople;//[Offset: 0xc, Size: 1]
	byte BlueTeam_ToNeutral_TwoPeople;//[Offset: 0xd, Size: 1]
	byte BlueTeam_ToNeutral_ThreePeople;//[Offset: 0xe, Size: 1]
	byte BlueTeam_ToNeutral_MorePeople;//[Offset: 0xf, Size: 1]

--------------------------------
Class: CrowGaugeInterpolate.Object

--------------------------------
Class: CrowConquestAreaGauge.CrowWidgetCircleGauge.CrowPingWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* AnimIdle;//[Offset: 0x4a8, Size: 1]
	WidgetAnimation* AnimHover;//[Offset: 0x4b0, Size: 1]
	WidgetAnimation* AnimClick;//[Offset: 0x4b8, Size: 1]
	WidgetAnimation* AnimDisableActive;//[Offset: 0x4c0, Size: 1]
	CanvasPanel* CP_Root;//[Offset: 0x4c8, Size: 1]
	CanvasPanel* CP_LocateArrow;//[Offset: 0x4d0, Size: 1]
	CanvasPanel* CP_AnchorRoot;//[Offset: 0x4d8, Size: 1]
	CanvasPanel* CP_Icon;//[Offset: 0x4e0, Size: 1]
	CanvasPanel* CP_Vehicle;//[Offset: 0x4e8, Size: 1]
	TextBlock* TB_Name;//[Offset: 0x4f0, Size: 1]
	TextBlock* TB_Distance;//[Offset: 0x4f8, Size: 1]
	TextBlock* TB_BaseAlphabet;//[Offset: 0x500, Size: 1]
	CanvasPanel* CP_CuonLevel;//[Offset: 0x508, Size: 1]
	WidgetSwitcher* WS_Status;//[Offset: 0x510, Size: 1]
	VerticalBox* VB_BG;//[Offset: 0x518, Size: 1]
	Border* BD_CuonLevel_Enemy1;//[Offset: 0x520, Size: 1]
	CanvasPanel* CP_LevelCount_Enemy;//[Offset: 0x528, Size: 1]
	TextBlock* TB_Level_Enemy;//[Offset: 0x530, Size: 1]
	TextBlock* TB_Level_Effect_Enemy;//[Offset: 0x538, Size: 1]
	Border* BD_CuonLevel_Ally1;//[Offset: 0x540, Size: 1]
	CanvasPanel* CP_LevelCount_Ally;//[Offset: 0x548, Size: 1]
	TextBlock* TB_Level_Ally;//[Offset: 0x550, Size: 1]
	TextBlock* TB_Level_Effect_Ally;//[Offset: 0x558, Size: 1]
	Image* IMG_LevelGauge;//[Offset: 0x560, Size: 1]
	Image* IMG_LevelFull;//[Offset: 0x568, Size: 1]
	Image* IMG_TakenEffect;//[Offset: 0x570, Size: 1]
	Image* IMG_TakenEffectBG;//[Offset: 0x578, Size: 1]
	CrowWidgetCacheBase CP_CuonLevelCache;//[Offset: 0x580, Size: 1]
	CrowWidgetCacheBase IMG_LevelGaugeCache;//[Offset: 0x5a8, Size: 1]
	CrowWidgetCacheBase IMG_LevelFullCache;//[Offset: 0x5d0, Size: 1]
	CrowWidgetCacheBase IMG_TakenEffectCache;//[Offset: 0x5f8, Size: 1]
	CrowWidgetCacheBase IMG_TakenEffectBGCache;//[Offset: 0x620, Size: 1]
	CrowWidgetCacheWidgetSwitcher WS_StatusCache;//[Offset: 0x648, Size: 1]
	CrowWidgetCacheBase VB_BGCache;//[Offset: 0x680, Size: 1]
	CrowWidgetCacheBase BD_CuonLevel_Enemy1Cache;//[Offset: 0x6a8, Size: 1]
	CrowWidgetCacheBase CP_LevelCount_EnemyCache;//[Offset: 0x6d0, Size: 1]
	CrowWidgetCacheTextBlock TB_Level_EnemyCache;//[Offset: 0x6f8, Size: 1]
	CrowWidgetCacheTextBlock TB_Level_Effect_EnemyCache;//[Offset: 0x740, Size: 1]
	CrowWidgetCacheBase BD_CuonLevel_Ally1Cache;//[Offset: 0x788, Size: 1]
	CrowWidgetCacheBase CP_LevelCount_AllyCache;//[Offset: 0x7b0, Size: 1]
	CrowWidgetCacheTextBlock TB_Level_AllyCache;//[Offset: 0x7d8, Size: 1]
	CrowWidgetCacheTextBlock TB_Level_Effect_AllyCache;//[Offset: 0x820, Size: 1]
	CrowConquestArea* TargetActor;//[Offset: 0x868, Size: 1]
	CrowWidgetConquestVehicleButton*[] SpawnerButtonArray;//[Offset: 0x870, Size: 1]
	CrowRespawnMapWidget* RespawnMapWidget;//[Offset: 0x880, Size: 1]
	MaterialInstanceDynamic* PlunderDynamicMaterial;//[Offset: 0x888, Size: 1]

--------------------------------
Class: CrowWidgetCircleGauge.CrowPingWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	SlateBrush BackBrush;//[Offset: 0x378, Size: 1]
	SlateBrush GaugeBrush;//[Offset: 0x400, Size: 1]
	MaterialInterface* GaugeMaterial;//[Offset: 0x488, Size: 1]
	float Value;//[Offset: 0x490, Size: 1]
	MaterialInstanceDynamic* DynamicMaterial;//[Offset: 0x498, Size: 1]
	Image* IMG_Gauge;//[Offset: 0x4a0, Size: 1]

--------------------------------
Class: CrowWidgetConquestVehicleButton.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowToggleButton* BT_ConquestRespawn;//[Offset: 0x348, Size: 1]
	Image* IMG_Icon;//[Offset: 0x350, Size: 1]
	Image* IMG_Icon;//[Offset: 0x358, Size: 1]
	Image* IMG_Anim_AniRing;//[Offset: 0x360, Size: 1]
	CrowConquestAreaVehicleSpawner* TargetComponent;//[Offset: 0x368, Size: 1]
	WidgetAnimation* AniSelect;//[Offset: 0x370, Size: 1]
	void OnDoubleClickedButton();// 0x1b778d0
	void OnClickedButton();// 0x1b77780

--------------------------------
Class: CrowToggleButton.CrowButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	WidgetSwitcher*[] ToggleSwitcherArray;//[Offset: 0x6b0, Size: 1]
	bool IsStartChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool NotUseDeChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	bool bNotUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c2, Size: 1]
	bool bUseCheckedHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c3, Size: 1]
	bool bAllowCheckedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]

--------------------------------
Class: CrowButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnDoubleClicked;//[Size: 1]
	CrowWidgetTweenBase*[] TweenerArray;//[Offset: 0x440, Size: 1]
	float DisableOpacity;//[Offset: 0x450, Size: 1]
	float DoubleClickTime;//[Offset: 0x454, Size: 1]
	Image*[] ImageTweenColorArray;//[Offset: 0x458, Size: 1]
	TextBlock*[] TextBlockTweenColorArray;//[Offset: 0x468, Size: 1]
	Image*[] IconTweenColorArray;//[Offset: 0x478, Size: 1]
	LinearColor OnPressColorFrom;//[Offset: 0x488, Size: 1]
	LinearColor OnPressColorEnd;//[Offset: 0x498, Size: 1]
	float OnPressTweenTime;//[Offset: 0x4a8, Size: 1]
	LinearColor OnPressTextColorFrom;//[Offset: 0x4ac, Size: 1]
	LinearColor OnPressTextColorEnd;//[Offset: 0x4bc, Size: 1]
	float OnPressTextTweenTime;//[Offset: 0x4cc, Size: 1]
	LinearColor OnPressIconColorFrom;//[Offset: 0x4d0, Size: 1]
	LinearColor OnPressIconColorEnd;//[Offset: 0x4e0, Size: 1]
	float OnPressIconTweenTime;//[Offset: 0x4f0, Size: 1]
	LinearColor OnReleaseColorFrom;//[Offset: 0x4f4, Size: 1]
	LinearColor OnReleaseColorEnd;//[Offset: 0x504, Size: 1]
	float OnReleaseTweenTime;//[Offset: 0x514, Size: 1]
	LinearColor OnReleaseTextColorFrom;//[Offset: 0x518, Size: 1]
	LinearColor OnReleaseTextColorEnd;//[Offset: 0x528, Size: 1]
	float OnReleaseTextTweenTime;//[Offset: 0x538, Size: 1]
	LinearColor OnReleaseIconColorFrom;//[Offset: 0x53c, Size: 1]
	LinearColor OnReleaseIconColorEnd;//[Offset: 0x54c, Size: 1]
	float OnReleaseIconTweenTime;//[Offset: 0x55c, Size: 1]
	LinearColor OnHoverColorFrom;//[Offset: 0x560, Size: 1]
	LinearColor OnHoverColorEnd;//[Offset: 0x570, Size: 1]
	float OnHoverTweenTime;//[Offset: 0x580, Size: 1]
	LinearColor OnHoverTextColorFrom;//[Offset: 0x584, Size: 1]
	LinearColor OnHoverTextColorEnd;//[Offset: 0x594, Size: 1]
	float OnHoverTextTweenTime;//[Offset: 0x5a4, Size: 1]
	LinearColor OnHoverIconColorFrom;//[Offset: 0x5a8, Size: 1]
	LinearColor OnHoverIconColorEnd;//[Offset: 0x5b8, Size: 1]
	float OnHoverIconTweenTime;//[Offset: 0x5c8, Size: 1]
	bool UseLegacy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	LinearColor OnUnHoverColorFrom;//[Offset: 0x5d0, Size: 1]
	LinearColor OnUnHoverColorEnd;//[Offset: 0x5e0, Size: 1]
	float OnUnHoverTweenTime;//[Offset: 0x5f0, Size: 1]
	LinearColor OnUnHoverTextColorFrom;//[Offset: 0x5f4, Size: 1]
	LinearColor OnUnHoverTextColorEnd;//[Offset: 0x604, Size: 1]
	float OnUnHoverTextTweenTime;//[Offset: 0x614, Size: 1]
	LinearColor OnUnHoverIconColorFrom;//[Offset: 0x618, Size: 1]
	LinearColor OnUnHoverIconColorEnd;//[Offset: 0x628, Size: 1]
	float OnUnHoverIconTweenTime;//[Offset: 0x638, Size: 1]
	AkAudioEvent* AudioEvent_Clicked;//[Offset: 0x640, Size: 1]
	bool UseHoveredSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	AkAudioEvent* AudioEvent_Hovered;//[Offset: 0x650, Size: 1]
	float PreOpacity;//[Offset: 0x65c, Size: 1]
	CrowWidgetBase* EventHandler;//[Offset: 0x660, Size: 1]
	class CrowWidgetBase* HandlerClass;//[Offset: 0x668, Size: 1]
	FString HandlerName;//[Offset: 0x670, Size: 1]
	enum Event;//[Offset: 0x680, Size: 1]
	bool ClickCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	float CapturedTimeSeconds;//[Offset: 0x688, Size: 1]
	bool EnableHoverdTween;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool EnableTween;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	TimerHandle ToolTipTimer;//[Offset: 0x690, Size: 1]
	void ShowTooltip();// 0x1a38950

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 1]
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 1]
	byte ClickMethod;//[Offset: 0x3c0, Size: 1]
	byte TouchMethod;//[Offset: 0x3c1, Size: 1]
	byte PressMethod;//[Offset: 0x3c2, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x31e7f50
	void SetStyle(out const ButtonStyle InStyle);// 0x31e7e70
	void SetPressMethod(byte InPressMethod);// 0x31e7c70
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x31e7000
	void SetClickMethod(byte InClickMethod);// 0x31e6f00
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x31e6980
	bool IsPressed();// 0x31e66f0

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 1]
	SlateBrush Hovered;//[Offset: 0x90, Size: 1]
	SlateBrush Pressed;//[Offset: 0x118, Size: 1]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 1]
	Margin NormalPadding;//[Offset: 0x228, Size: 1]
	Margin PressedPadding;//[Offset: 0x238, Size: 1]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 1]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 1]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowConquestAreaVehicleSpawner.CrowConquestAreaComponent.CrowMissionAreaComponent.SceneComponent.ActorComponent.Object
	FString[] VehicleTextIndexArray;//[Offset: 0x220, Size: 1]
	float CoolTime;//[Offset: 0x230, Size: 1]
	float SpawnHeight;//[Offset: 0x234, Size: 1]
	float ActiveTime;//[Offset: 0x238, Size: 1]
	float ActiveGaugePercent;//[Offset: 0x23c, Size: 1]
	bool IsNeutralityCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	int NeutralityCheckTime;//[Offset: 0x244, Size: 1]
	float NeutralityCharacterRadius;//[Offset: 0x248, Size: 1]
	float NeutralitySpawnerDist;//[Offset: 0x24c, Size: 1]
	float NeutralityDotDamage;//[Offset: 0x250, Size: 1]
	CrowSpecialVehicleCondition SpecialVehicleCondition;//[Offset: 0x258, Size: 1]
	byte SpawnerID;//[Offset: 0x278, Size: 1]
	enum State;//[Offset: 0x279, Size: 1]
	byte VehicleArrayIndex;//[Offset: 0x27a, Size: 1]
	bool Red_SpecialVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b, Size: 1]
	bool Blue_SpecialVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	void OnVehicleDestroyed(Actor* DestroyedActor);// 0x1a5cc40
	void OnRep_Red_SpecialVehicle();// 0x1a5cc20
	void OnRep_Blue_SpecialVehicle();// 0x1a5cba0
	void MulticastSetState(enum NewState, byte NewIndex);// 0x1a5cab0

--------------------------------
Class: CrowConquestAreaComponent.CrowMissionAreaComponent.SceneComponent.ActorComponent.Object
	CrowConquestArea* ParentConquestArea;//[Offset: 0x218, Size: 1]

--------------------------------
Class: CrowSpecialVehicleCondition
	bool bIsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ActiveTime;//[Offset: 0x4, Size: 1]
	int ConquestPointGap;//[Offset: 0x8, Size: 1]
	FString VehicleTextIndex;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowRespawnMapWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CameraActor* RespawnCamera;//[Offset: 0x368, Size: 1]
	class CrowRespawnButton* RespawnButtonClass;//[Offset: 0x370, Size: 1]
	class CrowRespawnButton* RespawnButtonSmallClass;//[Offset: 0x378, Size: 1]
	CrowWorldMap* WB_Map;//[Offset: 0x380, Size: 1]
	CrowRespawnSelectInfoWidget* WB_RespawnSelectInfo;//[Offset: 0x388, Size: 1]
	Image* IMG_ImPossibleRespawnArea;//[Offset: 0x390, Size: 1]
	TextBlock* TB_AlarmMessage;//[Offset: 0x398, Size: 1]
	CrowInGameLoadoutPopupWidget* WB_Popup_Loadout_Ingame;//[Offset: 0x3a0, Size: 1]
	CrowButton* BT_Loadout;//[Offset: 0x3a8, Size: 1]
	CanvasPanel* CP_DiveRespawnAlarm;//[Offset: 0x3b0, Size: 1]
	CrowRespawnPartsUnlockListWidget* WB_Respawn_PartsUnlock_List;//[Offset: 0x3b8, Size: 1]
	WidgetAnimation* AnimShow;//[Offset: 0x3c0, Size: 1]
	WidgetAnimation* AnimUnselectable;//[Offset: 0x3c8, Size: 1]
	WidgetAnimation* AnimSelectPointActive;//[Offset: 0x3d0, Size: 1]
	WidgetAnimation* AnimWaponChangeActive;//[Offset: 0x3d8, Size: 1]
	FName AnimShowName;//[Offset: 0x3e0, Size: 1]
	FName AnimUnselectableName;//[Offset: 0x3e8, Size: 1]
	FName AnimSelectPointActiveName;//[Offset: 0x3f0, Size: 1]
	FName AnimWaponChangeActiveName;//[Offset: 0x3f8, Size: 1]
	void OnShowAniFinished();// 0x1b144a0
	void OnClicked_BT_Loadout();// 0x1b141b0

--------------------------------
Class: CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowHideWidgetInfo[] HideWidgetArray;//[Offset: 0x350, Size: 1]

--------------------------------
Class: CrowRespawnButton.CrowWidgetBase.UserWidget.Widget.Visual.Object
	float ButtonSize;//[Offset: 0x348, Size: 1]
	CrowToggleButton* BT_ConquestRespawn;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Root;//[Offset: 0x358, Size: 1]
	Image* IMG_Anim_DisableSelect;//[Offset: 0x360, Size: 1]
	CrowWidgetBase* ParentWidget;//[Offset: 0x368, Size: 1]
	CrowWorldMapIcon* WorldMapIcon;//[Offset: 0x370, Size: 1]
	CrowRespawnMapWidget* RespawnMapWidget;//[Offset: 0x378, Size: 1]
	Actor* TargetActor;//[Offset: 0x380, Size: 1]
	void OnDoubleClickedButton();// 0x1b141d0
	void OnClickedButton();// 0x1b14170

--------------------------------
Class: CrowRespawnSelectInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_BackGround;//[Offset: 0x348, Size: 1]
	Button* BTN_Respawn;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_Status;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Respawn;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Disable;//[Offset: 0x368, Size: 1]
	Border* BD_RespawnDisable;//[Offset: 0x370, Size: 1]
	LinearColor RespawnWaitColor;//[Offset: 0x378, Size: 1]
	LinearColor RespawnPossibleColor;//[Offset: 0x388, Size: 1]
	LinearColor RespawnImpossibleColor;//[Offset: 0x398, Size: 1]
	CanvasPanel* IconPanel;//[Offset: 0x3a8, Size: 1]
	<uint32,CrowRespawnButton*> RespawnButtonMap;//[Offset: 0x3b0, Size: 1]
	enum State;//[Offset: 0x400, Size: 1]
	CrowRespawnMapWidget* RespawnMapWidget;//[Offset: 0x408, Size: 1]
	CrowWidgetConquestVehicleButton* VehicleSpawnerButton;//[Offset: 0x410, Size: 1]
	float WaitSeconds;//[Offset: 0x418, Size: 1]
	void UpdateButton();// 0x1b14600
	void OnDoubleClickedRespawnButton(Object* Button);// 0x1b141f0
	void OnClickedRespawnButton();// 0x1b14190
	void Init(CrowRespawnMapWidget* InRespawnMapWidget, CanvasPanel* InIconPanel);// 0x1b14000

--------------------------------
Class: CrowInGameLoadoutPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowLobbyLoadoutListWidget* WB_Lobby_LoadoutList;//[Offset: 0x348, Size: 1]
	CrowLobbyLoadoutWidget* WB_Lobby_Loadout;//[Offset: 0x350, Size: 1]
	CrowButton* WB_BT_EscBack;//[Offset: 0x358, Size: 1]
	CrowInventoryInputEventHandler* SelectDragWidget;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniShow;//[Offset: 0x368, Size: 1]
	void OnClicked_BT_EscBack();// 0x1a9ccc0
	void OnAnimationFinishedAniShow();// 0x1a290c0

--------------------------------
Class: CrowLobbyLoadoutListWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_NameChange;//[Offset: 0x380, Size: 1]
	void OnClicked_NameChange();// 0x1abb970

--------------------------------
Class: CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetToggleButton*[] ButtonList;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_Main;//[Offset: 0x358, Size: 1]
	Widget* MainTabPanel;//[Offset: 0x360, Size: 1]
	byte DefaultIndex;//[Offset: 0x368, Size: 1]
	bool IsStartSelectDefaultIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	bool IsStartSelectAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 1]
	bool UseAutoButtonIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 1]
	void OnChangeSelectTabButton(int SelectIndex);// 0x1a38360

--------------------------------
Class: CrowWidgetToggleButton.CrowWidgetButtonBase.UserWidget.Widget.Visual.Object
	Image* IMG_SelectBackGround;//[Offset: 0x430, Size: 1]
	Image* IMG_SelectFrame;//[Offset: 0x438, Size: 1]
	TextBlock* TB_SelectLabel;//[Offset: 0x440, Size: 1]
	WidgetSwitcher* WS_SelectSwitcher;//[Offset: 0x448, Size: 1]
	bool bIsSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bIsNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	FText SeletedButtonLabel;//[Offset: 0x470, Size: 1]
	SlateBrush SeletedButtonBackGround;//[Offset: 0x488, Size: 1]
	SlateBrush SeletedButtonFrame;//[Offset: 0x510, Size: 1]
	byte ButtonIndex;//[Offset: 0x598, Size: 1]
	bool bIsToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	bool bIsDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59a, Size: 1]
	bool bNotUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59b, Size: 1]
	Image* IMGNew;//[Offset: 0x5a0, Size: 1]
	Image* IMGNew_Deselect;//[Offset: 0x5a8, Size: 1]
	void ClickAction();// 0x1b774b0

--------------------------------
Class: CrowWidgetButtonBase.UserWidget.Widget.Visual.Object
	Button* BTN_Main;//[Offset: 0x2b0, Size: 1]
	Image* IMG_BackGround;//[Offset: 0x2b8, Size: 1]
	Image* IMG_Frame;//[Offset: 0x2c0, Size: 1]
	TextBlock* TB_Label;//[Offset: 0x2c8, Size: 1]
	FText ButtonLabel;//[Offset: 0x2d0, Size: 1]
	SlateBrush ButtonBackGround;//[Offset: 0x2e8, Size: 1]
	SlateBrush ButtonFrame;//[Offset: 0x370, Size: 1]
	AkAudioEvent* AudioEvent_Clicked;//[Offset: 0x3f8, Size: 1]
	bool UseHoveredSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	AkAudioEvent* AudioEvent_Hovered;//[Offset: 0x408, Size: 1]
	void OnUnhoveredButton();// 0x1b77a20
	void OnReleasedButton();// 0x1b77a00
	void OnPressButton();// 0x1b779e0
	void OnHoveredButton();// 0x1b77930
	void OnClickButton();// 0x1b77760

--------------------------------
Class: CrowLobbyLoadoutWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowLoadoutWeaponInfoWidget* WB_Loadout_WeaponInfo_Primary;//[Offset: 0x348, Size: 1]
	CrowLoadoutWeaponInfoWidget* WB_Loadout_WeaponInfo_Primary;//[Offset: 0x350, Size: 1]
	CrowLoadoutWeaponSubInfoWidget* WB_Loadout_SubWeapon_Slot1;//[Offset: 0x358, Size: 1]
	CrowLoadoutWeaponSubInfoWidget* WB_Loadout_SubWeapon_Slot2;//[Offset: 0x360, Size: 1]
	CrowWeaponListItemBase*[] WeaponWidgetList;//[Offset: 0x368, Size: 1]

--------------------------------
Class: CrowLoadoutWeaponInfoWidget.CrowWeaponListItemBase.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_SlotType;//[Offset: 0x1c28, Size: 1]
	TextBlock* TB_WeaponName;//[Offset: 0x1c30, Size: 1]
	TextBlock* TB_WeaponSlotType;//[Offset: 0x1c38, Size: 1]
	CanvasPanel* CP_Primary_weapon_Slot;//[Offset: 0x1c40, Size: 1]
	Image* IMG_Frame;//[Offset: 0x1c48, Size: 1]
	Image* IMG_WeaponBack;//[Offset: 0x1c50, Size: 1]
	Image* IMG_Back;//[Offset: 0x1c58, Size: 1]
	Image* IMG_HotKey;//[Offset: 0x1c60, Size: 1]
	Image* IMG_Setting;//[Offset: 0x1c68, Size: 1]
	CrowButton* BT_Loadout_Button;//[Offset: 0x1c70, Size: 1]
	HorizontalBox* HB_Weapon_LV;//[Offset: 0x1c78, Size: 1]
	TextBlock* TB_WeaponLV;//[Offset: 0x1c80, Size: 1]
	CrowProgressBar* PB_WeaponLV;//[Offset: 0x1c88, Size: 1]
	ScaleBox* SB_WeaponImg;//[Offset: 0x1c90, Size: 1]
	CrowWeaponPartsListWidget* WB_WeaponPartsList;//[Offset: 0x1c98, Size: 1]
	CrowDragDropWidgetBase* WB_CrowDragDropPanel;//[Offset: 0x1ca0, Size: 1]
	LinearColor TextDefaultColor;//[Offset: 0x1ca8, Size: 1]
	LinearColor TextSelectColor;//[Offset: 0x1cb8, Size: 1]
	FText DefaultSlotTypeName;//[Offset: 0x1cc8, Size: 1]
	PaperSprite* HotKeySprite;//[Offset: 0x1ce0, Size: 1]
	Image* IMGNew;//[Offset: 0x1ce8, Size: 1]
	void OnUnhovered_BT_Loadout_Button();// 0x1ab80a0
	void OnHovered_BT_Loadout_Button();// 0x1ab7e80

--------------------------------
Class: CrowWeaponListItemBase.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Widget*[] WeaponPanel;//[Offset: 0x718, Size: 1]
	CrowWeaponBase* WeaponBase;//[Offset: 0x728, Size: 1]
	CrowWeaponTableRow WeaponTable;//[Offset: 0x730, Size: 1]
	CrowWeaponData WeaponData;//[Offset: 0x1a90, Size: 1]
	int SlotIndex;//[Offset: 0x1bf8, Size: 1]
	int CurrAmmoCount;//[Offset: 0x1bfc, Size: 1]
	enum WeaponSubType;//[Offset: 0x1c00, Size: 1]
	WidgetSwitcher* WS_AmmoCount;//[Offset: 0x1c08, Size: 1]
	CrowWidgetImage* IMG_Weapon;//[Offset: 0x1c10, Size: 1]
	TextBlock* TB_RemainAmmo;//[Offset: 0x1c18, Size: 1]
	Texture2D* WeaponIconImage;//[Offset: 0x1c20, Size: 1]

--------------------------------
Class: CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	bool IsShowMouseDesc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	CrowItemBase* ItemData;//[Offset: 0x350, Size: 1]
	CrowWeaponPartsTableRow WeaponPartsTableRow;//[Offset: 0x358, Size: 1]
	CrowItemInfoWidget* ItemInfoWidget;//[Offset: 0x6f8, Size: 1]
	class UserWidget* ItemToolTipWidget;//[Offset: 0x700, Size: 1]

--------------------------------
Class: CrowProgressBar.ProgressBar.Widget.Visual.Object
	bool bIsVolatilityEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bIsOnlyVisibleWhileProcessing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	bool bUseBackgroundColorWhenReachTheZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 1]
	float IncreasePercentageEffectTimeSeconds;//[Offset: 0x334, Size: 1]
	float DecreasePercentageEffectTimeSeconds;//[Offset: 0x338, Size: 1]
	LinearColor NormalColor;//[Offset: 0x33c, Size: 1]
	LinearColor IncreaseVolatilityColor;//[Offset: 0x34c, Size: 1]
	LinearColor DecreaseVolatilityColor;//[Offset: 0x35c, Size: 1]
	LinearColor BackgroundColorWhenReachTheZero;//[Offset: 0x36c, Size: 1]
	bool bIsProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool bIsIncrease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	float VolatilityStartPercentage;//[Offset: 0x380, Size: 1]
	float VolatilityTargetPercentage;//[Offset: 0x384, Size: 1]
	float VolatilityStartTimeSeconds;//[Offset: 0x388, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x38c, Size: 1]
	void SetPercentEx(float InPercent);// 0x1afcab0

--------------------------------
Class: CrowWeaponPartsListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	PaperSprite* StockSprite;//[Offset: 0x348, Size: 1]
	PaperSprite* PistolGripSprite;//[Offset: 0x350, Size: 1]
	PaperSprite* MagazineSprite;//[Offset: 0x358, Size: 1]
	PaperSprite* UnderBarrelSprite;//[Offset: 0x360, Size: 1]
	PaperSprite* BarrelSprite;//[Offset: 0x368, Size: 1]
	PaperSprite* MuzzleSprite;//[Offset: 0x370, Size: 1]
	PaperSprite* SecondarySightSprite;//[Offset: 0x378, Size: 1]
	PaperSprite* PrimarySightSprite;//[Offset: 0x380, Size: 1]
	PaperSprite* SideBarrelSprite;//[Offset: 0x388, Size: 1]
	CrowWeaponPartItemWidget* Stock;//[Offset: 0x390, Size: 1]
	CrowWeaponPartItemWidget* PistolGrip;//[Offset: 0x398, Size: 1]
	CrowWeaponPartItemWidget* Magazine;//[Offset: 0x3a0, Size: 1]
	CrowWeaponPartItemWidget* SideBarrel;//[Offset: 0x3a8, Size: 1]
	CrowWeaponPartItemWidget* PrimarySight;//[Offset: 0x3b0, Size: 1]
	CrowWeaponPartItemWidget* UnderBarrel;//[Offset: 0x3b8, Size: 1]
	CrowWeaponPartItemWidget* SecondarySight;//[Offset: 0x3c0, Size: 1]
	CrowWeaponPartItemWidget* Barrel;//[Offset: 0x3c8, Size: 1]
	CrowWeaponPartItemWidget* Muzzle;//[Offset: 0x3d0, Size: 1]
	SizeBox* SB_Slot_Stock;//[Offset: 0x3d8, Size: 1]
	SizeBox* SB_Slot_PistolGrip;//[Offset: 0x3e0, Size: 1]
	SizeBox* SB_Slot_Magazine;//[Offset: 0x3e8, Size: 1]
	SizeBox* SB_Slot_SecondarySight;//[Offset: 0x3f0, Size: 1]
	SizeBox* SB_Slot_PrimarySight;//[Offset: 0x3f8, Size: 1]
	SizeBox* SB_Slot_UnderBarrel;//[Offset: 0x400, Size: 1]
	SizeBox* SB_Slot_SideBarrel;//[Offset: 0x408, Size: 1]
	SizeBox* SB_Slot_Barrel;//[Offset: 0x410, Size: 1]
	SizeBox* SB_Slot_Muzzle;//[Offset: 0x418, Size: 1]
	SizeBox*[] SizeBoxArray;//[Offset: 0x420, Size: 1]
	CrowWeaponPartItemWidget*[] PartsArray;//[Offset: 0x430, Size: 1]
	PaperSprite*[] DefaultTextureArray;//[Offset: 0x440, Size: 1]
	CrowInvenWeaponInfoWidget* WeaponInfoWidget;//[Offset: 0x450, Size: 1]
	bool IsPictogramIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]

--------------------------------
Class: CrowWeaponPartItemWidget.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WSGrade;//[Offset: 0x718, Size: 1]
	Image* IMG_Frame;//[Offset: 0x720, Size: 1]
	CrowWidgetImage* IMG_PartsIcon;//[Offset: 0x728, Size: 1]
	CrowDragDropWidgetBase* WB_CrowDragDropPanel;//[Offset: 0x730, Size: 1]
	CanvasPanel* CP_Swappable;//[Offset: 0x738, Size: 1]
	CrowInvenWeaponInfoWidget* WeaponInfoWidget;//[Offset: 0x740, Size: 1]
	enum PartsType;//[Offset: 0x748, Size: 1]
	bool IsDefaultParts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 1]
	CrowItemData InvenData;//[Offset: 0x750, Size: 1]

--------------------------------
Class: CrowDragDropWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_BackGround;//[Offset: 0x360, Size: 1]
	CrowWidgetBase* ParentsWidgetClass;//[Offset: 0x368, Size: 1]
	PaperSprite* DragItemImage;//[Offset: 0x370, Size: 1]
	bool LockDrag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	bool NotUseMouseButtonR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	bool UseLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a, Size: 1]
	CrowDragItem* DragItem;//[Offset: 0x380, Size: 1]
	Widget*[] ActiveImageList;//[Offset: 0x388, Size: 1]
	CrowWidgetBase* CreateDragItem;//[Offset: 0x398, Size: 1]
	DragDropOperation* DragAndDropOperation;//[Offset: 0x3a0, Size: 1]
	class UserWidget* DragItemSubClass;//[Offset: 0x3a8, Size: 1]

--------------------------------
Class: CrowDragItem.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_ItemIcon;//[Offset: 0x348, Size: 1]

--------------------------------
Class: CrowInvenWeaponInfoWidget.CrowWeaponListItemBase.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_SlotType;//[Offset: 0x1c28, Size: 1]
	TextBlock* TB_MaxAmmo;//[Offset: 0x1c30, Size: 1]
	TextBlock* TB_WeaponName;//[Offset: 0x1c38, Size: 1]
	TextBlock* TB_AmmoType;//[Offset: 0x1c40, Size: 1]
	TextBlock* TB_WeaponSlotType;//[Offset: 0x1c48, Size: 1]
	CanvasPanel* CP_Primary_weapon_Slot;//[Offset: 0x1c50, Size: 1]
	Image* IMG_Frame;//[Offset: 0x1c58, Size: 1]
	Image* IMG_WeaponBack;//[Offset: 0x1c60, Size: 1]
	Image* IMG_Back;//[Offset: 0x1c68, Size: 1]
	Image* IMG_Ammo;//[Offset: 0x1c70, Size: 1]
	Image* IMG_Line_Vertical;//[Offset: 0x1c78, Size: 1]
	Image* IMG_HotKey;//[Offset: 0x1c80, Size: 1]
	CrowButton* BT_Loadout_Button;//[Offset: 0x1c88, Size: 1]
	HorizontalBox* HB_Weapon_LV;//[Offset: 0x1c90, Size: 1]
	TextBlock* TB_WeaponLV;//[Offset: 0x1c98, Size: 1]
	CrowProgressBar* PB_WeaponLV;//[Offset: 0x1ca0, Size: 1]
	ScaleBox* SB_WeaponImg;//[Offset: 0x1ca8, Size: 1]
	CrowDragDropWidgetBase* WB_CrowDragDropPanel;//[Offset: 0x1cb0, Size: 1]
	CrowWeaponPartsListWidget* WB_WeaponPartsList;//[Offset: 0x1cb8, Size: 1]
	LinearColor TextDefaultColor;//[Offset: 0x1cc0, Size: 1]
	LinearColor TextSelectColor;//[Offset: 0x1cd0, Size: 1]
	FText DefaultSlotTypeName;//[Offset: 0x1ce0, Size: 1]
	PaperSprite* HotKeySprite;//[Offset: 0x1cf8, Size: 1]

--------------------------------
Class: CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	<FString,CrowPartModelInfo> Models;//[Offset: 0x1e0, Size: 1]
	FString[] WeaponArray;//[Offset: 0x230, Size: 1]
	CrowWeaponPartsOptions Options;//[Offset: 0x240, Size: 1]
	FName[] StickerSocketNames;//[Offset: 0x298, Size: 1]
	int StickerSocketMaxCount;//[Offset: 0x2a8, Size: 1]
	Vector[] StickerScale;//[Offset: 0x2b0, Size: 1]
	float[] StickerAngle;//[Offset: 0x2c0, Size: 1]
	int[] DefaultSticker;//[Offset: 0x2d0, Size: 1]
	CrowPartModelInfo DummyInfo;//[Offset: 0x2e0, Size: 1]

--------------------------------
Class: CrowPartModelInfo
	SoftObjectPath Mesh1P;//[Offset: 0x0, Size: 1]
	class CrowWeaponPartsActor* MeshClass1P;//[Offset: 0x18, Size: 1]
	class AnimInstance* AnimClass1P;//[Offset: 0x20, Size: 1]
	SoftObjectPath[] Materials1P;//[Offset: 0x28, Size: 1]
	SoftObjectPath Mesh3P;//[Offset: 0x38, Size: 1]
	SoftObjectPath LobbyMesh3P;//[Offset: 0x50, Size: 1]
	class CrowWeaponPartsActor* MeshClass3P;//[Offset: 0x68, Size: 1]
	class AnimInstance* AnimClass3P;//[Offset: 0x70, Size: 1]
	SoftObjectPath[] Materials3P;//[Offset: 0x78, Size: 1]
	SoftObjectPath SimpleMesh3P;//[Offset: 0x88, Size: 1]
	MaterialInterface*[] LoadedMaterials1P;//[Offset: 0xa0, Size: 1]
	MaterialInterface*[] LoadedMaterials3P;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: CrowWeaponPartsActor.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 1]
	MeshComponent* MeshComponent;//[Offset: 0x228, Size: 1]
	CrowWeaponBase* WeaponActor;//[Offset: 0x230, Size: 1]

--------------------------------
Class: CrowWeaponPartsOptions
	float AimSpreadDefault;//[Offset: 0x0, Size: 1]
	float HipFireSpreadDefault;//[Offset: 0x4, Size: 1]
	float AimSpreadDecrease;//[Offset: 0x8, Size: 1]
	float HipFireSpreadDecrease;//[Offset: 0xc, Size: 1]
	float Recoil;//[Offset: 0x10, Size: 1]
	float RecoilHorizontal;//[Offset: 0x14, Size: 1]
	float RecoilVertical;//[Offset: 0x18, Size: 1]
	float FireSpeed;//[Offset: 0x1c, Size: 1]
	float RecoilDecrease;//[Offset: 0x20, Size: 1]
	float AmmoVelocity;//[Offset: 0x24, Size: 1]
	float AmmoDamage;//[Offset: 0x28, Size: 1]
	float AmmoDamageMin;//[Offset: 0x2c, Size: 1]
	float AmmoDamageMax;//[Offset: 0x30, Size: 1]
	float AmmoDamageDropDistance;//[Offset: 0x34, Size: 1]
	float Reload;//[Offset: 0x38, Size: 1]
	float AimShake;//[Offset: 0x3c, Size: 1]
	float AimTime;//[Offset: 0x40, Size: 1]
	float CharacterMoveSpeed;//[Offset: 0x44, Size: 1]
	float AttackRange;//[Offset: 0x48, Size: 1]
	bool FlameReduction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool NoiseReduction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool VisionImprovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	bool ThermalDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 1]
	float Ammunition;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CrowItemInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Main;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Desc;//[Offset: 0x358, Size: 1]
	CanvasPanel* CP_EquipArmorInfo;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_Title;//[Offset: 0x368, Size: 1]
	Image* IMG_FirstKeyX;//[Offset: 0x370, Size: 1]
	Image* IMG_SecondKeyX;//[Offset: 0x378, Size: 1]
	TextBlock* TB_ItemCategory;//[Offset: 0x380, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x388, Size: 1]
	TextBlock* TB_TitleText;//[Offset: 0x390, Size: 1]
	TextBlock* TB_Amount;//[Offset: 0x398, Size: 1]
	TextBlock* TB_FirstKey;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_SecondKey;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_ThirdKey;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_PartsName;//[Offset: 0x3b8, Size: 1]
	TextBlock* TB_HelpText;//[Offset: 0x3c0, Size: 1]
	TextBlock* TB_Desc;//[Offset: 0x3c8, Size: 1]
	RichTextBlock* RTB_ItemGrade;//[Offset: 0x3d0, Size: 1]
	Image* IMG_Bg_ItemGrade;//[Offset: 0x3d8, Size: 1]
	Image* IMG_EquipPartsSlot_ItemGrade;//[Offset: 0x3e0, Size: 1]
	CrowProgressBar* CPB_EquipProgressBar;//[Offset: 0x3e8, Size: 1]
	HorizontalBox* HB_Equip;//[Offset: 0x3f0, Size: 1]
	HorizontalBox* HB_Get;//[Offset: 0x3f8, Size: 1]
	CanvasPanel* CP_MyWeapon;//[Offset: 0x400, Size: 1]
	SizeBox* SB_WeaponPartsInfo;//[Offset: 0x408, Size: 1]
	CrowWeaponPartsListWidget* WB_WeaponPartsList;//[Offset: 0x410, Size: 1]
	CrowWeaponPartsListWidget* WB_WeaponPartsList_Equip;//[Offset: 0x418, Size: 1]
	CrowWidgetImage* IMG_Item;//[Offset: 0x420, Size: 1]
	CrowWidgetImage* IMG_weapon00;//[Offset: 0x428, Size: 1]
	CrowWidgetImage* IMG_weapon01;//[Offset: 0x430, Size: 1]
	CrowWidgetImage* IMG_weapon02;//[Offset: 0x438, Size: 1]
	CanvasPanel* CP_Helmet;//[Offset: 0x440, Size: 1]
	CanvasPanel* CP_Armor;//[Offset: 0x448, Size: 1]
	CanvasPanel* CP_ArmorInfo;//[Offset: 0x450, Size: 1]
	CanvasPanel* CP_UseWeapon;//[Offset: 0x458, Size: 1]
	ProgressBar* PB_ArmorBar;//[Offset: 0x460, Size: 1]
	ProgressBar* PB_HelmetBar;//[Offset: 0x468, Size: 1]
	TextBlock* TB_Armor;//[Offset: 0x470, Size: 1]
	TextBlock* TB_Helmet;//[Offset: 0x478, Size: 1]
	TextBlock* TB_CannotEquip;//[Offset: 0x480, Size: 1]
	TextBlock* TB_ItemName_Equipped;//[Offset: 0x488, Size: 1]
	TextBlock* TB_EquipWeaponCategory;//[Offset: 0x490, Size: 1]
	CanvasPanel* CP_EquipParts;//[Offset: 0x498, Size: 1]
	CanvasPanel* CP_EquipPartsSlot;//[Offset: 0x4a0, Size: 1]
	CrowWidgetImage* IMG_PartsEquipWeapon;//[Offset: 0x4a8, Size: 1]
	CrowWidgetImage* IMG_Parts_Equipped;//[Offset: 0x4b0, Size: 1]
	CrowWidgetImage* IMG_Parts;//[Offset: 0x4b8, Size: 1]
	Image* IMG_Arrow;//[Offset: 0x4c0, Size: 1]
	WidgetSwitcher* WS_ItemGrade_Equip;//[Offset: 0x4c8, Size: 1]
	SizeBox* SB_WeaponPartsInfo_Equip;//[Offset: 0x4d0, Size: 1]
	WidgetSwitcher* WS_ThirdKey;//[Offset: 0x4d8, Size: 1]
	TextBlock* TB_EquipArmorPercent;//[Offset: 0x4e0, Size: 1]
	ProgressBar* PB_EquipArmorBar;//[Offset: 0x4e8, Size: 1]
	WidgetSwitcher* WS_ItemGrade;//[Offset: 0x4f0, Size: 1]
	WidgetSwitcher* WS_ItemGrade_Parts;//[Offset: 0x4f8, Size: 1]
	WidgetSwitcher* WS_Status;//[Offset: 0x500, Size: 1]
	WidgetSwitcher* WS_ItemDetail_Equipped;//[Offset: 0x508, Size: 1]
	WidgetSwitcher* WS_DescKey;//[Offset: 0x510, Size: 1]
	WidgetSwitcher* WS_FirstKey;//[Offset: 0x518, Size: 1]
	WidgetSwitcher* WS_SecondKey;//[Offset: 0x520, Size: 1]
	WidgetSwitcher* WS_ItemDetail;//[Offset: 0x528, Size: 1]
	WidgetSwitcher* WS_ArmorGauge;//[Offset: 0x530, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x538, Size: 1]
	CrowInputMappingWidget* RTB_FirstKey;//[Offset: 0x540, Size: 1]
	CrowInputMappingWidget* RTB_SecondKey;//[Offset: 0x548, Size: 1]
	CrowInputMappingWidget* RTB_DeskKey_Brief;//[Offset: 0x550, Size: 1]
	CrowInputMappingWidget* RTB_DeskKey_Detail;//[Offset: 0x558, Size: 1]
	float EquipTime;//[Offset: 0x560, Size: 1]
	Image* IMG_FirstKey;//[Offset: 0x568, Size: 1]
	Image* IMG_SecondKey;//[Offset: 0x570, Size: 1]
	PaperSprite* MouseLeftButton;//[Offset: 0x578, Size: 1]
	PaperSprite* MouseWheelButton;//[Offset: 0x580, Size: 1]
	PaperSprite* FKeySprite;//[Offset: 0x588, Size: 1]
	PaperSprite* XKeySprite;//[Offset: 0x590, Size: 1]
	CrowCharacterPawn* CrowCharacterPawn;//[Offset: 0x598, Size: 1]
	CrowGameInvenComponent* InvenComp;//[Offset: 0x5a0, Size: 1]
	CrowItemBase* TargetItem;//[Offset: 0x5a8, Size: 1]
	FText EquipText;//[Offset: 0x5b0, Size: 1]
	FText SecondText;//[Offset: 0x5c8, Size: 1]
	bool IsEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool IsGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	bool IsEquipTimeComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e2, Size: 1]
	bool IsSecondKeyPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e3, Size: 1]
	CrowInvenItemSlot* CurrentInvenItemSlot;//[Offset: 0x5e8, Size: 1]
	byte PartsEquipSlot;//[Offset: 0x5fb, Size: 1]
	CrowPickupInventory* CurrPickupInventory;//[Offset: 0x600, Size: 1]
	int PickupInvenSlot;//[Offset: 0x608, Size: 1]
	CrowWidgetImage*[] CanEquipWeaponImages;//[Offset: 0x610, Size: 1]
	void UnEquipAction();// 0xca8430
	void EquipTimeFunc();// 0x1aa3cc0
	void DropAction();// 0xca8430

--------------------------------
Class: CrowLoadoutWeaponSubInfoWidget.CrowWeaponListItemBase.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_SlotType;//[Offset: 0x1c28, Size: 1]
	TextBlock* TB_WeaponName;//[Offset: 0x1c30, Size: 1]
	TextBlock* TB_WeaponSlotType;//[Offset: 0x1c38, Size: 1]
	Image* IMG_Frame;//[Offset: 0x1c40, Size: 1]
	Image* IMG_HotKey;//[Offset: 0x1c48, Size: 1]
	Image* IMG_Setting;//[Offset: 0x1c50, Size: 1]
	Image* IMG_BackGround_Melee;//[Offset: 0x1c58, Size: 1]
	Image* IMG_BackGround;//[Offset: 0x1c60, Size: 1]
	CrowDragDropWidgetBase* WB_CrowDragDropPanel;//[Offset: 0x1c68, Size: 1]
	CrowButton* BT_Loadout_Button;//[Offset: 0x1c70, Size: 1]
	HorizontalBox* HB_Hotkey;//[Offset: 0x1c78, Size: 1]
	CanvasPanel* MainPanel;//[Offset: 0x1c80, Size: 1]
	HorizontalBox* HB_WeaponLv;//[Offset: 0x1c88, Size: 1]
	TextBlock* TB_WeaponLV;//[Offset: 0x1c90, Size: 1]
	CrowProgressBar* PB_WeaponLV;//[Offset: 0x1c98, Size: 1]
	FText DefaultSlotTypeName;//[Offset: 0x1ca0, Size: 1]
	PaperSprite* HotKeySprite;//[Offset: 0x1cb8, Size: 1]
	bool IsArmorSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc0, Size: 1]
	bool HiddeIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc1, Size: 1]
	void OnUnhovered_BT_Loadout_Button();// 0x1abbd10
	void OnHovered_BT_Loadout_Button();// 0x1abb9d0

--------------------------------
Class: CrowInventoryInputEventHandler.CrowDragDropWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowGameInvenComponent* CrowInvenComponent;//[Offset: 0x3b0, Size: 1]
	CrowBackPackInfoWidget* BackPackInfoWIdget;//[Offset: 0x3b8, Size: 1]
	CrowPlayerControllerBase* CrowPlayerController;//[Offset: 0x3c0, Size: 1]
	CrowInventoryInputEventHandler*[] ActiveFrameList;//[Offset: 0x3c8, Size: 1]
	CrowDropBoxWidget*[] DropBoxWidgetList;//[Offset: 0x3d8, Size: 1]
	class UserWidget* WeaponItemWidget;//[Offset: 0x3e8, Size: 1]
	bool IsSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]

--------------------------------
Class: CrowBackPackInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	GridPanel* GP_BackPackSlot;//[Offset: 0x348, Size: 1]
	CrowInventoryInputEventHandler* WB_CrowDragDropPanel;//[Offset: 0x350, Size: 1]
	Border* BD_BackGround_ItemSlot;//[Offset: 0x358, Size: 1]
	class UserWidget* BackPackListItem;//[Offset: 0x360, Size: 1]
	int RowCount;//[Offset: 0x368, Size: 1]
	int ColumnCount;//[Offset: 0x36c, Size: 1]
	CrowBackPackListItemWidget*[] BackPackItemList;//[Offset: 0x370, Size: 1]
	CrowGameInvenComponent* CrowGameInvenComponent;//[Offset: 0x380, Size: 1]

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x120, Size: 1]
	float[] RowFill;//[Offset: 0x130, Size: 1]
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x31eb9b0
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x31eb000
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0x31ea210

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 1]
	int Row;//[Offset: 0x4c, Size: 1]
	int RowSpan;//[Offset: 0x50, Size: 1]
	int Column;//[Offset: 0x54, Size: 1]
	int ColumnSpan;//[Offset: 0x58, Size: 1]
	int Layer;//[Offset: 0x5c, Size: 1]
	Vector2D Nudge;//[Offset: 0x60, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x31f0560
	void SetRowSpan(int InRowSpan);// 0x31f00c0
	void SetRow(int InRow);// 0x31f0030
	void SetPadding(Margin InPadding);// 0x31eff10
	void SetNudge(Vector2D InNudge);// 0x31efe10
	void SetLayer(int InLayer);// 0x31efca0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x31efac0
	void SetColumnSpan(int InColumnSpan);// 0x31ef940
	void SetColumn(int InColumn);// 0x31ef8b0

--------------------------------
Class: CrowBackPackListItemWidget.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	int SlotIndex;//[Offset: 0x710, Size: 1]
	CrowPickupInventory* PickUpInven;//[Offset: 0x718, Size: 1]
	Image* IMG_Frame;//[Offset: 0x720, Size: 1]
	Image* IMG_ItemIcon;//[Offset: 0x728, Size: 1]
	Image* IMG_Lock;//[Offset: 0x730, Size: 1]
	TextBlock* TB_ItemAmount;//[Offset: 0x738, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x740, Size: 1]
	CrowDragDropWidgetBase* WB_CrowDragDropPanel;//[Offset: 0x748, Size: 1]
	Image* IMG_WeaponBack;//[Offset: 0x750, Size: 1]
	Image* IMG_Back;//[Offset: 0x758, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x760, Size: 1]
	CrowDragItem* DragItem;//[Offset: 0x768, Size: 1]
	bool bIsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]

--------------------------------
Class: CrowDropBoxWidget.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowInventoryInputEventHandler* WB_CrowDragDropPanel;//[Offset: 0x710, Size: 1]
	CanvasPanel* CP_ImagePanel;//[Offset: 0x718, Size: 1]

--------------------------------
Class: CrowRespawnPartsUnlockListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowRespawnPartsUnlockSlotWidget* WB_Respawn_PartsUnlock_Slot;//[Offset: 0x348, Size: 1]
	CrowRespawnPartsUnlockSlotWidget* WB_Respawn_PartsUnlock_Slot;//[Offset: 0x350, Size: 1]
	CrowRespawnPartsUnlockSlotWidget* WB_Respawn_PartsUnlock_Slot;//[Offset: 0x358, Size: 1]
	CrowRespawnPartsUnlockSlotWidget*[] PartsUnlockSlotArray;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowRespawnPartsUnlockSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetImage* IMG_Item;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Weapon_Name;//[Offset: 0x350, Size: 1]

--------------------------------
Class: CrowHideWidgetInfo
	Widget* Widget;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowConquestVehicleSpawnerGround.CrowVehicleRandomSpawner.Actor.Object
	float CoolTime;//[Offset: 0x288, Size: 1]
	bool IsNeutralityCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	int NeutralityCheckTime;//[Offset: 0x290, Size: 1]
	float NeutralityCharacterRadius;//[Offset: 0x294, Size: 1]
	float NeutralitySpawnerDist;//[Offset: 0x298, Size: 1]
	float NeutralityDotDamage;//[Offset: 0x29c, Size: 1]

--------------------------------
Class: CrowVehicleRandomSpawner.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 1]
	CrowVehicleSpawnWeight[] VehicleArray;//[Offset: 0x228, Size: 1]
	CrowVehicleSpawnerGroup* OwnerGroup;//[Offset: 0x238, Size: 1]
	FString GroupName;//[Offset: 0x240, Size: 1]
	void OnVehicleDestroyed(Actor* DestroyedActor);// 0x1a772f0

--------------------------------
Class: CrowVehicleSpawnWeight
	FString TextIndex;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowVehicleSpawnerGroup.Actor.Object
	uint32 DefaultGroupMaxSpawnCount;//[Offset: 0x220, Size: 1]
	float DefaultGroupSpawnDelay;//[Offset: 0x224, Size: 1]
	uint32 DefaultGroupSpawnLimit;//[Offset: 0x228, Size: 1]
	<FString,CrowVehicleGroup> VehicleGroup;//[Offset: 0x230, Size: 1]
	void DelayedSpawnVehicle(FString InGroupName, int Count);// 0x1b596b0

--------------------------------
Class: CrowVehicleGroup
	uint32 MaxSpawnCount;//[Offset: 0x0, Size: 1]
	float SpawnDelay;//[Offset: 0x4, Size: 1]
	uint32 SpawnLimit;//[Offset: 0x8, Size: 1]
	CrowVehicleRandomSpawner*[] SpawnerArray;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowConquestAreaInfo
	bool Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool EnableConquestRedTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool EnableConquestBlueTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AlphabatName;//[Offset: 0x8, Size: 1]
	FString GroupName;//[Offset: 0x18, Size: 1]
	byte RequireConquestPoint;//[Offset: 0x28, Size: 1]
	byte ConquestTeam;//[Offset: 0x29, Size: 1]
	byte GroupConquestTeam;//[Offset: 0x2a, Size: 1]
	byte RedTeamConquestPoint;//[Offset: 0x2b, Size: 1]
	byte BlueTeamConquestPoint;//[Offset: 0x2c, Size: 1]
	int RedTeamIconIndex;//[Offset: 0x30, Size: 1]
	int BlueTeamIconIndex;//[Offset: 0x34, Size: 1]
	enum BattleState;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowConquestPlunderMineralInfo
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float MinTime;//[Offset: 0x4, Size: 1]
	float MaxTime;//[Offset: 0x8, Size: 1]
	int MinPlunderMineral;//[Offset: 0xc, Size: 1]
	int MaxPlunderMineral;//[Offset: 0x10, Size: 1]
	int MinConquestMineral;//[Offset: 0x14, Size: 1]
	int MaxConquestMineral;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowRemainTimeSync.CrowTimeSync.ActorComponent.Object
	float TotalTime;//[Offset: 0xc0, Size: 1]
	void MultiCastSetTimer(float InTotalTime);// 0x1b11460

--------------------------------
Class: CrowTimeSync.ActorComponent.Object
	float ElapsedTime;//[Offset: 0xb0, Size: 1]
	bool bIsActiveTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	void MultiCastRefresh(float Time, bool Active);// 0x1b42b80
	void MultiCastEndTimer();// 0x1b42b60
	void MultiCastBeginTimer();// 0x1a94dd0

--------------------------------
Class: CrowRespawnTimeInfo
	float BodyDisplay;//[Offset: 0x0, Size: 1]
	float KillerSpectating;//[Offset: 0x4, Size: 1]
	float MyTeamSpectating;//[Offset: 0x8, Size: 1]
	float RespawnWait;//[Offset: 0xc, Size: 1]
	float SkipSpectating;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowResultSceneInfo.Actor.Object
	CameraActor* CameraBegin;//[Offset: 0x220, Size: 1]
	CameraActor* CameraEnd;//[Offset: 0x228, Size: 1]
	float CameraMoveTime;//[Offset: 0x230, Size: 1]
	float EndSceneTime;//[Offset: 0x234, Size: 1]
	CurveFloat* CameraMoveCurve;//[Offset: 0x238, Size: 1]
	CrowResultScenePlayer Player01;//[Offset: 0x240, Size: 1]
	CrowResultScenePlayer Player02;//[Offset: 0x250, Size: 1]
	CrowResultScenePlayer Player03;//[Offset: 0x260, Size: 1]
	CrowResultScenePlayer Player04;//[Offset: 0x270, Size: 1]
	CrowResultTopPlayerInfo[] PlayerArray;//[Offset: 0x280, Size: 1]
	CrowResultScenePlayer[] TransformArray;//[Offset: 0x290, Size: 1]
	CrowCharacterPawn*[] ResultPawnArray;//[Offset: 0x2a0, Size: 1]
	CrowResultSceneWidget* ResultSceneWidget;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: CrowResultScenePlayer
	Actor* PlayerTransform;//[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowResultTopPlayerInfo
	FString NickName;//[Offset: 0x0, Size: 1]
	byte CharacterIndex;//[Offset: 0x10, Size: 1]
	byte TeamID;//[Offset: 0x11, Size: 1]
	byte DefaultFaceIndex;//[Offset: 0x12, Size: 1]
	byte DefaultHairIndex;//[Offset: 0x13, Size: 1]
	byte DefaultHairColorIndex;//[Offset: 0x14, Size: 1]
	byte DefaultBeardIndex;//[Offset: 0x15, Size: 1]
	byte DefaultBeardColorIndex;//[Offset: 0x16, Size: 1]
	byte DefaultEyeColorIndex;//[Offset: 0x17, Size: 1]
	CrowClothItemData[] DefaultClothesList;//[Offset: 0x18, Size: 1]
	uint32[] DefaultTattooIndexList;//[Offset: 0x28, Size: 1]
	CrowWeaponData DefaultWeaponData;//[Offset: 0x38, Size: 1]
	uint32 VictoryAniIndex;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: CrowClothItemData
	enum ItemType;//[Offset: 0x0, Size: 1]
	uint32 ItemIndex;//[Offset: 0x4, Size: 1]
	uint64 ItemInvenNo;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowResultSceneWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	float AutoNextTime;//[Offset: 0x368, Size: 1]
	TimerHandle AutoNextTimeHandle;//[Offset: 0x370, Size: 1]
	CrowButton* WB_BT_Skip;//[Offset: 0x378, Size: 1]
	void OnClickSkip();// 0x1b14150
	void OnAutoNext();// 0x1b14110

--------------------------------
Class: CrowRespawnPickupInventory.CrowPickupInventory.Actor.Object
	ParticleSystemComponent* EffectActive;//[Offset: 0x2b8, Size: 1]
	AnimationAsset* AniClose;//[Offset: 0x2c0, Size: 1]
	AnimationAsset* AniAjar;//[Offset: 0x2c8, Size: 1]
	AnimationAsset* AniOpen;//[Offset: 0x2d0, Size: 1]
	AnimationAsset* AniCloseToAjar;//[Offset: 0x2d8, Size: 1]
	AnimationAsset* AniAjarToClose;//[Offset: 0x2e0, Size: 1]
	AnimationAsset* AniAjarToOpen;//[Offset: 0x2e8, Size: 1]
	AnimationAsset* AniOpenToClose;//[Offset: 0x2f0, Size: 1]
	AkAudioEvent* SoundLoop;//[Offset: 0x2f8, Size: 1]
	AkAudioEvent* SoundLoopEnd;//[Offset: 0x300, Size: 1]

--------------------------------
Class: CrowItemSpawnerGridActor.Actor.Object
	<CrowPlayerControllerBase*,int> PlayerControllerMap;//[Offset: 0x220, Size: 1]
	CrowControllerGridInfo[] PlayerControllerArray;//[Offset: 0x270, Size: 1]
	<uint32,CrowSpawnerGridInfo> SpanwnerGridMap;//[Offset: 0x280, Size: 1]
	int[] CountArray;//[Offset: 0x2d0, Size: 1]

--------------------------------
Class: CrowControllerGridInfo
	CrowPlayerControllerBase* Controller;//[Offset: 0x0, Size: 1]
	IntVector LastGrid;//[Offset: 0x8, Size: 1]
	uint32 LastGridIndex;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CrowSpawnerGridInfo
	CrowItemSpawner*[] SpawnerArray;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowDeathZoneManager.ActorComponent.Object
	float DeathZoneLifeTime;//[Offset: 0xb0, Size: 1]
	<uint32,CrowDeathZoneOverlapRef> DeathZoneOverlapRefMap;//[Offset: 0xb8, Size: 1]
	CrowLocalPostProcessComponent* PostProcessComp;//[Offset: 0x108, Size: 1]
	CrowDeathZoneWidget* DeathZoneWidget;//[Offset: 0x110, Size: 1]
	CrowDeathZoneMesh*[] DeathZoneArray;//[Offset: 0x118, Size: 1]
	CrowDeathZoneCharacter[] DeathZoneCharacterArray;//[Offset: 0x128, Size: 1]

--------------------------------
Class: CrowDeathZoneOverlapRef.CrowActorOverlapRef

--------------------------------
Class: CrowLocalPostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 1]
	bool bIsEnablePostProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 1]
	float Priority;//[Offset: 0x764, Size: 1]

--------------------------------
Class: CrowDeathZoneWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_WarningTimer;//[Offset: 0x348, Size: 1]
	TextBlock* TB_WarningAlarm;//[Offset: 0x350, Size: 1]
	TextBlock* TB_WarningDesc;//[Offset: 0x358, Size: 1]

--------------------------------
Class: CrowDeathZoneMesh.Actor.Object
	SceneComponent* Root;//[Offset: 0x220, Size: 1]
	byte Team;//[Offset: 0x228, Size: 1]
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1a70330
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult HitResultInfo);// 0x1a6ffe0

--------------------------------
Class: CrowDeathZoneCharacter
	CrowCharacterPawn* Character;//[Offset: 0x0, Size: 1]
	byte Team;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowLevelSequencePlayer.Object
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x38, Size: 1]
	void OnLevelSequenceStop();// 0x1aad560
	void OnLevelSequencePlay();// 0x1aad540

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 1]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 1]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 1]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x270, Size: 1]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x278, Size: 1]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x280, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x290, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x298, Size: 1]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	void ShowBurnin();// 0x3389cb0
	void SetSequence(LevelSequence* InSequence);// 0x3389c20
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x3389b90
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3389960
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3389800
	void ResetBindings();// 0x33897e0
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x3389720
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x33895e0
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x33894e0
	void OnLevelSequenceLoaded__DelegateSignature();// 0x1ef32e0
	LevelSequence* LoadSequence();// 0x3389470
	void HideBurnin();// 0x3389450
	LevelSequencePlayer* GetSequencePlayer();// 0x33893e0
	LevelSequence* GetSequence();// 0x3389380
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x3388ea0
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x3388df0
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3388ae0
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3388990

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 1]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 1]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 1]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 1]
	class Object* DirectorClass;//[Offset: 0x1b0, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 1]
	void RemoveMetaDataByClass(class Object InClass);// 0x33896b0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x3388bf0
	Object* FindMetaDataByClass(class Object InClass);// 0x3388bf0
	Object* CopyMetaData(Object* InMetaData);// 0x3388bf0

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 1]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 1]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 1]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 1]
	FString ObjectPath;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 1]
	FString ComponentName;//[Offset: 0x20, Size: 1]
	Object* CachedComponent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnCameraCut;//[Size: 1]
	CameraComponent* GetActiveCameraComponent();// 0x3388f80
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x3388c70

--------------------------------
Class: MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayReverse;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	MulticastInlineDelegateProperty OnFinished;//[Size: 1]
	byte Status;//[Offset: 0x2b0, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x2b8, Size: 1]
	FrameNumber StartTime;//[Offset: 0x2c0, Size: 1]
	int DurationFrames;//[Offset: 0x2c4, Size: 1]
	float DurationSubFrames;//[Offset: 0x2c8, Size: 1]
	int CurrentNumLoops;//[Offset: 0x2cc, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2d0, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2e8, Size: 1]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x438, Size: 1]
	interface class None* PlaybackClient;//[Offset: 0x448, Size: 1]
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x458, Size: 1]
	void StopAtCurrentTime();// 0x2fd3ce0
	void Stop();// 0x2fd3cc0
	void SetTimeRange(float StartTime, float Duration);// 0x2fd3bf0
	void SetPlayRate(float PlayRate);// 0x2fd38a0
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x2fd3920
	void SetFrameRate(FrameRate FrameRate);// 0x2fd3630
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x2fd3520
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x2fd3480
	void ScrubToSeconds(float TimeInSeconds);// 0x2fd32d0
	bool ScrubToMarkedFrame(FString InLabel);// 0x2fd31c0
	void ScrubToFrame(FrameTime NewPosition);// 0x2fd3110
	void Scrub();// 0x2fd30f0
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x2fd3030
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x2fd2f50
	void RestoreState();// 0x2fd30d0
	void PlayToSeconds(float TimeInSeconds);// 0x2fd2ea0
	bool PlayToMarkedFrame(FString InLabel);// 0x2fd2d90
	void PlayToFrame(FrameTime NewPosition);// 0x2fd2ce0
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams);// 0x2fd2bc0
	void PlayReverse();// 0x2fd2ba0
	void PlayLooping(int NumLoops);// 0x2fd2b10
	void Play();// 0x2fd2af0
	void Pause();// 0x2fd2ad0
	void JumpToSeconds(float TimeInSeconds);// 0x2fd2a20
	bool JumpToMarkedFrame(FString InLabel);// 0x2fd2910
	void JumpToFrame(FrameTime NewPosition);// 0x2fd2860
	bool IsReversed();// 0x2fd2830
	bool IsPlaying();// 0x2fd2800
	bool IsPaused();// 0x2fd27d0
	void GoToEndAndStop();// 0x2fd2750
	QualifiedFrameTime GetStartTime();// 0x2fd2710
	MovieSceneSequence* GetSequence();// 0x2fd26f0
	float GetPlayRate();// 0x2fd2680
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x2fd2580
	FrameRate GetFrameRate();// 0x2fd2560
	int GetFrameDuration();// 0x2fd2530
	QualifiedFrameTime GetEndTime();// 0x2fd24e0
	QualifiedFrameTime GetDuration();// 0x2fd24a0
	bool GetDisableCameraCuts();// 0x2fd2470
	QualifiedFrameTime GetCurrentTime();// 0x2fd2430
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x2fd2300
	void ChangePlaybackDirection();// 0x2fd2120

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]
	FString MarkedFrame;//[Offset: 0x10, Size: 1]
	enum PositionType;//[Offset: 0x20, Size: 1]
	enum UpdateMethod;//[Offset: 0x21, Size: 1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 1]
	FrameRate Rate;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 1]
	byte LastKnownStatus;//[Offset: 0x8, Size: 1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	MovieSceneSequenceActorPointers[] SequenceActors;//[Offset: 0x28, Size: 1]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneSequenceActorPointers
	Actor* SequenceActor;//[Offset: 0x0, Size: 1]
	interface class None* SequenceActorInterface;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 1]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 1]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x3389a90

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x18, Size: 1]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 1]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 1]
	void SetSettings(Object* InSettings);// 0x1ef32e0
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x3389410

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 1]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 1]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 1]
	FString CurrentShotName;//[Offset: 0x30, Size: 1]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 1]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 1]
	FString SourceTimecode;//[Offset: 0x60, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 1]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 1]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 1]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowProjectileBase.Actor.Object
	SceneComponent* ProjectileRoot;//[Offset: 0x220, Size: 1]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x228, Size: 1]
	FName ProjectileCollisionProfileName;//[Offset: 0x230, Size: 1]
	CrowTrajectoryMovement* TrajectoryMovement;//[Offset: 0x238, Size: 1]
	uint16 WeaponIndex;//[Offset: 0x240, Size: 1]
	uint16 AmmoIndex;//[Offset: 0x242, Size: 1]
	byte ItemType;//[Offset: 0x244, Size: 1]
	byte TeamID;//[Offset: 0x245, Size: 1]
	byte SquadNumber;//[Offset: 0x246, Size: 1]
	CrowProjectileFireData FireData;//[Offset: 0x250, Size: 1]
	Vector LastProjectileLocation;//[Offset: 0x18e0, Size: 1]
	HitResult[] HitResultsOnMove;//[Offset: 0x18f0, Size: 1]
	WaterBody* CachedOceanActor;//[Offset: 0x1910, Size: 1]
	int CachedLOD;//[Offset: 0x1918, Size: 1]
	CrowWeaponPartsOptions PartsOptions;//[Offset: 0x191c, Size: 1]

--------------------------------
Class: CrowTrajectoryMovement.ActorComponent.Object
	SceneComponent* SceneComponent;//[Offset: 0xb8, Size: 1]
	HitResult[] HitResultsOnMove;//[Offset: 0xc0, Size: 1]
	CrowProjectileFireData FireData;//[Offset: 0xd0, Size: 1]
	WaterBody* CachedOceanActor;//[Offset: 0x1800, Size: 1]

--------------------------------
Class: CrowProjectileFireData
	bool IsLocalFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool IsFirstPerson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool IsPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	int16 PenetrationCount;//[Offset: 0x4, Size: 1]
	Actor* FireActor;//[Offset: 0x8, Size: 1]
	CrowWeaponBase* WeaponBase;//[Offset: 0x10, Size: 1]
	Actor*[] IgnoreActor;//[Offset: 0x18, Size: 1]
	enum ItemType;//[Offset: 0x28, Size: 1]
	uint16 WeaponIndex;//[Offset: 0x2a, Size: 1]
	Vector StartLocation;//[Offset: 0x2c, Size: 1]
	Vector EndLocation;//[Offset: 0x38, Size: 1]
	Vector Direction;//[Offset: 0x44, Size: 1]
	Vector EffectStartLocation;//[Offset: 0x50, Size: 1]
	CrowAmmoTableRow AmmoTable;//[Offset: 0x60, Size: 1]
	CrowWeaponTableRow WeaponTable;//[Offset: 0x300, Size: 1]
	bool IsRightClickAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1660, Size: 1]
	float ProjectileDistance;//[Offset: 0x1664, Size: 1]
	float PenetrationDistValue;//[Offset: 0x1668, Size: 1]
	float PenetrationImpactValue;//[Offset: 0x166c, Size: 1]
	byte RemainCookingTime;//[Offset: 0x1670, Size: 1]
	bool IsCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1671, Size: 1]
	bool IsLockOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1672, Size: 1]
	Actor* LockOnActor;//[Offset: 0x1678, Size: 1]
	byte TeamID;//[Offset: 0x1680, Size: 1]
	byte SquadNumber;//[Offset: 0x1681, Size: 1]

--------------------------------
Class: CrowAmmoTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	enum AmmoType;//[Offset: 0x1f0, Size: 1]
	FString EffectKey;//[Offset: 0x1f8, Size: 1]
	enum AmmoFireType;//[Offset: 0x208, Size: 1]
	int DropItemCount;//[Offset: 0x20c, Size: 1]
	SoftObjectPath Mesh3P;//[Offset: 0x210, Size: 1]
	bool bIsMoveMeshOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	class DamageType* DamegeType;//[Offset: 0x230, Size: 1]
	class CrowProjectileBase* ProjectileActor;//[Offset: 0x238, Size: 1]
	<FString,class CrowProjectileBase> ProjectileActorOverride;//[Offset: 0x240, Size: 1]
	class CrowProjectileShell* ShellClass;//[Offset: 0x290, Size: 1]
	class CrowFoliageAffectorActor* ExplosionFoliageAffector;//[Offset: 0x298, Size: 1]

--------------------------------
Class: CrowProjectileShell.CrowProjectileMeshBase.CrowProjectileBase.Actor.Object
	int MaxWeaponLOD;//[Offset: 0x19a0, Size: 1]

--------------------------------
Class: CrowProjectileMeshBase.CrowProjectileBase.Actor.Object
	StaticMeshComponent* MeshRoot;//[Offset: 0x1998, Size: 1]
	void OnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult HitResult);// 0x1afc670
	void OnMeshBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult HitResult);// 0x1afc450

--------------------------------
Class: CrowFoliageAffectorActor.Actor.Object
	bool bNeedDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	float ScaleMultiplier;//[Offset: 0x224, Size: 1]
	CrowFoliageAffectorComponent*[] FoliageAffectors;//[Offset: 0x228, Size: 1]
	void StartAffect();// 0x1a7dc00
	void OnTimeAnimationFinished();// 0x1a7daa0
	void CallInEditor_Stop();// 0xca8430
	void CallInEditor_Start();// 0xca8430

--------------------------------
Class: CrowCharacterPartsInfo
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 ServerKey;//[Offset: 0x8, Size: 1]
	CrowCharacterAppearance ReplicatedAppearance;//[Offset: 0x10, Size: 1]
	CrowClothItemData[] DefaultClothesList;//[Offset: 0x18, Size: 1]
	uint32[] DefaultTattooIndexList;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowCharacterAppearance
	byte FaceIndex;//[Offset: 0x0, Size: 1]
	byte EyeColorIndex;//[Offset: 0x1, Size: 1]
	byte HairIndex;//[Offset: 0x2, Size: 1]
	byte HairColorIndex;//[Offset: 0x3, Size: 1]
	byte BeardIndex;//[Offset: 0x4, Size: 1]
	byte BeardColorIndex;//[Offset: 0x5, Size: 1]

--------------------------------
Class: CrowActiveSpawnerCount
	int RandomSpawner;//[Offset: 0x0, Size: 1]
	int GroupSpawner;//[Offset: 0x4, Size: 1]
	int MineralSpawner01;//[Offset: 0x8, Size: 1]
	int MineralSpawner02;//[Offset: 0xc, Size: 1]
	int MineralSpawner03;//[Offset: 0x10, Size: 1]
	int FixSpawner;//[Offset: 0x14, Size: 1]
	int RespawnFixSpawner;//[Offset: 0x18, Size: 1]
	float RespawnFixDelayMin;//[Offset: 0x1c, Size: 1]
	float RespawnFixDelayMax;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowSpectatorPawnCustomMode.CrowSpectatorPawnBase.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	bool bIsVisiblePlayerList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool bIsPlayLevelSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	bool bInRespawnAirPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 1]
	bool bCompleteRespawnAirPlaneCameraAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 1]
	CrowPlayerStateBase* SelectPlayerState;//[Offset: 0x378, Size: 1]
	CrowRespawnAirPlaneActor* RespawnAirPlane;//[Offset: 0x380, Size: 1]
	float DefaultMaxSpeed;//[Offset: 0x388, Size: 1]
	float DefaultAcceleration;//[Offset: 0x38c, Size: 1]
	float DefaultDeceleration;//[Offset: 0x390, Size: 1]
	float WalkSpeedScale;//[Offset: 0x394, Size: 1]
	float WalkDecelerationScale;//[Offset: 0x398, Size: 1]
	float SprintSpeedScale;//[Offset: 0x39c, Size: 1]
	float SprintDecelerationScale;//[Offset: 0x3a0, Size: 1]
	float HeightWhenClickedWorldMap;//[Offset: 0x3a4, Size: 1]
	float NextPlayerSwitchTimeWhenDie;//[Offset: 0x3a8, Size: 1]
	TimerHandle NextPlayerSwitchTimerHandle;//[Offset: 0x3b0, Size: 1]
	FString NextPlayerSwitchSquadKey;//[Offset: 0x3b8, Size: 1]
	uint64 NextPlayerSwitchServerKey;//[Offset: 0x3c8, Size: 1]
	CrowSpectatorShortcutPlayer[] ShortcutPlayerList;//[Offset: 0x3d0, Size: 1]
	CrowSpectatorShortcutPos[] ShortcutPosList;//[Offset: 0x3e0, Size: 1]

--------------------------------
Class: CrowSpectatorPawnBase.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	CrowPlayerStateBase* AttachedPlayerState;//[Offset: 0x2a8, Size: 1]
	CrowPlayerStateBase* LastAttachedPlayerState;//[Offset: 0x2b0, Size: 1]
	CrowGameHUDBase* GameHUDBase;//[Offset: 0x2b8, Size: 1]
	Pawn* LastViewTarget;//[Offset: 0x2c0, Size: 1]
	CrowSpectatorIconActor* LocalBodyIconActor;//[Offset: 0x2c8, Size: 1]
	CrowSpectatorIconActor* KillerIconActor;//[Offset: 0x2d0, Size: 1]
	bool bIsFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bIsBoardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	int8 VehicleSeatIndex;//[Offset: 0x2da, Size: 1]
	bool bIsSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 1]
	byte CameraMode;//[Offset: 0x2dc, Size: 1]
	bool bIsLockToggleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 1]
	Vector2D ViewPitchMinMax;//[Offset: 0x2e0, Size: 1]
	float WaitTimeToNextPlayer;//[Offset: 0x2e8, Size: 1]
	float FadeInTime;//[Offset: 0x2ec, Size: 1]
	float FadeOutTime;//[Offset: 0x2f0, Size: 1]
	uint64 WaitAttachedServerKey;//[Offset: 0x2f8, Size: 1]
	bool bIsWaitAttachedPawnToReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	float WaitAttachedPawnRate;//[Offset: 0x304, Size: 1]
	CrowSpectatorPawnMovement* SpectatorPawnMovement;//[Offset: 0x308, Size: 1]

--------------------------------
Class: CrowRespawnAirPlaneActor.Actor.Object
	BoxComponent* BoxCollision;//[Offset: 0x220, Size: 1]
	CrowSpringArmComponent* SpringArmComp;//[Offset: 0x228, Size: 1]
	CameraComponent* CameraComp;//[Offset: 0x230, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x238, Size: 1]
	float MinPitchAngle;//[Offset: 0x240, Size: 1]
	float MaxPitchAngle;//[Offset: 0x244, Size: 1]
	float DestroyDelayTime;//[Offset: 0x248, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfo;//[Offset: 0x250, Size: 1]
	AkAudioEvent* FlightLoopSound;//[Offset: 0x2d8, Size: 1]
	AkAudioEvent* CanDropSound;//[Offset: 0x2e0, Size: 1]
	CrowAirPlaneRespawnSplineActor* SelectedSplineActor;//[Offset: 0x2e8, Size: 1]
	CrowRespawnAirPlaneCamera* CameraActor;//[Offset: 0x2f0, Size: 1]
	Actor* RespawnAirPlaneCamera;//[Offset: 0x2f8, Size: 1]
	CrowPlayerStateSquadMatch* ClientPlayerStateSquadMatch;//[Offset: 0x300, Size: 1]

--------------------------------
Class: CrowAirPlaneRespawnSplineActor.Actor.Object
	float CameraAttachDist;//[Offset: 0x220, Size: 1]
	float CameraAttachHeight;//[Offset: 0x224, Size: 1]
	float DroppingPossibleDist;//[Offset: 0x228, Size: 1]
	float ForcedDroppingDist;//[Offset: 0x22c, Size: 1]
	SplineComponent* SplineComponent;//[Offset: 0x230, Size: 1]
	float RandomAngle;//[Offset: 0x238, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoRoute;//[Offset: 0x240, Size: 1]
	CrowWorldMapIcon* IconRoute;//[Offset: 0x2c8, Size: 1]

--------------------------------
Class: CrowRespawnAirPlaneCamera.Actor.Object
	BoxComponent* BoxCollision;//[Offset: 0x220, Size: 1]
	CrowSpringArmComponent* SpringArmComp;//[Offset: 0x228, Size: 1]
	CameraComponent* CameraComp;//[Offset: 0x230, Size: 1]
	class MatineeCameraShake* CameraShake;//[Offset: 0x238, Size: 1]
	CrowAirPlaneRespawnSplineActor* SelectedSplineActor;//[Offset: 0x240, Size: 1]
	CrowRespawnAirPlaneActor* TargetActor;//[Offset: 0x248, Size: 1]

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0xa8, Size: 1]
	float OscillationBlendInTime;//[Offset: 0xac, Size: 1]
	float OscillationBlendOutTime;//[Offset: 0xb0, Size: 1]
	ROscillator RotOscillation;//[Offset: 0xb4, Size: 1]
	VOscillator LocOscillation;//[Offset: 0xd8, Size: 1]
	FOscillator FOVOscillation;//[Offset: 0xfc, Size: 1]
	float AnimPlayRate;//[Offset: 0x108, Size: 1]
	float AnimScale;//[Offset: 0x10c, Size: 1]
	float AnimBlendInTime;//[Offset: 0x110, Size: 1]
	float AnimBlendOutTime;//[Offset: 0x114, Size: 1]
	float RandomAnimSegmentDuration;//[Offset: 0x118, Size: 1]
	CameraAnim* Anim;//[Offset: 0x120, Size: 1]
	CameraAnimationSequence* AnimSequence;//[Offset: 0x128, Size: 1]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float OscillatorTimeRemaining;//[Offset: 0x134, Size: 1]
	CameraAnimInst* AnimInst;//[Offset: 0x138, Size: 1]
	SequenceCameraShakePattern* SequenceShakePattern;//[Offset: 0x180, Size: 1]
	static MatineeCameraShake* StartMatineeCameraShakeFromSource(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xd43b00
	static MatineeCameraShake* StartMatineeCameraShake(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xd43930
	void ReceiveStopShake(bool bImmediately);// 0x1ef32e0
	void ReceivePlayShake(float Scale);// 0x1ef32e0
	bool ReceiveIsFinished();// 0xd43900
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x1ef32e0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 1]
	FOscillator Yaw;//[Offset: 0xc, Size: 1]
	FOscillator Roll;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 1]
	float Frequency;//[Offset: 0x4, Size: 1]
	byte InitialOffset;//[Offset: 0x8, Size: 1]
	enum Waveform;//[Offset: 0x9, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 1]
	FOscillator Y;//[Offset: 0xc, Size: 1]
	FOscillator Z;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 1]
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 1]
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 1]
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: SequenceCameraShakePattern.CameraShakePattern.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x28, Size: 1]
	float PlayRate;//[Offset: 0x30, Size: 1]
	float Scale;//[Offset: 0x34, Size: 1]
	float BlendInTime;//[Offset: 0x38, Size: 1]
	float BlendOutTime;//[Offset: 0x3c, Size: 1]
	float RandomSegmentDuration;//[Offset: 0x40, Size: 1]
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	SequenceCameraShakeSequencePlayer* Player;//[Offset: 0x48, Size: 1]
	SequenceCameraShakeCameraStandIn* CameraStandIn;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SequenceCameraShakeSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x2d0, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x2d8, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2e0, Size: 1]

--------------------------------
Class: SequenceCameraShakeCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	float AspectRatio;//[Offset: 0x38, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x5a0, Size: 1]
	CameraFilmbackSettings Filmback;//[Offset: 0x5a4, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x5b0, Size: 1]
	CameraFocusSettings FocusSettings;//[Offset: 0x5c8, Size: 1]
	float CurrentFocalLength;//[Offset: 0x620, Size: 1]
	float CurrentAperture;//[Offset: 0x624, Size: 1]
	float CurrentFocusDistance;//[Offset: 0x628, Size: 1]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 1]
	float SensorHeight;//[Offset: 0x4, Size: 1]
	float SensorAspectRatio;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 1]
	float MaxFocalLength;//[Offset: 0x4, Size: 1]
	float MinFStop;//[Offset: 0x8, Size: 1]
	float MaxFStop;//[Offset: 0xc, Size: 1]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 1]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 1]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 1]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 1]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 1]
	float FocusOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 1]
	Vector RelativeOffset;//[Offset: 0x28, Size: 1]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]

--------------------------------
Class: CrowPlayerStateSquadMatch.CrowPlayerStateTDM.CrowPlayerStateDM.CrowPlayerStateBase.PlayerState.Info.Actor.Object
	CrowSquadBattleInfo SquadBattleInfo;//[Offset: 0xce8, Size: 1]
	uint32 AssistCount;//[Offset: 0xcf0, Size: 1]
	bool bIsReserveZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 1]
	bool bIsReserveSquadRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 1]
	int AttachedSpectatorCount;//[Offset: 0xcf8, Size: 1]
	CrowSquadMatchResultInfo SquadMatchResultInfo;//[Offset: 0xd00, Size: 1]
	CrowMiningPointActor* OverlappedMiningPoint;//[Offset: 0xd20, Size: 1]
	CrowTargetTraceEffect* ChageZombieEffectComp;//[Offset: 0xd28, Size: 1]
	CrowSquadRewardInfo[] RewardInfoArray;//[Offset: 0xd30, Size: 1]
	uint64 FollowSkydivingTargetServerKey;//[Offset: 0xe50, Size: 1]
	CrowPlayerStateSquadMatch* FollowSkydivingTargetPlayerState;//[Offset: 0xe58, Size: 1]
	void SingleCastWaitUserInfoSquadMatch(byte JoinUserCount, byte CountdownStartUserCount);// 0x1af8bb0
	void SingleCastWaitChangeZombie(float WaitTime);// 0x1af8a10
	void SingleCastUpdateKillCount(int InKillCount);// 0x1af88b0
	void SingleCastUpdateAliveTime(float InAliveTime);// 0x1af8820
	void SingleCastSquadRewardStateSpectatingPlayer(const CrowSquadRewardInfo[] Array, CrowPlayerStateSquadMatch* InTarget);// 0x1af8730
	void SingleCastSquadRewardState(byte Index, enum State);// 0x1af8660
	void SingleCastSquadRewardInfoArray(const CrowSquadRewardInfo[] Array);// 0x1af85c0
	void SingleCastSquadRespawnReserved();// 0x1af85a0
	void SingleCastSquadRespawnPlayer(CrowPlayerStateBase* PS);// 0x1af7b90
	void SingleCastShowSummary();// 0x1af8580
	void SingleCastCancelMiningMachineInstall();// 0x1af84c0
	void RequestSquadReward(byte Index, Vector Location, float Yaw);// 0x1af82a0
	void RequestSquadRespawn_MySquad(CrowPlayerStateSquadMatch* PS);// 0x1af8210
	void RequestSquadRespawn_Local();// 0x1af7b70
	void RequestInstallMiningMachine(uint16 PointID);// 0x1af80b0
	void RequestFollowSkydiving(uint64 TargetServerKey);// 0x1af7f90
	void RequestDetachedSpectator();// 0x1af7d40
	void RequestCollectMiningMachine(uint16 PointID);// 0x1af7cb0
	void RequestClientDeathLocation(Vector_NetQuantize Location);// 0x1af7c20
	void RequestAttachedSpectator();// 0x1af7a40
	void RequestAddSquadMatchPoint(CrowItemBase* ItemBase);// 0x1af79b0
	void ClientFollowSkydiving(CrowPlayerStateSquadMatch* InFollowerPlayer, uint64 InTargetServerKey);// 0x1af7290
	void ClientEndGameSquadMatch(const CrowSquadMatchResultInfo ResultInfo, byte InWinnerTeamId);// 0x1af7140

--------------------------------
Class: CrowPlayerStateTDM.CrowPlayerStateDM.CrowPlayerStateBase.PlayerState.Info.Actor.Object

--------------------------------
Class: CrowPlayerStateDM.CrowPlayerStateBase.PlayerState.Info.Actor.Object

--------------------------------
Class: CrowSquadBattleInfo
	float AliveTime;//[Offset: 0x0, Size: 1]
	float TotalDamage;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowSquadMatchResultInfo
	CrowPlayerStateSquadMatch*[] PlayerArray;//[Offset: 0x0, Size: 1]
	CrowResultTopPlayerInfo[] TopSquadPlayerArray;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowMiningPointActor.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 1]
	BoxComponent* CollisionCheckBox;//[Offset: 0x228, Size: 1]
	CrowPingTargetBoxComponent* PingArea;//[Offset: 0x230, Size: 1]
	CrowMiningPointInfo MiningPointInfo;//[Offset: 0x238, Size: 1]
	uint16 PointID;//[Offset: 0x23e, Size: 1]
	SkeletalMeshComponent* MiningMachineMeshComp;//[Offset: 0x240, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x248, Size: 1]
	SceneComponent* PointEffectLocation;//[Offset: 0x250, Size: 1]
	SceneComponent* CollectEffectLocation;//[Offset: 0x258, Size: 1]
	float MiningTimeRatio;//[Offset: 0x260, Size: 1]
	uint16 MineralMin;//[Offset: 0x264, Size: 1]
	uint16 MineralMax;//[Offset: 0x266, Size: 1]
	FText InstallMiningMachineInteractionText;//[Offset: 0x268, Size: 1]
	float CollectMiningMachineInteractionTime;//[Offset: 0x280, Size: 1]
	FText CollectMiningMachineInteractionText;//[Offset: 0x288, Size: 1]
	SoftObjectPath MiningMachinePath;//[Offset: 0x2a0, Size: 1]
	AnimMontage* AniStart;//[Offset: 0x2b8, Size: 1]
	AnimMontage* AniLoop;//[Offset: 0x2c0, Size: 1]
	AnimMontage* AniEnd;//[Offset: 0x2c8, Size: 1]
	AnimMontage* AniDeactive;//[Offset: 0x2d0, Size: 1]
	float EffectDistance;//[Offset: 0x2d8, Size: 1]
	ParticleSystem* EffectPoint;//[Offset: 0x2e0, Size: 1]
	ParticleSystem* EffectStartMining;//[Offset: 0x2e8, Size: 1]
	ParticleSystem* EffectEndMining;//[Offset: 0x2f0, Size: 1]
	ParticleSystem* EffectGlow;//[Offset: 0x2f8, Size: 1]
	ParticleSystem* EffectSmoke;//[Offset: 0x300, Size: 1]
	ParticleSystem* EffectFloorSmoke;//[Offset: 0x308, Size: 1]
	ParticleSystem* EffectCollect;//[Offset: 0x310, Size: 1]
	AkAudioEvent* SoundCollect;//[Offset: 0x318, Size: 1]
	ParticleSystemComponent* EffectPointComponent;//[Offset: 0x320, Size: 1]
	ParticleSystemComponent* EffectEndMiningComponent;//[Offset: 0x328, Size: 1]
	ParticleSystemComponent* EffectGlowComponent;//[Offset: 0x330, Size: 1]
	ParticleSystemComponent* EffectSmokeComponent;//[Offset: 0x338, Size: 1]
	ParticleSystemComponent* EffectFloorSmokeComponent;//[Offset: 0x340, Size: 1]
	CrowGameIconDisplayInfo IconActive;//[Offset: 0x348, Size: 1]
	CrowGameIconDisplayInfo IconMining_MySquad;//[Offset: 0x3d0, Size: 1]
	CrowGameIconDisplayInfo IconComplete_MySquad;//[Offset: 0x458, Size: 1]
	CrowGameIconDisplayInfo IconMining_Enemy;//[Offset: 0x4e0, Size: 1]
	CrowGameIconDisplayInfo IconComplete_Enemy;//[Offset: 0x568, Size: 1]
	void OnRep_MiningPointInfo();// 0x1accaf0

--------------------------------
Class: CrowPingTargetBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: CrowMiningPointInfo
	enum CurrentState;//[Offset: 0x0, Size: 1]
	byte OwnerTeamID;//[Offset: 0x1, Size: 1]
	byte SquadNumber;//[Offset: 0x2, Size: 1]
	uint16 MineralCount;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowTargetTraceEffect.Actor.Object
	SceneComponent* TargetComponent;//[Offset: 0x228, Size: 1]
	SkeletalMeshComponent* TargetSkeletalMesh;//[Offset: 0x230, Size: 1]
	ParticleSystemComponent* EFFECT;//[Offset: 0x238, Size: 1]

--------------------------------
Class: CrowSpectatorIconActor.Actor.Object
	SceneComponent* IconLocation;//[Offset: 0x220, Size: 1]
	CrowPlayerStateBase* TargetPS;//[Offset: 0x228, Size: 1]
	Pawn* TargetPawn;//[Offset: 0x230, Size: 1]
	CrowIndicatorViewInfo* IndicatorViewInfo;//[Offset: 0x238, Size: 1]
	CrowGameIconDisplayInfo LocalBodyIconInfo;//[Offset: 0x240, Size: 1]
	CrowGameIconDisplayInfo KillerIconInfo;//[Offset: 0x2c8, Size: 1]

--------------------------------
Class: CrowSpectatorPawnMovement.SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 1]

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x138, Size: 1]
	float Acceleration;//[Offset: 0x13c, Size: 1]
	float Deceleration;//[Offset: 0x140, Size: 1]
	float TurningBoost;//[Offset: 0x144, Size: 1]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]

--------------------------------
Class: CrowSpectatorShortcutPlayer
	uint64 ServerKey;//[Offset: 0x0, Size: 1]
	FString PlayerNickName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowSpectatorShortcutPos
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	Rotator ViewRotation;//[Offset: 0x18, Size: 1]
	bool bIsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: CrowPostProcessVolume.Actor.Object
	MaterialParameterCollection* ParamCollection;//[Offset: 0x220, Size: 1]
	<int,CrowPostProcessQualitySetting> QualitySettings;//[Offset: 0x228, Size: 1]
	<enum,MaterialInterface*> OtherPostProcessMaterials;//[Offset: 0x278, Size: 1]
	CrowLocalPostProcessComponent* CrowLocalPostProcessComp;//[Offset: 0x2c8, Size: 1]
	CrowUnderWaterComponent* UnderWaterComponent;//[Offset: 0x2d0, Size: 1]
	CrowPostProcessBloodComponent* BloodComponent;//[Offset: 0x2d8, Size: 1]
	CrowShellShockComponent* ShellShockComponent;//[Offset: 0x2e0, Size: 1]
	int LastHumanState;//[Offset: 0x2e8, Size: 1]
	MaterialParameterCollectionInstance* ParamInstance;//[Offset: 0x2f0, Size: 1]
	PostProcessVolume*[] CachedPostProcessVolumes;//[Offset: 0x2f8, Size: 1]
	<FString,int> OtherPPMaterialRef;//[Offset: 0x308, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bEnableFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	float fFogFadeOutTime;//[Offset: 0x35c, Size: 1]
	void UpdateWeightByName(FString TargetPPName, float Weight);// 0x1afce70
	void UpdateWeight(enum TargetPP, float Weight);// 0x1afcda0
	void UpdatePostProcessVolume(int NewQuality);// 0x1afcd10
	void UpdateGameState(enum GameState);// 0x1afcc90
	void UpdateAllWeight(FString PostProcessVolumeName, float Weight);// 0x1afcb60
	void StopShellShockBlur();// 0x1afcb40
	void SetFogFadeOutTime(float InFadeOutTime);// 0x1afca30
	void SetEnableFog(bool InEnable);// 0x1afc9a0
	void PlayShellShockBlur(float InScale);// 0x1afc920
	void OnPlayerStateChange(enum OldState, enum NewState);// 0x1afc850
	void OnHPChanged(float HPRate, bool bHuman);// 0x1afc370
	void OnChangedHumanState(bool bHuman);// 0x1afc2e0
	bool IsEnableFog();// 0x1afc2c0
	void Init();// 0x1afc2a0
	void GetViewLocationAndDirection(out Vector OutViewLocation, out Vector OutViewDirection);// 0x1a770b0
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(FString InBaseMaterialName);// 0x1afc1f0
	float GetFogFadeOutTime();// 0x1afc1d0
	CrowPostProcessBloodComponent* GetBloodComponent();// 0x1afc1b0
	void ClearDamageEffect();// 0x1afc190

--------------------------------
Class: CrowPostProcessBloodComponent.ActorComponent.Object
	MaterialParameterCollectionInstance* ParamInstance;//[Offset: 0xb0, Size: 1]
	FName BloodParam;//[Offset: 0xb8, Size: 1]
	FName BloodScreenParam;//[Offset: 0xc0, Size: 1]
	CurveFloat* CurveAppearBlood;//[Offset: 0xc8, Size: 1]
	CurveFloat* CurveDisappearBlood;//[Offset: 0xd0, Size: 1]
	CurveFloat* CurveAppearBloodScreen;//[Offset: 0xd8, Size: 1]
	CurveFloat* CurveDisappearBloodScreen;//[Offset: 0xe0, Size: 1]
	FName ZombieCurveParamX;//[Offset: 0xe8, Size: 1]
	FName ZombieCurveParamY;//[Offset: 0xf0, Size: 1]
	FName ZombieCurveParamZ;//[Offset: 0xf8, Size: 1]
	Vector DefaultZombieParamValue;//[Offset: 0x100, Size: 1]
	CurveVector* CurveZombieBloodBlur;//[Offset: 0x110, Size: 1]
	CrowBloodPostProcessEffect BloodMaterials;//[Offset: 0x118, Size: 1]
	float BloodValue;//[Offset: 0x170, Size: 1]
	float BloodScreenValue;//[Offset: 0x174, Size: 1]
	Vector ZombieCurveValue;//[Offset: 0x178, Size: 1]
	float LastHPRate;//[Offset: 0x184, Size: 1]
	bool bDirtyAnyValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	bool bHuman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]
	<enum,CrowBloodAnim> MapBloodAnim;//[Offset: 0x190, Size: 1]
	CrowLocalPostProcessComponent* CachedPostProcessComp;//[Offset: 0x1e0, Size: 1]
	void UpdateParameter();// 0x1af8d30
	void Update(float DeltaTime);// 0x1af8cb0
	void OnHPChanged(float HPRate);// 0x1af7930
	void OnChangedHumanState_new(bool InIsHuman);// 0x1af77e0
	void OnChangedHumanState(bool InIsHuman, PostProcessVolume*[] InPPVArray);// 0x1af76b0
	void Init(CrowLocalPostProcessComponent* InPostProcessComp, MaterialParameterCollectionInstance* InParamInstance);// 0x1af7380
	void ClearEffect();// 0x1af7020
	int AddWeightedBlendable(Object* InObject);// 0x1af6f80

--------------------------------
Class: CrowBloodPostProcessEffect
	MaterialInterface* HumanBlood;//[Offset: 0x0, Size: 1]
	MaterialInterface* ZombieBlood;//[Offset: 0x8, Size: 1]
	MaterialInterface* ZombieBlur;//[Offset: 0x10, Size: 1]
	int CachedHumanBloodIdx;//[Offset: 0x18, Size: 1]
	int CachedZombieBloodIdx;//[Offset: 0x1c, Size: 1]
	int CachedZombieBlurIdx;//[Offset: 0x20, Size: 1]
	FString CachedHumanBloodName;//[Offset: 0x28, Size: 1]
	FString CachedZombieBloodName;//[Offset: 0x38, Size: 1]
	FString CachedZombieBlurName;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowBloodAnim
	CurveBase* Curve;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowPostProcessQualitySetting
	MaterialInterface*[] MaterialInterfaces;//[Offset: 0x0, Size: 1]
	<FString> MaterialNames;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowUnderWaterComponent.ActorComponent.Object
	MaterialParameterCollectionInstance* ParamInstance;//[Offset: 0xc0, Size: 1]
	FName WaterPlaneZParam;//[Offset: 0xc8, Size: 1]
	<FName,MaterialInterface*> UnderWaterMaterialByTag;//[Offset: 0xd0, Size: 1]
	<FString,int> UnderWaterRef;//[Offset: 0x120, Size: 1]
	bool bUnderWaterEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	CrowLocalPostProcessComponent* CachedPostProcessComp;//[Offset: 0x174, Size: 1]
	bool UpdateWeight(FString StrKey, float InWeight);// 0x1b4bae0
	bool UpdateUnderWaterState(out const Vector ViewLocation, out const Vector ViewDirection);// 0x1b4b9e0
	void Init(CrowLocalPostProcessComponent* InPostProcessComp, MaterialParameterCollectionInstance* InParamInstance);// 0x1b4b910
	void HideAllUnderwater();// 0x1b4b8f0
	void ClientTick(float DeltaSeconds, out const Vector ViewLocation, out const Vector ViewDirection);// 0x1b4b7c0
	void AddWeightedBlendable(FString StrKey, Object* InObject);// 0x1b4b6e0

--------------------------------
Class: CrowShellShockComponent.ActorComponent.Object
	MaterialParameterCollection* ParamCollection;//[Offset: 0xb0, Size: 1]
	FName CurveParamX;//[Offset: 0xb8, Size: 1]
	FName CurveParamY;//[Offset: 0xc0, Size: 1]
	FName CurveParamZ;//[Offset: 0xc8, Size: 1]
	CurveVector* CurveShellSockParam;//[Offset: 0xd0, Size: 1]
	MaterialInterface* ShellShockMaterial;//[Offset: 0xd8, Size: 1]
	CrowLocalPostProcessComponent* CachedPostProcessComp;//[Offset: 0xe0, Size: 1]
	MaterialParameterCollectionInstance* ParamInstance;//[Offset: 0xe8, Size: 1]
	bool bPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	float ElapsedTime;//[Offset: 0xf4, Size: 1]
	float fPower;//[Offset: 0xf8, Size: 1]
	int ShellShockMaterialIndex;//[Offset: 0xfc, Size: 1]
	float CurveParamMaxTime;//[Offset: 0x100, Size: 1]
	void Stop();// 0x1b2b620
	void Play(float InPower);// 0x1b2b020
	void Init(CrowLocalPostProcessComponent* InPostProcessComp);// 0x1b2a2c0
	void ClientTick(float DeltaSeconds);// 0x1b2a220

--------------------------------
Class: CrowMergedSkeletalMeshCacheActor.Actor.Object
	SoftObjectPath MergedSkinMaterial;//[Offset: 0x228, Size: 1]
	SoftObjectPath MergedClothMaterial;//[Offset: 0x240, Size: 1]
	SoftObjectPath[] MergedWeaponMaterials;//[Offset: 0x258, Size: 1]
	PhysicsAsset* CharacterPhysicsAsset;//[Offset: 0x268, Size: 1]
	uint32 DefaultSkydivingBackpackIndex;//[Offset: 0x270, Size: 1]
	<int,CrowMergedMeshShareData> MapMergedMeshShareData;//[Offset: 0x278, Size: 1]
	CrowLibraryMergeSKCTask*[] QueuedAsyncTaskArray;//[Offset: 0x2c8, Size: 1]
	<FString,CrowMergedMaterialParamInfo> CachedMaterialParams;//[Offset: 0x2d8, Size: 1]
	<FString,CrowMergedMaterialParamInfo> CachedWeaponMaterialParams;//[Offset: 0x328, Size: 1]
	SoftObjectPath DummyPath;//[Offset: 0x378, Size: 1]
	void StopReplay();// 0x1ac9940
	void RegistBroadcastList(int InCacheIndex, Actor* InActor);// 0x1ac9870
	FName MakeWeaponVectorParamName(FName InParamName, int InMaskIndex);// 0x1ac92b0
	FName MakeWeaponTexture2DParamName(FName InParamName, int InMaskIndex);// 0x1ac91e0
	FName MakeWeaponScalarParamName(FName InParamName, int InMaskIndex);// 0x1ac9110
	bool IsRegistedIndex(int InCacheIndex);// 0x1ac9070
	bool GetWeaponMaterialParameterInfo(FString InMaterialName, out CrowMergedMaterialParamInfo OutParamInfo);// 0x1ac8d40
	SoftObjectPath GetMergedWeaponMaterial(int Index);// 0x1ac8c90
	bool GetMaterialParameterInfo(FString InMaterialName, out CrowMergedMaterialParamInfo OutParamInfo);// 0x1ac8960
	<int,CrowMergedMeshShareData> GetMapMergedMeshShareData();// 0x1ac88c0
	SkeletalMesh* FindCachedSkeletalMesh(int InCacheIndex);// 0x1ac8820
	void CollectWeaponMaterialParameters(out const MaterialInterface*[] InMaterialsToMerge);// 0x1ac8770
	void CollectMaterialParameters(out const MaterialInterface*[] InMaterialsToMerge);// 0x1ac86c0
	MaterialInstanceDynamic* CloneMaterialInstanceDynamic(const MaterialInstanceDynamic* InSrc);// 0x1ac8620
	void CacheMergedWeaponSkeletalMesh(int InCacheIndex, SkeletalMesh* InMergedMesh);// 0x1ac8550
	void CacheMergedSkeletalMesh(int InCacheIndex, SkeletalMesh* InMergedMesh);// 0x1ac8550
	void BroadcastWeaponCacheComplete(int InCacheIndex, bool InTask);// 0x1ac8480
	void BroadcastCacheComplete(int InCacheIndex, bool InTask);// 0x1ac83b0

--------------------------------
Class: CrowMergedMaterialParamInfo
	<FName,float> ScalarParams;//[Offset: 0x0, Size: 1]
	<FName,Texture*> TextureParams;//[Offset: 0x50, Size: 1]
	<FName,LinearColor> VectorParams;//[Offset: 0xa0, Size: 1]
	bool SkipMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]

--------------------------------
Class: CrowMergedMeshShareData
	SkeletalMesh* CachedSkeletalMesh;//[Offset: 0x0, Size: 1]
	CrowCharacterBase*[] Ptrs;//[Offset: 0x8, Size: 1]
	CrowWeaponBase*[] WeaponPtrs;//[Offset: 0x18, Size: 1]
	bool bCachedComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowLibraryMergeSKCTask.CrowThreadWorkerTask.Object
	CrowSkeletalMeshMerge* SkeletalMeshMerge;//[Offset: 0x30, Size: 1]
	SkeletalMeshMergeParams MergeParams;//[Offset: 0x38, Size: 1]
	SkeletalMesh* PoseOverride;//[Offset: 0xa8, Size: 1]
	int CacheMergedMeshIndex;//[Offset: 0xb0, Size: 1]
	World* World;//[Offset: 0xb8, Size: 1]
	CrowMergedSkeletalMeshCacheActor* CacheActor;//[Offset: 0xc0, Size: 1]
	CrowSkeletalMeshMergeMaterials[] MaterialsToMerge;//[Offset: 0xc8, Size: 1]
	SkeletalMesh* GeneratedSkeletalMesh;//[Offset: 0xe8, Size: 1]
	SkeletalMesh*[] MeshesToMergeCopy;//[Offset: 0xf0, Size: 1]

--------------------------------
Class: CrowThreadWorkerTask.Object

--------------------------------
Class: CrowSkeletalMeshMerge.Object
	Transform TestTM;//[Offset: 0x70, Size: 1]
	SkeletalMesh* MergeMesh;//[Offset: 0xa0, Size: 1]
	SkeletalMesh*[] SrcMeshList;//[Offset: 0xa8, Size: 1]
	Transform[] SrcMeshTransformList;//[Offset: 0xb8, Size: 1]
	int[] AttachBoneIndexList;//[Offset: 0xc8, Size: 1]
	CrowSkeletalMeshMergeMaterials[] MaterialsToMerge;//[Offset: 0xd8, Size: 1]
	int[] StripTopLODsPerMesh;//[Offset: 0xf0, Size: 1]
	int[] MaterialIds;//[Offset: 0x248, Size: 1]

--------------------------------
Class: CrowSkeletalMeshMergeMaterials
	FString MeshName;//[Offset: 0x0, Size: 1]
	bool bUseSectionIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	<FString> MaterialNames;//[Offset: 0x18, Size: 1]
	MaterialInterface*[] Materials;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SkeletalMeshMergeParams
	SkelMeshMergeSectionMapping_BP[] MeshSectionMappings;//[Offset: 0x0, Size: 1]
	SkelMeshMergeUVTransformMapping[] UVTransformsPerMesh;//[Offset: 0x10, Size: 1]
	SkeletalMesh*[] MeshesToMerge;//[Offset: 0x20, Size: 1]
	int StripTopLODS;//[Offset: 0x30, Size: 1]
	bool bNeedsCpuAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bSkeletonBefore;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	Skeleton* Skeleton;//[Offset: 0x38, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x40, Size: 1]
	SkeletalMesh* ReferenceSkeletalMesh;//[Offset: 0x48, Size: 1]
	CrowCharacterBase* SourceCharacter;//[Offset: 0x50, Size: 1]
	CrowPlayerStateBase* SourcePlayerState;//[Offset: 0x58, Size: 1]

--------------------------------
Class: SkelMeshMergeSectionMapping_BP
	int[] SectionIDs;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkelMeshMergeUVTransformMapping
	SkelMeshMergeUVTransform[] UVTransformsPerMesh;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkelMeshMergeUVTransform
	Transform[] UVTransforms;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowSurfaceEffectKeeperActor.Actor.Object
	FString[] PreloadAmmoEffectKeys;//[Offset: 0x228, Size: 1]
	SoftObjectPath[] PhysicalMaterialPath;//[Offset: 0x238, Size: 1]
	SoftObjectPath[] PhysicalMaterialsToLoad;//[Offset: 0x248, Size: 1]
	PhysicalMaterial*[] PhysicalMaterialArray;//[Offset: 0x258, Size: 1]
	<CrowWeaponBase*,FString> WeaponAmmoMap;//[Offset: 0x268, Size: 1]
	<FString,CrowSurfaceEffectReferences> AmmoReferenceMap;//[Offset: 0x2b8, Size: 1]
	FString[] LoadAmmoEffectQueue;//[Offset: 0x308, Size: 1]

--------------------------------
Class: CrowSurfaceEffectReferences
	<SoftObjectPath> AssetsToLoad;//[Offset: 0x10, Size: 1]
	<SoftObjectPath,Object*> AssetMap;//[Offset: 0x60, Size: 1]

--------------------------------
Class: CrowObjectPoolActor.Actor.Object
	<FString,CrowPooledMeshComponentItem> PooledMeshComponentItems;//[Offset: 0x220, Size: 1]
	CrowAllocatedSKC[] AllocatedMeshComponentArray;//[Offset: 0x270, Size: 1]
	<FName,CrowPooledComponentContainer> PooledComponentContainers;//[Offset: 0x288, Size: 1]
	<FName,CrowPooledObjectContainer> PooledObjectContainers;//[Offset: 0x2e0, Size: 1]
	<uint32,FName> AllocatedObjectContainerKey;//[Offset: 0x330, Size: 1]

--------------------------------
Class: CrowPooledMeshComponentItem
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 1]
	MeshComponent*[] PooledMeshComponentArray;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowAllocatedSKC
	FString PooledItemKey;//[Offset: 0x0, Size: 1]
	SoftObjectPath MeshPath;//[Offset: 0x10, Size: 1]
	MeshComponent* CachedComponent;//[Offset: 0x28, Size: 1]
	SceneComponent* AttachedToComponent;//[Offset: 0x30, Size: 1]
	Actor* AttachedActor;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowPooledComponentContainer
	ActorComponent*[] PooledComponentArray;//[Offset: 0x8, Size: 1]
	CrowAllocatedComponentItem[] AllocatedArray;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowAllocatedComponentItem
	ActorComponent* AllocatedComponent;//[Offset: 0x0, Size: 1]
	Object* ReferenceObject;//[Offset: 0x8, Size: 1]
	FName ContainerKey;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowPooledObjectContainer
	Object*[] PooledObjectArray;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowQualitySwitchActor.Actor.Object
	CrowEnvSettings EnvSettings;//[Offset: 0x220, Size: 1]
	<enum,CrowQualitySwitchSetting> QualitySwitchSettings;//[Offset: 0x330, Size: 1]
	enum CurrentQuality;//[Offset: 0x380, Size: 1]
	<enum,FName> OutlinerNames;//[Offset: 0x388, Size: 1]
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	int8 LastViewMode;//[Offset: 0x3d9, Size: 1]
	enum CurrentOutlinerMode;//[Offset: 0x3da, Size: 1]
	MaterialInstanceDynamic* CurrentOutliner;//[Offset: 0x3dc, Size: 1]
	void UpdateOutlineParam();// 0x1b04a80
	void UpdateMotionBlur();// 0x1b04a60
	void ShowEnvObjects();// 0x1b04a40
	void SetEnableMotionBlur(bool bEnable);// 0x1b049b0
	void HideEnvObjects();// 0x1b04580
	void ChangeQuality(enum NewQuality);// 0x1b044a0
	void ChangeOutliner(enum NewOutliner);// 0x1b04420
	void ChangeOutlineColor(enum OutlineIndex, Color NewColor);// 0x1b04360
	void ChangeLightQuality(enum NewQuality);// 0x1b042e0
	void ChangeCategoryQuality(enum NewQuality, enum InCategory);// 0x1b04210
	void A_UpdateQualitySwitch();// 0xca8430

--------------------------------
Class: CrowEnvSettings
	PostProcessVolume* PostProcessVolume;//[Offset: 0x0, Size: 1]
	SkyLightComponent* SkyLightComponent;//[Offset: 0x8, Size: 1]
	DirectionalLightComponent* DirectionalLightComponent;//[Offset: 0x10, Size: 1]
	VolumetricCloudComponent* VolumetricCloudComponent;//[Offset: 0x18, Size: 1]
	<enum,CrowSkyLightProperty> SkyLightSettings;//[Offset: 0x20, Size: 1]
	<enum,CrowDirectionalLightProperty> DirectionalLightSettings;//[Offset: 0x70, Size: 1]
	<enum,CrowVoluetricCloudProperty> VoluetricCloudSettings;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	byte SourceType;//[Offset: 0x229, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x230, Size: 1]
	float SourceCubemapAngle;//[Offset: 0x238, Size: 1]
	int CubemapResolution;//[Offset: 0x23c, Size: 1]
	float SkyDistanceThreshold;//[Offset: 0x240, Size: 1]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x248, Size: 1]
	float OcclusionMaxDistance;//[Offset: 0x258, Size: 1]
	float Contrast;//[Offset: 0x25c, Size: 1]
	float OcclusionExponent;//[Offset: 0x260, Size: 1]
	float MinOcclusion;//[Offset: 0x264, Size: 1]
	Color OcclusionTint;//[Offset: 0x268, Size: 1]
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 1]
	float CloudAmbientOcclusionStrength;//[Offset: 0x270, Size: 1]
	float CloudAmbientOcclusionExtent;//[Offset: 0x274, Size: 1]
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x278, Size: 1]
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x27c, Size: 1]
	byte OcclusionCombineMode;//[Offset: 0x280, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x328, Size: 1]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x3c77ca0
	void SetOcclusionTint(out const Color InTint);// 0x3c778e0
	void SetOcclusionExponent(float InOcclusionExponent);// 0x3c77860
	void SetOcclusionContrast(float InOcclusionContrast);// 0x3c777e0
	void SetMinOcclusion(float InMinOcclusion);// 0x3c776e0
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x3c773b0
	void SetLightColor(LinearColor NewLightColor);// 0x3c77320
	void SetIntensity(float NewIntensity);// 0x3c772a0
	void SetIndirectLightingIntensity(float NewIntensity);// 0x3c77220
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x3c77100
	void SetCubemap(TextureCube* NewCubemap);// 0x3c77070
	void RecaptureSky();// 0x3c76f50

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x328, Size: 1]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x330, Size: 1]
	float OcclusionDepthRange;//[Offset: 0x334, Size: 1]
	Vector LightShaftOverrideDirection;//[Offset: 0x338, Size: 1]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x344, Size: 1]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x348, Size: 1]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x34c, Size: 1]
	int DynamicShadowCascades;//[Offset: 0x350, Size: 1]
	float CascadeDistributionExponent;//[Offset: 0x354, Size: 1]
	float CascadeTransitionFraction;//[Offset: 0x358, Size: 1]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x35c, Size: 1]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x364, Size: 1]
	float FarShadowDistance;//[Offset: 0x368, Size: 1]
	float DistanceFieldShadowDistance;//[Offset: 0x36c, Size: 1]
	float LightSourceAngle;//[Offset: 0x370, Size: 1]
	float LightSourceSoftAngle;//[Offset: 0x374, Size: 1]
	float ShadowSourceAngleFactor;//[Offset: 0x378, Size: 1]
	float TraceDistance;//[Offset: 0x37c, Size: 1]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x384, Size: 1]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x388, Size: 1]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 1]
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x398, Size: 1]
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x398, Size: 1]
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x398, Size: 1]
	float CloudShadowStrength;//[Offset: 0x39c, Size: 1]
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x3a0, Size: 1]
	float CloudShadowOnSurfaceStrength;//[Offset: 0x3a4, Size: 1]
	float CloudShadowDepthBias;//[Offset: 0x3a8, Size: 1]
	float CloudShadowExtent;//[Offset: 0x3ac, Size: 1]
	float CloudShadowMapResolutionScale;//[Offset: 0x3b0, Size: 1]
	float CloudShadowRaySampleCountScale;//[Offset: 0x3b4, Size: 1]
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x3b8, Size: 1]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3c8, Size: 1]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 1]
	Color ModulatedShadowColor;//[Offset: 0x3dc, Size: 1]
	float ShadowAmount;//[Offset: 0x3e0, Size: 1]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x3b6dd50
	void SetShadowAmount(float NewValue);// 0x3b6dcd0
	void SetOcclusionMaskDarkness(float NewValue);// 0x3b6dc50
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x3b6dbc0
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x3b6d8c0
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x3b6d840
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x3b6d7c0
	void SetDynamicShadowCascades(int NewValue);// 0x3b6d730
	void SetCascadeTransitionFraction(float NewValue);// 0x3b6d590
	void SetCascadeDistributionExponent(float NewValue);// 0x3b6d510
	void SetAtmosphereSunLightIndex(int NewValue);// 0x3b6d480
	void SetAtmosphereSunLight(bool bNewValue);// 0x3b6d3f0

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 1]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 1]
	float ShadowExponent;//[Offset: 0x4, Size: 1]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object
	float LayerBottomAltitude;//[Offset: 0x1f8, Size: 1]
	float LayerHeight;//[Offset: 0x1fc, Size: 1]
	float TracingStartMaxDistance;//[Offset: 0x200, Size: 1]
	float TracingMaxDistance;//[Offset: 0x204, Size: 1]
	float PlanetRadius;//[Offset: 0x208, Size: 1]
	Color GroundAlbedo;//[Offset: 0x20c, Size: 1]
	MaterialInterface* Material;//[Offset: 0x210, Size: 1]
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	float SkyLightCloudBottomOcclusion;//[Offset: 0x21c, Size: 1]
	float ViewSampleCountScale;//[Offset: 0x220, Size: 1]
	float ReflectionSampleCountScale;//[Offset: 0x224, Size: 1]
	float ShadowViewSampleCountScale;//[Offset: 0x228, Size: 1]
	float ShadowReflectionSampleCountScale;//[Offset: 0x22c, Size: 1]
	float ShadowTracingDistance;//[Offset: 0x230, Size: 1]
	float StopTracingTransmittanceThreshold;//[Offset: 0x234, Size: 1]
	void SetViewSampleCountScale(float NewValue);// 0x3c9c680
	void SetTracingStartMaxDistance(float NewValue);// 0x3c9c600
	void SetTracingMaxDistance(float NewValue);// 0x3c76ff0
	void SetStopTracingTransmittanceThreshold(float NewValue);// 0x3c9c500
	void SetSkyLightCloudBottomOcclusion(float NewValue);// 0x3c9c400
	void SetShadowViewSampleCountScale(float NewValue);// 0x3c77660
	void SetShadowTracingDistance(float NewValue);// 0x3c9c380
	void SetShadowReflectionSampleCountScale(float NewValue);// 0x3c9c300
	void SetReflectionSampleCountScale(float NewValue);// 0x3c77a80
	void SetPlanetRadius(float NewValue);// 0x3c77760
	void SetMaterial(MaterialInterface* NewValue);// 0x3c9c070
	void SetLayerHeight(float NewValue);// 0x3c9bff0
	void SetLayerBottomAltitude(float NewValue);// 0x3c9bf70
	void SetGroundAlbedo(Color NewValue);// 0x3c9bef0
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);// 0x3c9c780

--------------------------------
Class: CrowSkyLightProperty.CrowLightPropertyBase
	float OcclusionMaxDistance;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowLightPropertyBase

--------------------------------
Class: CrowDirectionalLightProperty.CrowLightPropertyBase

--------------------------------
Class: CrowVoluetricCloudProperty
	float TracingStartMaxDistance;//[Offset: 0x0, Size: 1]
	float TracingMaxDistance;//[Offset: 0x4, Size: 1]
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float ViewSampleCountScale;//[Offset: 0xc, Size: 1]
	float ReflectionSampleCountScale;//[Offset: 0x10, Size: 1]
	float ShadowViewSampleCountScale;//[Offset: 0x14, Size: 1]
	float ShadowReflectionSampleCountScale;//[Offset: 0x18, Size: 1]
	float ShadowTracingDistance;//[Offset: 0x1c, Size: 1]
	float StopTracingTransmittanceThreshold;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowQualitySwitchSetting
	enum Quality;//[Offset: 0x0, Size: 1]
	<enum,CrowCategoryQualitySetting> CategorySettings;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowCategoryQualitySetting
	Actor*[] Actors;//[Offset: 0x0, Size: 1]
	FString[] Commands;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowUserInfoBase
	uint64 ServerKey;//[Offset: 0x0, Size: 1]
	FString AuthToken;//[Offset: 0x8, Size: 1]
	FString NickName;//[Offset: 0x18, Size: 1]
	uint32 Level;//[Offset: 0x28, Size: 1]
	uint64 Exp;//[Offset: 0x30, Size: 1]
	uint64 BattlePassExp;//[Offset: 0x38, Size: 1]
	uint32 ClassLevel;//[Offset: 0x40, Size: 1]
	uint64 ClassExp;//[Offset: 0x48, Size: 1]
	uint64 ClassRank;//[Offset: 0x50, Size: 1]
	uint64 ClassBeforeLevel;//[Offset: 0x58, Size: 1]
	uint64 ClassBeforeRank;//[Offset: 0x60, Size: 1]
	uint64 CharacterInvenNo;//[Offset: 0x68, Size: 1]
	byte Team;//[Offset: 0x70, Size: 1]
	CrowItemData[] InvenItemArray;//[Offset: 0x78, Size: 1]
	CrowWeaponLevel[] WeaponLevelArray;//[Offset: 0x88, Size: 1]
	CrowWeaponData[] UnlockedWeaponArray;//[Offset: 0x98, Size: 1]
	bool bGameOperator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bNexonPCRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	int[] UnlockedEyeColorArray;//[Offset: 0xb0, Size: 1]
	CrowWeaponAccData[] UnlockWeaponEquipAccArray;//[Offset: 0xc0, Size: 1]
	CrowItemData[] ItemEquipmentArray;//[Offset: 0xd0, Size: 1]
	CrowSquadWeapon[] ProvidedSquadWeaponArray;//[Offset: 0xe0, Size: 1]
	CrowUserCharacterInfo CharacterInfo;//[Offset: 0xf0, Size: 1]
	FString SquadKey;//[Offset: 0x128, Size: 1]
	uint64 SquadOrder;//[Offset: 0x138, Size: 1]
	uint64 Coin;//[Offset: 0x140, Size: 1]
	FString SavaedUserOptions;//[Offset: 0x148, Size: 1]
	uint32[] UnlockedWeaponSkinArray;//[Offset: 0x158, Size: 1]
	uint32[] UnlockesWeaponStickerArray;//[Offset: 0x168, Size: 1]
	int[] UnlockesSprayArray;//[Offset: 0x178, Size: 1]
	int[] UnlockedTattooArray;//[Offset: 0x188, Size: 1]
	<int,int> SpraySlotArray;//[Offset: 0x198, Size: 1]
	<int,CrowWeaponLoadoutPreset> WeaponLoadoutPresetMap;//[Offset: 0x1e8, Size: 1]
	<uint32,uint32> WeaponSkinApplyInfo;//[Offset: 0x238, Size: 1]
	<byte,CrowOutfitPreset> CharacterOutfitPresetMap;//[Offset: 0x288, Size: 1]
	uint32[] EmotionIndexs;//[Offset: 0x2d8, Size: 1]
	uint32[] EmotionIndexsInSlot;//[Offset: 0x2e8, Size: 1]
	uint32[] ResultMVPIndexs;//[Offset: 0x2f8, Size: 1]
	uint32 ResultMVPIndex;//[Offset: 0x308, Size: 1]
	CrowWeaponLoadoutPreset SquadWeaponLoadoutPreset;//[Offset: 0x310, Size: 1]
	int SelectedLoadoutPreset;//[Offset: 0x388, Size: 1]
	byte SelectedOutfitPreset;//[Offset: 0x38c, Size: 1]
	uint64 RCPPoint;//[Offset: 0x390, Size: 1]
	uint64 GPoint;//[Offset: 0x398, Size: 1]
	CrowNewItem[] NewItemArray;//[Offset: 0x3a0, Size: 1]
	CrowNewItem[] NewItemShopInven;//[Offset: 0x3b0, Size: 1]
	uint32[] VehicleSkinArray;//[Offset: 0x3c0, Size: 1]
	<uint32,uint32> VehicleSkinEquipMap;//[Offset: 0x3d0, Size: 1]
	CrowBuffData[] ActivatedBuffArray;//[Offset: 0x420, Size: 1]
	CrowBuffData[] EventBuffArray;//[Offset: 0x430, Size: 1]
	<byte,byte> RandomBoxBuyCount;//[Offset: 0x440, Size: 1]
	uint32[] UnlockedParachuteSkinArray;//[Offset: 0x490, Size: 1]
	uint32 ParachuteSkinIndex;//[Offset: 0x4a0, Size: 1]
	int[] PurchasedEventItem;//[Offset: 0x4a8, Size: 1]
	<uint64,CrowPartyInvitation> SendInvatePartyUserMap;//[Offset: 0x4b8, Size: 1]
	<uint64,CrowPartyInvitation> ReceivedInvatePartyUserMap;//[Offset: 0x508, Size: 1]
	<uint64,CrowGameFriendInfo> FollowFriendInfoMap;//[Offset: 0x558, Size: 1]
	<uint64,CrowGameFriendInfo> FriendInfoMap;//[Offset: 0x5a8, Size: 1]
	<uint64,CrowGameFriendInfo> RequestFriendInfoMap;//[Offset: 0x5f8, Size: 1]
	<uint64,CrowGameFriendInfo> SentFriendInfoMap;//[Offset: 0x648, Size: 1]
	<uint64,CrowRecentGamePlayUserInfo> RecentGamePlayUserInfoMap;//[Offset: 0x698, Size: 1]
	<uint64,CrowGameFriendInfo> SearchFriendInfoMap;//[Offset: 0x6e8, Size: 1]
	<uint64,CrowPartyMember> PartyMemberMap;//[Offset: 0x738, Size: 1]
	<byte,DailyBoardInfo> DailyBoardMap;//[Offset: 0x788, Size: 1]
	enum AllowFollow;//[Offset: 0x7d8, Size: 1]
	enum AllowParty;//[Offset: 0x7d9, Size: 1]
	byte EnterParty;//[Offset: 0x7da, Size: 1]
	CrowParty Party;//[Offset: 0x7e0, Size: 1]
	bool MatchExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	FString Ip;//[Offset: 0x828, Size: 1]
	uint32 Port;//[Offset: 0x838, Size: 1]
	enum MapMode;//[Offset: 0x83c, Size: 1]
	uint32 MapIndex;//[Offset: 0x840, Size: 1]
	enum CameraLimitMode;//[Offset: 0x844, Size: 1]
	enum ControlType;//[Offset: 0x845, Size: 1]
	int DailyMissionEndDate;//[Offset: 0x848, Size: 1]
	int WeeklyMissionEndDate;//[Offset: 0x84c, Size: 1]
	int SeasonMissionEndDate;//[Offset: 0x850, Size: 1]
	CrowMissionInfo[] MissionArray;//[Offset: 0x858, Size: 1]
	uint32[] RewardComplateMissions;//[Offset: 0x868, Size: 1]
	CrowItemData[] ShopInventoryItems;//[Offset: 0x878, Size: 1]
	CrowBattlePassSeasonData UserBattlePassSeasonData;//[Offset: 0x888, Size: 1]
	CrowServerRegionInfo ServerRegionInfo;//[Offset: 0x8b0, Size: 1]
	uint32[] PurchaseRecordsIndexes;//[Offset: 0x8e8, Size: 1]
	bool FirstLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]

--------------------------------
Class: CrowWeaponLevel
	uint32 SharedIndex;//[Offset: 0x0, Size: 1]
	uint32 Level;//[Offset: 0x4, Size: 1]
	uint32 Exp;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWeaponAccData
	uint32 ItemIndex;//[Offset: 0x0, Size: 1]
	uint32 SkinIndex;//[Offset: 0x4, Size: 1]
	uint32 CharmIndex;//[Offset: 0x8, Size: 1]
	int[] StickerList;//[Offset: 0x10, Size: 1]
	CrowWeaponPartsStickerData PartsDatas;//[Offset: 0x20, Size: 9]

--------------------------------
Class: CrowWeaponPartsStickerData
	int[] Stickers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowSquadWeapon
	byte WeaponSlotType;//[Offset: 0x0, Size: 1]
	uint32 WeaponIndex;//[Offset: 0x4, Size: 1]
	uint32 Count;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowUserCharacterInfo
	uint32 Index;//[Offset: 0x0, Size: 1]
	byte FaceIndex;//[Offset: 0x4, Size: 1]
	byte HairIndex;//[Offset: 0x5, Size: 1]
	byte HairColorIndex;//[Offset: 0x6, Size: 1]
	byte BeardIndex;//[Offset: 0x7, Size: 1]
	byte BeardColorIndex;//[Offset: 0x8, Size: 1]
	byte EyeColorIndex;//[Offset: 0x9, Size: 1]
	uint64 InvenNo;//[Offset: 0x10, Size: 1]
	CrowClothItemData[] ClothesList;//[Offset: 0x18, Size: 1]
	uint32[] TattooIndexList;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowWeaponLoadoutPreset
	byte LoadoutType;//[Offset: 0x0, Size: 1]
	byte PresetIndex;//[Offset: 0x1, Size: 1]
	FString LoadoutName;//[Offset: 0x8, Size: 1]
	int64 Expiration;//[Offset: 0x18, Size: 1]
	bool Loacked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	<byte,CrowWeaponSlot> WeaponEquipmentMap;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowOutfitPreset
	uint64 InvenNo;//[Offset: 0x0, Size: 1]
	byte OutfitIndex;//[Offset: 0x8, Size: 1]
	FString OutfitName;//[Offset: 0x10, Size: 1]
	int64 Expiration;//[Offset: 0x20, Size: 1]
	CrowClothItemData[] ClothesList;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowNewItem
	enum ItemType;//[Offset: 0x0, Size: 1]
	uint32 ItemIndex;//[Offset: 0x4, Size: 1]
	uint32 WeaponPartsIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowBuffData.CrowItemData
	FText Name;//[Offset: 0x30, Size: 1]
	uint32 GroupIndex;//[Offset: 0x48, Size: 1]
	FText Description;//[Offset: 0x50, Size: 1]
	FText BuffDescription;//[Offset: 0x68, Size: 1]
	PaperSprite* BuffIcon;//[Offset: 0x80, Size: 1]
	enum BuffEventType;//[Offset: 0x88, Size: 1]
	enum BuffType;//[Offset: 0x89, Size: 1]
	enum WeaponUIType;//[Offset: 0x8a, Size: 1]
	enum BuffValueType;//[Offset: 0x8b, Size: 1]
	uint32 BuffIntValue;//[Offset: 0x8c, Size: 1]
	float BuffFloatValue;//[Offset: 0x90, Size: 1]
	uint64 DurationTime;//[Offset: 0x98, Size: 1]
	uint64 StartTime;//[Offset: 0xa0, Size: 1]
	uint64 EndTime;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CrowPartyInvitation
	uint64 ServerKey;//[Offset: 0x0, Size: 1]
	FString NickName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowGameFriendInfo
	uint64 ServerKey;//[Offset: 0x0, Size: 1]
	uint64 SteamId;//[Offset: 0x8, Size: 1]
	uint32 Level;//[Offset: 0x10, Size: 1]
	uint32 ClassLevel;//[Offset: 0x14, Size: 1]
	uint32 ClassRank;//[Offset: 0x18, Size: 1]
	FString NickName;//[Offset: 0x20, Size: 1]
	enum State;//[Offset: 0x30, Size: 1]
	enum GameMode;//[Offset: 0x34, Size: 1]

--------------------------------
Class: CrowRecentGamePlayUserInfo.CrowGameFriendInfo
	int64 LastGamePlayTime;//[Offset: 0x38, Size: 1]
	int8 SquadMember;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowPartyMember
	uint64 CharacterInvenNo;//[Offset: 0x0, Size: 1]
	uint64 ServerKey;//[Offset: 0x8, Size: 1]
	uint64 SteamId;//[Offset: 0x10, Size: 1]
	uint64 OrderNo;//[Offset: 0x18, Size: 1]
	uint32 Level;//[Offset: 0x20, Size: 1]
	uint32 ClassLevel;//[Offset: 0x24, Size: 1]
	uint64 ClassRank;//[Offset: 0x28, Size: 1]
	FString NickName;//[Offset: 0x30, Size: 1]
	enum Scene;//[Offset: 0x40, Size: 1]
	enum State;//[Offset: 0x41, Size: 1]
	CrowItemData[] InvenItemArray;//[Offset: 0x48, Size: 1]
	<int,CrowWeaponData> WeaponEquipmentMap;//[Offset: 0x58, Size: 1]
	<int,CrowWeaponAccData> WeaponAccMap;//[Offset: 0xa8, Size: 1]
	CrowUserCharacterInfo CharacterInfo;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: DailyBoardInfo
	DateTime StartTime;//[Offset: 0x0, Size: 1]
	DateTime EndTime;//[Offset: 0x8, Size: 1]
	byte Today;//[Offset: 0x10, Size: 1]
	byte BoardType;//[Offset: 0x11, Size: 1]
	uint32[] Rewards;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DateTime

--------------------------------
Class: CrowParty
	FString UniqueId;//[Offset: 0x0, Size: 1]
	uint64 LeaderServerKey;//[Offset: 0x10, Size: 1]
	int MatchingElapsedTime;//[Offset: 0x18, Size: 1]
	int MatchingUserCount;//[Offset: 0x1c, Size: 1]
	int MaxGamePlayUserCount;//[Offset: 0x20, Size: 1]
	enum MatchingType;//[Offset: 0x24, Size: 1]
	CrowMatchInfo[] GameModeInfoArray;//[Offset: 0x28, Size: 1]
	enum PersonUIType;//[Offset: 0x38, Size: 1]
	enum SelectedPersonUIType;//[Offset: 0x39, Size: 1]
	enum ControlType;//[Offset: 0x3a, Size: 1]

--------------------------------
Class: CrowMatchInfo
	enum GameMode;//[Offset: 0x0, Size: 1]
	uint32[] GameMapIndexArray;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowBattlePassSeasonData
	int SeasonIndex;//[Offset: 0x0, Size: 1]
	bool bActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int64 BattlePassExp;//[Offset: 0x8, Size: 1]
	int BattlePassLevel;//[Offset: 0x10, Size: 1]
	int RewardedFreeItemLevel;//[Offset: 0x14, Size: 1]
	int RewardedPaidItemLevel;//[Offset: 0x18, Size: 1]
	int PrevRewardedFreeItemLevel;//[Offset: 0x1c, Size: 1]
	int PrevRewardedPaidItemLevel;//[Offset: 0x20, Size: 1]
	int BattlePassIndex;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CrowServerRegionInfo
	bool RandomRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString CurrentRegionName;//[Offset: 0x8, Size: 1]
	FString FastPingRegionName;//[Offset: 0x18, Size: 1]
	CrowServerRegion[] ServerRegionArray;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowServerRegion
	FString Name;//[Offset: 0x0, Size: 1]
	FString Ip;//[Offset: 0x10, Size: 1]
	int Port;//[Offset: 0x20, Size: 1]
	int Count;//[Offset: 0x24, Size: 1]
	int Ping;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowHUDWidgetFullScreenBottom.CrowHUDWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWeaponZoomWidget* WB_ScopeZoomWidget;//[Offset: 0x348, Size: 1]
	CrowDamageEffectWidget* WB_DamageEffect;//[Offset: 0x350, Size: 1]
	CrowDamageIndicatorWidget* WB_DamageIndicator;//[Offset: 0x358, Size: 1]
	CanvasPanel* CP_ZetaHUD;//[Offset: 0x360, Size: 1]
	CanvasPanel* CP_ZombieHUD;//[Offset: 0x368, Size: 1]
	CrowZombieHealWidget* WB_ZombieHeal;//[Offset: 0x370, Size: 1]

--------------------------------
Class: CrowWeaponZoomWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* AimAnimation;//[Offset: 0x348, Size: 1]
	WidgetAnimation* ShotAnimation;//[Offset: 0x350, Size: 1]
	Image* IMG_CrossHair;//[Offset: 0x358, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x360, Size: 1]
	CrowCharacterPawn* CharacterPawn;//[Offset: 0x368, Size: 1]

--------------------------------
Class: CrowDamageEffectWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Hit;//[Offset: 0x348, Size: 1]
	Image* IMG_Hit;//[Offset: 0x350, Size: 1]
	Image* IMG_Hit;//[Offset: 0x358, Size: 1]
	BackgroundBlur* BackgroundBlur;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniDamageHit;//[Offset: 0x368, Size: 1]
	CrowDamageEffect* DamageEffect;//[Offset: 0x370, Size: 1]
	void OnAniComplete();// 0x1a6ffc0

--------------------------------
Class: CrowDamageEffect.Object
	CrowDamageCameraShake[] CameraShake;//[Offset: 0x28, Size: 1]
	float SmallBloodPercent;//[Offset: 0x38, Size: 1]
	float LargeBloodPercent;//[Offset: 0x3c, Size: 1]
	CurveFloat* VignetteCurve;//[Offset: 0x40, Size: 1]
	class MatineeCameraShake* ContaminationAreaCameraShake;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowDamageCameraShake
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]
	class MatineeCameraShake* CameraShake;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowDamageIndicatorWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_IndicatorList;//[Offset: 0x348, Size: 1]
	class CrowDamageIndicatorItemWidget* IndicatorItem;//[Offset: 0x350, Size: 1]
	float DisplayTime;//[Offset: 0x358, Size: 1]
	float FadeOutTime;//[Offset: 0x35c, Size: 1]

--------------------------------
Class: CrowDamageIndicatorItemWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Root;//[Offset: 0x348, Size: 1]

--------------------------------
Class: CrowZombieHealWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* AniHeal;//[Offset: 0x348, Size: 1]

--------------------------------
Class: CrowHUDWidgetFullScreenTop.CrowHUDWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowDeathInfoWidget* WB_DeathInfo;//[Offset: 0x348, Size: 1]
	CrowWidgetDying* WB_2ndWindWidget;//[Offset: 0x350, Size: 1]
	CrowStartModeTitleWidget* WB_StartModTitle;//[Offset: 0x358, Size: 1]

--------------------------------
Class: CrowDeathInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Killer;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_RankIcon;//[Offset: 0x350, Size: 1]
	CrowWidgetImage* IMG_Weapon;//[Offset: 0x358, Size: 1]
	TextBlock* TB_WeaponName;//[Offset: 0x360, Size: 1]
	CanvasPanel* CP_Squad;//[Offset: 0x368, Size: 1]
	Image* IMG_SquadColor;//[Offset: 0x370, Size: 1]
	TextBlock* TB_SquadNum;//[Offset: 0x378, Size: 1]
	FText UnknownID;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowStartModeTitleWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_ModTitle;//[Offset: 0x348, Size: 1]
	float visibleSecond;//[Offset: 0x350, Size: 1]
	WidgetAnimation* Anim_Show;//[Offset: 0x358, Size: 1]
	WidgetAnimation* Anim_Fade;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowScopeEffect
	World* World;//[Offset: 0x0, Size: 1]
	CrowGameStateBase* GameState;//[Offset: 0x8, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x10, Size: 1]
	CrowPlayerStateBase* PlayerState;//[Offset: 0x18, Size: 1]
	<CrowCharacterPawn*,CrowScopeEffectInfo> EffectInfoMap;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowScopeEffectInfo
	ParticleSystemComponent* EFFECT;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowGameModeInfo
	enum SelectedGameMode;//[Offset: 0x0, Size: 1]
	CrowMatchInfo[] GameModeInfoArray;//[Offset: 0x8, Size: 1]
	CrowMatchInfo[] QuickMatchInfoArray;//[Offset: 0x18, Size: 1]
	CrowCustomMatchInfo[] CustomMatchInfoArray;//[Offset: 0x28, Size: 1]
	enum PersonUIType;//[Offset: 0x38, Size: 1]
	enum SelectedPersonUIType;//[Offset: 0x39, Size: 1]

--------------------------------
Class: CrowCustomMatchInfo
	enum GameMode;//[Offset: 0x0, Size: 1]
	uint32 MapIndex;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowOptimizationInfo

--------------------------------
Class: CrowLobbyNoticeInfo
	enum NoticeType;//[Offset: 0x0, Size: 1]
	uint64 Key;//[Offset: 0x8, Size: 1]
	int Value;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowAppSettingInfo
	enum LobbyFirstGameMode;//[Offset: 0x0, Size: 1]
	int QuickMatchFirstMap;//[Offset: 0x4, Size: 1]
	int TrainingFirstMap;//[Offset: 0x8, Size: 1]
	int BloodZoneFirstMap;//[Offset: 0xc, Size: 1]
	int SquadOperationFirstMap;//[Offset: 0x10, Size: 1]
	CrowMapConfigInfo[] MapConfigInfoArray;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowMapConfigInfo
	enum GameMode;//[Offset: 0x0, Size: 1]
	int MapIndex;//[Offset: 0x4, Size: 1]
	int MinPlayer;//[Offset: 0x8, Size: 1]
	int MaxPlayer;//[Offset: 0xc, Size: 1]
	bool UseQuickMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool FPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]

--------------------------------
Class: CrowDialogManager
	FName[] OncePlayList;//[Offset: 0x0, Size: 1]
	CrowDialogTooltip* WB_DialogToolTip;//[Offset: 0x10, Size: 1]
	CrowDialogTableRow[] ReservePlayList;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowDialogTooltip.CrowWidgetBase.UserWidget.Widget.Visual.Object
	RichTextBlock* TB_DialogSubTitle;//[Offset: 0x348, Size: 1]
	Image* IMG_SoundEffect;//[Offset: 0x350, Size: 1]
	Image* IMG_SoundBG;//[Offset: 0x358, Size: 1]
	CrowDialogImageGuide* WB_DialogInfo;//[Offset: 0x360, Size: 1]
	CanvasPanel* CP_Icon;//[Offset: 0x368, Size: 1]
	Image* IMG_Icon;//[Offset: 0x370, Size: 1]
	Image* IMG_Effect;//[Offset: 0x378, Size: 1]
	WidgetAnimation* AniToolTipStart;//[Offset: 0x380, Size: 1]
	WidgetAnimation* AniToolTipLoop;//[Offset: 0x388, Size: 1]
	WidgetAnimation* AniToolTipEnd;//[Offset: 0x390, Size: 1]
	CrowDialogTableRow[] TableArray;//[Offset: 0x398, Size: 1]
	FName CurrentRowName;//[Offset: 0x3a8, Size: 1]
	class CrowWidgetParticle* CaptureClass;//[Offset: 0x3b0, Size: 1]
	MaterialInterface* EffectMaterial;//[Offset: 0x3b8, Size: 1]
	CrowWidgetParticle* CaptureActor;//[Offset: 0x3c0, Size: 1]
	MaterialInstanceDynamic* DynamicMaterial;//[Offset: 0x3c8, Size: 1]
	void OnStartAniFinished();// 0x1a70630
	void OnEndAniFinished();// 0x1a70310
	void AkSoundCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x1a6fdc0

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowDialogImageGuide.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_GuideTitle;//[Offset: 0x348, Size: 1]
	Image* IMG_Guide;//[Offset: 0x350, Size: 1]
	TextBlock* TB_GuideDesc;//[Offset: 0x358, Size: 1]
	WidgetAnimation* AniShow;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniHide;//[Offset: 0x368, Size: 1]
	void OnEndAniFinished();// 0x1a290c0

--------------------------------
Class: CrowDialogTableRow.TableRowBase
	FText Message;//[Offset: 0x10, Size: 1]
	PaperSprite* Icon;//[Offset: 0x28, Size: 1]
	LinearColor IconColor;//[Offset: 0x30, Size: 1]
	bool GuideDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	FText GuideTitle;//[Offset: 0x48, Size: 1]
	SoftObjectPath GuideImage;//[Offset: 0x60, Size: 1]
	FText GuideDesc;//[Offset: 0x78, Size: 1]
	AkAudioEvent* Sound;//[Offset: 0x90, Size: 1]
	float DisplayTime;//[Offset: 0x98, Size: 1]
	float DelayTime;//[Offset: 0x9c, Size: 1]

--------------------------------
Class: CrowWidgetParticle.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x220, Size: 1]
	SceneComponent* ParticleLocation;//[Offset: 0x228, Size: 1]
	SceneCaptureComponent2D* SceneCapture;//[Offset: 0x230, Size: 1]
	ParticleSystem* Particle;//[Offset: 0x238, Size: 1]
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	ParticleSystemComponent* ParticleComponent;//[Offset: 0x248, Size: 1]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2b0, Size: 1]
	float FOVAngle;//[Offset: 0x2b4, Size: 1]
	float OrthoWidth;//[Offset: 0x2b8, Size: 1]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2c0, Size: 1]
	byte CompositeMode;//[Offset: 0x2c8, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x830, Size: 1]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x834, Size: 1]
	float CustomNearClippingPlane;//[Offset: 0x838, Size: 1]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x840, Size: 1]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x884, Size: 1]
	Vector ClipPlaneNormal;//[Offset: 0x890, Size: 1]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89c, Size: 1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89c, Size: 1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x3c64300
	void CaptureScene();// 0x3c61140
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x3c60fe0

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x1f8, Size: 1]
	byte CaptureSource;//[Offset: 0x1f9, Size: 1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x200, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x210, Size: 1]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x220, Size: 1]
	Actor*[] ShowOnlyActors;//[Offset: 0x230, Size: 1]
	float LODDistanceFactor;//[Offset: 0x240, Size: 1]
	float MaxViewDistanceOverride;//[Offset: 0x244, Size: 1]
	int CaptureSortPriority;//[Offset: 0x248, Size: 1]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x250, Size: 1]
	FString ProfilingEventName;//[Offset: 0x290, Size: 1]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x3c64c00
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x3c64b30
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x3c646d0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x3c644f0
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x3c64420
	void HideComponent(PrimitiveComponent* InComponent);// 0x3c61ba0
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x3c61ad0
	void ClearShowOnlyComponents();// 0x3c61180
	void ClearHiddenComponents();// 0x3c61160

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 1]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowConquestLineWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_BothArrow;//[Offset: 0x348, Size: 1]
	Image* IMG_Arrow;//[Offset: 0x350, Size: 1]
	Image* IMG_Dotline;//[Offset: 0x358, Size: 1]
	Image* IMG_Line;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniArrowClash;//[Offset: 0x368, Size: 1]

--------------------------------
Class: CrowConquestLineLink.Object
	class CrowConquestLineWidget* ConquestLineClass;//[Offset: 0x28, Size: 1]
	CanvasPanel* LinePanel;//[Offset: 0x30, Size: 1]
	CrowConquestIconAreaPair[] IconAreaArray;//[Offset: 0x38, Size: 1]
	CrowConquestLineInfo[] LineArray;//[Offset: 0x48, Size: 1]
	FString[] ConquestSequenceRedTeam;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CrowConquestIconAreaPair
	CrowWidgetBase* IconWidget;//[Offset: 0x0, Size: 1]
	CrowConquestArea* ConquestArea;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowConquestLineInfo
	CrowWidgetBase* IconWidgetFrom;//[Offset: 0x0, Size: 1]
	CrowWidgetBase* IconWidgetTo;//[Offset: 0x8, Size: 1]
	CrowConquestArea* AreaFrom;//[Offset: 0x10, Size: 1]
	CrowConquestArea* AreaTo;//[Offset: 0x18, Size: 1]
	CrowConquestLineWidget* LineWidget;//[Offset: 0x20, Size: 1]
	enum LineType;//[Offset: 0x28, Size: 1]
	bool FlipHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: CrowHealWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowHealGauge* WB_HealGauge;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_Message;//[Offset: 0x350, Size: 1]
	Image* IMG_Box1;//[Offset: 0x358, Size: 1]
	Image* IMG_Box2;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Message;//[Offset: 0x368, Size: 1]

--------------------------------
Class: CrowHitMarkerWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_HitMarker;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_HitMarker_Icon;//[Offset: 0x350, Size: 1]
	WidgetAnimation* AniHit;//[Offset: 0x358, Size: 1]
	WidgetAnimation* AniHitIcon;//[Offset: 0x360, Size: 1]
	void OnAniFinished();// 0x1a98260

--------------------------------
Class: CrowPlayerWeaponListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowPlayerWeaponListItemWidget* WB_WeaponList_Primary;//[Offset: 0x348, Size: 1]
	CrowPlayerWeaponListItemWidget* WB_WeaponList_Primary;//[Offset: 0x350, Size: 1]
	CrowPlayerWeaponListItemWidget* WB_WeaponList_Extra;//[Offset: 0x358, Size: 1]
	CrowPlayerWeaponListItemWidget* WB_WeaponList_Extra;//[Offset: 0x360, Size: 1]
	CrowPlayerWeaponListItemWidget* WB_Equipment_Melee;//[Offset: 0x368, Size: 1]
	CrowPlayerWeaponListItemWidget* WB_Equipment_Throwable;//[Offset: 0x370, Size: 1]
	CrowPlayerWeaponListItemWidget* WB_Equipment_HealKit;//[Offset: 0x378, Size: 1]
	WidgetSwitcher* WS_ExtraSlot;//[Offset: 0x380, Size: 1]
	CrowPlayerWeaponListItemWidget*[] WeaponList;//[Offset: 0x390, Size: 1]
	CrowPlayerWeaponListItemWidget*[] VehicleWeaponList;//[Offset: 0x3a0, Size: 1]
	CrowWeaponBase* CurrentWeapon;//[Offset: 0x3b0, Size: 1]
	CrowWeaponBase* PrevWeapon;//[Offset: 0x3b8, Size: 1]
	int CurrentWeaponIndex;//[Offset: 0x3c0, Size: 1]
	CrowWeaponBase*[] ClientWeaponList;//[Offset: 0x3c8, Size: 1]
	float DelayTime;//[Offset: 0x3d8, Size: 1]
	float CurrTime;//[Offset: 0x3dc, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	void FinishFadeOutAni();// 0x1af7360

--------------------------------
Class: CrowPlayerWeaponListItemWidget.CrowWeaponListItemBase.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_SlotNumber;//[Offset: 0x1c28, Size: 1]
	TextBlock* TB_WeaponName;//[Offset: 0x1c30, Size: 1]
	CanvasPanel* CP_WeaponPanel;//[Offset: 0x1c38, Size: 1]
	CanvasPanel* CP_Unequipped;//[Offset: 0x1c40, Size: 1]
	CanvasPanel* CP_Equip;//[Offset: 0x1c48, Size: 1]
	Image* IMG_NumBack;//[Offset: 0x1c50, Size: 1]
	Image* IMG_BackGround;//[Offset: 0x1c58, Size: 1]
	Image* IMG_Infinite;//[Offset: 0x1c60, Size: 1]
	Image* IMG_Cover_Empty;//[Offset: 0x1c68, Size: 1]
	CrowInputMappingWidget* RTB_Key;//[Offset: 0x1c70, Size: 1]
	ProgressBar* PB_WeaponGauge;//[Offset: 0x1c78, Size: 1]
	PaperSprite* HotKeySprite;//[Offset: 0x1c80, Size: 1]
	WidgetAnimation* ChoseAnimation;//[Offset: 0x1c88, Size: 1]
	LinearColor BlackColor;//[Offset: 0x1c90, Size: 1]
	LinearColor WhiteColor;//[Offset: 0x1ca0, Size: 1]
	CrowWeaponBase* CurrentWeapon;//[Offset: 0x1cb0, Size: 1]
	bool IsSelectWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb8, Size: 1]
	bool IsInfinteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb9, Size: 1]

--------------------------------
Class: CrowToolTipPingWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_OwnerName;//[Offset: 0x348, Size: 1]
	ScaleBox* SB_Cancel;//[Offset: 0x350, Size: 1]
	ScaleBox* SB_OK;//[Offset: 0x358, Size: 1]
	ScaleBox* SB_Icon;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowInteractionProgressCircleWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Gauge;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_Type;//[Offset: 0x350, Size: 1]
	Image* IMG_Key;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Progress;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Countdown_Timer;//[Offset: 0x368, Size: 1]
	MaterialInstanceDynamic* GaugeMaterial;//[Offset: 0x370, Size: 1]
	CrowWidgetCacheWidgetSwitcher WS_TypeCache;//[Offset: 0x378, Size: 1]

--------------------------------
Class: CrowZeroingWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Zeroing_Distance;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_HoldBreath;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_ZoomDistance;//[Offset: 0x358, Size: 1]

--------------------------------
Class: CrowInGameMissionAlarmWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* VB_List;//[Offset: 0x348, Size: 1]
	class CrowInGameMissionAlarmItem* ComplateItem;//[Offset: 0x350, Size: 1]
	class CrowInGameMissionAlarmItem* CountingItem;//[Offset: 0x358, Size: 1]

--------------------------------
Class: CrowInGameMissionAlarmItem.CrowWidgetBase.UserWidget.Widget.Visual.Object
	bool IsComplateWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	TextBlock* TB_MissionTitle;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Count;//[Offset: 0x358, Size: 1]
	TextBlock* TB_WidgetTitle;//[Offset: 0x360, Size: 1]
	float RemoveTime;//[Offset: 0x368, Size: 1]
	void RemoveAlarm();// 0x1a9cd90
	void FinishAnimation();// 0x1a9cad0

--------------------------------
Class: CrowFPSWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_FPS;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_Ping;//[Offset: 0x350, Size: 1]
	TextBlock* FPSText;//[Offset: 0x358, Size: 1]
	TextBlock* PingText;//[Offset: 0x360, Size: 1]
	void UpdateText();// 0x1a81ca0

--------------------------------
Class: CrowGuideMessageWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* AniHealAlarm;//[Offset: 0x348, Size: 1]
	void OnInputKeyModified();// 0x1a988a0

--------------------------------
Class: CrowHUDWeaponUnlockWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Level;//[Offset: 0x348, Size: 1]
	TextBlock* TB_LevelUpMsg;//[Offset: 0x350, Size: 1]
	TextBlock* TB_UnLockMsg;//[Offset: 0x358, Size: 1]
	Image* IMG_Icon;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniShowWeaponLevelUp;//[Offset: 0x368, Size: 1]
	WidgetAnimation* AniShowWeaponUnlock;//[Offset: 0x370, Size: 1]
	WidgetAnimation* AniHide;//[Offset: 0x378, Size: 1]
	void OnAnimationEventHideFinished();// 0x1a982a0
	void OnAnimationEventFinished();// 0x1a98280

--------------------------------
Class: CrowGasMaskStatusWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Vector2D position;//[Offset: 0x348, Size: 1]
	Vector2D Size;//[Offset: 0x350, Size: 1]
	LinearColor MaskOnColor;//[Offset: 0x358, Size: 1]
	LinearColor MaskOffColor;//[Offset: 0x368, Size: 1]
	CrowProgressBar* PB_FilterGauge;//[Offset: 0x378, Size: 1]
	TextBlock* TB_FilterCount;//[Offset: 0x380, Size: 1]
	Image* IMG_AlertEffect;//[Offset: 0x388, Size: 1]
	CanvasPanel* CP_Skill_Usable;//[Offset: 0x390, Size: 1]
	RichTextBlock* RTB_BindedKey;//[Offset: 0x398, Size: 1]
	Image* IMG_Icon;//[Offset: 0x3a0, Size: 1]
	WidgetAnimation* AniNoFilter;//[Offset: 0x3a8, Size: 1]

--------------------------------
Class: CrowParachuteStatusWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Root;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Count;//[Offset: 0x350, Size: 1]
	RichTextBlock* RTB_BindedKey;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_Status;//[Offset: 0x360, Size: 1]
	CrowWidgetCacheWidgetSwitcher WS_StatusCache;//[Offset: 0x368, Size: 1]
	uint32 PrevCount;//[Offset: 0x3a0, Size: 1]
	WidgetAnimation* UseParachuteAnimation;//[Offset: 0x3a8, Size: 1]
	void OnInputKeyModified();// 0x1ad8ac0

--------------------------------
Class: CrowSupplyGainMessage.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Weapon;//[Offset: 0x348, Size: 1]

--------------------------------
Class: CrowBuffWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_BuffSlot;//[Offset: 0x348, Size: 1]
	Image* IMG_Buff;//[Offset: 0x350, Size: 1]
	CrowButton* BT_BuffSlot;//[Offset: 0x358, Size: 1]
	Image* IMG_Buff;//[Offset: 0x360, Size: 1]
	CrowButton* BT_BuffSlot;//[Offset: 0x368, Size: 1]
	Image* IMG_Buff;//[Offset: 0x370, Size: 1]
	CrowButton* BT_BuffSlot;//[Offset: 0x378, Size: 1]
	Image* IMG_Buff;//[Offset: 0x380, Size: 1]
	CrowButton* BT_BuffSlot;//[Offset: 0x388, Size: 1]
	Image* IMG_Buff;//[Offset: 0x390, Size: 1]
	CrowButton* BT_BuffSlot;//[Offset: 0x398, Size: 1]
	Image* IMG_Buff;//[Offset: 0x3a0, Size: 1]
	CrowButton* BT_BuffSlot;//[Offset: 0x3a8, Size: 1]
	Image* IMG_Buff;//[Offset: 0x3b0, Size: 1]
	CrowButton* BT_BuffSlot;//[Offset: 0x3b8, Size: 1]
	Image* IMG_Buff;//[Offset: 0x3c0, Size: 1]
	CrowButton* BT_BuffSlot;//[Offset: 0x3c8, Size: 1]
	Image* IMG_Buff;//[Offset: 0x3d0, Size: 1]
	CanvasPanel* CP_Buff_ToolTip;//[Offset: 0x3d8, Size: 1]
	TextBlock* TB_Name;//[Offset: 0x3e0, Size: 1]
	TextBlock* TB_Desc;//[Offset: 0x3e8, Size: 1]
	TextBlock* TB_RemainTime;//[Offset: 0x3f0, Size: 1]
	CrowBuffIconInfo[] BuffIconInfoArray;//[Offset: 0x3f8, Size: 1]
	int HoverdBuffIndex;//[Offset: 0x408, Size: 1]
	bool IsIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	void OnUnHovered_BuffSlot();// 0x1a2f510
	void OnHovered_BuffSlot();// 0x1a2f4f0
	void OnHovered_BuffSlot();// 0x1a2f4d0
	void OnHovered_BuffSlot();// 0x1a2f4b0
	void OnHovered_BuffSlot();// 0x1a2f490
	void OnHovered_BuffSlot();// 0x1a2f470
	void OnHovered_BuffSlot();// 0x1a2f450
	void OnHovered_BuffSlot();// 0x1a2f430
	void OnHovered_BuffSlot();// 0x1a2f410
	void OnHovered_BuffSlot();// 0x1a2f3f0

--------------------------------
Class: CrowBuffIconInfo
	uint32 GroupIndex;//[Offset: 0x0, Size: 1]
	CrowButton* BuffButton;//[Offset: 0x8, Size: 1]
	Image* BuffImage;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowObjectiveWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Root;//[Offset: 0x348, Size: 1]
	CrowObjectiveTimeWidget* TimerWidget;//[Offset: 0x350, Size: 1]
	Image* IMG_MyTeamIcon;//[Offset: 0x358, Size: 1]
	TextBlock* TB_MyTeamCount;//[Offset: 0x360, Size: 1]
	CrowProgressBarInterp* PB_MyTeam;//[Offset: 0x368, Size: 1]
	Image* IMG_EnemyIcon;//[Offset: 0x370, Size: 1]
	TextBlock* TB_EnemyCount;//[Offset: 0x378, Size: 1]
	CrowProgressBarInterp* PB_Enemy;//[Offset: 0x380, Size: 1]
	TextBlock* TB_ObjectiveCount;//[Offset: 0x388, Size: 1]
	SlateBrush RedTeamIcon;//[Offset: 0x390, Size: 1]
	SlateBrush BlueTeamIcon;//[Offset: 0x418, Size: 1]

--------------------------------
Class: CrowObjectiveTimeWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Minute;//[Offset: 0x348, Size: 1]
	bool UseUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	SlateFontInfo UpdateFontInfo;//[Offset: 0x358, Size: 1]

--------------------------------
Class: CrowProgressBarInterp.UserWidget.Widget.Visual.Object
	float Percent;//[Offset: 0x260, Size: 1]
	float InterpolationTime;//[Offset: 0x264, Size: 1]
	enum BarFillType;//[Offset: 0x268, Size: 1]
	SlateBrush BackgroundBrush;//[Offset: 0x270, Size: 1]
	SlateBrush MiddleBrush;//[Offset: 0x2f8, Size: 1]
	SlateBrush ForegroundBrush;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_Root;//[Offset: 0x408, Size: 1]
	Image* IMG_BackGround;//[Offset: 0x410, Size: 1]
	Image* IMG_Middle;//[Offset: 0x418, Size: 1]
	Image* IMG_Foreground;//[Offset: 0x420, Size: 1]

--------------------------------
Class: CrowObjectiveBombMissionWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Texture2D* RedTeamBg;//[Offset: 0x348, Size: 1]
	Texture2D* BlueTeamBg;//[Offset: 0x350, Size: 1]
	TextBlock* TBRoundCount;//[Offset: 0x358, Size: 1]
	TextBlock* TBEnemyTeamRoundCount;//[Offset: 0x360, Size: 1]
	TextBlock* TBEnemyTeamPlayerCount;//[Offset: 0x368, Size: 1]
	TextBlock* TBMyTeamRoundCount;//[Offset: 0x370, Size: 1]
	TextBlock* TBMyTeamPlayerCount;//[Offset: 0x378, Size: 1]
	Image* IMGEnemyTeamIconAttacker;//[Offset: 0x380, Size: 1]
	Image* IMGEnemyTeamIconDefencer;//[Offset: 0x388, Size: 1]
	Image* IMGMyTeamIconAttacker;//[Offset: 0x390, Size: 1]
	Image* IMGMyTeamIconDefencer;//[Offset: 0x398, Size: 1]
	Image*[] IMGEnemyTeams;//[Offset: 0x3a0, Size: 1]
	Image*[] IMGEnemyTeamDeads;//[Offset: 0x3b0, Size: 1]
	Image*[] IMGMyTeams;//[Offset: 0x3c0, Size: 1]
	Image*[] IMGMyTeamDeads;//[Offset: 0x3d0, Size: 1]
	Image* IMGEnemyTeamBg;//[Offset: 0x3e0, Size: 1]
	Image* IMGMyTeamBG;//[Offset: 0x3e8, Size: 1]
	Image* IMGBombInstall;//[Offset: 0x3f0, Size: 1]
	Image* IMGBombInstallBG;//[Offset: 0x3f8, Size: 1]
	WidgetAnimation* AniBombInstallAlarm;//[Offset: 0x400, Size: 1]
	CrowObjectiveTimeWidget* TimerWidget;//[Offset: 0x408, Size: 1]
	CrowGameStateBombMission* GameStateBombMission;//[Offset: 0x410, Size: 1]
	enum PrevGameRoundState;//[Offset: 0x418, Size: 1]
	byte MAX_PLAYER_COUNT;//[Offset: 0x419, Size: 1]

--------------------------------
Class: CrowGameStateBombMission.CrowGameStateBase.GameState.GameStateBase.Info.Actor.Object
	CrowScoreInfoBombMission[] ScoreArray;//[Offset: 0x458, Size: 1]
	CrowPlayerStartTDM*[] RedTeamPlayerStartArray;//[Offset: 0x468, Size: 1]
	CrowPlayerStartTDM*[] BlueTeamPlayerStartArray;//[Offset: 0x478, Size: 1]
	enum CrowGameRoundState;//[Offset: 0x488, Size: 1]
	float RoundTimeSec;//[Offset: 0x48c, Size: 1]
	byte CurrentRoundCount;//[Offset: 0x490, Size: 1]
	byte CurrentRoundTransitionCount;//[Offset: 0x491, Size: 1]
	bool bIsWinToTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	float FirstRoundWaitTimeSec;//[Offset: 0x494, Size: 1]
	float RoundWaitTimeSec;//[Offset: 0x498, Size: 1]
	float RoundMatchTimeSec;//[Offset: 0x49c, Size: 1]
	float RoundFinishTimeSec;//[Offset: 0x4a0, Size: 1]
	byte TotalRoundCount;//[Offset: 0x4a4, Size: 1]
	byte RoundTransitionCount;//[Offset: 0x4a5, Size: 1]
	float LoadoutTimeSec;//[Offset: 0x4a8, Size: 1]
	float CompositionCTimeSec;//[Offset: 0x4ac, Size: 1]
	byte AttackerTeam;//[Offset: 0x4b0, Size: 1]
	float SpectatorModeWaitTimeSec;//[Offset: 0x4b4, Size: 1]
	bool bIsAvailableLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	byte RedTeamWinCount;//[Offset: 0x4b9, Size: 1]
	byte BlueTeamWinCount;//[Offset: 0x4ba, Size: 1]
	byte RoundWinTeamID;//[Offset: 0x4bb, Size: 1]
	byte UnearnedWinTeamID;//[Offset: 0x4bc, Size: 1]
	bool bIsPlantCompositionC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	int PlantCompositionCPlayerId;//[Offset: 0x4c0, Size: 1]
	byte TeamWinByPlantCompositionC;//[Offset: 0x4c4, Size: 1]
	byte TeamWinByDefuseCompositionC;//[Offset: 0x4c5, Size: 1]
	CrowPlayerStateBase* CompositionCHolderPlayer;//[Offset: 0x4c8, Size: 1]
	bool bIsSelectedCompositionCHolder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	<byte,CrowTeamInfoBombMission> TeamInfoMap;//[Offset: 0x4d8, Size: 1]
	<byte,CrowPlayerCountInfoBombMission> PlayerCountMap;//[Offset: 0x528, Size: 1]
	CrowRemainTimeSync* RemainRoundTime;//[Offset: 0x578, Size: 1]
	void MulticastPlantCompositionC(int playerId, byte InTeamID);// 0x1a91390
	void MulticastPickupCompositionC(int PickupPlayerID, byte InTeamID);// 0x1a91280
	void MulticastGameRoundState(enum NewState, byte InRoundWinTeam);// 0x1a910d0
	void MulticastFinishMatch(byte InUnearnedWinTeamID, byte InRoundWinTeam);// 0x1a90f40
	void MulticastEndLoadout();// 0x1a90ef0
	void MulticastDropCompositionC(int DropPlayerID, byte InTeamID);// 0x1a90de0
	void MulticastDefuseCompositionC(int playerId, byte InTeamID);// 0x1a90cd0

--------------------------------
Class: CrowScoreInfoBombMission
	byte TeamID;//[Offset: 0x0, Size: 1]
	uint32 Score;//[Offset: 0x4, Size: 1]
	byte PlantCompositionCCount;//[Offset: 0x8, Size: 1]
	byte DefuseCompositionCCount;//[Offset: 0x9, Size: 1]

--------------------------------
Class: CrowPlayerStartTDM.CrowPlayerStartDM.CrowPlayerStartBase.PlayerStart.NavigationObjectBase.Actor.Object
	byte SpawnTeam;//[Offset: 0x250, Size: 1]

--------------------------------
Class: CrowPlayerStartDM.CrowPlayerStartBase.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: CrowPlayerStartBase.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: CrowTeamInfoBombMission
	byte TeamID;//[Offset: 0x0, Size: 1]
	CrowPlayerStateBase*[] PlayerStateArray;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowPlayerCountInfoBombMission
	byte TeamID;//[Offset: 0x0, Size: 1]
	uint32 Count;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowSquadWidget.CrowHUDWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowSquadWidgetItem* SquadItemClass;//[Offset: 0x348, Size: 1]
	GridPanel* RootGridPanel;//[Offset: 0x350, Size: 1]
	CrowSquadPointWidget* WB_SquadPoint;//[Offset: 0x358, Size: 1]
	CrowSquadPointWidget* WB_ResourcePoint;//[Offset: 0x360, Size: 1]
	CrowWidgetBase* WB_StatusPlayerInfo;//[Offset: 0x368, Size: 1]
	<CrowPlayerStateBase*,CrowSquadWidgetItem*> SquadItemMap;//[Offset: 0x370, Size: 1]
	void OnLeavePlayer(CrowPlayerStateBase* InPlayerState);// 0x1b39f80
	void OnEnterPlayer(CrowPlayerStateBase* InPlayerState, bool Flag);// 0x1b39e90

--------------------------------
Class: CrowSquadWidgetItem.CrowWidgetBase.UserWidget.Widget.Visual.Object
	LinearColor ColorHPGaugeNormal;//[Offset: 0x348, Size: 1]
	LinearColor ColorHPGaugeInjured;//[Offset: 0x358, Size: 1]
	LinearColor ColorHPGaugeDead;//[Offset: 0x368, Size: 1]
	float DeadPlayerAlpha;//[Offset: 0x378, Size: 1]
	CanvasPanel* RootCanvas;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_MemberIndexIcon;//[Offset: 0x388, Size: 1]
	WidgetSwitcher* RoleSwitcher;//[Offset: 0x390, Size: 1]
	CanvasPanel* LeaderCanvas;//[Offset: 0x398, Size: 1]
	CanvasPanel* MemberCanvas;//[Offset: 0x3a0, Size: 1]
	CanvasPanel* DyingCanvas;//[Offset: 0x3a8, Size: 1]
	CanvasPanel* DeadCanvas;//[Offset: 0x3b0, Size: 1]
	TextBlock* NickNameText;//[Offset: 0x3b8, Size: 1]
	WidgetSwitcher* VoiceSwitcher;//[Offset: 0x3c0, Size: 1]
	WidgetSwitcher* WS_HPStatus;//[Offset: 0x3c8, Size: 1]
	ProgressBar* HPProgressBar;//[Offset: 0x3d0, Size: 1]
	ProgressBar* PB_ZombieHPBar;//[Offset: 0x3d8, Size: 1]
	ProgressBar* PB_ZetaHPBar;//[Offset: 0x3e0, Size: 1]
	WidgetSwitcher* StateSwitcher;//[Offset: 0x3e8, Size: 1]
	Image* IMG_Icon_SquadLeader;//[Offset: 0x3f0, Size: 1]
	Image* IMG_Squad_Color;//[Offset: 0x3f8, Size: 1]
	Image* IMG_SquadLeader;//[Offset: 0x400, Size: 1]
	Image* IMG_RankIcon;//[Offset: 0x408, Size: 1]
	TextBlock* TB_Index;//[Offset: 0x410, Size: 1]
	ProgressBar* PB_HelmetBar;//[Offset: 0x418, Size: 1]
	ProgressBar* PB_ArmorBar;//[Offset: 0x420, Size: 1]
	CrowToggleButton* BT_SelectLeader;//[Offset: 0x428, Size: 1]
	CrowToggleButton* BT_VoiceOnOff;//[Offset: 0x430, Size: 1]
	TextBlock* TB_DiveLeader;//[Offset: 0x438, Size: 1]
	TextBlock* TB_DiveFollow;//[Offset: 0x440, Size: 1]
	Image* IMG_DiveLeader;//[Offset: 0x448, Size: 1]
	Image* IMG_DiveFollow;//[Offset: 0x450, Size: 1]
	CrowVivoxManager* VivoxManager;//[Offset: 0x4a0, Size: 1]
	void OnClickedVoiceOnOff();// 0x1b39e50
	void OnClickedSelectLeader();// 0x1b39e30

--------------------------------
Class: CrowSquadPointWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_SquadPoint;//[Offset: 0x348, Size: 1]

--------------------------------
Class: CrowFlashBangFxWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_White;//[Offset: 0x348, Size: 1]
	Image* IMG_ScreenShot;//[Offset: 0x350, Size: 1]
	class CrowFlashBangCaptureActor* CaptureClass;//[Offset: 0x358, Size: 1]
	CrowFlashBangCaptureActor* CaptureActor;//[Offset: 0x360, Size: 1]
	AkAudioEvent* LoopSound;//[Offset: 0x368, Size: 1]
	AkAudioEvent* EndSound;//[Offset: 0x370, Size: 1]
	TimerHandle EndTimerHandle;//[Offset: 0x378, Size: 1]

--------------------------------
Class: CrowFlashBangCaptureActor.Actor.Object
	CrowSceneCaptureComponent2D* SceneCapture;//[Offset: 0x220, Size: 1]

--------------------------------
Class: CrowSceneCaptureComponent2D.SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: CrowMissionComplatePopup.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_MissionName;//[Offset: 0x348, Size: 1]
	Image* IMG_TitleBg;//[Offset: 0x350, Size: 1]
	Image* IMG_TitleBg_LIne;//[Offset: 0x358, Size: 1]
	Image* IMG_Deco_01;//[Offset: 0x360, Size: 1]
	Image* IMG_Deco_02;//[Offset: 0x368, Size: 1]
	float OpenTime;//[Offset: 0x370, Size: 1]
	int[] MissionIDs;//[Offset: 0x378, Size: 1]
	float MissionPopupCloseTime;//[Offset: 0x388, Size: 1]
	bool IsAddNewMission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	void FinishAnimation();// 0x1a290c0

--------------------------------
Class: CrowPlayerReportWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TBPlayerName;//[Offset: 0x368, Size: 1]
	CrowDropDownWidget* WBPlayerReportDropDown;//[Offset: 0x370, Size: 1]
	CanvasPanel* CPReport;//[Offset: 0x378, Size: 1]
	CrowButton* BTReport;//[Offset: 0x380, Size: 1]
	TextBlock* TBReport;//[Offset: 0x388, Size: 1]
	CrowButton* BTClose;//[Offset: 0x390, Size: 1]
	uint64 ServerKey;//[Offset: 0x398, Size: 1]
	int SelectedDropDownSlotIndex;//[Offset: 0x3a0, Size: 1]
	void OnSelectDropDown(CrowWidgetBase* SelectSlot);// 0x1af0090
	void OnClickedReport();// 0x1aefff0
	void OnClickedClose();// 0x1a290c0

--------------------------------
Class: CrowDropDownWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	bool bUseAutoSlotIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	class CrowDropDownSlotWidget* DropDownSlotWidgetClass;//[Offset: 0x360, Size: 1]
	FName RootPanelWidgetName;//[Offset: 0x368, Size: 1]
	FName PanelWidgetName;//[Offset: 0x370, Size: 1]
	TextBlock* TB_SelectedItem;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Dropdown;//[Offset: 0x380, Size: 1]
	PanelWidget* RootPanelWidget;//[Offset: 0x388, Size: 1]
	PanelWidget* PanelWidget;//[Offset: 0x390, Size: 1]
	CrowDropDownSlotWidget*[] SlotList;//[Offset: 0x398, Size: 1]
	int SelectSlotIndex;//[Offset: 0x3a8, Size: 1]
	void OnClickedSlot(CrowDropDownSlotWidget* SelectedSlot);// 0x1a74110
	void OnClickedDropdown();// 0x1a740f0

--------------------------------
Class: CrowDropDownSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TBTitle;//[Offset: 0x358, Size: 1]
	CrowButton* BTDropdown;//[Offset: 0x360, Size: 1]
	int Index;//[Offset: 0x368, Size: 1]
	void OnClickedDropdown();// 0x1a740d0

--------------------------------
Class: CrowBattleInventoryWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowInventoryInputEventHandler* DragStartInputHandler;//[Offset: 0x368, Size: 1]
	CrowInventoryInputEventHandler* DragEndInputHandler;//[Offset: 0x370, Size: 1]
	CrowInvenItemSlot* DragStartWidget;//[Offset: 0x378, Size: 1]
	CrowInvenItemSlot* DragEndWidget;//[Offset: 0x380, Size: 1]
	CrowBackPackInfoWidget* WB_BackPackInfo;//[Offset: 0x388, Size: 1]
	CrowLoadoutInfoWidget* WB_LoadoutInfo;//[Offset: 0x390, Size: 1]
	CrowTutorialInventoryWidget* WB_Tutorial_Inventory;//[Offset: 0x398, Size: 1]
	CrowTutorialInventoryWidget* WB_Tutorial_Inventory;//[Offset: 0x3a0, Size: 1]
	CrowTutorialInventoryWidget* WB_Tutorial_Inventory;//[Offset: 0x3a8, Size: 1]
	CrowTutorialInventoryWidget* WB_Tutorial_Inventory;//[Offset: 0x3b0, Size: 1]
	CrowTutorialInventoryWidget* WB_Tutorial_Inventory;//[Offset: 0x3b8, Size: 1]
	CrowInvenArmorInfoWidget* WB_InvenArmorInfo;//[Offset: 0x3c0, Size: 1]
	CrowDropBoxWidget* WB_DropBox_L;//[Offset: 0x3c8, Size: 1]
	CrowDropBoxWidget* WB_DropBox__R;//[Offset: 0x3d0, Size: 1]
	Button* BTN_PIE_Exit;//[Offset: 0x3d8, Size: 1]
	CrowTutorialInventoryWidget*[] DiscriptionWidgetList;//[Offset: 0x3e0, Size: 1]
	CrowGameInvenComponent* CrowGameInvenComponent;//[Offset: 0x3f0, Size: 1]
	CrowInventoryInputEventHandler* SelectDragWidget;//[Offset: 0x3f8, Size: 1]

--------------------------------
Class: CrowLoadoutInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowInvenWeaponInfoWidget* WB_WeaponInfo_Primary;//[Offset: 0x348, Size: 1]
	CrowInvenWeaponInfoWidget* WB_WeaponInfo_Primary;//[Offset: 0x350, Size: 1]
	CrowInvenWeaponInfoWidget* WB_WeaponInfo_Sub;//[Offset: 0x358, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_SubWeapon_Slot1;//[Offset: 0x360, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_SubWeapon_Slot2;//[Offset: 0x368, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_SubWeapon_Slot3;//[Offset: 0x370, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_SubWeapon_Slot4;//[Offset: 0x378, Size: 1]
	CrowWeaponListItemBase*[] WeaponWidgetList;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowInvenWeaponListSubItemWidget.CrowWeaponListItemBase.CrowInvenItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Name;//[Offset: 0x1c28, Size: 1]
	CrowWidgetImage* IMG_BackIcon;//[Offset: 0x1c30, Size: 1]
	Image* IMG_Frame;//[Offset: 0x1c38, Size: 1]
	Image* IMG_HotKey;//[Offset: 0x1c40, Size: 1]
	Image* IMG_BackGround_Melee;//[Offset: 0x1c48, Size: 1]
	Image* IMG_BackGround;//[Offset: 0x1c50, Size: 1]
	CrowDragDropWidgetBase* WB_CrowDragDropPanel;//[Offset: 0x1c58, Size: 1]
	CrowButton* BT_Loadout_Button;//[Offset: 0x1c60, Size: 1]
	HorizontalBox* HB_Hotkey;//[Offset: 0x1c68, Size: 1]
	CanvasPanel* MainPanel;//[Offset: 0x1c70, Size: 1]
	HorizontalBox* HB_WeaponLv;//[Offset: 0x1c78, Size: 1]
	TextBlock* TB_WeaponLV;//[Offset: 0x1c80, Size: 1]
	CrowProgressBar* PB_WeaponLV;//[Offset: 0x1c88, Size: 1]
	FText DefaultSlotText;//[Offset: 0x1c90, Size: 1]
	PaperSprite* BackIconSprite;//[Offset: 0x1ca8, Size: 1]
	bool IsArmorSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb0, Size: 1]
	WidgetSwitcher* WSGrade;//[Offset: 0x1cb8, Size: 1]
	bool HiddeIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc0, Size: 1]

--------------------------------
Class: CrowTutorialInventoryWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Key;//[Offset: 0x348, Size: 1]
	Image* IMG_Key;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_PlusPanel;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Tutorial_Desc;//[Offset: 0x360, Size: 1]
	Texture2D*[] KeyImageList;//[Offset: 0x368, Size: 1]
	Texture2D*[] MouseKeyImageList;//[Offset: 0x378, Size: 1]

--------------------------------
Class: CrowInvenArmorInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowInvenWeaponListSubItemWidget* WB_HelmetSlot;//[Offset: 0x348, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_ArmorSlot;//[Offset: 0x350, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_BackPackSlot;//[Offset: 0x358, Size: 1]
	CrowInvenWeaponListSubItemWidget*[] SlotList;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowPingItemInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_LowMax;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_PickupInven;//[Offset: 0x350, Size: 1]
	VerticalBox* VB_PingItemInfo;//[Offset: 0x358, Size: 1]
	CrowItemInfoWidget* WB_Inventory_ItemInfo;//[Offset: 0x360, Size: 1]
	CrowWidgetImage* IMG_Icon;//[Offset: 0x368, Size: 1]
	Border* BD_Item_Grade;//[Offset: 0x370, Size: 1]
	Border* BD_Ping_Item_BG;//[Offset: 0x378, Size: 1]
	PaperSprite* PickupInvenIcon;//[Offset: 0x380, Size: 1]
	Image* IMG_Key_X;//[Offset: 0x388, Size: 1]
	Image* IMG_Key_X;//[Offset: 0x390, Size: 1]
	Actor* ItemActor;//[Offset: 0x398, Size: 1]
	enum WidgetType;//[Offset: 0x3a0, Size: 1]
	bool IsPressUSEKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]

--------------------------------
Class: CrowWorldMapWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWorldMap* WB_Map;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_HotKey;//[Offset: 0x370, Size: 1]
	CanvasPanel* CP_Legend_Training;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_Legend_SquadMatch;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_Legend_Conquest;//[Offset: 0x388, Size: 1]
	CanvasPanel* CP_SkillTitle_UAVPatrol;//[Offset: 0x390, Size: 1]
	CanvasPanel* CP_SkillTitle_HeavyStrike;//[Offset: 0x398, Size: 1]
	CanvasPanel* CP_SkillControl;//[Offset: 0x3a0, Size: 1]
	CanvasPanel* CP_SkillControl_UAVPatrol;//[Offset: 0x3a8, Size: 1]
	CanvasPanel* CP_SkillControl_HeavyStrike;//[Offset: 0x3b0, Size: 1]
	Image* IMG_Key_CancelStrike;//[Offset: 0x3b8, Size: 1]
	Image* IMG_Key_CancelPatrol;//[Offset: 0x3c0, Size: 1]
	Button* BTN_PIE_Exit;//[Offset: 0x3c8, Size: 1]
	Image* IMG_RedHQ;//[Offset: 0x3d0, Size: 1]
	TextBlock* TB_RedHQ;//[Offset: 0x3d8, Size: 1]
	Image* IMG_BlueHQ;//[Offset: 0x3e0, Size: 1]
	TextBlock* TB_BlueHQ;//[Offset: 0x3e8, Size: 1]

--------------------------------
Class: CrowIndicatorSpaceWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Root;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_TopLeft;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_BottomRight;//[Offset: 0x358, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowRadialMenuThrowWidget.CrowRadialMenuWidgetBase.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowRadialMenuButtonWidget* RadialMenu_6Button;//[Offset: 0x3d0, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenu_6Button;//[Offset: 0x3d8, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenu_6Button;//[Offset: 0x3e0, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenu_6Button;//[Offset: 0x3e8, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenu_6Button;//[Offset: 0x3f0, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenu_6Button;//[Offset: 0x3f8, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenu_6Button;//[Offset: 0x400, Size: 1]
	FString EquipedAmmoTextIndex;//[Offset: 0x408, Size: 1]

--------------------------------
Class: CrowRadialMenuWidgetBase.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_RadialMenu;//[Offset: 0x368, Size: 1]
	Image* IMG_Circle;//[Offset: 0x370, Size: 1]
	Image* IMG_CircleArrow;//[Offset: 0x378, Size: 1]
	Image* HoverIcon;//[Offset: 0x380, Size: 1]
	TextBlock* HoverText;//[Offset: 0x388, Size: 1]
	FString[] ItemTextIndexes;//[Offset: 0x390, Size: 1]
	WidgetAnimation* AniWidgetShow;//[Offset: 0x3a0, Size: 1]
	bool InitializeRadialMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	int SelectedIndex;//[Offset: 0x3ac, Size: 1]
	bool Hiding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	CrowWidgetTweenAlpha* WidgetTweenAlpha;//[Offset: 0x3b8, Size: 1]
	CrowRadialMenuButtonWidget*[] Radial_MenuBTN_Array;//[Offset: 0x3c0, Size: 1]
	void OnHovered_Radial_BTN(CrowRadialMenuButtonWidget* SeletedButton);// 0x1b08210
	void OnClicked_Radial_BTN(CrowRadialMenuButtonWidget* SeletedButton);// 0x1b08100

--------------------------------
Class: CrowRadialMenuButtonWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Contents;//[Offset: 0x348, Size: 1]
	CrowButton* Radial_BTN;//[Offset: 0x350, Size: 1]
	Image* IMG_SelectRadial_BTN;//[Offset: 0x358, Size: 1]
	Image* IMG_ItemBG;//[Offset: 0x360, Size: 1]
	Image* IMG_ItemIcon;//[Offset: 0x368, Size: 1]
	TextBlock* TB_Item_Name;//[Offset: 0x370, Size: 1]
	TextBlock* TB_Item_Amount;//[Offset: 0x378, Size: 1]
	float IconAngle;//[Offset: 0x3b0, Size: 1]
	float ActivateAngleMin;//[Offset: 0x3b4, Size: 1]
	float ActivateAngleMax;//[Offset: 0x3b8, Size: 1]
	bool HideAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	int SprayIndex;//[Offset: 0x3c0, Size: 1]
	void OnHovered_Radial_BTN();// 0x1b04950
	void OnClicked_RightMouse_Radial_BTN();// 0x1a695b0
	void OnClicked_Radial_BTN();// 0x1a38430

--------------------------------
Class: CrowRadialMenuHealKitWidget.CrowRadialMenuWidgetBase.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowRadialMenuButtonWidget* WB_RadialMenu_4Button;//[Offset: 0x3d0, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_4Button;//[Offset: 0x3d8, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_4Button;//[Offset: 0x3e0, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_4Button;//[Offset: 0x3e8, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_4Button;//[Offset: 0x3f0, Size: 1]
	FString EquipedAmmoTextIndex;//[Offset: 0x3f8, Size: 1]

--------------------------------
Class: CrowRadialMenuSprayWidget.CrowRadialMenuWidgetBase.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowRadialMenuButtonWidget* WB_Customize_SprayRadialMenu_8Button;//[Offset: 0x3d0, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_SprayRadialMenu_8Button;//[Offset: 0x3d8, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_SprayRadialMenu_8Button;//[Offset: 0x3e0, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_SprayRadialMenu_8Button;//[Offset: 0x3e8, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_SprayRadialMenu_8Button;//[Offset: 0x3f0, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_SprayRadialMenu_8Button;//[Offset: 0x3f8, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_SprayRadialMenu_8Button;//[Offset: 0x400, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_SprayRadialMenu_8Button;//[Offset: 0x408, Size: 1]
	Image* IMG_CircleSelect;//[Offset: 0x410, Size: 1]
	CanvasPanel* CP_MouseTip;//[Offset: 0x418, Size: 1]
	HorizontalBox* HB_Registration;//[Offset: 0x420, Size: 1]
	HorizontalBox* HB_Cancel;//[Offset: 0x428, Size: 1]
	WidgetAnimation* RegistAnimation;//[Offset: 0x430, Size: 1]
	CrowCustomizeEtcDescWidget* ParentWidget;//[Offset: 0x438, Size: 1]
	void OnRegistAniFinished();// 0x1b082c0

--------------------------------
Class: CrowCustomizeEtcDescWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowCustomSprayItemListWidget* WB_Cutomize_SprayList;//[Offset: 0x348, Size: 1]
	CrowRadialMenuSprayWidget* WB_Customize_SprayRadialMenu;//[Offset: 0x350, Size: 1]
	void OnClose_ShopPopup(bool IsConfirm);// 0x1a64d70

--------------------------------
Class: CrowCustomSprayItemListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowCustomizeSpraySlotWidget* SpraySlotWidgetClass;//[Offset: 0x350, Size: 1]
	GridPanel* GD_ItemList;//[Offset: 0x358, Size: 1]
	CrowCustomizeEtcDescWidget* ParentWidget;//[Offset: 0x360, Size: 1]
	CrowCustomizeSpraySlotWidget* CurrSelectSlot;//[Offset: 0x368, Size: 1]
	void OnHovered_SpraySlot(CrowCustomizeSpraySlotWidget* InSlot);// 0x1a6c6a0
	void OnHovered_ShopSlotlot(CrowCustomizeSpraySlotWidget* InSlot);// 0x1a6c6a0
	void OnClicked_SpraySlot(CrowCustomizeSpraySlotWidget* InSlot);// 0x1a6c4d0
	void OnClicked_ShopSlotlot(CrowCustomizeSpraySlotWidget* InSlot);// 0x1a6c440

--------------------------------
Class: CrowCustomizeSpraySlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Icon;//[Offset: 0x348, Size: 1]
	Image* IMG_Lock;//[Offset: 0x350, Size: 1]
	Image* IMG_Equiped;//[Offset: 0x358, Size: 1]
	Image* IMG_Selected;//[Offset: 0x360, Size: 1]
	Image* IMG_NewIcon;//[Offset: 0x368, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Customize_Spray_Slot;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_Cost;//[Offset: 0x380, Size: 1]
	TextBlock* TB_Label_Money;//[Offset: 0x388, Size: 1]
	bool IsShopMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69b, Size: 1]
	CrowShopTableRow CurrentShopTable;//[Offset: 0x6a0, Size: 1]
	void OnHovered_Slot();// 0x1a69630
	void OnClieck_Slot();// 0x1a695b0

--------------------------------
Class: CrowShopTableRow.TableRowBase
	uint32 Index;//[Offset: 0x8, Size: 1]
	FString HelpText;//[Offset: 0x10, Size: 1]
	int Reward_ID;//[Offset: 0x20, Size: 1]
	int AddReward_ID;//[Offset: 0x24, Size: 1]
	int AddEventReward_ID;//[Offset: 0x28, Size: 1]
	enum BuyMoneyType;//[Offset: 0x2c, Size: 1]
	int BuyMoneyPrice;//[Offset: 0x30, Size: 1]
	enum TopProductType;//[Offset: 0x34, Size: 1]
	enum ProductType;//[Offset: 0x35, Size: 1]
	enum ProductSubType;//[Offset: 0x36, Size: 1]
	FString ProductTileKeyString;//[Offset: 0x38, Size: 1]
	FString ProductDescKeyString;//[Offset: 0x48, Size: 1]
	SoftObjectPath ProductIcon;//[Offset: 0x58, Size: 1]
	SoftObjectPath EventProductIcon;//[Offset: 0x70, Size: 1]
	enum ItemGrade;//[Offset: 0x88, Size: 1]
	int EventIndex;//[Offset: 0x8c, Size: 1]
	int AppId;//[Offset: 0x90, Size: 1]

--------------------------------
Class: CrowRadialMenuPingWidget.CrowRadialMenuWidgetBase.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowRadialMenuButtonWidget* WB_RadialMenu_8Button;//[Offset: 0x3d0, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_8Button;//[Offset: 0x3d8, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_8Button;//[Offset: 0x3e0, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_8Button;//[Offset: 0x3e8, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_8Button;//[Offset: 0x3f0, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_8Button;//[Offset: 0x3f8, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_8Button;//[Offset: 0x400, Size: 1]
	CrowRadialMenuButtonWidget* WB_RadialMenu_8Button;//[Offset: 0x408, Size: 1]
	enum[] ItemPingTypes;//[Offset: 0x410, Size: 1]

--------------------------------
Class: CrowRadialMenuEmotionWidget.CrowRadialMenuWidgetBase.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowRadialMenuButtonWidget* RadialMenuButtonWidget;//[Offset: 0x3d0, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenuButtonWidget;//[Offset: 0x3d8, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenuButtonWidget;//[Offset: 0x3e0, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenuButtonWidget;//[Offset: 0x3e8, Size: 1]
	CrowRadialMenuButtonWidget* RadialMenuButtonWidget;//[Offset: 0x3f0, Size: 1]

--------------------------------
Class: CrowCountdownWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Blocker;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_Countdown_Normal;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Countdown_Normal;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Countdown_Normal_Effect;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniCountNormal;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_Countdown_Focus;//[Offset: 0x370, Size: 1]
	TextBlock* TB_Countdown_Focus;//[Offset: 0x378, Size: 1]
	TextBlock* TB_Countdown_Focus_Effect;//[Offset: 0x380, Size: 1]
	WidgetAnimation* AniCountFocus;//[Offset: 0x388, Size: 1]
	CrowRemainTimeSync* RemainTimeSync;//[Offset: 0x398, Size: 1]
	AkAudioEvent* TotalCountSound;//[Offset: 0x3a8, Size: 1]
	AkAudioEvent* FocusCountSound;//[Offset: 0x3b8, Size: 1]

--------------------------------
Class: CrowFadeScreenWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_FadeCutton;//[Offset: 0x348, Size: 1]
	WidgetAnimation* AniFadeScreen;//[Offset: 0x350, Size: 1]
	void OnAniFinished();// 0x1a7d7a0

--------------------------------
Class: CrowBattleInventoryLoot.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class UserWidget* SlotWidget;//[Offset: 0x368, Size: 1]
	class UserWidget* ItemToolTipWidget;//[Offset: 0x370, Size: 1]
	float CloseDistance;//[Offset: 0x378, Size: 1]
	CrowBackPackInfoWidget* WB_BackPackInfo;//[Offset: 0x380, Size: 1]
	ScrollBox* SCB_LootingSlotWidget;//[Offset: 0x388, Size: 1]
	CanvasPanel* ItemPanel;//[Offset: 0x390, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_HelmetSlot;//[Offset: 0x398, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_ArmorSlot;//[Offset: 0x3a0, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_BackPackSlot;//[Offset: 0x3a8, Size: 1]
	CrowInvenWeaponListSubItemWidget* WB_KitSlot;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_InvenType;//[Offset: 0x3b8, Size: 1]
	CrowGameInvenComponent* InvenComponent;//[Offset: 0x3c0, Size: 1]
	CrowLootInvenItemInfo* ItemInfoWidget;//[Offset: 0x3c8, Size: 1]
	CrowItemBase* CurrArmorItem;//[Offset: 0x3d0, Size: 1]
	CrowItemBase* CurrHelmetItem;//[Offset: 0x3d8, Size: 1]
	CrowItemBase* CurrBackPackItem;//[Offset: 0x3e0, Size: 1]
	CrowItemBase* CurrKitItem;//[Offset: 0x3e8, Size: 1]
	CrowItemBase* CurrentItem;//[Offset: 0x3f0, Size: 1]
	CrowPickupInventory* CurrentPickupInven;//[Offset: 0x3f8, Size: 1]
	int CurrentCount;//[Offset: 0x400, Size: 1]
	int PickupInvenIndex;//[Offset: 0x404, Size: 1]
	Vector2D CurrentMousePosition;//[Offset: 0x408, Size: 1]
	void OnCloseInven();// 0x1a252d0

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 1]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 1]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 1]
	byte Orientation;//[Offset: 0x828, Size: 1]
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 1]
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 1]
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 1]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 1]
	enum NavigationDestination;//[Offset: 0x848, Size: 1]
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 1]
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 1]
	MulticastInlineDelegateProperty OnUserScrolled;//[Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x31f9780
	void SetScrollWhenFocusChanges(enum NewScrollWhenFocusChanges);// 0x31f8f20
	void SetScrollOffset(float NewScrollOffset);// 0x31f8ea0
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x31f8e20
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x31f9040
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x31f8fa0
	void SetOrientation(byte NewOrientation);// 0x31f8bf0
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x31f8100
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x31f7fe0
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x31f7f50
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x31f7ec0
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x31f7d60
	void ScrollToStart();// 0x31f7d40
	void ScrollToEnd();// 0x31f7d20
	float GetViewOffsetFraction();// 0x31f74c0
	float GetScrollOffsetOfEnd();// 0x31f73f0
	float GetScrollOffset();// 0x31f73c0
	void EndInertialScrolling();// 0x31f6ee0

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 1]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 1]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 1]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 1]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 1]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 1]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 1]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 1]
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 1]
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 1]
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 1]

--------------------------------
Class: CrowLootInvenItemInfo.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowItemInfoWidget* LootItemInfo;//[Offset: 0x348, Size: 1]
	CrowItemInfoWidget* MyItemInfo;//[Offset: 0x350, Size: 1]

--------------------------------
Class: CrowRequirePointWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Point;//[Offset: 0x348, Size: 1]
	float DisplayTime;//[Offset: 0x350, Size: 1]
	bool AddPlusText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	WidgetAnimation* ShowAnim;//[Offset: 0x358, Size: 1]
	WidgetAnimation* HideAnim;//[Offset: 0x360, Size: 1]
	void OnHideAniComplete();// 0x1a290c0

--------------------------------
Class: CrowESCMenuWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Continue;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Settings;//[Offset: 0x370, Size: 1]
	CrowButton* BT_ReturnToLobby;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Quit;//[Offset: 0x380, Size: 1]
	CrowButton* BT_Report;//[Offset: 0x388, Size: 1]
	CrowButton* BT_Relocating;//[Offset: 0x390, Size: 1]
	TextBlock* TB_Continue;//[Offset: 0x398, Size: 1]
	TextBlock* TB_Settings;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_ReturnToLobby;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_Quit;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_Relocating;//[Offset: 0x3b8, Size: 1]
	FString ReportUserNickname;//[Offset: 0x3c0, Size: 1]
	uint64 ReportUserServerKey;//[Offset: 0x3d0, Size: 1]
	void OnReturnToLobby(enum ButtonType);// 0x1a7da00
	void OnRelocating(enum ButtonType);// 0x1a7d980
	void OnClicked_BT_Settings();// 0x1a7d960
	void OnClicked_BT_ReturnToLobby();// 0x1a7d940
	void OnClicked_BT_Report();// 0x1a7d920
	void OnClicked_BT_Relocating();// 0x1a7d900
	void OnClicked_BT_Quit();// 0x1a7d8e0
	void OnClicked_BT_Continue();// 0x1a290c0

--------------------------------
Class: CrowChatWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowChatTyping* WB_CrowChatTyping;//[Offset: 0x348, Size: 1]
	ScrollBox* SCB_ChatList;//[Offset: 0x350, Size: 1]
	VerticalBox* VB_ChatList;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_ChatSatus;//[Offset: 0x360, Size: 1]
	CanvasPanel* CP_ToolTip;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_ChatBG;//[Offset: 0x370, Size: 1]
	CrowButton* BT_StartTyping;//[Offset: 0x378, Size: 1]
	CrowChatMessageItem* WB_CrowChatMessageItem;//[Offset: 0x380, Size: 1]
	class CrowChatMessageItem* ItemChatMsgItemWidgetClass;//[Offset: 0x388, Size: 1]
	float LastChatCheckSec;//[Offset: 0x390, Size: 1]
	float ChatListFadeOutSecond;//[Offset: 0x394, Size: 1]
	int ChatListMAX;//[Offset: 0x398, Size: 1]
	FName HoverAnim;//[Offset: 0x39c, Size: 1]
	void SetChatStatus(enum _status);// 0x1a4d7c0
	void OnUnHoverMessageItem();// 0x1a4d130
	void OnHoverMessageItem();// 0x1a4cad0
	void OnClickMessageItem();// 0x1a4c440

--------------------------------
Class: CrowChatTyping.CrowWidgetBase.UserWidget.Widget.Visual.Object
	EditableText* TB_InputTyping;//[Offset: 0x348, Size: 1]
	TextBlock* TB_TypingType;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_LanguageSwap;//[Offset: 0x358, Size: 1]
	CrowChatTypeText[] ChatTypeTexts;//[Offset: 0x360, Size: 1]
	enum CurrentChatType;//[Offset: 0x370, Size: 1]
	enum[] EnableChatTypeArray;//[Offset: 0x378, Size: 1]
	CrowChatData TargetWhisperData;//[Offset: 0x388, Size: 1]
	void UpdateChatInputLang();// 0x1a4db60
	void SetChatType(CrowChatTypeText _chatType);// 0x1a4d840
	void OnInputBoxChanged(out const FText InputText);// 0x1a4caf0
	void NextChatType();// 0x1a4c420
	bool IsValidChatType(enum InChatType);// 0x1a4c390
	CrowChatTypeText FindChatTypeStruct(enum _chatType);// 0x1a4c210
	bool CheckShortcutKey(out const FText InputTex);// 0x1a4bd40

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 1]
	delegate TextDelegate;//[Offset: 0x120, Size: 1]
	FText HintText;//[Offset: 0x130, Size: 1]
	delegate HintTextDelegate;//[Offset: 0x148, Size: 1]
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x378, Size: 1]
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x380, Size: 1]
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x388, Size: 1]
	SlateBrushAsset* CaretImage;//[Offset: 0x390, Size: 1]
	SlateFontInfo Font;//[Offset: 0x398, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x3f0, Size: 1]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	float MinimumDesiredWidth;//[Offset: 0x41c, Size: 1]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 1]
	byte KeyboardType;//[Offset: 0x426, Size: 1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x427, Size: 1]
	enum VirtualKeyboardTrigger;//[Offset: 0x428, Size: 1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x429, Size: 1]
	byte Justification;//[Offset: 0x42a, Size: 1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x42b, Size: 1]
	MulticastInlineDelegateProperty OnTextChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	void SetText(FText InText);// 0x31ebc00
	void SetJustification(byte InJustification);// 0x31eb800
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x31eb6e0
	void SetIsPassword(bool InbIsPassword);// 0x31eb5c0
	void SetHintText(FText InHintText);// 0x31eb2e0
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1ef32e0
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1ef32e0
	FText GetText();// 0x31eac40

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 1]
	SlateBrush BackgroundImageSelected;//[Offset: 0x88, Size: 1]
	SlateBrush BackgroundImageComposing;//[Offset: 0x110, Size: 1]
	SlateBrush CaretImage;//[Offset: 0x198, Size: 1]

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowChatTypeText
	enum ChatType;//[Offset: 0x0, Size: 1]
	FText ChatText;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowChatMessageItem.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_ChatType;//[Offset: 0x348, Size: 1]
	RichTextBlock* TB_ChatMessage;//[Offset: 0x350, Size: 1]
	RichTextBlock* TB_ChatSystemMessage;//[Offset: 0x358, Size: 1]
	CrowButton* BT_WisperChat;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_ChatMessage;//[Offset: 0x368, Size: 1]
	CrowChatData ChatData;//[Offset: 0x370, Size: 1]
	void OnPressBTN_NickName();// 0x1a4cbc0

--------------------------------
Class: CrowWidgetTooltip.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Border* BD_Tooltip;//[Offset: 0x348, Size: 1]
	TextBlock* TB_ToolTip;//[Offset: 0x350, Size: 1]
	Widget* LastTargetWidget;//[Offset: 0x358, Size: 1]

--------------------------------
Class: CrowCustomCursorSpaceWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Root;//[Offset: 0x348, Size: 1]
	CrowCustomCursorBase* CustomCursor;//[Offset: 0x350, Size: 1]
	CanvasPanelSlot* CursorPanelSlot;//[Offset: 0x358, Size: 1]

--------------------------------
Class: CrowCustomCursorBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	AkAudioEvent* ClickSound;//[Offset: 0x348, Size: 1]

--------------------------------
Class: CrowInGameModeGuideWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_IngameGuide;//[Offset: 0x368, Size: 1]

--------------------------------
Class: CrowGasMaskFilterWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CrowSceneGame.CrowSceneBase.Actor.Object
	LevelStreamingDynamic* WeaponLoadOutLevel;//[Offset: 0x958, Size: 1]
	CrowWeaponLoadoutObjectBider* WeaponLoadoutObjectBider;//[Offset: 0x960, Size: 1]
	CrowWeaponLobby* IngameCustomWeapon;//[Offset: 0x968, Size: 1]
	CrowWeaponLobby* TestCustomWeapon;//[Offset: 0x970, Size: 1]
	SkyLight*[] SkyLightArray;//[Offset: 0x978, Size: 1]
	Rotator DefaultCustomWeaponRotion;//[Offset: 0x988, Size: 1]
	Rotator DragStartCustomWeaponRotion;//[Offset: 0x994, Size: 1]
	Vector2D DragStartScreenPosition;//[Offset: 0x9a0, Size: 1]
	enum WeaponRotationMode;//[Offset: 0x9a8, Size: 1]
	enum CurrentLoadOutMode;//[Offset: 0x9a9, Size: 1]
	CrowVisibilityManager* VisiblilityManager;//[Offset: 0x9b0, Size: 1]
	int SaveValueMapIndex;//[Offset: 0x9b8, Size: 1]
	int64 SaveValueWeaponIndex;//[Offset: 0x9c0, Size: 1]
	int8 SaveValueWeaponSlot;//[Offset: 0x9c8, Size: 1]
	int64 SaveValueUserServerKey;//[Offset: 0x9d0, Size: 1]
	int SaveValueAppearanceIndex;//[Offset: 0x9d8, Size: 8]
	FString SaveNickName;//[Offset: 0x9f8, Size: 1]
	enum CurrentCameraAppearanceType;//[Offset: 0xa08, Size: 1]
	Actor* CurrCamera;//[Offset: 0xa10, Size: 1]
	void OnLevelLoadedLoadout();// 0x1b19830

--------------------------------
Class: CrowSceneBase.Actor.Object
	CrowSceneManager* SceneManager;//[Offset: 0x228, Size: 1]
	CrowWidgetManager* WidgetManager;//[Offset: 0x230, Size: 1]
	CrowClientManager* ClientManager;//[Offset: 0x238, Size: 1]
	CrowVivoxManager* VivoxManager;//[Offset: 0x240, Size: 1]
	CrowSceneTableRow TableData;//[Offset: 0x258, Size: 1]

--------------------------------
Class: CrowSceneManager.Object
	<uint32,CrowSceneTableRow> SceneTable;//[Offset: 0x28, Size: 1]
	CrowSceneBase* CurrentScene;//[Offset: 0x78, Size: 1]
	CrowSceneTableRow CurrentSceneData;//[Offset: 0xa0, Size: 1]
	CrowSceneTableRow PrevSceneData;//[Offset: 0x790, Size: 1]

--------------------------------
Class: CrowSceneTableRow.TableRowBase
	enum Type;//[Offset: 0x8, Size: 1]
	uint32 ReplicationSettingsIndex;//[Offset: 0xc, Size: 1]
	uint32 VisiblePriority;//[Offset: 0x10, Size: 1]
	SoftObjectPath Map;//[Offset: 0x18, Size: 1]
	SoftObjectPath ResultLevel;//[Offset: 0x30, Size: 1]
	SoftObjectPath AtmosphereLevel;//[Offset: 0x48, Size: 1]
	SoftObjectPath ModMapSprite;//[Offset: 0x60, Size: 1]
	SoftObjectPath WorldMapSprite;//[Offset: 0x78, Size: 1]
	SoftObjectPath RedWorldMapSprite;//[Offset: 0x90, Size: 1]
	SoftObjectPath BlueWorldMapSprite;//[Offset: 0xa8, Size: 1]
	SoftObjectPath RespawnImpossibleWorldMapSprite;//[Offset: 0xc0, Size: 1]
	SoftObjectPath LevelSequenceRed;//[Offset: 0xd8, Size: 1]
	SoftObjectPath LevelSequenceBlue;//[Offset: 0xf0, Size: 1]
	SoftObjectPath LevelSequenceStartPlay;//[Offset: 0x108, Size: 1]
	SoftObjectPath EndLevelSequenceRed;//[Offset: 0x120, Size: 1]
	SoftObjectPath EndLevelSequenceBlue;//[Offset: 0x138, Size: 1]
	float EndLevelSequencePlayTime;//[Offset: 0x150, Size: 1]
	enum GameMode;//[Offset: 0x154, Size: 1]
	SoftObjectPath TransitionGameMode;//[Offset: 0x158, Size: 1]
	class CrowSceneBase* SceneClass;//[Offset: 0x170, Size: 1]
	FText Name;//[Offset: 0x178, Size: 1]
	FText SubName;//[Offset: 0x190, Size: 1]
	FText Description;//[Offset: 0x1a8, Size: 1]
	Texture2D* DefaultIcon;//[Offset: 0x1c0, Size: 1]
	PaperSprite* DefaultIconSprite;//[Offset: 0x1c8, Size: 1]
	bool IsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool IsBGMRandomPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	AkAudioEvent* BGMStartEvent;//[Offset: 0x1d8, Size: 1]
	AkAudioEvent* BGMEndEvent;//[Offset: 0x1e0, Size: 1]
	CrowModeWeapon EnableWeaponType;//[Offset: 0x1e8, Size: 1]
	float[] ArrayWorldMapZoomMultiply;//[Offset: 0x1f0, Size: 1]
	float[] ArrayMinimapZoomMultiply;//[Offset: 0x200, Size: 1]
	float EnemyFireDist;//[Offset: 0x210, Size: 1]
	float EnemyFireCompassDist;//[Offset: 0x214, Size: 1]
	float EnemyFireDistTime;//[Offset: 0x218, Size: 1]
	float EnemyFireDist_Suppressor;//[Offset: 0x21c, Size: 1]
	float EnemyFireCompassDist_Suppressor;//[Offset: 0x220, Size: 1]
	float EnemyFireDistTime_Suppressor;//[Offset: 0x224, Size: 1]
	float MaxHealth;//[Offset: 0x228, Size: 1]
	float DyingHealth;//[Offset: 0x22c, Size: 1]
	int8 MaxDyingStateCount;//[Offset: 0x230, Size: 1]
	bool IsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool IsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	uint32 LoadSceneIndex;//[Offset: 0x234, Size: 1]
	CrowGameIconDisplayInfo CharacterIconAlive_Squad;//[Offset: 0x238, Size: 1]
	CrowGameIconDisplayInfo CharacterIconDying_Squad;//[Offset: 0x2c0, Size: 1]
	CrowGameIconDisplayInfo CharacterIconDeath_Squad;//[Offset: 0x348, Size: 1]
	CrowGameIconDisplayInfo CharacterIconAlive_Team;//[Offset: 0x3d0, Size: 1]
	CrowGameIconDisplayInfo CharacterIconDying_Team;//[Offset: 0x458, Size: 1]
	CrowGameIconDisplayInfo CharacterIconDeath_Team;//[Offset: 0x4e0, Size: 1]
	CrowGameIconDisplayInfo CharacterIconDisplayInfoEnemy;//[Offset: 0x568, Size: 1]
	CrowGameIconDisplayInfo CharacterIconObserver;//[Offset: 0x5f0, Size: 1]
	float ReadyToSpreadParachuteHeight;//[Offset: 0x678, Size: 1]
	float ParachuteSpreadLimitZ;//[Offset: 0x67c, Size: 1]
	CrowLoadingInfo SceneLoadingInfo;//[Offset: 0x680, Size: 1]
	float DeathZoneLifeTime;//[Offset: 0x6e0, Size: 1]

--------------------------------
Class: CrowModeWeapon
	bool Primary01;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool Primary02;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool Melee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool Throw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool Kit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool Heal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: CrowLoadingInfo
	FText ModeName;//[Offset: 0x0, Size: 1]
	FText MapName;//[Offset: 0x18, Size: 1]
	FText[] ModeDescriptionList;//[Offset: 0x30, Size: 1]
	FText[] ModeTipTextList;//[Offset: 0x40, Size: 1]
	Texture2D*[] LoadingImageList;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CrowWidgetManager.Object
	CrowHUDBase* CurrentHUD;//[Offset: 0x28, Size: 1]
	CrowMessageBoxInfo[] MessageBoxInfoQueue;//[Offset: 0x30, Size: 1]
	CrowMessageBoxWidget* MessageBoxWidget;//[Offset: 0x40, Size: 1]
	CrowLoadingBoxWidget* LoadingBoxWidget;//[Offset: 0x48, Size: 1]
	CrowSystemMessageBoxWidget* SystemMessageBoxWidget;//[Offset: 0x50, Size: 1]
	CrowSystemMessageBoxWidget* SystemMessageBoxBottomWidget;//[Offset: 0x58, Size: 1]
	CrowMultiSystemMessageBoxWidget* MultiSystemMessageBoxWidget;//[Offset: 0x60, Size: 1]
	class CrowMessageBoxWidget* CrowMessageBoxWidgetClass;//[Offset: 0x68, Size: 1]
	class CrowLoadingBoxWidget* CrowLoadingBoxWidgetClass;//[Offset: 0x70, Size: 1]
	class CrowSystemMessageBoxWidget* CrowSysteMessageBoxWidgetClass;//[Offset: 0x78, Size: 1]
	class CrowSystemMessageBoxWidget* CrowSysteMessageBoxBottomWidgetClass;//[Offset: 0x80, Size: 1]
	class CrowMultiSystemMessageBoxWidget* CrowMultiSystemMessageBoxWidgetClass;//[Offset: 0x88, Size: 1]
	class CrowSettingsWidget* CrowSettingsWidgetClass;//[Offset: 0x90, Size: 1]
	class CrowMovieWidget* CrowMovieWidgetClass;//[Offset: 0x98, Size: 1]
	class CrowSettingsBrightnessWidget* CrowSettingsBrightnessWidgetClass;//[Offset: 0xa0, Size: 1]
	AkAudioEvent* Default_AudioEvent_Clicked;//[Offset: 0xa8, Size: 1]
	AkAudioEvent* Default_AudioEvent_Hovered;//[Offset: 0xb0, Size: 1]
	void OpenNoticePopup();// 0xca8430
	CrowGameHUDBase* GetMyHUD();// 0x1b77710
	CrowLobbyHUD* GetLobbyHUD();// 0x1b776e0
	CrowHUDBase* GetCurrentHUD();// 0x1b776b0

--------------------------------
Class: CrowLobbyHUD.CrowHUDBase.HUD.Actor.Object
	class UserWidget* LobbyMainWidget;//[Offset: 0x400, Size: 1]
	class UserWidget* CountdownWidgetClass;//[Offset: 0x408, Size: 1]
	class CrowRejoinMsgWidget* RejoinMsgWidgetClass;//[Offset: 0x410, Size: 1]
	class UserWidget* TooltipWidgetClass;//[Offset: 0x418, Size: 1]
	class CrowRankPopupWidget* RankPopupWidgetClass;//[Offset: 0x420, Size: 1]
	CrowLobbyMainWidget* MainWidget;//[Offset: 0x428, Size: 1]
	CrowCountdownWidget* CountdownWidget;//[Offset: 0x430, Size: 1]
	CrowRejoinMsgWidget* RejoinMsgWidget;//[Offset: 0x438, Size: 1]
	CrowWidgetTooltip* ToolTipWidget;//[Offset: 0x440, Size: 1]
	CrowRankPopupWidget* RankPopupWidget;//[Offset: 0x448, Size: 1]
	void OpenHUDLobbyMainWidget();// 0x1abbde0

--------------------------------
Class: CrowRejoinMsgWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_ModeName;//[Offset: 0x368, Size: 1]
	TextBlock* TB_WorldName;//[Offset: 0x370, Size: 1]
	Image* IMG_World;//[Offset: 0x378, Size: 1]
	CrowButton* BT_MessageOk;//[Offset: 0x380, Size: 1]
	CrowButton* BT_MessageCancel;//[Offset: 0x388, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x390, Size: 1]
	void OnBtnOk();// 0x1b11510
	void OnBtnCancel();// 0x1b114f0

--------------------------------
Class: CrowSceneLobby.CrowSceneBase.Actor.Object
	CrowLobbyObjectBider* LobbyObjectBider;//[Offset: 0x950, Size: 1]
	CrowLobbyMainObjectBider* LobbyMainObjectBider;//[Offset: 0x958, Size: 1]
	CrowWeaponLoadoutObjectBider* WeaponLoadoutObjectBider;//[Offset: 0x960, Size: 1]
	<enum,CrowLobbyCharacterPawn*> LobbyCharacterPawnMap;//[Offset: 0x968, Size: 1]
	<enum,CrowWeaponLobby*> LobbyCharacterWeaponMap;//[Offset: 0x9b8, Size: 1]
	CrowWeaponLobby*[] LobbyLoadoutWeaponArray;//[Offset: 0xa08, Size: 1]
	CrowLobbyCharacterPawn* LobbyCharacterCustomPawn;//[Offset: 0xa18, Size: 1]
	CrowWeaponLobby* LobbyCharacterCustomWeapon;//[Offset: 0xa20, Size: 1]
	CrowWeaponLobby* LobbyCustomWeapon;//[Offset: 0xa28, Size: 1]
	CrowSprayActor* LobbySprayActor;//[Offset: 0xa30, Size: 1]
	enum CurrentLobbySceneMode;//[Offset: 0xa38, Size: 1]
	float TimeToNextCameraChange;//[Offset: 0xa3c, Size: 1]
	Rotator DefaultCharacterCustomPawnRotion;//[Offset: 0xa40, Size: 1]
	Rotator DragStartCharacterCustomPawnRotion;//[Offset: 0xa4c, Size: 1]
	Rotator DefaultCustomWeaponRotion;//[Offset: 0xa58, Size: 1]
	Rotator DragStartCustomWeaponRotion;//[Offset: 0xa64, Size: 1]
	Rotator CurrentCustomWeaponRotion;//[Offset: 0xa70, Size: 1]
	Rotator DefaultCharacterPreviewRotation;//[Offset: 0xa7c, Size: 1]
	Rotator DefaultVehiclePreviewRotation;//[Offset: 0xa88, Size: 1]
	Rotator DefaultParachutePreviewRotation;//[Offset: 0xa94, Size: 1]
	Rotator DragStartPreviewRotion;//[Offset: 0xaa0, Size: 1]
	Vector2D DragStartScreenPosition;//[Offset: 0xaac, Size: 1]
	enum StartGameType;//[Offset: 0xab4, Size: 1]
	enum WeaponRotationMode;//[Offset: 0xab5, Size: 1]
	bool IsRotatingCharacterCustomPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab6, Size: 1]
	Rotator CharacterRotationFrom;//[Offset: 0xab8, Size: 1]
	Rotator CharacterRotationTo;//[Offset: 0xac4, Size: 1]
	bool bUpdateCharacterRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 1]
	float CharacterRotationTime;//[Offset: 0xad4, Size: 1]
	float CurrentCharacterRotationTime;//[Offset: 0xad8, Size: 1]
	bool bPlayingCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 1]
	bool bCheckMatchingServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadd, Size: 1]
	bool bCheckPartyServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xade, Size: 1]
	int SaveValueMapIndex;//[Offset: 0xae0, Size: 1]
	int64 SaveValueWeaponIndex;//[Offset: 0xae8, Size: 1]
	int8 SaveValueWeaponSlot;//[Offset: 0xaf0, Size: 1]
	int64 SaveValueUserServerKey;//[Offset: 0xaf8, Size: 1]
	bool SaveValuePartyJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	int SaveValueAppearanceIndex;//[Offset: 0xb04, Size: 8]
	FString SaveNickName;//[Offset: 0xb28, Size: 1]
	enum CurrentCharacterCustomCameraType;//[Offset: 0xb38, Size: 1]
	enum CurrentMainCameraType;//[Offset: 0xb39, Size: 1]
	bool bClothTestMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc8, Size: 1]
	bool bWeaponTestMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc9, Size: 1]
	void OnLackOfRCPPointYesNo(enum ButtonType);// 0x1b197b0
	void OnEndPlayCameraMode();// 0x1b19790
	void OnCreateStarShellFx();// 0x1b19770
	void EndedRotationAnimPaly(AnimMontage* Montage, enum AnimEndType);// 0x1b19600
	void EndedNoiseAnimPaly_Slot4(AnimMontage* Montage, enum AnimEndType);// 0x1b19530
	void EndedNoiseAnimPaly_Slot3(AnimMontage* Montage, enum AnimEndType);// 0x1b19460
	void EndedNoiseAnimPaly_Slot2(AnimMontage* Montage, enum AnimEndType);// 0x1b19390
	void EndedNoiseAnimPaly_Slot1(AnimMontage* Montage, enum AnimEndType);// 0x1b192c0
	void DelayedNoiseAnimPaly_Slot4();// 0x1b192a0
	void DelayedNoiseAnimPaly_Slot3();// 0x1b19280
	void DelayedNoiseAnimPaly_Slot2();// 0x1b19260
	void DelayedNoiseAnimPaly_Slot1();// 0x1b19240
	void CheckDlc();// 0x1b191e0

--------------------------------
Class: CrowLobbyObjectBider.Actor.Object
	Actor*[] CharacterCustomActors;//[Offset: 0x220, Size: 1]
	Actor*[] VehicleCustomActors;//[Offset: 0x230, Size: 1]
	Actor*[] SprayCustomActors;//[Offset: 0x240, Size: 1]
	Actor* CharacterCustom_Camera;//[Offset: 0x250, Size: 1]
	Actor* CharacterEmotion_Camera;//[Offset: 0x258, Size: 1]
	Actor* CharacterAppearance_Camera;//[Offset: 0x260, Size: 1]
	Actor* CharacterrTattooArm_Camera;//[Offset: 0x268, Size: 1]
	Actor* CharacterCustom_SpawnPoint;//[Offset: 0x270, Size: 1]
	Actor* CharacterPreview_Camera;//[Offset: 0x278, Size: 1]
	Actor* Loadout_Camera;//[Offset: 0x280, Size: 1]
	Actor* WeaponLocation_Primary;//[Offset: 0x288, Size: 1]
	Actor* WeaponLocation_Secondary;//[Offset: 0x290, Size: 1]
	Actor* WeaponLocation_Melee;//[Offset: 0x298, Size: 1]
	Actor* WeaponLocation_Throw1;//[Offset: 0x2a0, Size: 1]
	Actor* WeaponLocation_Throw2;//[Offset: 0x2a8, Size: 1]
	Actor* VehicleSkin_RootActor;//[Offset: 0x2b0, Size: 1]
	CrowVehicleSpawner* VehicleSkin_Spawner;//[Offset: 0x2b8, Size: 1]
	CameraActor* VehicleSkin_Camera_Near;//[Offset: 0x2c0, Size: 1]
	CameraActor* VehicleSkin_Camera_Far;//[Offset: 0x2c8, Size: 1]
	CameraActor* VehicleSkinPreview_Camera_Near;//[Offset: 0x2d0, Size: 1]
	CameraActor* VehicleSkinPreview_Camera_Far;//[Offset: 0x2d8, Size: 1]
	Actor* ParachuteSkin_RootActor;//[Offset: 0x2e0, Size: 1]
	CrowSkydivingSpawner* ParachuteSkin_Spawner;//[Offset: 0x2e8, Size: 1]
	Actor* SprayCustom_Camera;//[Offset: 0x2f0, Size: 1]
	Actor* SprayCustom_SpawnPoint;//[Offset: 0x2f8, Size: 1]
	Actor* CameraCharacter_Eye;//[Offset: 0x300, Size: 1]
	Actor* CameraCharacter_Upper;//[Offset: 0x308, Size: 1]
	Actor* CameraCharacter_Lower;//[Offset: 0x310, Size: 1]
	float CameraChangingTime;//[Offset: 0x318, Size: 1]
	bool UseCustomCharacterRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	float CustomCharacterRotationSpeed;//[Offset: 0x320, Size: 1]
	AnimMontage* Rotation_LeftAnimations;//[Offset: 0x328, Size: 1]
	AnimMontage* Rotation_RightAnimations;//[Offset: 0x330, Size: 1]
	Actor* SprayCustomActorsBounds;//[Offset: 0x338, Size: 1]
	Actor* VehicleCustomActorsBounds;//[Offset: 0x340, Size: 1]
	Actor* CharacterCustomActorsBounds;//[Offset: 0x348, Size: 1]
	void B_ToggleActorsVisibility();// 0xca8430
	void A_BindActorsInLevel();// 0xca8430

--------------------------------
Class: CrowVehicleSpawner.Actor.Object
	enum SpawnerType;//[Offset: 0x220, Size: 1]
	class CrowVehiclePawn* VehicleClass;//[Offset: 0x228, Size: 1]
	float SpawnDelay;//[Offset: 0x230, Size: 1]
	uint32 SpawnLimit;//[Offset: 0x234, Size: 1]
	void OnVehicleDestroyed(Actor* DestroyedActor);// 0x1b59ab0

--------------------------------
Class: CrowSkydivingSpawner.Actor.Object
	class CrowSkydivingPawn* SkydivingPawnClass;//[Offset: 0x220, Size: 1]

--------------------------------
Class: CrowSkydivingPawn.Character.Pawn.Actor.Object
	enum SkydivingState;//[Offset: 0x4b8, Size: 1]
	enum LocalSkydivingState;//[Offset: 0x4b9, Size: 1]
	enum SkydivingAnimState;//[Offset: 0x4ba, Size: 1]
	FName ParachuteSpreadKeyName;//[Offset: 0x4bc, Size: 1]
	FName LeftHandSocketName;//[Offset: 0x4c4, Size: 1]
	FName RightHandSocketName;//[Offset: 0x4cc, Size: 1]
	FName SpineSocketName;//[Offset: 0x4d4, Size: 1]
	float RecoverLookAroundSpeed;//[Offset: 0x4dc, Size: 1]
	float GodModeTime;//[Offset: 0x4e0, Size: 1]
	MaterialInstance* BlurMaterialInst;//[Offset: 0x4e8, Size: 1]
	MaterialInstanceDynamic* BlurMaterialInstDynamic;//[Offset: 0x4f0, Size: 1]
	float BlurMaxVelocityZ;//[Offset: 0x4f8, Size: 1]
	float BlurDistParam;//[Offset: 0x4fc, Size: 1]
	float DisapearTimeSecond;//[Offset: 0x500, Size: 1]
	enum ParachuteState;//[Offset: 0x504, Size: 1]
	uint32 ParachuteSkinIndex;//[Offset: 0x508, Size: 1]
	FName ParachuteSocketName;//[Offset: 0x50c, Size: 1]
	bool bUseParachuteBoneTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	AnimSequence* ParachuteAnimSpread;//[Offset: 0x518, Size: 1]
	AnimSequence* ParachuteAnimFall;//[Offset: 0x520, Size: 1]
	AnimSequence* ParachuteAnimLand;//[Offset: 0x528, Size: 1]
	uint32 DefaultClothBackpackIndex;//[Offset: 0x530, Size: 1]
	AkAudioEvent* FreeFallSound;//[Offset: 0x538, Size: 1]
	AkAudioEvent* FreeFallSound_End;//[Offset: 0x540, Size: 1]
	AkAudioEvent* ParachuteSound;//[Offset: 0x548, Size: 1]
	AkAudioEvent* ParachuteSound_End;//[Offset: 0x550, Size: 1]
	AkComponent* AkComponent;//[Offset: 0x558, Size: 1]
	bool bShowSkydivingWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	bool bParachuteReleasedByHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	bool bForceThirdCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 1]
	class MatineeCameraShake* FreeFallCameraShakeClass;//[Offset: 0x568, Size: 1]
	float ViewPitchDirectionValue;//[Offset: 0x570, Size: 1]
	float FreeFallAnimRollChangeValue;//[Offset: 0x574, Size: 1]
	float FreeFallAnimRollInSpeed;//[Offset: 0x578, Size: 1]
	float FreeFallAnimRollOutSpeed;//[Offset: 0x57c, Size: 1]
	float ReadyToSpreadParachuteHeight;//[Offset: 0x580, Size: 1]
	float ParachuteSpreadLimitZ;//[Offset: 0x584, Size: 1]
	float ReadyToLandLimitZ;//[Offset: 0x588, Size: 1]
	float ReadyToLandLimitZWood;//[Offset: 0x58c, Size: 1]
	float ParachuteApproachTime;//[Offset: 0x590, Size: 1]
	float MinViewPitchDirectionRate;//[Offset: 0x594, Size: 1]
	float ReadyToLandVelocityScale;//[Offset: 0x598, Size: 1]
	FString FreeFallDialogRowName;//[Offset: 0x5a0, Size: 1]
	FString ParachuteDialogRowName;//[Offset: 0x5b0, Size: 1]
	Vector AddedFarViewSocketOffset;//[Offset: 0x5c0, Size: 1]
	CrowSkydivingSettingss NoneSettings;//[Offset: 0x5d0, Size: 1]
	CrowSkydivingSettingss FreeFallSettings;//[Offset: 0x690, Size: 1]
	CrowSkydivingSettingss ParachuteSpreadSettings;//[Offset: 0x750, Size: 1]
	CrowSkydivingSettingss ParachuteSettings;//[Offset: 0x810, Size: 1]
	CrowSkydivingSettingss ReadyToLandSettings;//[Offset: 0x8d0, Size: 1]
	CrowSkydivingSettingss LandSettings;//[Offset: 0x990, Size: 1]
	float WalkLandSpeed;//[Offset: 0xa50, Size: 1]
	float RollingLandSpeed;//[Offset: 0xa54, Size: 1]
	AnimMontage* WalkLandAnim;//[Offset: 0xa58, Size: 1]
	AnimMontage* RollingLandAnim;//[Offset: 0xa60, Size: 1]
	float ForwardRate;//[Offset: 0xa68, Size: 1]
	float RightRate;//[Offset: 0xa6c, Size: 1]
	float DownRate;//[Offset: 0xa70, Size: 1]
	float DefaultMinScaleValue;//[Offset: 0xa74, Size: 1]
	float DefaultIdleScaleValue;//[Offset: 0xa78, Size: 1]
	float ForwardMaxScaleValue;//[Offset: 0xa7c, Size: 1]
	float InputYawScale;//[Offset: 0xa80, Size: 1]
	float InputPitchScale;//[Offset: 0xa84, Size: 1]
	float InputRollScale;//[Offset: 0xa88, Size: 1]
	float RecoverRollDefault;//[Offset: 0xa8c, Size: 1]
	float RecoverRollIdle;//[Offset: 0xa90, Size: 1]
	float RecoverRollCounter;//[Offset: 0xa94, Size: 1]
	float AnimationAxisForwardValueScale;//[Offset: 0xa98, Size: 1]
	float AnimationAxisRightValueScale;//[Offset: 0xa9c, Size: 1]
	Vector TargetCameraSocketOffset;//[Offset: 0xaa0, Size: 1]
	Rotator CameraRotation;//[Offset: 0xaac, Size: 1]
	CameraShakeBase* FreeFallCameraShake;//[Offset: 0xab8, Size: 1]
	Vector DragArea;//[Offset: 0xac0, Size: 1]
	Vector DirectionalDragRatio;//[Offset: 0xacc, Size: 1]
	float ViewPitchDirectionRate;//[Offset: 0xad8, Size: 1]
	float ControlRotYawInterpValue;//[Offset: 0xadc, Size: 1]
	float AnimationAxisForwardValue;//[Offset: 0xae0, Size: 1]
	float AnimationAxisRightValue;//[Offset: 0xae4, Size: 1]
	float AnimationAxisRollValue;//[Offset: 0xae8, Size: 1]
	CrowCharacterPawn* CharacterPawn;//[Offset: 0xaf0, Size: 1]
	CrowSpringArmComponent* TPSpringArm;//[Offset: 0xaf8, Size: 1]
	float LandHeight;//[Offset: 0xb00, Size: 1]
	float DistanceLandToMe;//[Offset: 0xb04, Size: 1]
	float StateTimeSecond;//[Offset: 0xb08, Size: 1]
	float CameraDirectingTimeSecond;//[Offset: 0xb0c, Size: 1]
	float GlobalTimeSecond;//[Offset: 0xb10, Size: 1]
	bool bLookAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb14, Size: 1]
	bool bRecoverLookAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb15, Size: 1]
	Rotator RecoverLookingRotation;//[Offset: 0xb18, Size: 1]
	bool bFarView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb24, Size: 1]
	bool bUpdateCameraTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb25, Size: 1]
	bool bIsReadyToParachuteSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb26, Size: 1]
	bool bIsInitCharacterPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb27, Size: 1]
	bool bIsReadyLocalCharacterSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28, Size: 1]
	bool bEquipDefaultClothBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb29, Size: 1]
	bool bRevertFirstCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2a, Size: 1]
	bool bOnWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2b, Size: 1]
	float ApproachAlpha;//[Offset: 0xb2c, Size: 1]
	float PrevAxisForwardValue;//[Offset: 0xb30, Size: 1]
	byte AxisForwardState;//[Offset: 0xb34, Size: 1]
	byte AxisRightState;//[Offset: 0xb35, Size: 1]
	CrowPlayerControllerBase* PC;//[Offset: 0xb38, Size: 1]
	CrowPlayerStateBase* PS;//[Offset: 0xb40, Size: 1]
	bool bIsCameraBlendComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 1]
	bool bIsChangeFreeFallSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb51, Size: 1]
	bool bIsChangeParachuteSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb52, Size: 1]
	bool bIsChangeLandSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb53, Size: 1]
	Vector ReadyToLandPos;//[Offset: 0xb54, Size: 1]
	float ReadyToLandSpeed;//[Offset: 0xb60, Size: 1]
	Rotator LerpLookingRotation;//[Offset: 0xb64, Size: 1]
	bool bNoseDive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 1]
	Vector DefaultSpringArmRelativeLocation;//[Offset: 0xb74, Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 1]
	bool bAttachSpringArmAtCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb81, Size: 1]
	bool bIsFollowMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb82, Size: 1]
	uint64 FollowedTargetServerKey;//[Offset: 0xb88, Size: 1]
	CrowPlayerStateBase* FollowedTargetPlayerState;//[Offset: 0xb90, Size: 1]
	CrowSkydivingPawn* FollowedTarget;//[Offset: 0xb98, Size: 1]
	CrowSkydivingFollowSetting FreeFallFollowSetting;//[Offset: 0xba0, Size: 1]
	CrowSkydivingFollowSetting ParachuteFollowSetting;//[Offset: 0xbd0, Size: 1]
	float FollowedTargetLerpSpeed;//[Offset: 0xc00, Size: 1]
	Rotator PrevFollowedTargetRotation;//[Offset: 0xc04, Size: 1]
	bool bUseLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 1]
	float RotationLagSpeed;//[Offset: 0xc14, Size: 1]
	float RotationLagSpeedYaw;//[Offset: 0xc18, Size: 1]
	float DefaultRotationLagSpeed;//[Offset: 0xc1c, Size: 1]
	Rotator PrevControlRotation;//[Offset: 0xc20, Size: 1]
	float LagMaxTimeStep;//[Offset: 0xc2c, Size: 1]
	bool bIsCameraDirecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 1]
	float SkydivingTargetArmLength;//[Offset: 0xc34, Size: 1]
	Rotator SkydivingCameraForward;//[Offset: 0xc38, Size: 1]
	Rotator SkydivingActorRotation;//[Offset: 0xc44, Size: 1]
	Rotator BoxTraceOrientation;//[Offset: 0xc54, Size: 1]
	bool bCheckGSTSpreadParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	bool bCheckGSTReadToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 1]
	bool bCheckGSTLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc62, Size: 1]
	bool bCheckGSTNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc63, Size: 1]
	bool bCheckHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 1]
	bool bUseSceneTableValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc65, Size: 1]
	enum PlayLandAnimState;//[Offset: 0xc66, Size: 1]
	bool bUseCustomLandCheckDist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc67, Size: 1]
	float CustomLandCheckDist;//[Offset: 0xc68, Size: 1]
	bool bDrawFollowLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 1]
	enum PlayCameraDirectionState;//[Offset: 0xc6d, Size: 1]
	bool bIsPlayCameraDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6e, Size: 1]
	ArrowComponent* VelArrow;//[Offset: 0xc70, Size: 1]
	ArrowComponent* VelArrowX;//[Offset: 0xc78, Size: 1]
	ArrowComponent* VelArrowY;//[Offset: 0xc80, Size: 1]
	ArrowComponent* VelArrowZ;//[Offset: 0xc88, Size: 1]
	bool bShowDebugSkydivingPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc90, Size: 1]
	bool bDebugFreeFallCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc91, Size: 1]
	bool UseParachuteBoneTransform();// 0x1b2ff40
	void SkydivingShowDebugSkydivingPawn();// 0x1b2ff20
	void SkydivingNextSkydivingState();// 0x1b2ff00
	void RequestSetViewPitchDirectionRate(float InViewPitchDirectionRate);// 0x1b2fe70
	void RequestSetSkydivingState(byte InState);// 0x1b2fdc0
	void RequestSetNextSkydivingState();// 0x1b2fd70
	void RequestSetLookingRotation(const Rotator NewRotation);// 0x1b2fcf0
	void RequestSetFollowedTarget(CrowSkydivingPawn* InFollowedTarget);// 0x1b2fc60
	void RequestSetCharacterLocationAndRotation(Vector InLoc, Rotator InRot);// 0x1b2fb70
	void RequestSetAxisRightState(byte InAxisRightState);// 0x1b2faf0
	void RequestSetAxisForwardState(byte InAxisForwardState);// 0x1a91600
	void RequestEndFollowMode();// 0x1aef260
	void PlayCameraDirection(byte InState);// 0x1b2fa70
	void OnLandinAnimationComplete(AnimMontage* AnimMontage, bool bInterruped);// 0x1b2f9a0
	void OnInputKeyModified();// 0x1b2f980
	void OnHitCapsuleComponent(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult HitResult);// 0x1b2f7a0
	void MulticastSetNoseDive(bool bValue);// 0x1b2f630
	Transform GetSpineSocketTransform();// 0x1b2f5d0
	Transform GetRightHandSocketTransform();// 0x1b2f570
	enum GetParachuteState();// 0x1b2f550
	Transform GetLeftHandSocketTransform();// 0x1b2f4f0

--------------------------------
Class: CrowSkydivingSettingss
	float ForwardRate;//[Offset: 0x0, Size: 1]
	float RightRate;//[Offset: 0x4, Size: 1]
	float DownRate;//[Offset: 0x8, Size: 1]
	float DefaultMinScaleValue;//[Offset: 0xc, Size: 1]
	float DefaultIdleScaleValue;//[Offset: 0x10, Size: 1]
	float ForwardMaxScaleValue;//[Offset: 0x14, Size: 1]
	float InputYawScale;//[Offset: 0x18, Size: 1]
	float InputPitchScale;//[Offset: 0x1c, Size: 1]
	float InputRollScale;//[Offset: 0x20, Size: 1]
	float RecoverRollDefault;//[Offset: 0x24, Size: 1]
	float RecoverRollIdle;//[Offset: 0x28, Size: 1]
	float RecoverRollCounter;//[Offset: 0x2c, Size: 1]
	float AnimationAxisForwardValueScale;//[Offset: 0x30, Size: 1]
	float AnimationAxisRightValueScale;//[Offset: 0x34, Size: 1]
	float MaxFlySpeed;//[Offset: 0x38, Size: 1]
	float BrakingDecelerationFlying;//[Offset: 0x3c, Size: 1]
	Vector2D ViewPitchMinMax;//[Offset: 0x40, Size: 1]
	Vector2D ViewRollMinMax;//[Offset: 0x48, Size: 1]
	Vector CameraSocketOffset;//[Offset: 0x50, Size: 1]
	Rotator CameraRotation;//[Offset: 0x5c, Size: 1]
	CrowSkydivingCameraDirections CameraDirection;//[Offset: 0x68, Size: 1]
	Vector DragAreaSize;//[Offset: 0x98, Size: 1]
	Vector DirectionalDragRatio;//[Offset: 0xa4, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 1]
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	float MaxAcceleration;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: CrowSkydivingCameraDirections
	float ResetCameraForwardTime;//[Offset: 0x0, Size: 1]
	byte ResetEasingType;//[Offset: 0x4, Size: 1]
	Rotator ResetCameraForwardDestination;//[Offset: 0x8, Size: 1]
	float CameraForwardTime;//[Offset: 0x14, Size: 1]
	byte EasingType;//[Offset: 0x18, Size: 1]
	Rotator CameraForwardDestination;//[Offset: 0x1c, Size: 1]
	CurveFloat* CameraDistanceCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowSkydivingFollowSetting
	Vector FollowLineOffset;//[Offset: 0x0, Size: 1]
	float FollowLineLength;//[Offset: 0xc, Size: 1]
	float LookAtClosedPointDist;//[Offset: 0x10, Size: 1]
	float DefaultMaxAccelerationScale;//[Offset: 0x14, Size: 1]
	float DefaultMaxFlySpeedScale;//[Offset: 0x18, Size: 1]
	float DefaultBrakingDecelerationFlyingScale;//[Offset: 0x1c, Size: 1]
	CrowSkydivingFollowDistSetting[] DistSettingArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowSkydivingFollowDistSetting
	float Dist;//[Offset: 0x0, Size: 1]
	float MaxAccelerationScale;//[Offset: 0x4, Size: 1]
	float MaxFlySpeedScale;//[Offset: 0x8, Size: 1]
	float BrakingDecelerationFlyingScale;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x450, Size: 1]
	float ArrowSize;//[Offset: 0x454, Size: 1]
	float ArrowLength;//[Offset: 0x458, Size: 1]
	float ScreenSize;//[Offset: 0x45c, Size: 1]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 1]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x460, Size: 1]
	void SetArrowColor(LinearColor NewColor);// 0x3b39810

--------------------------------
Class: CrowWeaponLoadoutObjectBider.Actor.Object
	Actor*[] WeaponCustomActors;//[Offset: 0x220, Size: 1]
	Actor* WeaponCustom_Camera;//[Offset: 0x230, Size: 1]
	Actor* WeaponCustom_Camera_Sticker;//[Offset: 0x238, Size: 1]
	Actor* WeaponCustom_Camera_Sub;//[Offset: 0x240, Size: 1]
	Actor* WeaponCustom_Camera_Throw;//[Offset: 0x248, Size: 1]
	Actor* WeaponCustom_Camera_Melee;//[Offset: 0x250, Size: 1]
	Actor* WeaponCustom_Camera_Kit;//[Offset: 0x258, Size: 1]
	Actor* WeaponCustom_Camera_HealKit;//[Offset: 0x260, Size: 1]
	Actor* WeaponCustom_Camera_Primary_RL;//[Offset: 0x268, Size: 1]
	Actor* WeaponCustom_SpawnPoint;//[Offset: 0x270, Size: 1]
	Actor* WeaponCustom_SpawnPoint_Sub;//[Offset: 0x278, Size: 1]
	Actor* WeaponCustom_SpawnPoint_Throw;//[Offset: 0x280, Size: 1]
	Actor* WeaponCustom_SpawnPoint_Melee;//[Offset: 0x288, Size: 1]
	Actor* WeaponCustom_SpawnPoint_Kit;//[Offset: 0x290, Size: 1]
	Actor* WeaponCustom_SpawnPoint_HealKit;//[Offset: 0x298, Size: 1]
	Actor* WeaponCustom_SpawnPoint_Primary_RL;//[Offset: 0x2a0, Size: 1]
	bool UseCustomWeaponRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	float CustomWeaponRotationSpeed;//[Offset: 0x2ac, Size: 1]
	CrowFxActivator*[] FxActivators;//[Offset: 0x2b0, Size: 1]
	Actor* WeaponLoadoutBounds;//[Offset: 0x2c0, Size: 1]
	void B_ToggleActorsVisibility();// 0xca8430
	void A_BindActorsInLevel();// 0xca8430

--------------------------------
Class: CrowFxActivator.Actor.Object
	ParticleSystem* ParticleFX;//[Offset: 0x220, Size: 1]
	bool StartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool UseLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	AkAudioEvent*[] LobbyAudioEvents;//[Offset: 0x230, Size: 1]
	AkAudioEvent*[] LobbyAudioStopEvents;//[Offset: 0x240, Size: 1]
	Actor* AudioTarget;//[Offset: 0x250, Size: 1]
	SphereComponent* SphereComponent;//[Offset: 0x258, Size: 1]
	ParticleSystemComponent* FxParticlesComp;//[Offset: 0x260, Size: 1]

--------------------------------
Class: CrowSprayActor.Actor.Object
	CrowDecalComponent* DecalComponent;//[Offset: 0x228, Size: 1]
	void ChangeOption(bool IsVisible);// 0x1b36850

--------------------------------
Class: CrowDecalComponent.DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x238, Size: 1]
	CurveFloat* FadeInCurve;//[Offset: 0x240, Size: 1]
	CurveFloat* FadeOutCurve;//[Offset: 0x248, Size: 1]
	CurveFloat* EmissiveInCurve;//[Offset: 0x250, Size: 1]
	CurveFloat* EmissiveOutCurve;//[Offset: 0x258, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1f8, Size: 1]
	int SortOrder;//[Offset: 0x200, Size: 1]
	float FadeScreenSize;//[Offset: 0x204, Size: 1]
	float FadeStartDelay;//[Offset: 0x208, Size: 1]
	float FadeDuration;//[Offset: 0x20c, Size: 1]
	float FadeInDuration;//[Offset: 0x210, Size: 1]
	float FadeInStartDelay;//[Offset: 0x214, Size: 1]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	Vector DecalSize;//[Offset: 0x21c, Size: 1]
	void SetSortOrder(int Value);// 0x3b6ddd0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x3b6db40
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x3b6da20
	void SetFadeIn(float StartDelay, float Duaration);// 0x3b6d950
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x3b6d6a0
	float GetFadeStartDelay();// 0x3b6d180
	float GetFadeInStartDelay();// 0x3b6d150
	float GetFadeInDuration();// 0x3b6d120
	float GetFadeDuration();// 0x3b6d0f0
	MaterialInterface* GetDecalMaterial();// 0x3b6d0c0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x3b6d060

--------------------------------
Class: CrowRankPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_RankIcon_Current;//[Offset: 0x348, Size: 1]
	Image* IMG_RankIcon_Next;//[Offset: 0x350, Size: 1]
	TextBlock* TB_RankName_Current;//[Offset: 0x358, Size: 1]
	TextBlock* TB_RankName_Next;//[Offset: 0x360, Size: 1]
	WidgetAnimation* AniRankUp;//[Offset: 0x368, Size: 1]
	WidgetAnimation* AniRankDown;//[Offset: 0x370, Size: 1]
	void OnAnimationFinish();// 0x1a290c0

--------------------------------
Class: CrowLobbyMainWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowGameModDetailWidget* WB_GameModDetail;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_Main;//[Offset: 0x350, Size: 1]
	VerticalBox* VB_Lobby_Play;//[Offset: 0x358, Size: 1]
	CrowModInfoButtonWidget* WB_LobbyModInfoButton;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Play;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Matching;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Join;//[Offset: 0x378, Size: 1]
	class CrowLocalSelectSlotWidget* LocalSelectSlotWidgetClass;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_LocalSelect;//[Offset: 0x388, Size: 1]
	CrowToggleButton* BT_Toggle_LocalSelect;//[Offset: 0x390, Size: 1]
	TextBlock* TB_CurrentLocal;//[Offset: 0x398, Size: 1]
	TextBlock* TB_PingStatus;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_Pingms;//[Offset: 0x3a8, Size: 1]
	CanvasPanel* CP_LocalSelect_List;//[Offset: 0x3b0, Size: 1]
	VerticalBox* VB_LocalSelect_List;//[Offset: 0x3b8, Size: 1]
	WidgetSwitcher* WS_CameraView;//[Offset: 0x3c0, Size: 1]
	CrowButton* BT_CameraFront;//[Offset: 0x3c8, Size: 1]
	CrowButton* BT_CameraLeft;//[Offset: 0x3d0, Size: 1]
	CrowButton* BT_CameraRight;//[Offset: 0x3d8, Size: 1]
	HorizontalBox* HB_Tutorial_Customize;//[Offset: 0x3e0, Size: 1]
	CanvasPanel* CP_LobbyTabPanel;//[Offset: 0x3e8, Size: 1]
	CrowTopMainMenuWidget* WB_TopMainMenu;//[Offset: 0x3f0, Size: 1]
	CrowTopBarDescWidget* WB_TopBar_Desc;//[Offset: 0x3f8, Size: 1]
	CrowPlaySettingWidget* WB_PlaySetting;//[Offset: 0x400, Size: 1]
	CanvasPanel* CP_TopRightMenu;//[Offset: 0x408, Size: 1]
	CanvasPanel* CP_Invite;//[Offset: 0x410, Size: 1]
	CrowButton* BT_Social;//[Offset: 0x418, Size: 1]
	CrowRankWidget* WB_RankWidget;//[Offset: 0x420, Size: 1]
	WidgetSwitcher* WS_MesseageMode;//[Offset: 0x428, Size: 1]
	CrowButton* BT_AllAllow;//[Offset: 0x430, Size: 1]
	CrowButton* BT_FriendsOnly;//[Offset: 0x438, Size: 1]
	CrowButton* BT_AllRefuse;//[Offset: 0x440, Size: 1]
	CrowButton* BT_InviteMail;//[Offset: 0x448, Size: 1]
	Image* IMG_Icon_Invite_New;//[Offset: 0x450, Size: 1]
	CrowButton* BT_Setting;//[Offset: 0x458, Size: 1]
	CrowButton* BT_PostMail;//[Offset: 0x460, Size: 1]
	Image* IMG_Icon_Post;//[Offset: 0x468, Size: 1]
	Image* IMG_Icon_Post_New;//[Offset: 0x470, Size: 1]
	class CrowInviteMessageWidget* InviteMessageWidgetClass;//[Offset: 0x478, Size: 1]
	CanvasPanel* CP_InviteList;//[Offset: 0x480, Size: 1]
	CrowButton* BT_InviteExit;//[Offset: 0x488, Size: 1]
	ScrollBox* SB_InviteList;//[Offset: 0x490, Size: 1]
	CrowButton* BT_LocalPlayerSlot;//[Offset: 0x498, Size: 1]
	Image* IMG_LocalThumbnail;//[Offset: 0x4a0, Size: 1]
	CrowButton* BT_PartySlot;//[Offset: 0x4a8, Size: 1]
	Image* IMG_UserThumbnail;//[Offset: 0x4b0, Size: 1]
	Image* IMG_Respond;//[Offset: 0x4b8, Size: 1]
	CrowButton* BT_PartySlot;//[Offset: 0x4c0, Size: 1]
	Image* IMG_UserThumbnail;//[Offset: 0x4c8, Size: 1]
	Image* IMG_Respond;//[Offset: 0x4d0, Size: 1]
	CrowButton* BT_PartySlot;//[Offset: 0x4d8, Size: 1]
	Image* IMG_UserThumbnail;//[Offset: 0x4e0, Size: 1]
	Image* IMG_Respond;//[Offset: 0x4e8, Size: 1]
	CrowButton* BT_BattlePass;//[Offset: 0x4f0, Size: 1]
	Image* IMG_Icon_BattlePass;//[Offset: 0x4f8, Size: 1]
	Image* IMG_Icon_BattlePass_New;//[Offset: 0x500, Size: 1]
	CrowCustomizeCharacterDescWidget* WB_CharacterCustomizeDesc;//[Offset: 0x508, Size: 1]
	CrowCustomizeEtcDescWidget* WB_CustomizeEtcDesc;//[Offset: 0x510, Size: 1]
	CrowCustomizeItemDescWidget* WB_CustomizeItemDesc;//[Offset: 0x518, Size: 1]
	CrowShopMainWidget* WB_Shop;//[Offset: 0x520, Size: 1]
	CrowCustomizeEmotionDescWidget* WB_CustomizeEmotionDesc;//[Offset: 0x528, Size: 1]
	CrowReplayWidget* WB_Replay;//[Offset: 0x530, Size: 1]
	CrowLobbyRecordWidget* WB_Record;//[Offset: 0x538, Size: 1]
	CrowButton* WB_BT_EscBack;//[Offset: 0x540, Size: 1]
	CrowButton* WB_BT_Home;//[Offset: 0x548, Size: 1]
	CrowLobbyVehicleSkinWidget* WB_CustomizeVehicleDesc;//[Offset: 0x550, Size: 1]
	CanvasPanel* CP_Indicator;//[Offset: 0x558, Size: 1]
	CrowLobbyIndicatorWidget* WB_LobbyIndicator;//[Offset: 0x560, Size: 1]
	CrowLobbyIndicatorWidget* WB_LobbyIndicator;//[Offset: 0x568, Size: 1]
	CrowLobbyIndicatorWidget* WB_LobbyIndicator;//[Offset: 0x570, Size: 1]
	CrowLobbyIndicatorWidget* WB_LobbyIndicator;//[Offset: 0x578, Size: 1]
	CanvasPanel* CP_PauseMenu;//[Offset: 0x580, Size: 1]
	CrowButton* WB_BT_Continue;//[Offset: 0x588, Size: 1]
	CrowButton* WB_BT_Setting;//[Offset: 0x590, Size: 1]
	CrowButton* WB_BT_Quitgame;//[Offset: 0x598, Size: 1]
	CrowChatWidget* WB_CrowChatInfo;//[Offset: 0x5a0, Size: 1]
	CrowMissionWidget* WB_Mission;//[Offset: 0x5a8, Size: 1]
	CrowMissionQuickListWidget* WB_MissionQuickList;//[Offset: 0x5b0, Size: 1]
	CrowSocialWidget* WB_Social;//[Offset: 0x5b8, Size: 1]
	CanvasPanel* CP_PartyList;//[Offset: 0x5c0, Size: 1]
	CrowPartyWidget* WB_Party;//[Offset: 0x5c8, Size: 1]
	Image* IMG_PartyBg;//[Offset: 0x5d0, Size: 1]
	CrowUserPopupWidget* WB_UserPopup;//[Offset: 0x5d8, Size: 1]
	Border* BD_ReplayError;//[Offset: 0x5e0, Size: 1]
	CrowFPSWidget* WB_CrowHUD_FPS;//[Offset: 0x5e8, Size: 1]
	CrowClanMainWidget* WB_Clan;//[Offset: 0x5f0, Size: 1]
	CrowLobbyProfileWidget* WB_Profile;//[Offset: 0x5f8, Size: 1]
	CrowPlayerReportWidget* WB_PlayerReport;//[Offset: 0x600, Size: 1]
	CrowMailPopupWidget* WB_MailPopup;//[Offset: 0x608, Size: 1]
	CrowShopRewardPopupWidget* WB_RewardPopup;//[Offset: 0x610, Size: 1]
	class CrowLobbySlotNameChangeWidget* LobbySlotNameChangeWidgetClass;//[Offset: 0x618, Size: 1]
	CrowNoticeWebBrowser* NoticeWebBrowser;//[Offset: 0x620, Size: 1]
	CanvasPanel* CP_ServerNotice;//[Offset: 0x628, Size: 1]
	ScrollBox* SB_NoticeScroll;//[Offset: 0x630, Size: 1]
	TextBlock* TB_NoticeText;//[Offset: 0x638, Size: 1]
	CanvasPanel* CP_MatchingPopup;//[Offset: 0x650, Size: 1]
	CrowMatchingTimerWidget* WB_MatchingTimer;//[Offset: 0x658, Size: 1]
	CrowDailyCheckEventWidget* DailyCheckEventWidget;//[Offset: 0x660, Size: 1]
	CrowButton* BT_DailyCheck_Normal_User;//[Offset: 0x668, Size: 1]
	CrowButton* BT_DailyCheck_Return_User;//[Offset: 0x670, Size: 1]
	CrowButton* BT_DailyCheck_New_User;//[Offset: 0x678, Size: 1]
	CrowButton* BT_DailyCheck_PCRoom_User;//[Offset: 0x680, Size: 1]
	VerticalBox* VB_DailyEvent;//[Offset: 0x688, Size: 1]
	CrowLobbyTPPFPPWidget* WB_TPPFPP;//[Offset: 0x690, Size: 1]
	CrowWidgetImage* IMG_PreviewETCIcon;//[Offset: 0x698, Size: 1]
	CrowBuffWidget* WB_Buff;//[Offset: 0x6a0, Size: 1]
	CrowShopCashWidget* WB_Shop_Cash;//[Offset: 0x6a8, Size: 1]
	CrowLobbyVisitUserWidget* WB_Lobby_VisitUser;//[Offset: 0x6b0, Size: 1]
	CrowLobbyShopPopupWidget* WB_ShopPopupWidget;//[Offset: 0x6b8, Size: 1]
	bool IsContinueOpenRandomBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	CrowLobbyIndicatorWidget*[] LobbyIndicatorWidgets;//[Offset: 0x6c8, Size: 1]
	Image*[] PartyUserThumbnails;//[Offset: 0x6d8, Size: 1]
	WidgetAnimation* AniPartyWidgetShow;//[Offset: 0x6e8, Size: 1]
	WidgetAnimation* AniInvitePopup;//[Offset: 0x6f0, Size: 1]
	enum CurrentLobbyUIMode;//[Offset: 0x6f8, Size: 1]
	enum PrevLobbyUIMode;//[Offset: 0x6f9, Size: 1]
	CrowInventoryInputEventHandler* SelectDragWidget;//[Offset: 0x700, Size: 1]
	CrowWeaponData CurrentSeletedWeaponData;//[Offset: 0x708, Size: 1]
	CrowWeaponAccData CurrentSeletedWeaponAccData;//[Offset: 0x870, Size: 1]
	int CurrentSeletedSlotIndex;//[Offset: 0x920, Size: 1]
	bool OpenedPartyWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 1]
	bool OpenedInvitePopup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x925, Size: 1]
	CrowLobbySlotNameChangeWidget* WB_LobbySlotNameChangeWidget;//[Offset: 0x928, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x930, Size: 1]
	bool bUseCharacterRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	bool IsRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x939, Size: 1]
	bool PartyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93a, Size: 1]
	bool bReverseCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93b, Size: 1]
	bool bShowNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 1]
	int NoticeCount;//[Offset: 0x940, Size: 1]
	bool IsStartMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 1]
	int LastGPoint;//[Offset: 0x948, Size: 1]
	int LastRCPPoint;//[Offset: 0x94c, Size: 1]
	CrowRewardItem LastRandomBoxItem;//[Offset: 0x950, Size: 1]
	int LastRandomBoxIndex;//[Offset: 0x988, Size: 1]
	CrowRewardItem[] LastRandomBoxItems;//[Offset: 0x990, Size: 1]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x9a0, Size: 1]
	TimerHandle RegionTimerHandle;//[Offset: 0x9a8, Size: 1]
	float RegionRefreshTime;//[Offset: 0x9b0, Size: 1]
	WidgetAnimation* AniLocalSelect;//[Offset: 0x9b8, Size: 1]
	enum CurrentMatchingState;//[Offset: 0x9c0, Size: 1]
	bool bIsCustomMatching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c1, Size: 1]
	bool bNeedShopReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c2, Size: 1]
	bool bInitNewMail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c3, Size: 1]
	float RequestNewMailTimeSec;//[Offset: 0x9c4, Size: 1]
	float CurrentNewMailTimeSec;//[Offset: 0x9c8, Size: 1]
	CrowVehiclePawn* VehicleSkinPreviewPawn;//[Offset: 0x9d0, Size: 1]
	CrowSkydivingPawn* ParachuteSkinPreviewPawn;//[Offset: 0x9d8, Size: 1]
	SkeletalMeshActor*[] SkeletalMeshActors;//[Offset: 0x9e0, Size: 1]
	CrowRewardItem CurrentPreviewItem;//[Offset: 0x9f0, Size: 1]
	bool IsPlayingRandomSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 1]
	void OpenCurrencyRewardPopup();// 0x1abbdc0
	void OpenCouponRewardPopup(int AddRCPPoint);// 0x1abbd30
	void OnTextChangeLanguage();// 0x1abbcf0
	void OnMouseButtonDown_IMG_PartyBg(out Geometry InGeometry, out const PointerEvent InMouseEvent);// 0x1abbac0
	void OnEndRandomBoxSequence();// 0x1abb9b0
	void OnEndRandomBoxArraySequence();// 0xca8430
	void OnClicked_Play();// 0x1abb990
	void OnClicked_Matching();// 0x1abb950
	void OnClicked_Join();// 0x1abb930
	void OnClicked_BT_Social();// 0x1abb910
	void OnClicked_BT_Setting();// 0x1abb8f0
	void OnClicked_BT_ReturnDailyBoard();// 0x1abb8d0
	void OnClicked_BT_Quitgame();// 0x1abb8b0
	void OnClicked_BT_PostMail();// 0x1abb890
	void OnClicked_BT_PCRoomData();// 0x1abb850
	void OnClicked_BT_PartySlot();// 0x1abb870
	void OnClicked_BT_NormalDailyBoard();// 0x1abb830
	void OnClicked_BT_NewDailyBoard();// 0x1abb810
	void OnClicked_BT_InviteMail();// 0x1abb7f0
	void OnClicked_BT_InviteExit();// 0x1abb7d0
	void OnClicked_BT_Home();// 0x1abb7b0
	void OnClicked_BT_Continue();// 0x1abb790
	void OnClicked_BT_BattlePass();// 0x1abb770
	void OnClicked_BT_Back();// 0x1abb750
	void OnChangeedStateToggleMesseageMode();// 0x1abb520
	void OnChangeedStateToggleCameraMode();// 0x1abb500
	void OnChangeedStateToggle_LocalSelect(bool IsChecked);// 0x1abb540
	void ContinueOpenRandomBox();// 0xd00d60
	void CloseDailyPopup();// 0x1abb4e0

--------------------------------
Class: CrowGameModDetailWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowSelectModButtonWidget* SelectModButtonWidgetClass;//[Offset: 0x348, Size: 1]
	class CrowMapSelectButtonWidget* MapSelectButtonWidgetClass;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Gamemod_QuickplaySetting;//[Offset: 0x358, Size: 1]
	VerticalBox* VB_QuickModList;//[Offset: 0x360, Size: 1]
	ScrollBox* SCB_QuickMapList;//[Offset: 0x368, Size: 1]
	TextBlock* TB_QuickMODName;//[Offset: 0x370, Size: 1]
	TextBlock* TB_QuickMapName;//[Offset: 0x378, Size: 1]
	TextBlock* TB_QuickMapDescription;//[Offset: 0x380, Size: 1]
	CrowButton* BT_QuickDefault;//[Offset: 0x388, Size: 1]
	CrowButton* BT_QuickApply;//[Offset: 0x390, Size: 1]
	CanvasPanel* CP_Gamemod_Setting;//[Offset: 0x398, Size: 1]
	Image* IMG_GameMod;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_LeftModName;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_LeftModDescription;//[Offset: 0x3b0, Size: 1]
	ScrollBox* SCB_MapList;//[Offset: 0x3b8, Size: 1]
	TextBlock* TB_MODName;//[Offset: 0x3c0, Size: 1]
	TextBlock* TB_MapName;//[Offset: 0x3c8, Size: 1]
	TextBlock* TB_MapDescription;//[Offset: 0x3d0, Size: 1]
	CrowButton* BT_Apply;//[Offset: 0x3d8, Size: 1]
	CanvasPanel* CP_Gamemod_Select;//[Offset: 0x3e0, Size: 1]
	CrowSelectModButtonBigWidget* WB_ModQuickMatch_button;//[Offset: 0x3e8, Size: 1]
	CrowSelectModButtonBigWidget* WB_ModSquadMatch_button;//[Offset: 0x3f0, Size: 1]
	CrowSelectModButtonBigWidget* WB_ModConquestMatch_button;//[Offset: 0x3f8, Size: 1]
	CrowSelectModButtonBigWidget* WB_ModCustomMatch_button;//[Offset: 0x400, Size: 1]
	CrowSelectModButtonBigWidget* WB_ModTraining_button;//[Offset: 0x408, Size: 1]
	CrowCustomWaitingRoomWidget* WB_CustomWaitingRoom;//[Offset: 0x410, Size: 1]
	enum SelectedGameMode;//[Offset: 0x418, Size: 1]
	uint32 SelectedMapIndex;//[Offset: 0x41c, Size: 1]
	enum SelectedQuickGameMode;//[Offset: 0x420, Size: 1]
	CrowMatchInfo[] SelectedQuickMatchInfos;//[Offset: 0x428, Size: 1]
	CrowSelectModButtonBigWidget*[] ModButtonBigWidgetArray;//[Offset: 0x438, Size: 1]
	void OnClicked_QuickDefault();// 0x1a87570
	void OnClicked_QuickArrow_R();// 0x1a87550
	void OnClicked_QuickArrow_L();// 0x1a87530
	void OnClicked_QuickApply();// 0x1a87510
	void OnClicked_Arrow_R();// 0x1a874f0
	void OnClicked_Arrow_L();// 0x1a874d0
	void OnClicked_Apply();// 0x1a874b0

--------------------------------
Class: CrowSelectModButtonWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Select_ModeName;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Deselect_ModeName;//[Offset: 0x350, Size: 1]
	CrowToggleButton* CTB_ModSelect_Button;//[Offset: 0x358, Size: 1]
	CanvasPanel* CP_Lock;//[Offset: 0x360, Size: 1]
	CrowToggleButton* CTB_CheckBox;//[Offset: 0x368, Size: 1]
	enum GameMod;//[Offset: 0x390, Size: 1]
	FText GameModName;//[Offset: 0x398, Size: 1]
	void OnChangeedStateToggleModeSelect(bool IsChecked);// 0x1b21800
	void OnChangeedStateToggleModeCheck(bool IsChecked);// 0x1b21770

--------------------------------
Class: CrowMapSelectButtonWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Map;//[Offset: 0x348, Size: 1]
	TextBlock* TB_MapName;//[Offset: 0x350, Size: 1]
	TextBlock* TB_MapName_Select;//[Offset: 0x358, Size: 1]
	CrowToggleButton* CTB_Mod_MapSelect;//[Offset: 0x360, Size: 1]
	CanvasPanel* CP_Lock;//[Offset: 0x368, Size: 1]
	CrowToggleButton* CTB_CheckBox;//[Offset: 0x370, Size: 1]
	WidgetSwitcher* WS_TPPFPP;//[Offset: 0x378, Size: 1]
	CrowSceneTableRow SceneTableRow;//[Offset: 0x3a0, Size: 1]
	void OnChangeedStateToggleSelectMap(bool IsChecked);// 0x1ac9430
	void OnChangeedStateToggleCheckMap(bool IsChecked);// 0x1ac93a0

--------------------------------
Class: CrowSelectModButtonBigWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_ModIcon;//[Offset: 0x348, Size: 1]
	TextBlock* TB_MODName;//[Offset: 0x350, Size: 1]
	TextBlock* TB_ModDesc;//[Offset: 0x358, Size: 1]
	TextBlock* TB_DeselectModName;//[Offset: 0x360, Size: 1]
	TextBlock* TB_DeselectModDesc;//[Offset: 0x368, Size: 1]
	CrowToggleButton* CTB_ModSelect_Button;//[Offset: 0x370, Size: 1]
	enum GameMod;//[Offset: 0x388, Size: 1]
	void OnChangeedStateToggleModSelect(bool IsChecked);// 0x1b216e0

--------------------------------
Class: CrowCustomWaitingRoomWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowCustomWaitingRoomSlotWidget* CustomWaitingRoomSlotClass;//[Offset: 0x348, Size: 1]
	class CrowCustomUserSlotWidget* CustomUserSlotWidgetClass;//[Offset: 0x350, Size: 1]
	float RoomListRefreshTime;//[Offset: 0x358, Size: 1]
	uint32 MinUser;//[Offset: 0x35c, Size: 1]
	uint32 TeamMinUser;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_CustomMod;//[Offset: 0x368, Size: 1]
	MultiLineEditableText* EDB_SearchCustomName;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Refresh;//[Offset: 0x378, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_Room;//[Offset: 0x380, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_Mode;//[Offset: 0x388, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_Map;//[Offset: 0x390, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_UserCount;//[Offset: 0x398, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_State;//[Offset: 0x3a0, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_CameraLimit;//[Offset: 0x3a8, Size: 1]
	VerticalBox* VB_FilterState;//[Offset: 0x3b0, Size: 1]
	VerticalBox* VB_FilterMode;//[Offset: 0x3b8, Size: 1]
	VerticalBox* VB_FilterMaxUser;//[Offset: 0x3c0, Size: 1]
	VerticalBox* VB_FilterRemainSlot;//[Offset: 0x3c8, Size: 1]
	VerticalBox* VB_FilterTPPFPP;//[Offset: 0x3d0, Size: 1]
	ScrollBox* SB_SessionList;//[Offset: 0x3d8, Size: 1]
	CrowButton* BT_Join;//[Offset: 0x3e0, Size: 1]
	CrowButton* BT_Create;//[Offset: 0x3e8, Size: 1]
	CrowButton* BT_WaitingRoomExit;//[Offset: 0x3f0, Size: 1]
	CrowToggleButton* BT_Customfilter;//[Offset: 0x3f8, Size: 1]
	CanvasPanel* CP_FilterPopup;//[Offset: 0x400, Size: 1]
	CrowButton* BT_FilterCancel;//[Offset: 0x408, Size: 1]
	CrowButton* BT_FilterOK;//[Offset: 0x410, Size: 1]
	CrowButton* BT_EnableMove;//[Offset: 0x418, Size: 1]
	WidgetSwitcher* WS_EnableMove;//[Offset: 0x420, Size: 1]
	WidgetSwitcher* WS_SwitchMod;//[Offset: 0x428, Size: 1]
	VerticalBox* VB_Ateam;//[Offset: 0x430, Size: 1]
	VerticalBox* VB_Bteam;//[Offset: 0x438, Size: 1]
	CrowWidgetImage* IMG_TeamIcon_A;//[Offset: 0x440, Size: 1]
	CrowWidgetImage* IMG_TeamIcon_B;//[Offset: 0x448, Size: 1]
	TextBlock* TB_Ateam;//[Offset: 0x450, Size: 1]
	TextBlock* TB_Bteam;//[Offset: 0x458, Size: 1]
	TextBlock* TB_Ateam_Count;//[Offset: 0x460, Size: 1]
	TextBlock* TB_Bteam_Count;//[Offset: 0x468, Size: 1]
	CrowButton* BT_AteamSetting;//[Offset: 0x470, Size: 1]
	CrowButton* BT_BteamSetting;//[Offset: 0x478, Size: 1]
	Image* IMG_AteamSettingBT_Icon;//[Offset: 0x480, Size: 1]
	Image* IMG_BteamSettingBT_Icon;//[Offset: 0x488, Size: 1]
	ScrollBox* SB_SquadList;//[Offset: 0x490, Size: 1]
	VerticalBox* VB_SquadList;//[Offset: 0x498, Size: 1]
	TextBlock* TB_Squad_Count;//[Offset: 0x4a0, Size: 1]
	CanvasPanel* CP_Spctating;//[Offset: 0x4a8, Size: 1]
	GridPanel* GP_SpectatingList;//[Offset: 0x4b0, Size: 1]
	TextBlock* TB_Spctating_Count;//[Offset: 0x4b8, Size: 1]
	CanvasPanel* CP_unassigned;//[Offset: 0x4c0, Size: 1]
	GridPanel* GP_unassignedList;//[Offset: 0x4c8, Size: 1]
	TextBlock* TB_Unassigned_Count;//[Offset: 0x4d0, Size: 1]
	CrowButton* BT_Setting;//[Offset: 0x4d8, Size: 1]
	CrowButton* BT_Invite;//[Offset: 0x4e0, Size: 1]
	CrowButton* BT_Exit;//[Offset: 0x4e8, Size: 1]
	CanvasPanel* CP_CustomListDesc;//[Offset: 0x4f0, Size: 1]
	CrowWidgetImage* IMG_Map;//[Offset: 0x4f8, Size: 1]
	TextBlock* TB_RoomName;//[Offset: 0x500, Size: 1]
	TextBlock* TB_ModeName;//[Offset: 0x508, Size: 1]
	TextBlock* TB_MapName;//[Offset: 0x510, Size: 1]
	TextBlock* TB_RoomOnwer;//[Offset: 0x518, Size: 1]
	TextBlock* TB_UserCount;//[Offset: 0x520, Size: 1]
	TextBlock* TB_PlayTime;//[Offset: 0x528, Size: 1]
	Image* IMG_Lock;//[Offset: 0x530, Size: 1]
	HorizontalBox* HB_WinPoint;//[Offset: 0x538, Size: 1]
	TextBlock* TB_WinPoint;//[Offset: 0x540, Size: 1]
	TextBlock* TB_CameraLimit;//[Offset: 0x548, Size: 1]
	CrowCustomCreateRoomPopupWidget* WB_Custom_CreateSession_Popup;//[Offset: 0x550, Size: 1]
	CrowCustomInvitePopupWidget* WB_CustomInvitePopup;//[Offset: 0x558, Size: 1]
	CrowCustomPasswordPopupWidget* WB_CustomPasswordPopup;//[Offset: 0x560, Size: 1]
	CrowCustomTeamIconPopupWidget* WB_CustomTeamIconPopup;//[Offset: 0x568, Size: 1]
	CrowButton* BT_Play;//[Offset: 0x570, Size: 1]
	enum CurrentCustomMode;//[Offset: 0x578, Size: 1]
	CrowCustomDisplayRoomInfo SelectedRoomInfo;//[Offset: 0x580, Size: 1]
	CrowCustomUserSlotWidget* SelectedCustomUserSlot;//[Offset: 0x5c8, Size: 1]
	TimerHandle RoomListTimerHandle;//[Offset: 0x5d0, Size: 1]
	uint64 KickUserID;//[Offset: 0x5d8, Size: 1]
	CrowSortButtonWidget*[] SortButtonList;//[Offset: 0x5e0, Size: 1]
	CrowCustomFilterInfo FilterInfo;//[Offset: 0x5f0, Size: 1]
	CrowCustomFilterInfo FilterInfoTemp;//[Offset: 0x5fc, Size: 1]
	<byte,CrowCustomSquadSlotWidget*> CustomATeamSquadMap;//[Offset: 0x608, Size: 1]
	<byte,CrowCustomSquadSlotWidget*> CustomBTeamSquadMap;//[Offset: 0x658, Size: 1]
	<byte,CrowCustomSquadSlotWidget*> CustomSquadMap;//[Offset: 0x6a8, Size: 1]
	<byte,CrowCustomUserSlotWidget*> CustomWatcherMap;//[Offset: 0x6f8, Size: 1]
	<byte,CrowCustomUserSlotWidget*> CustomMisassignMap;//[Offset: 0x748, Size: 1]
	CrowCustomFilterSlotWidge*[] FilterSlotStateArray;//[Offset: 0x798, Size: 1]
	CrowCustomFilterSlotWidge*[] FilterSlotGameModeArray;//[Offset: 0x7a8, Size: 1]
	CrowCustomFilterSlotWidge*[] FilterSlotMaxUserArray;//[Offset: 0x7b8, Size: 1]
	CrowCustomFilterSlotWidge*[] FilterSlotReaminSlotArray;//[Offset: 0x7c8, Size: 1]
	CrowCustomFilterSlotWidge*[] FilterSlotCameraLimitArray;//[Offset: 0x7d8, Size: 1]
	FString SearchName;//[Offset: 0x7e8, Size: 1]
	void OnInputChanged_SearchCustomName(out const FText InputText);// 0x1a6c750
	void OnClickSortByUserCount();// 0x1a6bd40
	void OnClickSortByState();// 0x1a6bd20
	void OnClickSortByRoom();// 0x1a6bd00
	void OnClickSortByMode();// 0x1a6bce0
	void OnClickSortByMap();// 0x1a6bcc0
	void OnClickSortByCameraLimit();// 0x1a6bca0
	void OnClicked_WaitingRoomExit();// 0x1a6c680
	void OnClicked_UserSlot(CrowCustomUserSlotWidget* UserSlotWidget);// 0x1a6c5f0
	void OnClicked_UnSelectUserSlot(CrowCustomUserSlotWidget* UserSlotWidget);// 0x1a6c560
	void OnClicked_FilterSlotState(CrowCustomFilterSlotWidge* FilterSlotWidget);// 0x1a6c390
	void OnClicked_FilterSlotReaminSlot(CrowCustomFilterSlotWidge* FilterSlotWidget);// 0x1a6c300
	void OnClicked_FilterSlotMaxUser(CrowCustomFilterSlotWidge* FilterSlotWidget);// 0x1a6c270
	void OnClicked_FilterSlotGameMode(CrowCustomFilterSlotWidge* FilterSlotWidget);// 0x1a6c1e0
	void OnClicked_FilterSlotCameraLimit(CrowCustomFilterSlotWidge* FilterSlotWidget);// 0x1a6c150
	void OnClicked_BT_Setting();// 0x1a6c130
	void OnClicked_BT_Refresh();// 0x1a6c110
	void OnClicked_BT_Profile(CrowCustomUserSlotWidget* UserSlotWidget);// 0x1a6c080
	void OnClicked_BT_Play();// 0x1a6c020
	void OnClicked_BT_Kick(CrowCustomUserSlotWidget* UserSlotWidget);// 0x1a6bf50
	void OnClicked_BT_Join();// 0x1a6bf10
	void OnClicked_BT_Invite();// 0x1a6bef0
	void OnClicked_BT_FilterOK();// 0x1a6bed0
	void OnClicked_BT_FilterCancel();// 0x1a6beb0
	void OnClicked_BT_Exit();// 0x1a6be90
	void OnClicked_BT_EnableMove();// 0x1a6be70
	void OnClicked_BT_Create();// 0x1a6be50
	void OnClicked_BT_Change(CrowCustomUserSlotWidget* UserSlotWidget);// 0x1a6bdc0
	void OnClicked_BT_BteamSetting();// 0x1a6bd80
	void OnClicked_BT_AteamSetting();// 0x1a6bd60
	void OnChangeedStateToggleFilter(bool IsChecked);// 0x1a6bbf0

--------------------------------
Class: CrowCustomWaitingRoomSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowToggleButton* BT_RoomSlot;//[Offset: 0x348, Size: 1]
	Image* IMG_Deselec_01;//[Offset: 0x350, Size: 1]
	Image* IMG_Select;//[Offset: 0x358, Size: 1]
	Image* IMG_DeselecLock;//[Offset: 0x360, Size: 1]
	Image* IMG_SelectLock;//[Offset: 0x368, Size: 1]
	TextBlock* TB_RoomName;//[Offset: 0x370, Size: 1]
	TextBlock* TB_ModeName;//[Offset: 0x378, Size: 1]
	TextBlock* TB_MapName;//[Offset: 0x380, Size: 1]
	TextBlock* TB_UserCount;//[Offset: 0x388, Size: 1]
	TextBlock* TB_State;//[Offset: 0x390, Size: 1]
	TextBlock* TB_CameraLimit;//[Offset: 0x398, Size: 1]
	TextBlock* TB_RoomName_Select;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_ModeName_Select;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_MapName_Select;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_UserCount_Select;//[Offset: 0x3b8, Size: 1]
	TextBlock* TB_State_Select;//[Offset: 0x3c0, Size: 1]
	TextBlock* TB_CameraLimit_Select;//[Offset: 0x3c8, Size: 1]
	LinearColor ReadyRoomTextColor;//[Offset: 0x3d0, Size: 1]
	LinearColor ReadyRoomBGColor;//[Offset: 0x3e0, Size: 1]
	LinearColor SelectedReadyRoomTextColor;//[Offset: 0x3f0, Size: 1]
	LinearColor SelectedReadyRoomBGColor;//[Offset: 0x400, Size: 1]
	LinearColor PlayedRoomTextColor;//[Offset: 0x410, Size: 1]
	LinearColor PlayedRoomBGColor;//[Offset: 0x420, Size: 1]
	CrowCustomDisplayRoomInfo SelectedRoomInfo;//[Offset: 0x440, Size: 1]
	void OnChangeedStateToggle(bool IsChecked);// 0x1a6bb60

--------------------------------
Class: CrowCustomDisplayRoomInfo
	uint64 RoomIndex;//[Offset: 0x0, Size: 1]
	FString RoomName;//[Offset: 0x8, Size: 1]
	enum GameMode;//[Offset: 0x18, Size: 1]
	uint32 MapIndex;//[Offset: 0x1c, Size: 1]
	enum State;//[Offset: 0x20, Size: 1]
	int MatchingUserCount;//[Offset: 0x24, Size: 1]
	int MaxGamePlayUserCount;//[Offset: 0x28, Size: 1]
	bool UsePassWord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	FString HostName;//[Offset: 0x30, Size: 1]
	int PlaySec;//[Offset: 0x40, Size: 1]
	enum CameraLimit;//[Offset: 0x44, Size: 1]

--------------------------------
Class: CrowCustomUserSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowToggleButton* BT_Toggle;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Change;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Profile;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Kick;//[Offset: 0x360, Size: 1]
	CrowWidgetImage* IMG_SessionLeader;//[Offset: 0x368, Size: 1]
	TextBlock* TB_Username;//[Offset: 0x370, Size: 1]
	WidgetSwitcher* WS_Status;//[Offset: 0x378, Size: 1]
	Image* IMG_MyBackGround;//[Offset: 0x380, Size: 1]
	enum TeamType;//[Offset: 0x3d8, Size: 1]
	byte SquadIndex;//[Offset: 0x3d9, Size: 1]
	byte SlotIndex;//[Offset: 0x3da, Size: 1]
	CrowCustomUserInfo CustomUserInfo;//[Offset: 0x3e0, Size: 1]
	void OnUnHovered_UserSlot();// 0x1a6c820
	void OnHovered_UserSlot();// 0x1a6c730
	void OnClicked_BT_Profile();// 0x1a6c060
	void OnClicked_BT_Kick();// 0x1a6bf30
	void OnClicked_BT_Change();// 0x1a6bda0
	void OnChangeedStateToggle(bool IsChecked);// 0x1a6bad0

--------------------------------
Class: CrowCustomUserInfo
	uint64 playerId;//[Offset: 0x0, Size: 1]
	FString NickName;//[Offset: 0x8, Size: 1]
	enum TeamType;//[Offset: 0x18, Size: 1]
	byte Squard;//[Offset: 0x19, Size: 1]
	byte Slot;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: CrowCustomFilterSlotWidge.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowToggleButton* BT_Toggle;//[Offset: 0x348, Size: 1]
	TextBlock* TB_SlotName;//[Offset: 0x350, Size: 1]
	TextBlock* TB_SelectedSlotName;//[Offset: 0x358, Size: 1]
	uint32 SlotValue;//[Offset: 0x370, Size: 1]
	FText LabelName;//[Offset: 0x378, Size: 1]
	void OnChangeedStateToggle(bool IsChecked);// 0x1a64830

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 1]
	FText HintText;//[Offset: 0x140, Size: 1]
	delegate HintTextDelegate;//[Offset: 0x158, Size: 1]
	TextBlockStyle WidgetStyle;//[Offset: 0x168, Size: 1]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	SlateFontInfo Font;//[Offset: 0x3e0, Size: 1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x43d, Size: 1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x43e, Size: 1]
	MulticastInlineDelegateProperty OnTextChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0x31f4510
	void SetText(FText InText);// 0x31f4190
	void SetIsReadOnly(bool bReadOnly);// 0x31f3d80
	void SetHintText(FText InHintText);// 0x31f3ab0
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1ef32e0
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1ef32e0
	FText GetText();// 0x31f3420
	FText GetHintText();// 0x31f32a0

--------------------------------
Class: CrowSortButtonWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	FText ButtonName;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_Sorting;//[Offset: 0x370, Size: 1]
	TextBlock* TB_Base;//[Offset: 0x378, Size: 1]
	TextBlock* TB_Ascending;//[Offset: 0x380, Size: 1]
	TextBlock* TB_Descending;//[Offset: 0x388, Size: 1]
	CrowButton* BT_Base;//[Offset: 0x390, Size: 1]
	CrowButton* BT_Ascending;//[Offset: 0x398, Size: 1]
	CrowButton* BT_Descending;//[Offset: 0x3a0, Size: 1]
	CrowButton*[] ButtonList;//[Offset: 0x3a8, Size: 1]
	void OnClickNormal();// 0x1b33600
	void OnClickDescending();// 0x1b33600
	void OnClickAscending();// 0x1b335e0

--------------------------------
Class: CrowCustomCreateRoomPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Title;//[Offset: 0x348, Size: 1]
	EditableText* ET_RoomName;//[Offset: 0x350, Size: 1]
	EditableText* ET_RoomPass;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Ok;//[Offset: 0x360, Size: 1]
	CrowButton* BT_ChangeOK;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x370, Size: 1]
	WidgetSwitcher* WS_PassBtnState;//[Offset: 0x378, Size: 1]
	CrowButton* BT_PassShow;//[Offset: 0x380, Size: 1]
	CrowButton* BT_PassHide;//[Offset: 0x388, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_Mode;//[Offset: 0x390, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_Map;//[Offset: 0x398, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_MaxPlayer;//[Offset: 0x3a0, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_PlayTime;//[Offset: 0x3a8, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_WinPoint;//[Offset: 0x3b0, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_CameraLimit;//[Offset: 0x3b8, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_IngameChat;//[Offset: 0x3c0, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_IngameChat_All;//[Offset: 0x3c8, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_IngameChat_Team;//[Offset: 0x3d0, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_IngameChat_Squad;//[Offset: 0x3d8, Size: 1]
	CrowCustomSettingSlotWidget* WB_CustomSettingSlot_IngameChat_Ghost;//[Offset: 0x3e0, Size: 1]
	int[] SquadMatchMaxUsers;//[Offset: 0x3e8, Size: 1]
	int SquadMatchMaxUser;//[Offset: 0x3f8, Size: 1]
	int[] TeamMatchMaxUsers;//[Offset: 0x400, Size: 1]
	int TeamMatchMaxUser;//[Offset: 0x410, Size: 1]
	CrowCustomMapMaxUsersData[] MapMaxUsers;//[Offset: 0x418, Size: 1]
	int[] WinPoints;//[Offset: 0x428, Size: 1]
	int WinPoint;//[Offset: 0x438, Size: 1]
	int[] PlayTimes;//[Offset: 0x440, Size: 1]
	int PlayTime;//[Offset: 0x450, Size: 1]
	enum[] CameraLimits;//[Offset: 0x458, Size: 1]
	enum CameraLimit;//[Offset: 0x468, Size: 1]
	bool CreateMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 1]
	CrowCustomRoomSettingInfo CurrentRoomSettingInfo;//[Offset: 0x470, Size: 1]
	CrowMatchInfo[] GameModeInfoArray;//[Offset: 0x4e0, Size: 1]
	void OnClickWinPointSlotArrowButton(bool Next);// 0x1a60b20
	void OnClickPlayTimeArrowButton(bool Next);// 0x1a60a90
	void OnClickModeSlotArrowButton(bool Next);// 0x1a60a00
	void OnClickMaxPlayerSlotArrowButton(bool Next);// 0x1a60970
	void OnClickMapSlotArrowButton(bool Next);// 0x1a608e0
	void OnClickIngameChatTeamButton(bool Next);// 0x1a60850
	void OnClickIngameChatSquadButton(bool Next);// 0x1a607c0
	void OnClickIngameChatGhostButton(bool Next);// 0x1a60730
	void OnClickIngameChatButton(bool Next);// 0x1a606a0
	void OnClickIngameChatAllButton(bool Next);// 0x1a60610
	void OnClicked_BT_PassShow();// 0x1a60c30
	void OnClicked_BT_PassHide();// 0x1a60c10
	void OnClicked_BT_Ok();// 0x1a60bf0
	void OnClicked_BT_Cancel();// 0x1a60bd0
	void OnClickCameraLimitSlotArrowButton(bool Next);// 0x1a60580

--------------------------------
Class: CrowCustomSettingSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_SlotName;//[Offset: 0x348, Size: 1]
	TextBlock* TB_SelectedItem;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Prev;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Next;//[Offset: 0x360, Size: 1]
	FText SlotName;//[Offset: 0x368, Size: 1]
	void OnClicked_BT_Prev();// 0x1a6c040
	void OnClicked_BT_Next();// 0x1a6bfe0

--------------------------------
Class: CrowCustomMapMaxUsersData
	uint32 MapIndex;//[Offset: 0x0, Size: 1]
	int[] MaxUsers;//[Offset: 0x8, Size: 1]
	int MaxUser;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowCustomRoomSettingInfo
	FString RoomName;//[Offset: 0x8, Size: 1]
	FString PassWord;//[Offset: 0x18, Size: 1]
	enum GameMode;//[Offset: 0x28, Size: 1]
	uint32 MapIndex;//[Offset: 0x2c, Size: 1]
	int MaxGamePlayUserCount;//[Offset: 0x30, Size: 1]
	int WinPoint;//[Offset: 0x34, Size: 1]
	int PlaySec;//[Offset: 0x38, Size: 1]
	enum CameraLimit;//[Offset: 0x3c, Size: 1]
	enum ControlType;//[Offset: 0x3d, Size: 1]
	int TeamAIcon;//[Offset: 0x40, Size: 1]
	int TeamBIcon;//[Offset: 0x44, Size: 1]
	FString TeamAName;//[Offset: 0x48, Size: 1]
	FString TeamBName;//[Offset: 0x58, Size: 1]
	bool Watch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool Intrusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	bool EnableChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool EnableAllChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 1]
	bool EnableTeamChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool EnableSquadChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 1]
	bool EnableGhostChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 1]

--------------------------------
Class: CrowCustomInvitePopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Close;//[Offset: 0x348, Size: 1]
	ScrollBox* SB_FriendsList;//[Offset: 0x350, Size: 1]
	class CrowFriendSlotWidget* FriendSlotWidgetClass;//[Offset: 0x358, Size: 1]
	void OnClicked_BT_Close();// 0x1a290c0

--------------------------------
Class: CrowFriendSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetImage* IMG_UserThumenail;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_Rank;//[Offset: 0x350, Size: 1]
	TextBlock* TB_UserLevel;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Username;//[Offset: 0x360, Size: 1]
	TextBlock* TB_UserStatus;//[Offset: 0x368, Size: 1]
	TextBlock* TB_RecentTimer;//[Offset: 0x370, Size: 1]
	ScaleBox* SB_Rank;//[Offset: 0x378, Size: 1]
	Image* IMG_ParyOwner;//[Offset: 0x380, Size: 1]
	Image* IMG_OnlineBG;//[Offset: 0x388, Size: 1]
	CanvasPanel* CP_ExSquad;//[Offset: 0x390, Size: 1]
	CrowButton* BT_Slot;//[Offset: 0x398, Size: 1]
	CrowButton* BT_UserInfo;//[Offset: 0x3a0, Size: 1]
	WidgetSwitcher* WS_ButtonStauts;//[Offset: 0x3a8, Size: 1]
	CrowButton* BT_InviteParty;//[Offset: 0x3b0, Size: 1]
	CrowButton* BT_CancelInvite;//[Offset: 0x3b8, Size: 1]
	CrowButton* BT_JoinParty;//[Offset: 0x3c0, Size: 1]
	CrowButton* BT_PlayWith;//[Offset: 0x3c8, Size: 1]
	CrowButton* BT_InviteSession;//[Offset: 0x3d0, Size: 1]
	CrowButton* BT_RecentInviteParty;//[Offset: 0x3d8, Size: 1]
	CrowButton* BT_RecentCancelInvite;//[Offset: 0x3e0, Size: 1]
	CrowButton* BT_RecentRequsetFriend;//[Offset: 0x3e8, Size: 1]
	CrowButton* BT_KIckUser;//[Offset: 0x3f0, Size: 1]
	CrowButton* BT_PromotedUser;//[Offset: 0x3f8, Size: 1]
	CrowButton* BT_SearchInviteParty;//[Offset: 0x400, Size: 1]
	CrowButton* BT_SearchCancelInvite;//[Offset: 0x408, Size: 1]
	CrowButton* BT_SearchRequsetFriend;//[Offset: 0x410, Size: 1]
	CrowButton* BT_Accept;//[Offset: 0x418, Size: 1]
	CrowButton* BT_Reject;//[Offset: 0x420, Size: 1]
	CrowButton* BT_CancelRequest;//[Offset: 0x428, Size: 1]
	CanvasPanel* CP_ButtonToolTip;//[Offset: 0x430, Size: 1]
	TextBlock* TB_ToolTip;//[Offset: 0x438, Size: 1]
	LinearColor StateColor_OnLine;//[Offset: 0x450, Size: 1]
	LinearColor StateColor_OffLine;//[Offset: 0x460, Size: 1]
	LinearColor StateColor_Party;//[Offset: 0x470, Size: 1]
	LinearColor StateColor_PartyFull;//[Offset: 0x480, Size: 1]
	LinearColor StateColor_GamePlay;//[Offset: 0x490, Size: 1]
	CrowGameFriendInfo FriendInfo;//[Offset: 0x4a0, Size: 1]
	CrowRecentGamePlayUserInfo RecentGamePlayUserInfo;//[Offset: 0x4d8, Size: 1]
	CrowPartyMember PartyMemberInfo;//[Offset: 0x520, Size: 1]
	enum CurrentSlotType;//[Offset: 0x650, Size: 1]
	void OnUnHovered_BT();// 0x1a81c80
	void OnHovered_BT_SearchRequsetFriend();// 0x1a81c60
	void OnHovered_BT_SearchInviteParty();// 0x1a81c40
	void OnHovered_BT_SearchCancelInvite();// 0x1a81c20
	void OnHovered_BT_RecentUserPartyInvite();// 0x1a81c00
	void OnHovered_BT_RecentUserCancelInvite();// 0x1a81be0
	void OnHovered_BT_RecentRequsetFriend();// 0x1a81bc0
	void OnHovered_BT_PromotedUser();// 0x1a81ba0
	void OnHovered_BT_PlayWith();// 0x1a81b80
	void OnHovered_BT_KIckUser();// 0x1a81b60
	void OnHovered_BT_JoinParty();// 0x1a81b40
	void OnHovered_BT_InviteSession();// 0x1a81b20
	void OnHovered_BT_InviteParty();// 0x1a81b00
	void OnHovered_BT_CancelInvite();// 0x1a81ae0
	void OnClicked_BT_UserInfo();// 0x1a81a30
	void OnClicked_BT_SearchRequsetFriend();// 0x1a81a10
	void OnClicked_BT_SearchInviteParty();// 0x1a819f0
	void OnClicked_BT_SearchCancelInvite();// 0x1a819d0
	void OnClicked_BT_RecentUserPartyInvite();// 0x1a819b0
	void OnClicked_BT_RecentUserCancelInvite();// 0x1a81990
	void OnClicked_BT_RecentRequsetFriend();// 0x1a81970
	void OnClicked_BT_PromotedUser();// 0x1a81950
	void OnClicked_BT_PlayWith();// 0x1a81910
	void OnClicked_BT_KIckUser();// 0x1a818d0
	void OnClicked_BT_JoinParty();// 0x1a818b0
	void OnClicked_BT_InviteSession();// 0x1a81890
	void OnClicked_BT_InviteParty();// 0x1a81870
	void OnClicked_BT_FriendReject();// 0x1a81850
	void OnClicked_BT_FriendCancelRequest();// 0x1a81810
	void OnClicked_BT_FriendAccept();// 0x1a817f0
	void OnClicked_BT_CancelInvite();// 0x1a817d0

--------------------------------
Class: CrowCustomPasswordPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_SessionName_Value;//[Offset: 0x348, Size: 1]
	EditableTextBox* ETB_Password;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Ok;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_PassBtnState;//[Offset: 0x368, Size: 1]
	CrowButton* BT_PassShow;//[Offset: 0x370, Size: 1]
	CrowButton* BT_PassHide;//[Offset: 0x378, Size: 1]
	CrowCustomDisplayRoomInfo SelectedRoomInfo;//[Offset: 0x380, Size: 1]
	void OnClicked_BT_PassShow();// 0x1a69550
	void OnClicked_BT_PassHide();// 0x1a69530
	void OnClicked_BT_Ok();// 0x1a69510
	void OnClicked_BT_Cancel();// 0x1a290c0

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 1]
	delegate TextDelegate;//[Offset: 0x120, Size: 1]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x130, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x928, Size: 1]
	FText HintText;//[Offset: 0x930, Size: 1]
	delegate HintTextDelegate;//[Offset: 0x948, Size: 1]
	SlateFontInfo Font;//[Offset: 0x958, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x9b0, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x9c0, Size: 1]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9d0, Size: 1]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 1]
	float MinimumDesiredWidth;//[Offset: 0x9e4, Size: 1]
	Margin Padding;//[Offset: 0x9e8, Size: 1]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fa, Size: 1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fb, Size: 1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 1]
	byte KeyboardType;//[Offset: 0x9fe, Size: 1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9ff, Size: 1]
	enum VirtualKeyboardTrigger;//[Offset: 0xa00, Size: 1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xa01, Size: 1]
	byte Justification;//[Offset: 0xa02, Size: 1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xa03, Size: 1]
	MulticastInlineDelegateProperty OnTextChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	void SetText(FText InText);// 0x31ebce0
	void SetJustification(byte InJustification);// 0x31eb880
	void SetIsReadOnly(bool bReadOnly);// 0x31eb770
	void SetIsPassword(bool bIsPassword);// 0x31eb650
	void SetHintText(FText InText);// 0x31eb3c0
	void SetError(FText InError);// 0x31eb200
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1ef32e0
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x1ef32e0
	bool HasError();// 0x31eadb0
	FText GetText();// 0x31eace0
	void ClearError();// 0x31ea490

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 1]
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 1]
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 1]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 1]
	Margin Padding;//[Offset: 0x228, Size: 1]
	SlateFontInfo Font;//[Offset: 0x238, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x290, Size: 1]
	SlateColor BackgroundColor;//[Offset: 0x2b8, Size: 1]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2e0, Size: 1]
	Margin HScrollBarPadding;//[Offset: 0x308, Size: 1]
	Margin VScrollBarPadding;//[Offset: 0x318, Size: 1]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x328, Size: 1]

--------------------------------
Class: CrowCustomTeamIconPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowCustomTeamIconSlotWidget* CustomTeamIconSlotWidgetClass;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Ok;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x358, Size: 1]
	ScrollBox* SCB_TeamIconlist;//[Offset: 0x360, Size: 1]
	GridPanel* GD_TeamIconList;//[Offset: 0x368, Size: 1]
	EditableTextBox* ETB_TeamName;//[Offset: 0x370, Size: 1]
	enum SelectedTeamType;//[Offset: 0x378, Size: 1]
	int SelectedIconIndex;//[Offset: 0x37c, Size: 1]
	void OnClicked_BT_Ok();// 0x1a6c000
	void OnClicked_BT_Cancel();// 0x1a290c0

--------------------------------
Class: CrowCustomTeamIconSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Select;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_TeamIcon;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_TeamIconUse;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Slot;//[Offset: 0x360, Size: 1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	bool Used;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	CrowCustomModeTeamIconTableRow CurrentIconTable;//[Offset: 0x380, Size: 1]
	void OnClicked_IconSlot();// 0x1a6c420

--------------------------------
Class: CrowCustomModeTeamIconTableRow.TableRowBase
	PaperSprite* TeamIcon;//[Offset: 0x10, Size: 1]
	PaperSprite* RedTeamIcon;//[Offset: 0x18, Size: 1]
	PaperSprite* BlueTeamIcon;//[Offset: 0x20, Size: 1]
	SoftObjectPath TeamFlagMaterial;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowCustomFilterInfo
	enum RoomState;//[Offset: 0x0, Size: 1]
	enum GameMode;//[Offset: 0x4, Size: 1]
	enum MaxUser;//[Offset: 0x8, Size: 1]
	enum ReaminSlot;//[Offset: 0x9, Size: 1]
	enum CameraLimit;//[Offset: 0xa, Size: 1]

--------------------------------
Class: CrowCustomSquadSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_SquadName;//[Offset: 0x348, Size: 1]
	CrowCustomUserSlotWidget* WB_CustomUserSlot;//[Offset: 0x350, Size: 1]
	CrowCustomUserSlotWidget* WB_CustomUserSlot;//[Offset: 0x358, Size: 1]
	CrowCustomUserSlotWidget* WB_CustomUserSlot;//[Offset: 0x360, Size: 1]
	CrowCustomUserSlotWidget* WB_CustomUserSlot;//[Offset: 0x368, Size: 1]
	enum TeamType;//[Offset: 0x370, Size: 1]
	byte SquadIndex;//[Offset: 0x371, Size: 1]
	CrowCustomUserSlotWidget*[] CustomUserSlotArray;//[Offset: 0x378, Size: 1]

--------------------------------
Class: CrowModInfoButtonWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_World;//[Offset: 0x348, Size: 1]
	TextBlock* TB_ModeName;//[Offset: 0x350, Size: 1]
	TextBlock* TB_WorldName;//[Offset: 0x358, Size: 1]
	CrowButton* BT_ModInfoButton;//[Offset: 0x360, Size: 1]
	Image* IMG_Icon;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_Lock;//[Offset: 0x370, Size: 1]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	void OnClicked_ModInfoButton();// 0x1ad4af0

--------------------------------
Class: CrowLocalSelectSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowToggleButton* BT_Toggle;//[Offset: 0x348, Size: 1]
	TextBlock* TB_SlotName;//[Offset: 0x350, Size: 1]
	TextBlock* TB_SlotState;//[Offset: 0x358, Size: 1]
	TextBlock* TB_SlotState_PingStatus;//[Offset: 0x360, Size: 1]
	TextBlock* TB_SlotState_Pingms;//[Offset: 0x368, Size: 1]
	LinearColor SmoothlyColor;//[Offset: 0x370, Size: 1]
	LinearColor FewColor;//[Offset: 0x380, Size: 1]
	CrowServerRegion ServerRegionInfo;//[Offset: 0x3a0, Size: 1]
	bool bIsAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	void OnChangeedStateToggle(bool IsChecked);// 0x1ac34c0

--------------------------------
Class: CrowTopMainMenuWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CrowTopBarDescWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_TopBar_Desc;//[Offset: 0x348, Size: 1]

--------------------------------
Class: CrowPlaySettingWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_WeaponSetting;//[Offset: 0x348, Size: 1]
	CrowButton* BT_OutfitManagement;//[Offset: 0x350, Size: 1]
	CrowButton* BT_ChangeCharaterAppearance;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Emotion;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Spray;//[Offset: 0x368, Size: 1]
	CrowButton* BT_VehicleSkin;//[Offset: 0x370, Size: 1]
	Image* IMG_OutfilNew;//[Offset: 0x378, Size: 1]
	Image* IMG_AppearanceNew;//[Offset: 0x380, Size: 1]
	Image* IMG_EmotionNew;//[Offset: 0x388, Size: 1]
	Image* IMG_SprayNew;//[Offset: 0x390, Size: 1]
	Image* IMG_VehicleNew;//[Offset: 0x398, Size: 1]
	Image* IMG_WeaponNew;//[Offset: 0x3a0, Size: 1]
	void OnClicked_WeaponSetting();// 0x1af7910
	void OnClicked_VehicleSkin();// 0x1af78f0
	void OnClicked_Spray();// 0x1af78d0
	void OnClicked_OutfitManagement();// 0x1af78b0
	void OnClicked_Emotion();// 0x1af7890
	void OnClicked_ChangeCharaterAppearance();// 0x1af7870

--------------------------------
Class: CrowRankWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_RankLevel;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Username;//[Offset: 0x350, Size: 1]
	CrowWidgetImage* IMG_RankIcon;//[Offset: 0x358, Size: 1]
	ProgressBar* PB_Rank;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowInviteMessageWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_InviteStatus;//[Offset: 0x348, Size: 1]
	TextBlock* TB_InviteStatus;//[Offset: 0x350, Size: 1]
	TextBlock* TB_InviteUserName;//[Offset: 0x358, Size: 1]
	RichTextBlock* TB_Message;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Accept;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Reject;//[Offset: 0x370, Size: 1]
	CrowPartyInvitation PartyInvitationData;//[Offset: 0x3a8, Size: 1]
	CrowCustomModeInvitation CustomModeInvitationData;//[Offset: 0x3c0, Size: 1]
	CrowGameFriendInfo RequestFriendInfoData;//[Offset: 0x3e0, Size: 1]
	enum NoticeType;//[Offset: 0x418, Size: 1]
	void OnClicked_BT_Reject();// 0x1aa1080
	void OnClicked_BT_Accept();// 0x1aa1060

--------------------------------
Class: CrowCustomModeInvitation
	uint64 RoomIndex;//[Offset: 0x0, Size: 1]
	uint64 playerId;//[Offset: 0x8, Size: 1]
	FString NickName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowCustomizeCharacterDescWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowLobbyOutfitSlotListWidget* WB_Lobby_OutfitSlotList;//[Offset: 0x348, Size: 1]
	CrowCustomizeCategorySmallWidget* WB_CustomizeCategoryOutfit;//[Offset: 0x350, Size: 1]
	CrowCustomOutfitItemListWidget* WB_CustomizeOutfitItemlist;//[Offset: 0x358, Size: 1]
	CrowCategoryAppearanceWidget* WB_CustomizeCategoryAppearance;//[Offset: 0x360, Size: 1]
	CrowCustomAppearanceListWidget* WB_CustomizeAppearanceItemlist;//[Offset: 0x368, Size: 1]
	CrowLobbySlotPurchasePopupWidget* WB_LobbySlotPurchasePopup;//[Offset: 0x370, Size: 1]
	CrowButton* WB_BT_Change;//[Offset: 0x378, Size: 1]
	CrowButton* WB_BT_Back;//[Offset: 0x380, Size: 1]
	CrowButton* WB_BT_Home;//[Offset: 0x388, Size: 1]
	CrowButton* WB_BT_RESET;//[Offset: 0x390, Size: 1]
	CrowTabGenderWidget* WB_TabGender;//[Offset: 0x398, Size: 1]
	VerticalBox* VB_TattooSlotList;//[Offset: 0x3a0, Size: 1]
	HorizontalBox* HB_Tutorial_Customize;//[Offset: 0x3a8, Size: 1]
	Image* IMG_New;//[Offset: 0x3b0, Size: 1]
	CrowButton* BtCustomizeTattooFace;//[Offset: 0x3b8, Size: 1]
	Image* ImgTattooFaceSelect;//[Offset: 0x3c0, Size: 1]
	Image* ImgSelectedTattooFace;//[Offset: 0x3c8, Size: 1]
	TextBlock* TbTattooFace;//[Offset: 0x3d0, Size: 1]
	CrowButton* BtCustomizeTattooArm;//[Offset: 0x3d8, Size: 1]
	Image* ImgTattooArmSelect;//[Offset: 0x3e0, Size: 1]
	Image* ImgTattooArmHover;//[Offset: 0x3e8, Size: 1]
	Image* ImgSelectedTattooArm;//[Offset: 0x3f0, Size: 1]
	Image* ImgHoveredTattooArm;//[Offset: 0x3f8, Size: 1]
	TextBlock* TbTattooArm;//[Offset: 0x400, Size: 1]
	LinearColor NormalTattooTextColor;//[Offset: 0x408, Size: 1]
	LinearColor HoverTattooTextColor;//[Offset: 0x418, Size: 1]
	LinearColor SelectTattooTextColor;//[Offset: 0x428, Size: 1]
	enum CurrentTatooType;//[Offset: 0x438, Size: 1]
	CrowCustomizeOutfitSlotWidget* CurrentOutfitSlot;//[Offset: 0x440, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x448, Size: 1]
	void OnUnHoverd_BtCustomizeTattooFace();// 0x1a655b0
	void OnUnHoverd_BtCustomizeTattooArm();// 0x1a65590
	void OnHoverd_BtCustomizeTattooFace();// 0x1a65290
	void OnHoverd_BtCustomizeTattooArm();// 0x1a65270
	void OnClose_ShopPopup(bool IsConfirm);// 0x1a64c50
	void OnClicked_BtCustomizeTattooFace();// 0x1a64af0
	void OnClicked_BtCustomizeTattooArm();// 0x1a64ad0
	void OnClicked_BT_RESET();// 0xca8430
	void OnClicked_BT_Home();// 0x1a64a30
	void OnClicked_BT_Change();// 0x1a649f0
	void OnClicked_BT_Back();// 0x1a64990

--------------------------------
Class: CrowLobbyOutfitSlotListWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_NameChange;//[Offset: 0x380, Size: 1]
	void OnClicked_NameChange();// 0x1abf0b0

--------------------------------
Class: CrowCustomizeCategorySmallWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* VB_Custmize_Outfitlist;//[Offset: 0x348, Size: 1]
	CrowCustomOutfitItemListWidget* CustomOutfitItemListWidget;//[Offset: 0x350, Size: 1]
	CrowCustomAppearanceListWidget* CustomAppearanceListWidget;//[Offset: 0x358, Size: 1]
	CrowCategorySlotSmallWidget*[] OutFitSlotWidgetArray;//[Offset: 0x360, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x370, Size: 1]
	CrowCategorySlotSmallWidget* CurrentCategorySlot;//[Offset: 0x378, Size: 1]

--------------------------------
Class: CrowCustomOutfitItemListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	GridPanel* GD_ItemList;//[Offset: 0x348, Size: 1]
	ScrollBox* SCB_Itemlist;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Title;//[Offset: 0x358, Size: 1]
	CrowClothItemDescWidget* WB_Function_Tooltip;//[Offset: 0x360, Size: 1]
	class CrowCustomizeOutfitSlotWidget* CustomizeOutfitSlotWidgetClass;//[Offset: 0x368, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x370, Size: 1]
	CrowCategorySlotSmallWidget* CurrentCategorySlotSmallWidget;//[Offset: 0x378, Size: 1]
	CrowCustomizeOutfitSlotWidget* ShopModeSelectItem;//[Offset: 0x380, Size: 1]
	float ItemSize;//[Offset: 0x388, Size: 1]

--------------------------------
Class: CrowClothItemDescWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_ItemName;//[Offset: 0x348, Size: 1]
	TextBlock* TB_ItemDesc_01;//[Offset: 0x350, Size: 1]
	TextBlock* TB_ItemDesc_02;//[Offset: 0x358, Size: 1]

--------------------------------
Class: CrowCustomizeOutfitSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Selected;//[Offset: 0x348, Size: 1]
	Image* IMG_Equiped;//[Offset: 0x350, Size: 1]
	Image* IMG_NewIcon;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Customize_List_Slot;//[Offset: 0x360, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x368, Size: 1]
	WidgetSwitcher* WS_IconIMG;//[Offset: 0x370, Size: 1]
	Image* IMG_IconIMG_OutFit;//[Offset: 0x378, Size: 1]
	Image* IMG_IconIMG_Appearance;//[Offset: 0x380, Size: 1]
	Image* IMG_MoneyIcon;//[Offset: 0x388, Size: 1]
	Image* IMG_MoneyBack;//[Offset: 0x390, Size: 1]
	TextBlock* TB_Label_Money;//[Offset: 0x398, Size: 1]
	HorizontalBox* HB_Cost;//[Offset: 0x3a0, Size: 1]
	HorizontalBox* HB_Count_Info;//[Offset: 0x3a8, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x3b0, Size: 1]
	CanvasPanel* CP_RewardPanel;//[Offset: 0x3b8, Size: 1]
	CanvasPanel* CP_Count;//[Offset: 0x3c0, Size: 1]
	TextBlock* TB_ItemCount;//[Offset: 0x3c8, Size: 1]
	SizeBox* SB_SortItem;//[Offset: 0x3d0, Size: 1]
	Image* IMG_SortItem;//[Offset: 0x3d8, Size: 1]
	PaperSprite* GPointIcon;//[Offset: 0x3e0, Size: 1]
	PaperSprite* RCPIcon;//[Offset: 0x3e8, Size: 1]
	TextBlock* TBItemName_Sel;//[Offset: 0x430, Size: 1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool Equiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool useDeselect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool IsShopItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	int SlotValue;//[Offset: 0x43c, Size: 1]
	int IntValue;//[Offset: 0x440, Size: 1]
	CrowItemTableBaseRow CurrentItemTable;//[Offset: 0x448, Size: 1]
	CrowItemData CurrentItemData;//[Offset: 0x628, Size: 1]
	enum CurrentItemSlotType;//[Offset: 0x658, Size: 1]
	enum AppearanceCategoryType;//[Offset: 0x659, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x660, Size: 1]
	CrowShopTableRow ShopTableData;//[Offset: 0x668, Size: 1]
	int GridRow;//[Offset: 0x700, Size: 1]
	void OnUnHovered_ItemSlot();// 0x1a69720
	void OnHovered_ItemSlot();// 0x1a69610
	void OnClicked_ItemSlot();// 0x1a69570

--------------------------------
Class: CrowCategorySlotSmallWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Selected;//[Offset: 0x348, Size: 1]
	Image* IMG_New;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Customize_SmallSlot;//[Offset: 0x358, Size: 1]
	TextBlock* TB_CategoryName;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_ItemIMG;//[Offset: 0x368, Size: 1]
	Image* IMG_IconIMG_Category;//[Offset: 0x370, Size: 1]
	Image* IMG_IconIMG_Item;//[Offset: 0x378, Size: 1]
	FText CategoryContentsName;//[Offset: 0x390, Size: 1]
	SlateBrush CategoryDefaultImage;//[Offset: 0x3a8, Size: 1]
	SlateBrush CategoryItemImage;//[Offset: 0x430, Size: 1]
	enum ItemCategoryType;//[Offset: 0x4b8, Size: 1]
	enum AppearanceCategoryType;//[Offset: 0x4b9, Size: 1]
	bool Equiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 1]
	bool Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bb, Size: 1]
	TextBlock* TBCategoryName_Sel;//[Offset: 0x4c0, Size: 1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool IsUpdateNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	CrowShopProductInfo ShopProductInfo;//[Offset: 0x4d0, Size: 1]
	void OnClicked_CategorySlotSmall();// 0x1a38430

--------------------------------
Class: CrowShopProductInfo
	enum ProductType;//[Offset: 0x0, Size: 1]
	FString TabStringKey;//[Offset: 0x8, Size: 1]
	CrowSubProductInfo[] SubProductTypeArray;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowSubProductInfo
	enum SubProductType;//[Offset: 0x0, Size: 1]
	SoftObjectPath ProductTypeIcon;//[Offset: 0x8, Size: 1]
	FString TootipStringKey;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowCustomAppearanceListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	GridPanel* GD_ItemList;//[Offset: 0x348, Size: 1]
	Border* BD_SubTitle_Color;//[Offset: 0x350, Size: 1]
	GridPanel* GD_ColorItemList;//[Offset: 0x358, Size: 1]
	ScrollBox* SCB_Itemlist;//[Offset: 0x360, Size: 1]
	Image* IMG_Line;//[Offset: 0x368, Size: 1]
	TextBlock* TB_Title;//[Offset: 0x370, Size: 1]
	HorizontalBox* HB_Appearance_SaveBT;//[Offset: 0x378, Size: 1]
	CrowButton* WB_BT_APPLY;//[Offset: 0x380, Size: 1]
	CrowButton* WB_BT_RESET;//[Offset: 0x388, Size: 1]
	class CrowCustomizeOutfitSlotWidget* CustomizeOutfitSlotWidgetClass;//[Offset: 0x390, Size: 1]
	class CrowItemSlotMiniWidget* CrowItemSlotMiniWidgetClass;//[Offset: 0x398, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x3a0, Size: 1]
	CrowCategorySlotBigWidget* CurrentCategorySlotWidget;//[Offset: 0x3a8, Size: 1]
	enum CurrTattooType;//[Offset: 0x3b0, Size: 1]
	void OnClicked_BT_RESET();// 0x1a60c50
	void OnClicked_BT_APPLY();// 0x1a60bb0

--------------------------------
Class: CrowItemSlotMiniWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Selected;//[Offset: 0x348, Size: 1]
	Image* IMG_Equiped;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Customize_List_Slot;//[Offset: 0x358, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Status;//[Offset: 0x368, Size: 1]
	WidgetSwitcher* WS_IconIMG;//[Offset: 0x370, Size: 1]
	Image* IMG_IconIMG_Color;//[Offset: 0x378, Size: 1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool Equiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool UnEquipBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	bool useDeselect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	int SlotValue;//[Offset: 0x3c4, Size: 1]
	int IntValue;//[Offset: 0x3c8, Size: 1]
	CrowItemColorTableRowBase CurrentColorTable;//[Offset: 0x3d0, Size: 1]
	enum CurrentItemSlotMiniWSType;//[Offset: 0x400, Size: 1]
	enum CurrentCategoryType;//[Offset: 0x401, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x408, Size: 1]
	void OnUnHovered_ItemSlot();// 0x1aa3d60
	void OnHovered_ItemSlot();// 0x1aa3d20
	void OnClicked_ItemSlot();// 0x1aa3ce0

--------------------------------
Class: CrowItemColorTableRowBase.TableRowBase
	uint32 Index;//[Offset: 0x8, Size: 1]
	LinearColor Color;//[Offset: 0xc, Size: 1]
	LinearColor RootColor;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowCategorySlotBigWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Selected;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Slot;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Name;//[Offset: 0x358, Size: 1]
	Image* IMG_Used;//[Offset: 0x360, Size: 1]
	Image* IMG_New;//[Offset: 0x368, Size: 1]
	FText SlotName;//[Offset: 0x380, Size: 1]
	enum ItemCategoryType;//[Offset: 0x398, Size: 1]
	enum WeaponCategoryType;//[Offset: 0x399, Size: 1]
	enum WeaponAccCategoryType;//[Offset: 0x39a, Size: 1]
	enum AppearanceCategoryType;//[Offset: 0x39b, Size: 1]
	TextBlock* TBName_Seleted;//[Offset: 0x3a0, Size: 1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool Used;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	void OnClicked_BT_Slot();// 0x1a38410

--------------------------------
Class: CrowCategoryAppearanceWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* VB_Custmize_Appearance;//[Offset: 0x348, Size: 1]
	HorizontalBox* HB_Appearance;//[Offset: 0x350, Size: 1]
	CrowCustomAppearanceListWidget* CustomAppearanceListWidget;//[Offset: 0x358, Size: 1]
	CrowCategorySlotBigWidget*[] AppearanceSlotWidgetArray;//[Offset: 0x360, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x370, Size: 1]

--------------------------------
Class: CrowLobbySlotPurchasePopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowLobbySlotPurchaseItemWidget* PurchaseItemClass;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Title;//[Offset: 0x350, Size: 1]
	TextBlock* TB_SlotName;//[Offset: 0x358, Size: 1]
	VerticalBox* VB_ItemList;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x368, Size: 1]
	enum LobbySlotType;//[Offset: 0x370, Size: 1]
	int TargetSlotIndex;//[Offset: 0x374, Size: 1]
	FText TargetName;//[Offset: 0x378, Size: 1]
	void OnClickedClose();// 0x1a290c0

--------------------------------
Class: CrowLobbySlotPurchaseItemWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_SlotName;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Price;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x358, Size: 1]
	enum LobbySlotType;//[Offset: 0x360, Size: 1]
	uint32 ShopIndex;//[Offset: 0x364, Size: 1]
	uint32 SlotIndex;//[Offset: 0x368, Size: 1]
	uint32 Price;//[Offset: 0x36c, Size: 1]
	FText ItemName;//[Offset: 0x370, Size: 1]
	void OnClicked_BT_Buy();// 0x1abf050

--------------------------------
Class: CrowTabGenderWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowCustomizeCharacterDescWidget* CustomizeCharacterDescWidget;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowCustomizeItemDescWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Lobby_MOD;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Item_Category;//[Offset: 0x350, Size: 1]
	TextBlock* TB_AmmoType;//[Offset: 0x358, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x360, Size: 1]
	RichTextBlock* TB_ItemCompare;//[Offset: 0x368, Size: 1]
	MultiLineEditableText* MLETB_ItemDesc;//[Offset: 0x370, Size: 1]
	VerticalBox* VB_ItemName;//[Offset: 0x378, Size: 1]
	HorizontalBox* HB_WeaponParts;//[Offset: 0x380, Size: 1]
	VerticalBox* VB_AmmoType;//[Offset: 0x388, Size: 1]
	HorizontalBox* HB_AmmoType;//[Offset: 0x390, Size: 1]
	CanvasPanel* CP_WeaponStatus;//[Offset: 0x398, Size: 1]
	CanvasPanel* CP_WeaponStat;//[Offset: 0x3a0, Size: 1]
	CrowButton* BT_ToolTipIcon;//[Offset: 0x3a8, Size: 1]
	CrowButton* BT_ToolTipIcon_Melee;//[Offset: 0x3b0, Size: 1]
	WidgetSwitcher* WS_ProgressBarDesc;//[Offset: 0x3b8, Size: 1]
	WidgetSwitcher* WS_WeaponInfo;//[Offset: 0x3c0, Size: 1]
	WidgetSwitcher* WS_WeaponProgress;//[Offset: 0x3c8, Size: 1]
	TextBlock* TB_ThrowCount;//[Offset: 0x3d0, Size: 1]
	TextBlock* TB_FireMode;//[Offset: 0x3d8, Size: 1]
	HorizontalBox* HB_FireModeIcon;//[Offset: 0x3e0, Size: 1]
	CrowWidgetImage* IMG_FireMode_Semiauto;//[Offset: 0x3e8, Size: 1]
	CrowWidgetImage* IMG_FireMode_Burst;//[Offset: 0x3f0, Size: 1]
	CrowWidgetImage* IMG_FireMode_auto;//[Offset: 0x3f8, Size: 1]
	TextBlock* TB_Ammo;//[Offset: 0x400, Size: 1]
	TextBlock* TB_AmmoCount;//[Offset: 0x408, Size: 1]
	TextBlock* TB_Damage;//[Offset: 0x410, Size: 1]
	ProgressBar* PB_Damage;//[Offset: 0x418, Size: 1]
	ProgressBar* PB_Damage_Compare;//[Offset: 0x420, Size: 1]
	TextBlock* TB_Accuracy;//[Offset: 0x428, Size: 1]
	ProgressBar* PB_Accuracy;//[Offset: 0x430, Size: 1]
	ProgressBar* PB_Accuracy_Compare;//[Offset: 0x438, Size: 1]
	TextBlock* TB_Control;//[Offset: 0x440, Size: 1]
	ProgressBar* PB_Control;//[Offset: 0x448, Size: 1]
	ProgressBar* PB_Control_Compare;//[Offset: 0x450, Size: 1]
	TextBlock* TB_FireSpeed;//[Offset: 0x458, Size: 1]
	ProgressBar* PB_FireSpeed;//[Offset: 0x460, Size: 1]
	ProgressBar* PB_FireSpeed_Compare;//[Offset: 0x468, Size: 1]
	TextBlock* TB_Distance;//[Offset: 0x470, Size: 1]
	ProgressBar* PB_Distance;//[Offset: 0x478, Size: 1]
	ProgressBar* PB_Distance_Compare;//[Offset: 0x480, Size: 1]
	TextBlock* TB_Reload;//[Offset: 0x488, Size: 1]
	ProgressBar* PB_Reload;//[Offset: 0x490, Size: 1]
	ProgressBar* PB_Reload_Compare;//[Offset: 0x498, Size: 1]
	ProgressBar* PB_Distance_Melee;//[Offset: 0x4a0, Size: 1]
	ProgressBar* PB_Distance_Compare_Melee;//[Offset: 0x4a8, Size: 1]
	ProgressBar* PB_Damage_Melee;//[Offset: 0x4b0, Size: 1]
	ProgressBar* PB_Damage_Compare_Melee;//[Offset: 0x4b8, Size: 1]
	ProgressBar* PB_ThrowDistance_Melee;//[Offset: 0x4c0, Size: 1]
	ProgressBar* PB_ThrowDistance_Compare_Melee;//[Offset: 0x4c8, Size: 1]
	CrowButton* WB_BT_MOD;//[Offset: 0x4d0, Size: 1]
	CrowButton* WB_BT_ARMORY;//[Offset: 0x4d8, Size: 1]
	CrowButton* WB_BT_Back;//[Offset: 0x4e0, Size: 1]
	CrowButton* WB_BT_Home;//[Offset: 0x4e8, Size: 1]
	CrowButton* WB_BT_RESET;//[Offset: 0x4f0, Size: 1]
	CrowButton* WB_BT_LevelJump;//[Offset: 0x4f8, Size: 1]
	HorizontalBox* HB_Tutorial_Customize;//[Offset: 0x500, Size: 1]
	CrowLobbyLoadoutListWidget* WB_Lobby_LoadoutList;//[Offset: 0x508, Size: 1]
	CrowLobbyLoadoutWidget* WB_Lobby_Loadout;//[Offset: 0x510, Size: 1]
	CrowWeaponPartsListWidget* WB_WeaponPartsList;//[Offset: 0x518, Size: 1]
	CanvasPanel* CP_PartAdditionalEffect;//[Offset: 0x520, Size: 1]
	VerticalBox* VB_Advantage;//[Offset: 0x528, Size: 1]
	CrowTabMenuWeaponCategoryWidget* WB_TabMenuWeaponCategory;//[Offset: 0x530, Size: 1]
	CrowTabMenuWeaponSettingWidget* WB_TabMenu_WeaponSetting;//[Offset: 0x538, Size: 1]
	CrowTabMenuMeleeCategoryWidget* WB_TabMenuMeleeCategory;//[Offset: 0x540, Size: 1]
	CrowCustomizeCategryBigWidget* WB_TabMenuWeaponPartsCategory;//[Offset: 0x548, Size: 1]
	CrowCustomizeItemListWidget* WB_CustomizeItemlist;//[Offset: 0x550, Size: 1]
	CrowCustomizeWeaponAccWidget* WB_Customize_WeaponAcc;//[Offset: 0x558, Size: 1]
	CrowCustomizeWeaponNumSlotList* WB_Customize_WeaponAccNumberSlot;//[Offset: 0x560, Size: 1]
	CrowShoppingBagWidget* WB_Shop_Popup_ExclusivePurchase_Quick;//[Offset: 0x568, Size: 1]
	CrowWeaponLevelJumpPopupWidget* WB_WeaponLevelJumpPopup;//[Offset: 0x570, Size: 1]
	CrowLobbySlotPurchasePopupWidget* WB_LobbySlotPurchasePopup;//[Offset: 0x578, Size: 1]
	LinearColor NormalColor;//[Offset: 0x580, Size: 1]
	LinearColor IncreaseColor;//[Offset: 0x590, Size: 1]
	LinearColor DecreaseColor;//[Offset: 0x5a0, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x5b0, Size: 1]
	CrowSceneGame* SceneGame;//[Offset: 0x5b8, Size: 1]
	CrowInventoryInputEventHandler* SelectDragWidget;//[Offset: 0x5c0, Size: 1]
	float ProgressMaxValue;//[Offset: 0x5c8, Size: 1]
	bool StatusMoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	bool IsCustomizeSticker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 1]
	bool IsCustomizeSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ce, Size: 1]
	TextBlock*[] PartsOptionArray;//[Offset: 0x5d0, Size: 1]
	bool IsWeaponCustomizeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	CrowCustomizeWeaponAccSlotWidget* CurrentWeaponAccSlotWidget;//[Offset: 0x5e8, Size: 1]
	void OnUnHoverd_BT_ToolTipIconMelee();// 0x1a65570
	void OnUnHoverd_BT_ToolTipIcon();// 0x1a65570
	void OnHoverd_BT_ToolTipIconMelee();// 0x1a65250
	void OnHoverd_BT_ToolTipIcon();// 0x1a65230
	void OnCloseWeaponLevelJumpPopup();// 0x1a64c30
	void OnCloseShopPopup(bool IsBuy);// 0x1a64ba0
	void OnClicked_BT_RESET();// 0x1a64ab0
	void OnClicked_BT_MOD();// 0x1a64a90
	void OnClicked_BT_LevelJump();// 0x1a64a70
	void OnClicked_BT_Home();// 0x1a64a50
	void OnClicked_BT_Change();// 0x1a64a10
	void OnClicked_BT_BuyWeapon();// 0x1a649d0
	void OnClicked_BT_Back();// 0x1a649b0
	void OnClicked_BT_ARMORY();// 0x1a64970

--------------------------------
Class: CrowTabMenuWeaponCategoryWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowCustomizeItemDescWidget* CustomizeItemDescWidget;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowTabMenuWeaponSettingWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetToggleButton* WB_LobbyButton_Tab_Acc;//[Offset: 0x380, Size: 1]
	CrowCustomizeItemDescWidget* CustomizeItemDescWidget;//[Offset: 0x388, Size: 1]

--------------------------------
Class: CrowTabMenuMeleeCategoryWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowCustomizeItemDescWidget* CustomizeItemDescWidget;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowCustomizeCategryBigWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	HorizontalBox* HB_WeaponParts;//[Offset: 0x348, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_Barrel;//[Offset: 0x350, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_Magazine;//[Offset: 0x358, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_Muzzle;//[Offset: 0x360, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_PistolGrip;//[Offset: 0x368, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_PrimarySight;//[Offset: 0x370, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_SecondarySight;//[Offset: 0x378, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_SideBarrel;//[Offset: 0x380, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_Stock;//[Offset: 0x388, Size: 1]
	CrowCategorySlotBigWidget* WB_Customize_Category_UnderBarrel;//[Offset: 0x390, Size: 1]
	CrowCategorySlotBigWidget*[] WeaponPartsSlotWidgetArray;//[Offset: 0x398, Size: 1]
	CrowCustomizeItemDescWidget* CustomizeItemDescWidget;//[Offset: 0x3a8, Size: 1]

--------------------------------
Class: CrowCustomizeItemListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	ScrollBox* SCB_Itemlist;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Title;//[Offset: 0x350, Size: 1]
	class CrowItemSlotWidget* ItemSlotWidgetClass;//[Offset: 0x358, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x360, Size: 1]
	CrowSceneGame* SceneGame;//[Offset: 0x368, Size: 1]
	CrowCategorySlotBigWidget* CurrentCategorySlotBigWidget;//[Offset: 0x370, Size: 1]
	enum CurrentWeaponUIType;//[Offset: 0x378, Size: 1]
	CrowItemSlotWidget* SelectedWidgetItem;//[Offset: 0x380, Size: 1]
	bool NotSave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool IsShopMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	float ItemSize;//[Offset: 0x38c, Size: 1]

--------------------------------
Class: CrowItemSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Selected;//[Offset: 0x348, Size: 1]
	Image* IMG_Equiped;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Customize_List_Slot;//[Offset: 0x358, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Status;//[Offset: 0x368, Size: 1]
	Image* IMG_Armory_Bg;//[Offset: 0x370, Size: 1]
	CanvasPanel* CP_Lock_Armory;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_Cost;//[Offset: 0x380, Size: 1]
	TextBlock* TB_Label_Money;//[Offset: 0x388, Size: 1]
	WidgetSwitcher* WS_IconIMG;//[Offset: 0x390, Size: 1]
	Image* IMG_IconIMG_Weapon;//[Offset: 0x398, Size: 1]
	Image* IMG_IcomIMG_Parts;//[Offset: 0x3a0, Size: 1]
	CanvasPanel* CP_Lock;//[Offset: 0x3a8, Size: 1]
	Image* IMG_Lock;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_LockLv;//[Offset: 0x3b8, Size: 1]
	Image* IMG_New;//[Offset: 0x3c0, Size: 1]
	HorizontalBox* HB_WeaponInfo;//[Offset: 0x3c8, Size: 1]
	TextBlock* TB_WeaponLV;//[Offset: 0x3d0, Size: 1]
	CrowProgressBar* PB_WeaponLV;//[Offset: 0x3d8, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x3e0, Size: 1]
	TextBlock* TBItemName_Sel;//[Offset: 0x428, Size: 1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool Equiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool UnEquipBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 1]
	bool useDeselect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	int SlotValue;//[Offset: 0x438, Size: 1]
	int IntValue;//[Offset: 0x43c, Size: 1]
	CrowWeaponPartsTableRow CurrentWeaponPartsTable;//[Offset: 0x440, Size: 1]
	CrowWeaponTableRow CurrentWeaponTable;//[Offset: 0x7e0, Size: 1]
	CrowWeaponData CurrentWeaponData;//[Offset: 0x1b40, Size: 1]
	CrowWeaponAccData CurrentWeaponAccData;//[Offset: 0x1ca8, Size: 1]
	enum CurrentItemSlotWSType;//[Offset: 0x1d58, Size: 1]
	void OnUnHovered_ItemSlot();// 0x1aa3d80
	void OnHovered_ItemSlot();// 0x1aa3d40
	void OnClicked_ItemSlot();// 0x1aa3d00

--------------------------------
Class: CrowCustomizeWeaponAccWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	GridPanel* GD_SlotList;//[Offset: 0x348, Size: 1]
	ScrollBox* SCB_Itemlist;//[Offset: 0x350, Size: 1]
	class CrowCustomizeWeaponAccSlotWidget* WeaponAccSlotWidgetClass;//[Offset: 0x358, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x360, Size: 1]
	CrowSceneGame* SceneGame;//[Offset: 0x368, Size: 1]
	CrowCustomizeWeaponAccSlotWidget*[] WeaponAccSlotWidgetArray;//[Offset: 0x370, Size: 1]
	CrowWeaponStickerInfo CurrentStickerSlotInfo;//[Offset: 0x380, Size: 1]
	enum CurrentAccType;//[Offset: 0x388, Size: 1]
	bool IsShopMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]

--------------------------------
Class: CrowCustomizeWeaponAccSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Selected;//[Offset: 0x348, Size: 1]
	Image* IMG_Equiped;//[Offset: 0x350, Size: 1]
	Image* IMG_Lock;//[Offset: 0x358, Size: 1]
	Image* IMG_Icon;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x368, Size: 1]
	CrowButton* BT_WeaponAccSlot;//[Offset: 0x370, Size: 1]
	TextBlock* TB_Name;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_Cost;//[Offset: 0x380, Size: 1]
	TextBlock* TB_Label_Money;//[Offset: 0x388, Size: 1]
	SizeBox* SB_SortItem;//[Offset: 0x390, Size: 1]
	Image* IMG_SortItem;//[Offset: 0x398, Size: 1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool Equiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	bool useDeselect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 1]
	uint32 AccIndex;//[Offset: 0x3e4, Size: 1]
	enum AccType;//[Offset: 0x3e8, Size: 1]
	CrowWeaponStickerInfo StickerInfo;//[Offset: 0x3ec, Size: 1]
	CrowShopTableRow ShopTableData;//[Offset: 0x3f8, Size: 1]
	void OnUnHovered_AccSlot();// 0x1a69700
	void OnHovered_AccSlot();// 0x1a695f0
	void OnClicked_AccSlot();// 0x1a694f0

--------------------------------
Class: CrowWeaponStickerInfo
	enum PartsType;//[Offset: 0x0, Size: 1]
	int SlotIndex;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowCustomizeWeaponNumSlotList.CrowWidgetBase.UserWidget.Widget.Visual.Object
	HorizontalBox* HB_Buttons;//[Offset: 0x348, Size: 1]
	CrowCustomizeWeaponNumSlotWidget*[] ButtonList;//[Offset: 0x350, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x360, Size: 1]
	CrowSceneGame* SceneGame;//[Offset: 0x368, Size: 1]
	void OnSelectCustomizeNumSlot(CrowCustomizeWeaponNumSlotWidget* SelectSlot);// 0x1a69650

--------------------------------
Class: CrowCustomizeWeaponNumSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Number;//[Offset: 0x348, Size: 1]
	Image* IMG_Acc;//[Offset: 0x350, Size: 1]
	Image* IMG_Hover;//[Offset: 0x358, Size: 1]
	Image* IMG_Select;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Customize_WeaponAccNumberSlot;//[Offset: 0x368, Size: 1]
	WidgetSwitcher* WS_NumberEquip;//[Offset: 0x370, Size: 1]
	LinearColor NormalTextColor;//[Offset: 0x3a8, Size: 1]
	LinearColor HoverTextColor;//[Offset: 0x3b8, Size: 1]
	CrowWeaponStickerInfo SlotInfo;//[Offset: 0x3c8, Size: 1]
	bool bIsSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	void SetSelect(bool IsSelect);// 0x1a69860
	void SetButtonNumber(int Index);// 0x1a697d0
	void SetAccImage(PaperSprite* AccImage);// 0x1a69740
	void OnUnHover_NumSlot();// 0x1a696e0
	void OnHover_NumSlot();// 0x1a695d0
	void OnClicked_NumSlot();// 0x1a69590
	void InitButtonInfo(CrowWeaponStickerInfo StickerSlotInfo);// 0x1a69460
	CrowWeaponModel* GetWeaponModel();// 0x1a69430
	CrowButton* GetButton();// 0x1a69400

--------------------------------
Class: CrowWeaponModel.SceneComponent.ActorComponent.Object
	CrowWeaponPartsBase*[] PartsArray;//[Offset: 0x200, Size: 1]
	CrowWeaponPartsBase* PartsMainBody;//[Offset: 0x210, Size: 1]
	CrowWeaponPartsAccCharm* WeaponCharm;//[Offset: 0x218, Size: 1]
	SceneComponent* DefaultParent;//[Offset: 0x220, Size: 1]
	CrowWeaponBase* WeaponActor;//[Offset: 0x228, Size: 1]
	CrowWeaponStickerInfo[] WeaponModelStickerSlots;//[Offset: 0x280, Size: 1]
	CrowDecalComponent*[] StickerSlotDecalList;//[Offset: 0x290, Size: 1]
	CrowFoliageAffectorActor* FoliageAffector;//[Offset: 0x2a0, Size: 1]
	CrowWeaponTableRow WeaponTable;//[Offset: 0x2b0, Size: 1]
	CrowAmmoTableRow AmmoTable;//[Offset: 0x1610, Size: 1]
	CrowWeaponData WeaponData;//[Offset: 0x18b0, Size: 1]
	CrowWeaponAccData WeaponAccData;//[Offset: 0x1a18, Size: 1]
	ParticleSystemComponent* MuzzleSmokeEffect;//[Offset: 0x1ac8, Size: 1]
	bool bIsFirstPerson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b40, Size: 1]
	SkeletalMesh* ReadyToSet_MergedMesh;//[Offset: 0x1b48, Size: 1]
	MaterialInterface*[] MaterialReferences;//[Offset: 0x1b50, Size: 1]
	void SetMergedMesh(SkeletalMesh* InMergedMesh);// 0x1b683f0

--------------------------------
Class: CrowWeaponPartsBase.CrowActorComponentBase.ActorComponent.Object
	CrowDecalComponent*[] StickerDecalComp;//[Offset: 0xc0, Size: 1]
	CrowWeaponBase* WeaponActor;//[Offset: 0xd8, Size: 1]
	CrowPartsMeshInfo[] MeshCompArray;//[Offset: 0xe0, Size: 1]
	CrowWeaponPartsActor* PartsActor;//[Offset: 0xf0, Size: 1]
	SceneComponent* ParentComponent;//[Offset: 0xf8, Size: 1]
	SceneComponent* ParentRootComponent;//[Offset: 0x100, Size: 1]
	AnimInstance* AnimInstance;//[Offset: 0x108, Size: 1]
	Actor* OwnerActor;//[Offset: 0x110, Size: 1]
	SkeletalMesh* SkeletalMeshAsset;//[Offset: 0x118, Size: 1]
	class AnimInstance* SkeletalMeshAnimClass;//[Offset: 0x120, Size: 1]
	PrimitiveComponent* CreatedMeshComponent;//[Offset: 0x128, Size: 1]
	CrowPartModelInfo PartsModelInfo;//[Offset: 0x130, Size: 1]
	FName[] StickerSocketNames;//[Offset: 0x1f0, Size: 1]
	int[] StickerIndexs;//[Offset: 0x200, Size: 1]
	CrowPartModelInfo MountModelInfo;//[Offset: 0x210, Size: 1]
	<FName,Transform> SocketTransforms;//[Offset: 0x300, Size: 1]

--------------------------------
Class: CrowPartsMeshInfo
	MeshComponent* MeshComponent;//[Offset: 0x0, Size: 1]
	SceneComponent* AttachParentComponent;//[Offset: 0x8, Size: 1]
	FName AttachSocketName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWeaponPartsAccCharm.Object
	SceneComponent* ParentComponent;//[Offset: 0x30, Size: 1]
	MeshComponent* MeshComponent;//[Offset: 0x38, Size: 1]
	BoxComponent* BoxComponent;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowShoppingBagWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowCustomizeOutfitSlotWidget* ItemSlotWidgetClass;//[Offset: 0x348, Size: 1]
	GridPanel* GP_ShoppingList;//[Offset: 0x350, Size: 1]
	CrowCustomizeOutfitSlotWidget* WB_Customize_Outfit_SmallSlot;//[Offset: 0x358, Size: 1]
	TextBlock* TB_LastItemName;//[Offset: 0x360, Size: 1]
	TextBlock* TB_LastItemDesc;//[Offset: 0x368, Size: 1]
	TextBlock* TB_TotalMoney;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x380, Size: 1]
	Image* IMG_GoldIcon;//[Offset: 0x388, Size: 1]
	bool IsSendPacket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	CrowItemData LastItemData;//[Offset: 0x398, Size: 1]
	CrowShopTableRow[] ItemsInShopppingBag;//[Offset: 0x3c8, Size: 1]
	CrowItemData[] ItemsDataInShopppingBag;//[Offset: 0x3d8, Size: 1]
	void OnClickSlotItem(CrowCustomizeOutfitSlotWidget* SelectSlotItem);// 0x1b2a620
	void OnClickMoveShop(enum ButtonType);// 0x1b2a580
	void OnClickCancelButton();// 0x1b2a390
	void OnClickBuyButton();// 0x1b2a370

--------------------------------
Class: CrowWeaponLevelJumpPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_maximumlevel;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Mylevel;//[Offset: 0x350, Size: 1]
	TextBlock* TB_TotalMoney;//[Offset: 0x358, Size: 1]
	Image* IMG_GoldIcon;//[Offset: 0x360, Size: 1]
	ScaleBox* SCB_US;//[Offset: 0x368, Size: 1]
	Slider* SL_Value;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Minus;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Plus;//[Offset: 0x380, Size: 1]
	CrowButton* BT_Max;//[Offset: 0x388, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x390, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x398, Size: 1]
	CrowWeaponData CurrWeaponData;//[Offset: 0x3a0, Size: 1]
	int StartLevel;//[Offset: 0x508, Size: 1]
	float CurrentValue;//[Offset: 0x50c, Size: 1]
	float MinValue;//[Offset: 0x510, Size: 1]
	float MaxValue;//[Offset: 0x514, Size: 1]
	int UseRCPPointValue;//[Offset: 0x518, Size: 1]
	void SetWeaponData(CrowWeaponData WeaponData);// 0x1b63620
	void SetSlideValue();// 0x1b63570
	void OnClick_PlusButton();// 0x1b630b0
	void OnClick_MoveRCPShop(enum ButtonType);// 0x1b63030
	void OnClick_MinusButton();// 0x1b63010
	void OnClick_MaxButton();// 0x1b62ff0
	void OnClick_CancelButton();// 0x1acc6f0
	void OnClick_BuyButton();// 0x1b62fd0
	void OnChangeSlideBar(float Value);// 0x1b62f50

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 1]
	delegate ValueDelegate;//[Offset: 0x10c, Size: 1]
	float MinValue;//[Offset: 0x11c, Size: 1]
	float MaxValue;//[Offset: 0x120, Size: 1]
	SliderStyle WidgetStyle;//[Offset: 0x128, Size: 1]
	byte Orientation;//[Offset: 0x468, Size: 1]
	LinearColor SliderBarColor;//[Offset: 0x46c, Size: 1]
	LinearColor SliderHandleColor;//[Offset: 0x47c, Size: 1]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 1]
	float StepSize;//[Offset: 0x490, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	MulticastInlineDelegateProperty OnMouseCaptureBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnMouseCaptureEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnControllerCaptureBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnControllerCaptureEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnValueChanged;//[Size: 1]
	void SetValue(float InValue);// 0x31fd780
	void SetStepSize(float InValue);// 0x31fd490
	void SetSliderHandleColor(LinearColor InValue);// 0x31fd400
	void SetSliderBarColor(LinearColor InValue);// 0x31fd370
	void SetMinValue(float InValue);// 0x31fcfd0
	void SetMaxValue(float InValue);// 0x31fcd40
	void SetLocked(bool InValue);// 0x31fcba0
	void SetIndentHandle(bool InValue);// 0x31fca90
	float GetValue();// 0x31fc2e0
	float GetNormalizedValue();// 0x31fc0f0

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 1]
	SlateBrush HoveredBarImage;//[Offset: 0x90, Size: 1]
	SlateBrush DisabledBarImage;//[Offset: 0x118, Size: 1]
	SlateBrush NormalThumbImage;//[Offset: 0x1a0, Size: 1]
	SlateBrush HoveredThumbImage;//[Offset: 0x228, Size: 1]
	SlateBrush DisabledThumbImage;//[Offset: 0x2b0, Size: 1]
	float BarThickness;//[Offset: 0x338, Size: 1]

--------------------------------
Class: CrowShopMainWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowShopItemSlotWidget* CategoryItemWidget;//[Offset: 0x348, Size: 1]
	class CrowShopItemSlotWidget* CategoryItemWideWidget;//[Offset: 0x350, Size: 1]
	class CrowShopPackagePopupWidget* ShopPackagePopupWidgetclass;//[Offset: 0x358, Size: 1]
	class CrowChangeNicknameWidget* ChangeNicnameWidgetClass;//[Offset: 0x360, Size: 1]
	class CrowRandomBoxInfoWidget* RandomBoxInfoWidgetClass;//[Offset: 0x368, Size: 1]
	class CrowShopItemTabButton* SubProductButtonClass;//[Offset: 0x370, Size: 1]
	float DesconstructEffectTime;//[Offset: 0x378, Size: 1]
	CrowShopItemSlotWidget* CurrSelectSlotWidget;//[Offset: 0x380, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_Basic;//[Offset: 0x388, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_Battlepass;//[Offset: 0x390, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_RCPCharge;//[Offset: 0x398, Size: 1]
	CrowShopCategoryWidget* WB_ShopCategory;//[Offset: 0x3a0, Size: 1]
	CrowShopSlotDropDownWidget* WB_Shop_SlotDropDown;//[Offset: 0x3a8, Size: 1]
	CrowDeconstructWidget* WB_Shop_Deconstruct;//[Offset: 0x3b0, Size: 1]
	CrowBattlePassWidget* WB_BattlePass;//[Offset: 0x3b8, Size: 1]
	CrowButton* WB_BT_OwnList;//[Offset: 0x3c0, Size: 1]
	CrowButton* WB_BT_EscBack;//[Offset: 0x3c8, Size: 1]
	CrowButton* WB_BT_ShoppingCart;//[Offset: 0x3d0, Size: 1]
	CrowButton* BT_Sort;//[Offset: 0x3d8, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_OwnList;//[Offset: 0x3e0, Size: 1]
	CanvasPanel* CP_Normal_OwnList;//[Offset: 0x3e8, Size: 1]
	GridPanel* GP_NormalShopList;//[Offset: 0x3f0, Size: 1]
	GridPanel* GP_NormalOwnShopList;//[Offset: 0x3f8, Size: 1]
	HorizontalBox* HB_SubCategory;//[Offset: 0x400, Size: 1]
	TextBlock* TB_ShoppingCartCount;//[Offset: 0x408, Size: 1]
	HorizontalBox* HB_ShopTab;//[Offset: 0x410, Size: 1]
	CrowShopPackagePopupWidget* WB_Shop_Popup_ExclusivePurchase_wide;//[Offset: 0x418, Size: 1]
	CrowWidgetToggleButton*[] ButtonList;//[Offset: 0x420, Size: 1]
	CrowChangeNicknameWidget* WB_ChangeNicknameWidget;//[Offset: 0x430, Size: 1]
	CrowRandomBoxInfoWidget* RandomBoxInfoWidget;//[Offset: 0x438, Size: 1]
	enum PrevProductTopType;//[Offset: 0x440, Size: 1]
	enum CurrentProductTopType;//[Offset: 0x441, Size: 1]
	enum CurrentProductType;//[Offset: 0x442, Size: 1]
	enum CurrentProductSubType;//[Offset: 0x443, Size: 1]
	enum CurrentSortType;//[Offset: 0x444, Size: 1]
	int SaveShopTableIndex;//[Offset: 0x448, Size: 1]
	bool IsOwnItemSort;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	void SendUseUnlockSlotUseItem(enum ButtonType);// 0x1b2b1f0
	void SendUseBuff(enum ButtonType);// 0x1b2b170
	void RefreshShopItemList();// 0x1b2b150
	void OpenPackageShopPopup(enum ButtonType);// 0x1b2afa0
	void OpenChangeNicknameWidget(int InItemIndex);// 0x1b2af10
	void OnSelectTabButton(int ButtonIndex);// 0x1b2ae80
	void OnSelectSubTabButton(int SubButtonIndex);// 0x1b2adf0
	void OnSelectSortType(int SelectIndex);// 0x1b2ad60
	void OnSelectRCPTabButton();// 0x1b2ad40
	void OnSelectCategoryButton(CrowShopProductInfo ProductInfo);// 0x1b2aaf0
	void OnRefreshSelectTabButton(enum Type);// 0x1b2a9e0
	void OnComplateShopInfo();// 0x1b2a930
	void OnClosePopup(bool IsConfirm);// 0x1b2a8a0
	void OnClosePackagePopup(bool IsConfirm);// 0x1b2a810
	void OnClicked_SortBtn();// 0x1b2a7f0
	void OnClicked_OwnItemListBtn();// 0x1b2a7d0
	void OnClick_ShoppingCart();// 0x1b2a790
	void CloseChangeNicknameWidget();// 0x1b2a2a0

--------------------------------
Class: CrowShopItemSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_GoldIcon;//[Offset: 0x348, Size: 1]
	Image* IMG_GPointIcon;//[Offset: 0x350, Size: 1]
	CrowWidgetImage* IMG_Icon;//[Offset: 0x358, Size: 1]
	Image* IMG_KeyOn;//[Offset: 0x360, Size: 1]
	Image* IMG_KeyOff;//[Offset: 0x368, Size: 1]
	Image* IMG_NewIcon;//[Offset: 0x370, Size: 1]
	WidgetSwitcher* WS_ItemStatus;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x380, Size: 1]
	CrowButton* WB_BT_Preview;//[Offset: 0x388, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x390, Size: 1]
	TextBlock* TB_LimitTime;//[Offset: 0x398, Size: 1]
	TextBlock* TB_ItemCount;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_MoneyValue;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_Bar;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_GuageCount;//[Offset: 0x3b8, Size: 1]
	TextBlock* TB_TotalCount;//[Offset: 0x3c0, Size: 1]
	TextBlock* TBSale;//[Offset: 0x3c8, Size: 1]
	ScaleBox* SCB_US;//[Offset: 0x3d0, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x3d8, Size: 1]
	WidgetSwitcher* WS_PayProgressBar;//[Offset: 0x3e0, Size: 1]
	ProgressBar* ProgressBar_Ing;//[Offset: 0x3e8, Size: 1]
	CanvasPanel* CP_SlotButton;//[Offset: 0x3f0, Size: 1]
	CanvasPanel* CP_Sale;//[Offset: 0x3f8, Size: 1]
	CanvasPanel* CP_ItemTime;//[Offset: 0x400, Size: 1]
	CanvasPanel* CP_Owned;//[Offset: 0x408, Size: 1]
	VerticalBox* VB_ItemNamePanel;//[Offset: 0x410, Size: 1]
	RichTextBlock* RTB_ComplateText;//[Offset: 0x418, Size: 1]
	HorizontalBox* HB_ProgressText;//[Offset: 0x420, Size: 1]
	HorizontalBox* HB_BuyCountText;//[Offset: 0x428, Size: 1]
	ScaleBox* SB_ItemTime;//[Offset: 0x430, Size: 1]
	CanvasPanel* CP_SoldOut;//[Offset: 0x438, Size: 1]
	SizeBox* SB_SortItem;//[Offset: 0x440, Size: 1]
	Image* IMG_SortItem;//[Offset: 0x448, Size: 1]
	enum SlotType;//[Offset: 0x450, Size: 1]
	CrowShopTableRow ShopTableData;//[Offset: 0x458, Size: 1]
	CrowItemData ItemData;//[Offset: 0x4f0, Size: 1]
	void OnClickSlotWidget();// 0x1b2a6b0
	void OnClickPreview();// 0x1b2a600

--------------------------------
Class: CrowShopPackagePopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	bool IsSendPacket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	GridPanel* GP_ItemListPanel;//[Offset: 0x350, Size: 1]
	CrowShopItemSlotWidget* WB_Shop_Itemslot_Wide;//[Offset: 0x358, Size: 1]
	CrowButton* WB_BT_Change;//[Offset: 0x360, Size: 1]
	CrowButton* WB_BT_EscBack;//[Offset: 0x368, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x370, Size: 1]
	TextBlock* TB_ItemDesc;//[Offset: 0x378, Size: 1]
	TextBlock* TB_ItemInfo;//[Offset: 0x380, Size: 1]
	Image* IMG_SelectItemIcon;//[Offset: 0x388, Size: 1]
	class UserWidget* GridSlotItem;//[Offset: 0x390, Size: 1]
	CrowShopTableRow ShopData;//[Offset: 0x398, Size: 1]
	void SetShopItemInfo(bool IsRepurchase);// 0x1b2b430
	void OnDeselectItem(CrowCustomizeOutfitSlotWidget* DeSelectItem);// 0x1b2a950
	void OnClickMoveShop(enum ButtonType);// 0x1b2a480
	void OnClickItem(CrowCustomizeOutfitSlotWidget* SelectItem);// 0x1b2a3f0
	void OnClickCancleBT();// 0x1b2a3b0
	void OnClickBuyBT();// 0x1b2a350

--------------------------------
Class: CrowChangeNicknameWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Ok;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x370, Size: 1]
	EditableTextBox* TB_Nickname_Text;//[Offset: 0x378, Size: 1]
	TextBlock* TB_CurrentNickname;//[Offset: 0x380, Size: 1]
	int ChangeNicknameItemIndex;//[Offset: 0x388, Size: 1]
	void OnClick_BT_Ok();// 0x1a383f0
	void OnClick_BT_Cancel();// 0x1a290c0

--------------------------------
Class: CrowRandomBoxInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowCustomizeOutfitSlotWidget* ItemSlotWidgetClass;//[Offset: 0x348, Size: 1]
	CrowShopItemSlotWidget* WB_Shop_Itemslot;//[Offset: 0x350, Size: 1]
	GridPanel* GP_ItemList;//[Offset: 0x358, Size: 1]
	CanvasPanel* CP_Gacha_Percent;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Open;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x370, Size: 1]
	CrowButton* BT_BuyGPoint;//[Offset: 0x378, Size: 1]
	CrowButton* BT_BuyRCP;//[Offset: 0x380, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x388, Size: 1]
	CrowButton* BT_GachaPercent;//[Offset: 0x390, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x398, Size: 1]
	CrowButton* BT_Open10Box_Able;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x3a8, Size: 1]
	TextBlock* TXT_Legendary_Percent;//[Offset: 0x3b0, Size: 1]
	TextBlock* TXT_Epic_Percent;//[Offset: 0x3b8, Size: 1]
	TextBlock* TXT_Rare_Percent;//[Offset: 0x3c0, Size: 1]
	TextBlock* TXT_Uncommon_Percent;//[Offset: 0x3c8, Size: 1]
	TextBlock* TXT_Common_Percent;//[Offset: 0x3d0, Size: 1]
	HorizontalBox* HB_Legendary;//[Offset: 0x3d8, Size: 1]
	HorizontalBox* HB_Epic;//[Offset: 0x3e0, Size: 1]
	HorizontalBox* HB_Rare;//[Offset: 0x3e8, Size: 1]
	HorizontalBox* HB_Uncommon;//[Offset: 0x3f0, Size: 1]
	HorizontalBox* HB_Common;//[Offset: 0x3f8, Size: 1]
	CanvasPanel* CP_GachaInfo_Rare;//[Offset: 0x400, Size: 1]
	CanvasPanel* CP_GachaInfo_Uncommon;//[Offset: 0x408, Size: 1]
	CanvasPanel* CP_GachaInfo_Common;//[Offset: 0x410, Size: 1]
	CanvasPanel* CP_GachaInfo_Epic;//[Offset: 0x418, Size: 1]
	CanvasPanel* CP_GachaInfo_Legendary;//[Offset: 0x420, Size: 1]
	WidgetSwitcher* WS_Open10Box;//[Offset: 0x428, Size: 1]
	bool IsSendPacket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	CrowRandomBoxTableRow RandomBoxTable;//[Offset: 0x438, Size: 1]
	CrowShopTableRow ShopTableData;//[Offset: 0x668, Size: 1]
	void OnClickPercentPopup();// 0x1b08000
	void OnClickMoveShop(enum ButtonType);// 0x1b07f60
	void OnClickClosePopup();// 0x1b07f00
	void OnClickAllOpen();// 0x1b07ec0
	void OnClick_Open();// 0x1b080c0
	void OnClick_Cancel();// 0x1b080a0
	void OnClick_BuyRCP();// 0x1b08080
	void OnClick_BuyGPoint();// 0x1b08060
	void OnClick_Buy();// 0x1b08040

--------------------------------
Class: CrowRandomBoxTableRow.CrowItemTableBaseRow.TableRowBase
	uint32 GPoint;//[Offset: 0x1e0, Size: 1]
	uint32 RCPPoint;//[Offset: 0x1e4, Size: 1]
	uint32 CardTableIndex;//[Offset: 0x1e8, Size: 1]
	SoftObjectPath ModelingInfo;//[Offset: 0x1f0, Size: 1]
	ParticleSystem* RandomEffect;//[Offset: 0x208, Size: 1]
	bool CountingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	uint16 CompleteCounting;//[Offset: 0x212, Size: 1]
	enum CompleteCountingGrade;//[Offset: 0x214, Size: 1]
	CrowRandomBoxProbability[] Probability;//[Offset: 0x218, Size: 1]
	uint32 RandomBoxItemListIndex;//[Offset: 0x228, Size: 1]

--------------------------------
Class: CrowRandomBoxProbability
	enum ItemGrade;//[Offset: 0x0, Size: 1]
	float ProbabilityValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowShopItemTabButton.CrowWidgetToggleButton.CrowWidgetButtonBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CrowShopCategoryWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* VB_Category;//[Offset: 0x348, Size: 1]
	class CrowCategorySlotSmallWidget* CategoryItemWidget;//[Offset: 0x360, Size: 1]
	void RefreshButton(CrowCategorySlotSmallWidget* SelectButton);// 0x1b2b0c0
	void OnSelectCategoryButton(CrowCategorySlotSmallWidget* SelectButton);// 0x1b2aa60

--------------------------------
Class: CrowShopSlotDropDownWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	FString[] ButtonTitleList;//[Offset: 0x348, Size: 1]
	TextBlock* TB_SelectedItem;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Dropdown;//[Offset: 0x360, Size: 1]
	CanvasPanel* CP_Dropdown;//[Offset: 0x368, Size: 1]
	CrowShopDropDownItemSlot* WB_Shop_SlotListDropDown;//[Offset: 0x370, Size: 1]
	CrowShopDropDownItemSlot* WB_Shop_SlotListDropDown;//[Offset: 0x378, Size: 1]
	CrowShopDropDownItemSlot* WB_Shop_SlotListDropDown;//[Offset: 0x380, Size: 1]
	CrowShopDropDownItemSlot* WB_Shop_SlotListDropDown;//[Offset: 0x388, Size: 1]
	CrowShopDropDownItemSlot* WB_Shop_SlotListDropDown;//[Offset: 0x390, Size: 1]
	CrowShopDropDownItemSlot* WB_Shop_SlotListDropDown;//[Offset: 0x398, Size: 1]
	CrowShopDropDownItemSlot*[] ButtonList;//[Offset: 0x3a0, Size: 1]
	CrowShopDropDownItemSlot* CurrentShopListItem;//[Offset: 0x3b0, Size: 1]
	void OnClickDropDown();// 0x1b2f700

--------------------------------
Class: CrowShopDropDownItemSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_DeselectedText;//[Offset: 0x348, Size: 1]
	TextBlock* TB_SelectedText;//[Offset: 0x350, Size: 1]
	Image* IMG_SelectIcon;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Dropdown;//[Offset: 0x360, Size: 1]
	FString ButtonTextKey;//[Offset: 0x368, Size: 1]
	int ButtonIndex;//[Offset: 0x378, Size: 1]
	void OnClickedItem();// 0x1b2a7b0

--------------------------------
Class: CrowDeconstructWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	MaterialInstanceDynamic* DconstructGage;//[Offset: 0x348, Size: 1]
	MaterialInstanceDynamic* DconstructGageBase;//[Offset: 0x350, Size: 1]
	class CrowDeconstructSlotWidget* SlotWidgetClass;//[Offset: 0x358, Size: 1]
	class CrowCustomizeOutfitSlotWidget* OwnListSlotClass;//[Offset: 0x360, Size: 1]
	GridPanel* GP_ItemList;//[Offset: 0x368, Size: 1]
	GridPanel* GP_SelectItemList;//[Offset: 0x370, Size: 1]
	CanvasPanel* CP_DeconstructPreview;//[Offset: 0x378, Size: 1]
	WidgetSwitcher* WS_InvenState;//[Offset: 0x380, Size: 1]
	TextBlock* TB_GPointValue;//[Offset: 0x388, Size: 1]
	CrowButton* BT_RegisterAll;//[Offset: 0x390, Size: 1]
	CrowButton* BT_UnregisterAll;//[Offset: 0x398, Size: 1]
	CrowButton* BT_Deconstruct;//[Offset: 0x3a0, Size: 1]
	CanvasPanel* CP_Gauge;//[Offset: 0x3a8, Size: 1]
	Image* IMG_Gauge;//[Offset: 0x3b0, Size: 1]
	Image* IMG_Gauge_Base;//[Offset: 0x3b8, Size: 1]
	CanvasPanel* CP_GaugeEffect;//[Offset: 0x3c0, Size: 1]
	float DeconstructTime;//[Offset: 0x3c8, Size: 1]
	float LimitTime;//[Offset: 0x3cc, Size: 1]
	bool IsSendPacket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	CrowDeconstructSlotWidget*[] SlotWidgetList;//[Offset: 0x3e8, Size: 1]
	void RePosition();// 0x1a70650
	void RefreshPoint();// 0x1a70690
	void Refresh();// 0x1a70670
	void OnClickSlotItem(CrowCustomizeOutfitSlotWidget* SelectSlotItem);// 0x1a70220
	void OnClick_UnRegisterAll();// 0x1a702f0
	void OnClick_RegisterAll();// 0x1a702d0
	void OnClick_Deconstruct();// 0x1a702b0
	CrowDeconstructSlotWidget* FindSlot(CrowItemData ItemData);// 0x1a6fec0
	CrowDeconstructSlotWidget* FindEmptySlot();// 0x1a6fe90

--------------------------------
Class: CrowDeconstructSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Icon;//[Offset: 0x348, Size: 1]
	Image* IMG_Selected;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Slot;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x360, Size: 1]
	void OnClick();// 0x1a70200

--------------------------------
Class: CrowBattlePassWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowBattlePassItemSlotWidget* BattlePassItemSlotWidget;//[Offset: 0x348, Size: 1]
	float EffectProducingTime;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_BattlePass_PurchaseImageState;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_BattlePass_PurchaseInfoState;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_BattlePass_Status;//[Offset: 0x368, Size: 1]
	TextBlock* TB_BattlePass_Inactive_Season;//[Offset: 0x370, Size: 1]
	TextBlock* TB_BattlePass_Active_Season;//[Offset: 0x378, Size: 1]
	TextBlock* TB_BattlePass_Inactive_Season_Period;//[Offset: 0x380, Size: 1]
	TextBlock* TB_BattlePass_Active_Season_Period;//[Offset: 0x388, Size: 1]
	Button* BT_BattlePass_Purchase;//[Offset: 0x390, Size: 1]
	Button* BT_BattlePass_FreePass;//[Offset: 0x398, Size: 1]
	WidgetSwitcher* WS_BattlePass_FreePass;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_BattlePass_FreePass_SelectedLevel;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_BattlePass_CurrentLevel;//[Offset: 0x3b0, Size: 1]
	Button* BT_Arrow_L;//[Offset: 0x3b8, Size: 1]
	Button* BT_Arrow_R;//[Offset: 0x3c0, Size: 1]
	ScrollBox* SB_BattlePass_ItemSlots;//[Offset: 0x3c8, Size: 1]
	CanvasPanel* CP_ItemInfo;//[Offset: 0x3d0, Size: 1]
	WidgetSwitcher* WS_ItemInfo_Grade;//[Offset: 0x3d8, Size: 1]
	CrowButton* BT_Preview;//[Offset: 0x3e0, Size: 1]
	TextBlock* TB_ItemInfo_Name;//[Offset: 0x3e8, Size: 1]
	CrowBattlePassPurchasePopup* WB_BattlePassPopup;//[Offset: 0x3f0, Size: 1]
	CrowBattlePassTooltip* WB_BattlePassTooltip;//[Offset: 0x3f8, Size: 1]
	CrowBattlePassFreePassPopup* WB_Popup_BattlePassLevelJumpPurchase;//[Offset: 0x400, Size: 1]
	AkAudioEvent* BattlePassActivationAkEvent;//[Offset: 0x408, Size: 1]
	<int,CrowBattlePassItemSlotWidget*> BattlePassItemSlotWidgets;//[Offset: 0x410, Size: 1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	int BattlePassIndex;//[Offset: 0x464, Size: 1]
	byte SeasonIndex;//[Offset: 0x468, Size: 1]
	uint64 UserBattlePassExp;//[Offset: 0x470, Size: 1]
	int UserBattlePassLevel;//[Offset: 0x478, Size: 1]
	int PrevRewardedFreeItemLevel;//[Offset: 0x47c, Size: 1]
	int PrevRewardedPaidItemLevel;//[Offset: 0x480, Size: 1]
	int RewardedFreeItemLevel;//[Offset: 0x484, Size: 1]
	int RewardedPaidItemLevel;//[Offset: 0x488, Size: 1]
	int16 FreePassTargetLevel;//[Offset: 0x48c, Size: 1]
	byte InProgressSeasonIndex;//[Offset: 0x48e, Size: 1]
	DateTime InProgressSeasonStartDateTime;//[Offset: 0x490, Size: 1]
	DateTime InProgressSeasonEndDateTime;//[Offset: 0x498, Size: 1]
	bool bIsSetItemSlotWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	float BattlePassItemSlotWidth;//[Offset: 0x4a4, Size: 1]
	bool bIsRewardProducing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	enum ProducingType;//[Offset: 0x4a9, Size: 1]
	int CurrentProducingBattlePassLevel;//[Offset: 0x4ac, Size: 1]
	float ElapsedRewardProducingByStep;//[Offset: 0x4b0, Size: 1]
	float ProducingTargetScrollOffset;//[Offset: 0x4b4, Size: 1]
	CrowRewardItem CurrentItemInfo;//[Offset: 0x4b8, Size: 1]
	void OnClicked_BT_Preview();// 0x1a29180
	void OnClicked_BT_BattlePass_Purchase();// 0x1a29060
	void OnClicked_BT_BattlePass_FreePass();// 0x1a29040
	void OnClicked_BT_Arrow_R();// 0x1a29020
	void OnClicked_BT_Arrow_L();// 0x1a29000
	void OnBattlePassActivationRewardCloseCallback();// 0x1a28f60

--------------------------------
Class: CrowBattlePassItemSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowBattlePassWidget* BattlePassWidget;//[Offset: 0x348, Size: 1]
	uint16 NeededLevel;//[Offset: 0x350, Size: 1]
	int64 NeededExp;//[Offset: 0x358, Size: 1]
	int64 RequiredTotalExp;//[Offset: 0x360, Size: 1]
	CrowRewardItem FreeRewardItem;//[Offset: 0x368, Size: 1]
	CrowRewardItem PaidRewardItem;//[Offset: 0x3a0, Size: 1]
	bool bIsHoverdFreeItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bIsHoverdPaidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	bool bEnoughLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 1]
	bool bWasRewardedFreeItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3db, Size: 1]
	bool bWasRewardedPaidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	Button* BT_FreeItem;//[Offset: 0x3e0, Size: 1]
	CanvasPanel* CP_FreeItem;//[Offset: 0x3e8, Size: 1]
	Image* IMG_FreeItem_Inactive_BG;//[Offset: 0x3f0, Size: 1]
	Image* IMG_FreeItem_Inactive_BG2;//[Offset: 0x3f8, Size: 1]
	Image* IMG_FreeItem_Active_BG;//[Offset: 0x400, Size: 1]
	Image* IMG_FreeItem_Active_BG2;//[Offset: 0x408, Size: 1]
	Image* IMG_FreeItem;//[Offset: 0x410, Size: 1]
	Image* IMG_FreeItem_Check;//[Offset: 0x418, Size: 1]
	TextBlock* TB_Level;//[Offset: 0x420, Size: 1]
	Image* IMG_Lock;//[Offset: 0x428, Size: 1]
	ProgressBar* PB_BattlePassExp;//[Offset: 0x430, Size: 1]
	Button* BT_PaidItem;//[Offset: 0x438, Size: 1]
	CanvasPanel* CP_PaidItem;//[Offset: 0x440, Size: 1]
	Image* IMG_PaidItem_Inactive_BG;//[Offset: 0x448, Size: 1]
	Image* IMG_PaidItem_Inactive_BG2;//[Offset: 0x450, Size: 1]
	Image* IMG_PaidItem_Active_BG;//[Offset: 0x458, Size: 1]
	Image* IMG_PaidItem_Active_BG2;//[Offset: 0x460, Size: 1]
	Image* IMG_PaidItem;//[Offset: 0x468, Size: 1]
	Image* IMG_PaidItem_Check;//[Offset: 0x470, Size: 1]
	SizeBox* SB_Sort_FreeItem;//[Offset: 0x478, Size: 1]
	Image* IMG_Sort_FreeItem;//[Offset: 0x480, Size: 1]
	SizeBox* SB_Sort_PaidItem;//[Offset: 0x488, Size: 1]
	Image* IMG_Sort_PaidItem;//[Offset: 0x490, Size: 1]
	AkAudioEvent* HoverdItemAkEvent;//[Offset: 0x498, Size: 1]
	AkAudioEvent* RewardNormalItemAkEvent;//[Offset: 0x4a0, Size: 1]
	AkAudioEvent* RewardLegendItemAkEvent;//[Offset: 0x4a8, Size: 1]
	void OnUnHoverd_BT_PaidItem();// 0x1a292a0
	void OnUnHoverd_BT_FreeItem();// 0x1a29280
	void OnHovered_BT_PaidItem();// 0x1a29200
	void OnHovered_BT_FreeItem();// 0x1a291e0
	void OnClicked_BT_PaidItem();// 0x1a29120
	void OnClicked_BT_FreeItem();// 0xca8430

--------------------------------
Class: CrowRewardItem
	enum ItemType;//[Offset: 0x0, Size: 1]
	int ItemCount;//[Offset: 0x4, Size: 1]
	uint32 ItemIndex;//[Offset: 0x8, Size: 1]
	uint32 GPoint;//[Offset: 0xc, Size: 1]
	FString TitleLocalStringKey;//[Offset: 0x10, Size: 1]
	FString DescLocalStringKey;//[Offset: 0x20, Size: 1]
	bool isDuplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowBattlePassPurchasePopup.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Exit;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Season;//[Offset: 0x350, Size: 1]
	ScrollBox* SB_BattlePass_ItemSlots;//[Offset: 0x358, Size: 1]
	class CrowBattlePassPurchaseSlot* NormalPurchaseSlotClass;//[Offset: 0x360, Size: 1]
	class CrowBattlePassPurchasePremiumSlot* PremiumPurchaseSlotClass;//[Offset: 0x368, Size: 1]
	CrowBattlePassPurchaseSlot*[] WB_BattlePassPurchasePopupSlots;//[Offset: 0x370, Size: 1]
	CrowBattlePassWidget* BattlePassWidget;//[Offset: 0x380, Size: 1]
	void OnClicked_BT_Exit();// 0x1a290c0

--------------------------------
Class: CrowBattlePassPurchaseSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Title;//[Offset: 0x348, Size: 1]
	TextBlock* TB_BattlePassDesc;//[Offset: 0x350, Size: 1]
	RichTextBlock* RTB_BattlePassDesc;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_PurchaseButton;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x368, Size: 1]
	CrowButton* BT_RCPBuy;//[Offset: 0x370, Size: 1]
	TextBlock* TB_DiscountedPrice;//[Offset: 0x378, Size: 1]
	CrowBattlePassWidget* BattlePassWidget;//[Offset: 0x380, Size: 1]
	CrowBattlePassPurchasePopup* BattlePassPurchasePopupWidget;//[Offset: 0x388, Size: 1]
	void OnClicked_BT_RCPBuy();// 0x1a291c0
	void OnClicked_BT_Buy();// 0x1a290a0

--------------------------------
Class: CrowBattlePassPurchasePremiumSlot.CrowBattlePassPurchaseSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Preview;//[Offset: 0x398, Size: 1]
	CanvasPanel* CP_Price;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_OriginalPrice;//[Offset: 0x3a8, Size: 1]
	CrowBattlePassPurchaseRewardSlot*[] Rewards;//[Offset: 0x3b0, Size: 1]
	void OnClicked_BT_Preview();// 0x1a29160

--------------------------------
Class: CrowBattlePassPurchaseRewardSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Slot;//[Offset: 0x348, Size: 1]
	Image* IMG_Icon;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x358, Size: 1]
	CrowBattlePassWidget* BattlePassWidget;//[Offset: 0x360, Size: 1]
	void OnUnHoved_BT_Slot();// 0x1a29260
	void OnHovered_BT_Slot();// 0x1a29220

--------------------------------
Class: CrowBattlePassTooltip.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_ItemType;//[Offset: 0x348, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x350, Size: 1]
	TextBlock* TB_ItemDesc;//[Offset: 0x358, Size: 1]
	HorizontalBox* HB_ItemTutorial;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowBattlePassFreePassPopup.CrowWidgetBase.UserWidget.Widget.Visual.Object
	LinearColor EnoughRCPColor;//[Offset: 0x348, Size: 1]
	LinearColor NotEnoughRCPColor;//[Offset: 0x358, Size: 1]
	TextBlock* TB_CurrentLevel;//[Offset: 0x368, Size: 1]
	TextBlock* TB_MaxLevel;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Minus;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Plus;//[Offset: 0x380, Size: 1]
	CrowButton* BT_Max;//[Offset: 0x388, Size: 1]
	TextBlock* TB_Price;//[Offset: 0x390, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x398, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x3a0, Size: 1]
	CrowButton* BT_RCPBuy;//[Offset: 0x3a8, Size: 1]
	Slider* SL_Value;//[Offset: 0x3b0, Size: 1]
	WidgetSwitcher* WS_Buy;//[Offset: 0x3b8, Size: 1]
	CrowBattlePassWidget* BattlePassWidget;//[Offset: 0x3c0, Size: 1]
	void OnSliderMouseCaptureEnd();// 0x1a29240
	void OnClicked_BT_RCPBuy();// 0x1a291a0
	void OnClicked_BT_Plus();// 0x1a29140
	void OnClicked_BT_Minus();// 0x1a29100
	void OnClicked_BT_Max();// 0x1a290e0
	void OnClicked_BT_Cancel();// 0x1a290c0
	void OnClicked_BT_Buy();// 0x1a29080
	void OnChangedSliderValue(float Value);// 0x1a28f80

--------------------------------
Class: CrowCustomizeEmotionDescWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Tip;//[Offset: 0x348, Size: 1]
	enum State;//[Offset: 0x350, Size: 1]
	CrowWidgetToggleButton* CategoryEmotionWidget;//[Offset: 0x358, Size: 1]
	CrowWidgetToggleButton* CategoryResultMVPWidget;//[Offset: 0x360, Size: 1]
	CrowCustomizeEmotionListWidget* EmotionListWidget;//[Offset: 0x368, Size: 1]
	CrowCustomizeEmotionRadialWidget* EmotionRadialWidget;//[Offset: 0x370, Size: 1]
	CrowCustomizeEmotionListWidget* ResultMVPListWidget;//[Offset: 0x378, Size: 1]
	CrowCustomizeEmotionSlotWidget* SelectedSlotWidget;//[Offset: 0x380, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x388, Size: 1]
	CrowLobbyCharacterPawn* LobbyCharacterPawn;//[Offset: 0x390, Size: 1]
	SkeletalMeshActor*[] SkeletalMeshActors;//[Offset: 0x398, Size: 1]
	TimerHandle EndPlayMontageTimerHandle;//[Offset: 0x3a8, Size: 1]
	CrowCustomizeEmotionListInfo EmotionListInfo;//[Offset: 0x3b8, Size: 1]
	CrowCustomizeEmotionListInfo ResultMVPListInfo;//[Offset: 0x3e0, Size: 1]
	AnimMontage* CurrentAnimMontage;//[Offset: 0x408, Size: 1]
	void OnUnequipEmotion(uint32 InSlotIndex);// 0x1a655d0
	void OnSelectTabButton(byte SelectIndex);// 0x1a654f0
	void OnResultMVPUnhoverSlot(CrowWidgetBase* InSlotWidget);// 0x1a65060
	void OnResultMVPSelectSlot(CrowWidgetBase* InSlotWidget);// 0x1a653d0
	void OnResultMVPHoverSlot(CrowWidgetBase* InSlotWidget);// 0x1a65340
	void OnResultMVPDeselectSlot(CrowWidgetBase* InSlotWidget);// 0x1a652b0
	void OnEquipEmotion(uint32 InSlotIndex);// 0x1a650f0
	void OnEmotionUnhoverSlot(CrowWidgetBase* InSlotWidget);// 0x1a65060
	void OnEmotionSelectSlot(CrowWidgetBase* InSlotWidget);// 0x1a64fd0
	void OnEmotionHoverSlot(CrowWidgetBase* InSlotWidget);// 0x1a64f40
	void OnEmotionDeselectSlot(CrowWidgetBase* InSlotWidget);// 0x1a64eb0
	void OnClose_ShopPopup(bool IsConfirm);// 0x1a64ce0
	void OnClickCategory(int Index);// 0x1a648e0

--------------------------------
Class: CrowCustomizeEmotionListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowCustomizeEmotionSlotWidget* SlotWidgetClass;//[Offset: 0x348, Size: 1]
	GridPanel* GD_ItemList;//[Offset: 0x350, Size: 1]
	CrowCustomizeEmotionSlotWidget* SelectedSlotWidget;//[Offset: 0x358, Size: 1]
	void OnUnselectSlot(CrowWidgetBase* InWidget);// 0x1a65710
	void OnUnhoverSlot(CrowWidgetBase* InWidget);// 0x1a65680
	void OnSelectSlot(CrowWidgetBase* InWidget);// 0x1a65460
	void OnHoverSlot(CrowWidgetBase* InWidget);// 0x1a651a0

--------------------------------
Class: CrowCustomizeEmotionSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Image* IMG_Icon;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x350, Size: 1]
	Image* IMG_Lock;//[Offset: 0x358, Size: 1]
	Image* IMG_Equiped;//[Offset: 0x360, Size: 1]
	Image* IMG_Selected;//[Offset: 0x368, Size: 1]
	Image* IMG_NewIcon;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Customize_Slot;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_Cost;//[Offset: 0x380, Size: 1]
	TextBlock* TB_Label_Money;//[Offset: 0x388, Size: 1]
	uint32 ItemIndex;//[Offset: 0x390, Size: 1]
	bool bIsSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool bIsEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool bIsEmotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	float DelayTimeHover;//[Offset: 0x398, Size: 1]
	TimerHandle DelayTimeHoverTimerHandle;//[Offset: 0x3a0, Size: 1]
	CrowShopTableRow ShopTableRow;//[Offset: 0x3a8, Size: 1]
	CrowItemData ItemData;//[Offset: 0x440, Size: 1]
	void OnUnhover();// 0x1a65660
	void OnHover();// 0x1a65180
	void OnDelayHover();// 0x1a64e00
	void OnClick();// 0x1a648c0

--------------------------------
Class: CrowCustomizeEmotionRadialWidget.CrowRadialMenuWidgetBase.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowRadialMenuButtonWidget* WB_Customize_EmotionRadialMenu_5Button;//[Offset: 0x3d0, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_EmotionRadialMenu_5Button;//[Offset: 0x3d8, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_EmotionRadialMenu_5Button;//[Offset: 0x3e0, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_EmotionRadialMenu_5Button;//[Offset: 0x3e8, Size: 1]
	CrowRadialMenuButtonWidget* WB_Customize_EmotionRadialMenu_5Button;//[Offset: 0x3f0, Size: 1]
	Image* IMG_CircleSelect;//[Offset: 0x3f8, Size: 1]
	CanvasPanel* CP_MouseTip;//[Offset: 0x400, Size: 1]
	CanvasPanel* CP_HoverIcon;//[Offset: 0x408, Size: 1]
	enum State;//[Offset: 0x410, Size: 1]
	WidgetAnimation* RegistAnimation;//[Offset: 0x418, Size: 1]
	void OnClicked_RightMouse_Radial_BTN(CrowRadialMenuButtonWidget* InSelectBtn);// 0x1a64b10

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x230, Size: 1]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x238, Size: 1]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x240, Size: 1]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x248, Size: 1]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x250, Size: 1]
	void OnRep_ReplicatedPhysAsset();// 0x102ced0
	void OnRep_ReplicatedMesh();// 0x1a7dc00
	void OnRep_ReplicatedMaterial1();// 0x3c1c690
	void OnRep_ReplicatedMaterial0();// 0x3c1cf20

--------------------------------
Class: CrowCustomizeEmotionListInfo
	enum ItemGrade;//[Offset: 0x0, Size: 1]
	uint32[] EquipedSlotIndexs;//[Offset: 0x8, Size: 1]
	CrowEmotionSlotInfo[] SlotInfos;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowEmotionSlotInfo
	uint32 Index;//[Offset: 0x0, Size: 1]
	PaperSprite* Image;//[Offset: 0x8, Size: 1]
	enum ItemGrade;//[Offset: 0x10, Size: 1]
	uint32 ShopIndex;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CrowReplayWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class UserWidget* ItemWidgetClass;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Play;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Lock;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Delete;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Refresh;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_ReplayDesc;//[Offset: 0x370, Size: 1]
	TextBlock* TB_CurrentNumReplay;//[Offset: 0x378, Size: 1]
	TextBlock* TB_MaxNumReplay;//[Offset: 0x380, Size: 1]
	TextBlock* TB_TotalTime;//[Offset: 0x388, Size: 1]
	TextBlock* TB_Lock;//[Offset: 0x390, Size: 1]
	Image* IMG_Map;//[Offset: 0x398, Size: 1]
	TextBlock* TB_MapName;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_MapMode;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_TotalCapacity;//[Offset: 0x3b0, Size: 1]
	ScrollBox* SB_ReplayList;//[Offset: 0x3b8, Size: 1]
	HorizontalBox* SquadFirst;//[Offset: 0x3c0, Size: 1]
	HorizontalBox* SquadSecond;//[Offset: 0x3c8, Size: 1]
	HorizontalBox* SquadThird;//[Offset: 0x3d0, Size: 1]
	HorizontalBox* SquadFourth;//[Offset: 0x3d8, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_Date;//[Offset: 0x3e0, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_Mode;//[Offset: 0x3e8, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_PlayTime;//[Offset: 0x3f0, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_Capacity;//[Offset: 0x3f8, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_GamerVer;//[Offset: 0x400, Size: 1]
	CrowSortButtonWidget* WB_Button_Sorting_Playable;//[Offset: 0x408, Size: 1]
	TextBlock* TB_SquadName_First;//[Offset: 0x410, Size: 1]
	TextBlock* TB_SquadName_Second;//[Offset: 0x418, Size: 1]
	TextBlock* TB_SquadName_Third;//[Offset: 0x420, Size: 1]
	TextBlock* TB_SquadName_Fourth;//[Offset: 0x428, Size: 1]
	HorizontalBox*[] SquadBoxList;//[Offset: 0x430, Size: 1]
	TextBlock*[] SquadNameList;//[Offset: 0x440, Size: 1]
	CrowReplayInfo*[] ReplayInfoList;//[Offset: 0x450, Size: 1]
	CrowSortButtonWidget*[] SortButtonList;//[Offset: 0x460, Size: 1]
	void ReloadList();// 0x1b11850
	void OnClickSortByPlayTime();// 0x1b11730
	void OnClickSortByPlayable();// 0x1b11750
	void OnClickSortByMode();// 0x1b11710
	void OnClickSortByGamerVer();// 0x1b116f0
	void OnClickSortByDate();// 0x1b116d0
	void OnClickSortByCapacity();// 0x1b116b0
	void OnClickRefresh();// 0x1b11670
	void OnClickPlay();// 0x1b11610
	void OnClickLock();// 0x1b11570
	void OnClickDelete();// 0x1b11550

--------------------------------
Class: CrowReplayInfo.Object
	FString ReplayName;//[Offset: 0x28, Size: 1]
	FString FriendlyName;//[Offset: 0x38, Size: 1]
	DateTime Timestamp;//[Offset: 0x48, Size: 1]
	int LengthInMS;//[Offset: 0x50, Size: 1]
	int SizeOfByte;//[Offset: 0x54, Size: 1]
	int Version;//[Offset: 0x58, Size: 1]
	bool bLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int MapIndex;//[Offset: 0x60, Size: 1]
	uint64 ServerKey;//[Offset: 0x68, Size: 1]
	FString MyPlayerName;//[Offset: 0x70, Size: 1]
	FString[] MySquadList;//[Offset: 0x80, Size: 1]
	Timespan[] CheckPointList;//[Offset: 0x90, Size: 1]

--------------------------------
Class: Timespan

--------------------------------
Class: CrowLobbyRecordWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButtonContainerBase* WB_RecordTab;//[Offset: 0x348, Size: 1]
	CrowButtonContainerBase* WB_RecordTab_Weapon;//[Offset: 0x350, Size: 1]
	CrowLobbyRecordScoreWidget* WB_RecordScore;//[Offset: 0x358, Size: 1]
	CrowLobbyRecordWeaponWidget* WB_RecordWeapon;//[Offset: 0x360, Size: 1]
	CrowReplayWidget* WB_Replay;//[Offset: 0x368, Size: 1]
	CrowLobbyMainMedalWidget* WB_Medal;//[Offset: 0x370, Size: 1]
	enum CurrentRecordTab;//[Offset: 0x378, Size: 1]
	enum CurrentWeaponUIType;//[Offset: 0x379, Size: 1]
	void OnSelectRecordWeaponTab(int SelectedIndex);// 0x1abf5d0
	void OnSelectRecordTab(int SelectedIndex);// 0x1abf540

--------------------------------
Class: CrowLobbyRecordScoreWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButtonContainerBase* WB_RecordTab_Vertical;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_Total;//[Offset: 0x350, Size: 1]
	CrowRecordScoreTotalRankWidget* WB_RecordScoreTotalRank;//[Offset: 0x358, Size: 1]
	CrowRecordScoreRankWidget* WB_RecordScoreRank_Grade;//[Offset: 0x360, Size: 1]
	CrowRecordScoreRankWidget* WB_RecordScoreRank_Season;//[Offset: 0x368, Size: 1]
	CrowRecordScoreRankWidget* WB_RecordScoreRank_Conquest;//[Offset: 0x370, Size: 1]
	CrowRecordScoreRankWidget* WB_RecordScoreRank_Squad;//[Offset: 0x378, Size: 1]
	CrowGradeInfoPopupWidget* WB_GradeInfoPopup;//[Offset: 0x380, Size: 1]
	CrowScoreRankSlotGradeData* MyGradeData;//[Offset: 0x388, Size: 1]
	CrowScoreRankSlotGradeData* MySeasonData;//[Offset: 0x390, Size: 1]
	CrowScoreRankSlotModeData* MyConquestData;//[Offset: 0x398, Size: 1]
	CrowScoreRankSlotModeData* MySquadData;//[Offset: 0x3a0, Size: 1]
	enum CurrentRecordScoreTab;//[Offset: 0x3a8, Size: 1]
	CrowRecordScoreRankWidget* CurrentRecordScoreRankWidget;//[Offset: 0x3b0, Size: 1]
	CrowScoreRankSlotData* CurrentMyData;//[Offset: 0x3b8, Size: 1]
	bool bDoEntryInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float EntryInitializedTimer;//[Offset: 0x3d8, Size: 1]
	int LastEntryInitializedIndex;//[Offset: 0x3dc, Size: 1]
	void OnSelectRecordScoreTab(int SelectedIndex);// 0x1abf4b0
	void OnSelectDropDownSlot(int InSelectRankingScheduleIndex);// 0x1abf270
	void OnEntryInitializedGrade(Object* Item, UserWidget* Widget);// 0x1abf1a0
	void OnClickedGradeInfoButton(CrowWidgetBase* InWidget);// 0x1abefa0

--------------------------------
Class: CrowRecordScoreTotalRankWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowDropDownWidget* WB_Record_DropDown;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_Class;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Class;//[Offset: 0x358, Size: 1]
	TextBlock* TB_SeasonLv;//[Offset: 0x360, Size: 1]
	TextBlock* TB_RankLv;//[Offset: 0x368, Size: 1]
	TextBlock* TB_PlayTime;//[Offset: 0x370, Size: 1]
	TextBlock* TB_TotalPlayCount;//[Offset: 0x378, Size: 1]
	TextBlock* TB_ConquestWinCount;//[Offset: 0x380, Size: 1]
	TextBlock* TB_ConquestLoseCount;//[Offset: 0x388, Size: 1]
	TextBlock* TB_SquadBestRank;//[Offset: 0x390, Size: 1]
	TextBlock* TB_TotalKillCount;//[Offset: 0x398, Size: 1]
	TextBlock* TB_TotalDeathCount;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_Rate;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_ExpPerMinute;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_FavoriteWeaponKillCount;//[Offset: 0x3b8, Size: 1]
	CrowWidgetImage* IMG_Favoriteweapon_Icon;//[Offset: 0x3c0, Size: 1]
	DateTime CurrentDateTime;//[Offset: 0x3c8, Size: 1]
	FString UserNickName;//[Offset: 0x3d0, Size: 1]
	int SelectedRankingDateInfoIndex;//[Offset: 0x3e0, Size: 1]
	void OnSelectDropDown(CrowWidgetBase* InSelectSlot);// 0x1b0cd10

--------------------------------
Class: CrowRecordScoreRankWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	ListView* LV_Rank;//[Offset: 0x378, Size: 1]
	CrowDropDownWidget* WB_Record_DropDown;//[Offset: 0x380, Size: 1]
	CrowScoreRankSlotWidget* WB_RecordScoreRankSlot_My;//[Offset: 0x388, Size: 1]
	CrowButton* GradeInfoButton;//[Offset: 0x390, Size: 1]
	DateTime CurrentDateTime;//[Offset: 0x398, Size: 1]
	int SelectedRankingScheduleIndex;//[Offset: 0x3a0, Size: 1]
	int SelectedRankingDateInfoIndex;//[Offset: 0x3a4, Size: 1]
	enum RankingRecordType;//[Offset: 0x3a8, Size: 1]
	enum RankingPeriodType;//[Offset: 0x3a9, Size: 1]
	void OnSelectDropDownSlot(CrowWidgetBase* InSelectSlot);// 0x1b0cda0
	void OnEntryInitialized(Object* Item, UserWidget* Widget);// 0x1b0cc40
	void OnClickedGradeInfoButton();// 0x1ac9660

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x2d8, Size: 1]
	byte SelectionMode;//[Offset: 0x2d9, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x2da, Size: 1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float EntrySpacing;//[Offset: 0x2e0, Size: 1]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Object*[] ListItems;//[Offset: 0x2e8, Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryInitialized;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemClicked;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemDoubleClicked;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemIsHoveredChanged;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemSelectionChanged;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemScrolledIntoView;//[Size: 1]
	void SetSelectionMode(byte SelectionMode);// 0x31f03d0
	void SetSelectedIndex(int Index);// 0x31f0250
	void ScrollIndexIntoView(int Index);// 0x31eed50
	void RemoveItem(Object* Item);// 0x31eeca0
	void NavigateToIndex(int Index);// 0x31eebf0
	bool IsRefreshPending();// 0x31eebc0
	int GetNumItems();// 0x31ee980
	Object*[] GetListItems();// 0x31ee950
	Object* GetItemAt(int Index);// 0x31ee810
	int GetIndexForItem(Object* Item);// 0x31ee740
	void ClearListItems();// 0x31ee630
	void BP_SetSelectedItem(Object* Item);// 0x31ee5a0
	void BP_SetListItems(out const Object*[] InListItems);// 0x31ee4f0
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x31ee420
	void BP_ScrollItemIntoView(Object* Item);// 0x31ee390
	void BP_NavigateToItem(Object* Item);// 0x31ee300
	bool BP_IsItemVisible(Object* Item);// 0x31ee260
	bool BP_GetSelectedItems(out Object*[] Items);// 0x31ee1a0
	Object* BP_GetSelectedItem();// 0x31ee170
	int BP_GetNumItemsSelected();// 0x31ee140
	void BP_ClearSelection();// 0x31ee120
	void BP_CancelScrollIntoView();// 0x31ee100
	void AddItem(Object* Item);// 0x31ee070

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x108, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x110, Size: 1]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	float FixedLineScrollOffset;//[Offset: 0x118, Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryGenerated;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryReleased;//[Size: 1]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x140, Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x31f0660
	void SetScrollOffset(const float InScrollOffset);// 0x31f0150
	void SetScrollbarVisibility(enum InVisibility);// 0x31f01d0
	void ScrollToTop();// 0x31eee00
	void ScrollToBottom();// 0x31eede0
	void RequestRefresh();// 0x31eed30
	void RegenerateAllEntries();// 0x31eec80
	UserWidget*[] GetDisplayedEntryWidgets();// 0x31ee680

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 1]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowScoreRankSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CrowGradeInfoPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetImage* IMG_Rank_Now;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Rank_Now;//[Offset: 0x350, Size: 1]
	CrowWidgetImage* IMG_Rank_After;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Rank_After;//[Offset: 0x360, Size: 1]
	CrowProgressBar* PB_Level;//[Offset: 0x368, Size: 1]
	TextBlock* TB_Level;//[Offset: 0x370, Size: 1]
	ScrollBox* SB_Record_GradeListSlot_List;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x380, Size: 1]
	VerticalBox* VB_ProgressBar;//[Offset: 0x388, Size: 1]
	class CrowGradeInfoPopupSlotWidget* SlotWidgetClass;//[Offset: 0x390, Size: 1]
	void OnClickedClose();// 0x1a290c0

--------------------------------
Class: CrowGradeInfoPopupSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetImage* IMG_RankIcon;//[Offset: 0x348, Size: 1]
	TextBlock* TB_ClassLevel;//[Offset: 0x350, Size: 1]
	TextBlock* TB_ExpDesc;//[Offset: 0x358, Size: 1]
	TextBlock* TB_RankDesc;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_RewardStatus;//[Offset: 0x368, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x370, Size: 1]
	CrowWidgetImage* IMG_RewardItem;//[Offset: 0x378, Size: 1]
	TextBlock* TB_RewardItemName;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowScoreRankSlotGradeData.CrowScoreRankSlotData.Object
	uint32 Rank;//[Offset: 0x30, Size: 1]
	FText Class;//[Offset: 0x38, Size: 1]
	uint32 Level;//[Offset: 0x50, Size: 1]
	FString ID;//[Offset: 0x58, Size: 1]
	uint32 Score;//[Offset: 0x68, Size: 1]
	FString PlayTime;//[Offset: 0x70, Size: 1]
	uint32 PlayCount;//[Offset: 0x80, Size: 1]

--------------------------------
Class: CrowScoreRankSlotData.Object
	int Index;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowScoreRankSlotModeData.CrowScoreRankSlotData.Object
	uint32 Rank;//[Offset: 0x30, Size: 1]
	FText Class;//[Offset: 0x38, Size: 1]
	FString ID;//[Offset: 0x50, Size: 1]
	uint32 Score;//[Offset: 0x60, Size: 1]
	FString PlayTime;//[Offset: 0x68, Size: 1]
	uint32 PlayCount;//[Offset: 0x78, Size: 1]
	uint32 AverageScore;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: CrowLobbyRecordWeaponWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowRecordWeaponInfoWidget* WB_Record_WeaponInfo;//[Offset: 0x348, Size: 1]
	ScrollBox* SB_WeaponList;//[Offset: 0x350, Size: 1]
	class CrowRecordWeaponInfoSlotWidget* RecordWeaponInfoSlotWidgetClass;//[Offset: 0x358, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x360, Size: 1]
	CrowWeaponData SpawnWeaponData;//[Offset: 0x368, Size: 1]
	CrowWeaponAccData SpawnWeaponAccData;//[Offset: 0x4d0, Size: 1]
	enum CurrentWeaponUIType;//[Offset: 0x580, Size: 1]

--------------------------------
Class: CrowRecordWeaponInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WSWeaponInfo;//[Offset: 0x348, Size: 1]
	TextBlock* TBKill;//[Offset: 0x350, Size: 1]
	TextBlock* TBHeadShot;//[Offset: 0x358, Size: 1]
	TextBlock* TBFaint;//[Offset: 0x360, Size: 1]
	TextBlock* TBLv;//[Offset: 0x368, Size: 1]
	ProgressBar* PBExp;//[Offset: 0x370, Size: 1]
	TextBlock* TBExp;//[Offset: 0x378, Size: 1]
	TextBlock* TBMaxExp;//[Offset: 0x380, Size: 1]
	TextBlock* TBKill;//[Offset: 0x388, Size: 1]
	TextBlock* TBFaint;//[Offset: 0x390, Size: 1]
	TextBlock* TBUse;//[Offset: 0x398, Size: 1]
	TextBlock* TBLv;//[Offset: 0x3a0, Size: 1]
	ProgressBar* PBExp;//[Offset: 0x3a8, Size: 1]
	TextBlock* TBExp;//[Offset: 0x3b0, Size: 1]
	TextBlock* TBMaxExp;//[Offset: 0x3b8, Size: 1]
	TextBlock* TBUse;//[Offset: 0x3c0, Size: 1]
	TextBlock* TBLv;//[Offset: 0x3c8, Size: 1]
	ProgressBar* PBExp;//[Offset: 0x3d0, Size: 1]
	TextBlock* TBExp;//[Offset: 0x3d8, Size: 1]
	TextBlock* TBMaxExp;//[Offset: 0x3e0, Size: 1]
	TextBlock* TBFaint;//[Offset: 0x3e8, Size: 1]
	TextBlock* TBAssi;//[Offset: 0x3f0, Size: 1]
	TextBlock* TBLv;//[Offset: 0x3f8, Size: 1]
	ProgressBar* PBExp;//[Offset: 0x400, Size: 1]
	TextBlock* TBExp;//[Offset: 0x408, Size: 1]
	TextBlock* TBMaxExp;//[Offset: 0x410, Size: 1]

--------------------------------
Class: CrowRecordWeaponInfoSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Customize_List_Slot;//[Offset: 0x358, Size: 1]
	Image* IMG_Selected;//[Offset: 0x360, Size: 1]
	Image* IMGHover;//[Offset: 0x368, Size: 1]
	Image* IMGSelected;//[Offset: 0x370, Size: 1]
	Image* IMGIcon;//[Offset: 0x378, Size: 1]
	TextBlock* TBName;//[Offset: 0x380, Size: 1]
	TextBlock* TBLv;//[Offset: 0x388, Size: 1]
	ProgressBar* PBLv;//[Offset: 0x390, Size: 1]
	uint32 Index;//[Offset: 0x398, Size: 1]
	void OnClicked();// 0x1a740d0

--------------------------------
Class: CrowLobbyMainMedalWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButtonContainerBase* WB_TabMenu_Medal;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_Reward;//[Offset: 0x350, Size: 1]
	TextBlock* TB_RewardName;//[Offset: 0x358, Size: 1]
	CanvasPanel* CP_Reward;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Reward;//[Offset: 0x368, Size: 1]
	WidgetSwitcher* WS_RewardStatus;//[Offset: 0x370, Size: 1]
	TextBlock* TB_MedalProgress;//[Offset: 0x378, Size: 1]
	ProgressBar* PB_MedalProgress;//[Offset: 0x380, Size: 1]
	TextBlock* TB_ProgressPercent;//[Offset: 0x388, Size: 1]
	WidgetSwitcher* WS_MedalList;//[Offset: 0x390, Size: 1]
	GridPanel* GP_AllMedalList;//[Offset: 0x398, Size: 1]
	GridPanel* GP_KillstreakMedalList;//[Offset: 0x3a0, Size: 1]
	GridPanel* GP_VehicleBoomMedalList;//[Offset: 0x3a8, Size: 1]
	GridPanel* GP_LongshotMedalList;//[Offset: 0x3b0, Size: 1]
	GridPanel* GP_CombatMedalList;//[Offset: 0x3b8, Size: 1]
	GridPanel* GP_BomberMedalList;//[Offset: 0x3c0, Size: 1]
	GridPanel* GP_ModeMedalList;//[Offset: 0x3c8, Size: 1]
	CrowWidgetImage* IMG_Medal_SlotSelected;//[Offset: 0x3d0, Size: 1]
	TextBlock* TB_MedalCount;//[Offset: 0x3d8, Size: 1]
	TextBlock* TB_Medal_TierNum;//[Offset: 0x3e0, Size: 1]
	TextBlock* TB_MedalDetail;//[Offset: 0x3e8, Size: 1]
	class CrowLobbyMainMedalSlotWidget* SlotWidgetClass;//[Offset: 0x3f0, Size: 1]
	enum SelectedUIType;//[Offset: 0x3f8, Size: 1]
	uint32 ProgressGroupIndex;//[Offset: 0x3fc, Size: 1]
	uint32 RewardGroupIndex;//[Offset: 0x400, Size: 1]
	CrowLobbyMainMedalSlotWidget* SelectedSlotWidget;//[Offset: 0x408, Size: 1]
	void OnSelectTab(int SelectedIndex);// 0x1abbc60
	void OnClickedSlot(CrowLobbyMainMedalSlotWidget* InSlot, bool InChecked);// 0x1abb680
	void OnClickedReward();// 0x1abb660

--------------------------------
Class: CrowLobbyMainMedalSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_MedalStatus;//[Offset: 0x358, Size: 1]
	CrowToggleButton* BT_MedalToggle_Continue;//[Offset: 0x360, Size: 1]
	CrowToggleButton* BT_MedalToggle_Complete;//[Offset: 0x368, Size: 1]
	CrowWidgetImage* IMG_Medal_Continue;//[Offset: 0x370, Size: 1]
	CrowWidgetImage* IMG_Medal_Complete;//[Offset: 0x378, Size: 1]
	CrowWidgetImage* IMG_Medal_Complete_Recieved;//[Offset: 0x380, Size: 1]
	TextBlock* TB_DeselectMedalName_Continue;//[Offset: 0x388, Size: 1]
	TextBlock* TB_SelectMedalName_Continue;//[Offset: 0x390, Size: 1]
	TextBlock* TB_DeselectMedalName_Complete;//[Offset: 0x398, Size: 1]
	TextBlock* TB_SelectMedalName_Complete;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_DeselectMedalCount_Continue;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_SelectMedalCount_Continue;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_DeselectMedalCount_Complete;//[Offset: 0x3b8, Size: 1]
	TextBlock* TB_SelectMedalCount_Complete;//[Offset: 0x3c0, Size: 1]
	TextBlock* TB_DeselectTier_Continue;//[Offset: 0x3c8, Size: 1]
	TextBlock* TB_DeselectTier_Complete;//[Offset: 0x3d0, Size: 1]
	TextBlock* TB_DeselectTier_Recieved;//[Offset: 0x3d8, Size: 1]
	WidgetSwitcher* WS_Complete_Icon;//[Offset: 0x3e0, Size: 1]
	uint32 MedalIndex;//[Offset: 0x3e8, Size: 1]
	uint32 MedalGroupIndex;//[Offset: 0x3ec, Size: 1]
	void OnClickedContinue(bool InChecked);// 0x1abb5d0
	void OnClickedComplete(bool InChecked);// 0x1abb5d0

--------------------------------
Class: CrowLobbyVehicleSkinWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowActorRotatorWidget* WB_VehicleSkinActorRotator;//[Offset: 0x348, Size: 1]
	CrowVehicleSkinTopWidget* WB_TabMenu_Vehicle;//[Offset: 0x350, Size: 1]
	CrowVehicleSkinLeftWidget* WB_Cusomize_Category_Vehicle;//[Offset: 0x358, Size: 1]
	CrowListViewVehicleSkin* WB_Customize_Vehicle_Itemlist;//[Offset: 0x360, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x368, Size: 1]
	CrowVehiclePawn* VehiclePawn;//[Offset: 0x370, Size: 1]
	CameraActor* VehicleCameraFar;//[Offset: 0x378, Size: 1]
	CameraActor* VehicleCameraNear;//[Offset: 0x380, Size: 1]
	CameraActor* VehiclePreviewCameraFar;//[Offset: 0x388, Size: 1]
	CameraActor* VehiclePreviewCameraNear;//[Offset: 0x390, Size: 1]
	Actor* VehicleRootActor;//[Offset: 0x398, Size: 1]
	CrowVehicleSpawner* VehicleSpawner;//[Offset: 0x3a0, Size: 1]
	CrowListItemVehicleSkin* SelectVehicleSkin;//[Offset: 0x3a8, Size: 1]
	enum SelectedEtcType;//[Offset: 0x3b0, Size: 1]
	Actor* ParachuteRootActor;//[Offset: 0x3b8, Size: 1]
	CrowSkydivingPawn* ParachutePawn;//[Offset: 0x3c0, Size: 1]
	CrowSkydivingSpawner* ParachuteSpawner;//[Offset: 0x3c8, Size: 1]

--------------------------------
Class: CrowActorRotatorWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	bool bIsRotateHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bIsRotateVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool bInverseHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	bool bInversVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 1]
	Actor* TargetActor;//[Offset: 0x350, Size: 1]

--------------------------------
Class: CrowVehicleSkinTopWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CrowVehicleSkinLeftWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	HorizontalBox* ContainerPanel;//[Offset: 0x380, Size: 1]
	class CrowWidgetToggleButton* ButtonClass;//[Offset: 0x388, Size: 1]

--------------------------------
Class: CrowListViewVehicleSkin.CrowListViewWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CrowListViewWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowListItemWidget* ItemClass;//[Offset: 0x348, Size: 1]
	int ColumnCount;//[Offset: 0x350, Size: 1]
	bool bIsMultiSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	GridPanel* GD_ItemList;//[Offset: 0x358, Size: 1]
	CrowListItemWidget*[] ItemArray;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowListItemWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_ItemSlot;//[Offset: 0x348, Size: 1]
	Image* IMG_ItemIcon;//[Offset: 0x350, Size: 1]
	Image* IMG_Selected;//[Offset: 0x358, Size: 1]
	Image* IMG_Equiped;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x368, Size: 1]
	Image* IMG_NewIcon;//[Offset: 0x370, Size: 1]
	CrowItemTableBaseRow TableBase;//[Offset: 0x378, Size: 1]
	void OnBtnUnHovered();// 0x1ab7c80
	void OnBtnHovered();// 0x1ab7c60
	void OnBtnClicked();// 0x1ab7c40

--------------------------------
Class: CrowListItemVehicleSkin.CrowListItemWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	HorizontalBox* HB_ShopInfo;//[Offset: 0x560, Size: 1]
	TextBlock* TB_Label_Back;//[Offset: 0x568, Size: 1]
	SizeBox* SB_SortItem;//[Offset: 0x570, Size: 1]
	Image* IMG_SortItem;//[Offset: 0x578, Size: 1]
	CrowVehicleSkinTableRow VehicleSkinTable;//[Offset: 0x580, Size: 1]
	CrowShopTableRow ShopTableData;//[Offset: 0x7b0, Size: 1]
	bool IsShopList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]

--------------------------------
Class: CrowVehicleSkinTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	enum VehicleType;//[Offset: 0x1f0, Size: 1]
	FString VehicleTextIndex;//[Offset: 0x1f8, Size: 1]
	FString[] SkinShareVehicleArray;//[Offset: 0x208, Size: 1]
	SoftObjectPath[] SkinArray;//[Offset: 0x218, Size: 1]
	bool bDisplayChangeSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]

--------------------------------
Class: CrowLobbyIndicatorWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_NickName;//[Offset: 0x348, Size: 1]
	HorizontalBox* HB_Leader;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_Status;//[Offset: 0x358, Size: 1]
	Image* IMG_LeaderIcon;//[Offset: 0x360, Size: 1]
	Image* IMG_NotReadyIcon;//[Offset: 0x368, Size: 1]
	Image* IMG_Offline;//[Offset: 0x370, Size: 1]
	Image* IMG_ReadyIcon;//[Offset: 0x378, Size: 1]
	Image* IMG_PlayingIcon;//[Offset: 0x380, Size: 1]
	WidgetSwitcher* WS_Voice;//[Offset: 0x388, Size: 1]
	Image* IMG_RankIcon;//[Offset: 0x390, Size: 1]
	uint64 MemberServerKey;//[Offset: 0x398, Size: 1]
	CrowVivoxManager* VivoxManager;//[Offset: 0x3a8, Size: 1]

--------------------------------
Class: CrowMissionWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	bool IsSetMissionList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	class CrowMissionCategoryWidget* MissionCategoryWidget;//[Offset: 0x350, Size: 1]
	CrowMissionTabWidget* WB_TabMenu_Mission;//[Offset: 0x358, Size: 1]
	VerticalBox* VB_MissionDatas;//[Offset: 0x360, Size: 1]
	CrowMissionRewardInfoWidget* WB_MissionRewardInfo;//[Offset: 0x368, Size: 1]
	CrowMissionTimerWidget* WB_MissionResetTime;//[Offset: 0x370, Size: 1]
	CrowMissionInfo[] ServerMissionInfoArray;//[Offset: 0x378, Size: 1]
	<byte,CrowMissionCategoryWidget*> CategoryWidgetMap;//[Offset: 0x388, Size: 1]
	enum CurrentMissionType;//[Offset: 0x3d8, Size: 1]
	uint32 CurrentMissionID;//[Offset: 0x3dc, Size: 1]

--------------------------------
Class: CrowMissionCategoryWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowMissionSlotWidget* MissionSlotWidget;//[Offset: 0x348, Size: 1]
	TextBlock* TB_CategoryName;//[Offset: 0x350, Size: 1]
	VerticalBox* VB_CategoryContents;//[Offset: 0x358, Size: 1]
	byte CurrMissionModeType;//[Offset: 0x360, Size: 1]
	bool IsBG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	void SetMissionModeType(byte MissionModeType);// 0x1accb50
	bool IsSameMissionModeType(byte InMissionModeType);// 0x1acc5b0
	void DeselectList();// 0x1acc590
	void ClearList();// 0x1acc570
	void ChangeSelectMissionSlot(int MissionID);// 0x1acc4e0
	void ChangeMissionType(byte MissionType);// 0x1acc460
	void AddMissionSlot(out const CrowMissionInfo MissionInfo);// 0x1acc3c0

--------------------------------
Class: CrowMissionSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_MissionProgress;//[Offset: 0x348, Size: 1]
	TextBlock* TB_SlotName;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Count;//[Offset: 0x358, Size: 1]
	TextBlock* TB_GoalCount;//[Offset: 0x360, Size: 1]
	Image* IMG_Reward00;//[Offset: 0x368, Size: 1]
	Image* IMG_Reward01;//[Offset: 0x370, Size: 1]
	Image* IMG_Reward02;//[Offset: 0x378, Size: 1]
	Image* IMG_Reward03;//[Offset: 0x380, Size: 1]
	Image* IMG_Reward04;//[Offset: 0x388, Size: 1]
	CrowButton* BT_SlotHover;//[Offset: 0x390, Size: 1]
	Image* IMG_Blue;//[Offset: 0x398, Size: 1]
	Image* IMG_BG;//[Offset: 0x3a0, Size: 1]
	Image* IMG_Select;//[Offset: 0x3a8, Size: 1]
	Image*[] RewardImageArray;//[Offset: 0x3b0, Size: 1]
	CrowMissionInfo MissionInfo;//[Offset: 0x3c0, Size: 1]
	void SetSelect(bool IsSelect);// 0x1ad15f0
	void SetMissionData(out const CrowMissionInfo InMissionInfo);// 0x1ad14b0
	void SetBackGround(bool IsBG);// 0x1ad1420
	void OnClickButton();// 0x1ad1310
	bool IsSameMissionType(byte MissionType);// 0x1ad1010
	bool IsSameMissionID(int MissionID);// 0x1ad0f70

--------------------------------
Class: CrowMissionTabWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetToggleButton* SeasonButton;//[Offset: 0x380, Size: 1]
	CrowWidgetToggleButton* WB_MisstionTab_Daily;//[Offset: 0x388, Size: 1]

--------------------------------
Class: CrowMissionRewardInfoWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowMissionRewardSlotWidget* WB_MissionExpReward;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_RewardStatus;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_Grade;//[Offset: 0x358, Size: 1]
	Image* IMG_Reward;//[Offset: 0x360, Size: 1]
	TextBlock* TB_RewardName;//[Offset: 0x368, Size: 1]
	VerticalBox* VB_RewardItem;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Reward;//[Offset: 0x378, Size: 1]
	uint32 MissionID;//[Offset: 0x380, Size: 1]
	void OnClick_RewardButton();// 0x1ad1330

--------------------------------
Class: CrowMissionRewardSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_EXP;//[Offset: 0x348, Size: 1]
	void SetValue(int Value);// 0x1ad1680

--------------------------------
Class: CrowMissionTimerWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Timer;//[Offset: 0x350, Size: 1]
	enum MissionType;//[Offset: 0x358, Size: 1]
	int DailyMissionEndSec;//[Offset: 0x35c, Size: 1]
	int WeeklyMissionEndSec;//[Offset: 0x360, Size: 1]
	int SeasonMissionEndSec;//[Offset: 0x364, Size: 1]
	int CurrDailyMissionTime;//[Offset: 0x368, Size: 1]
	int CurrWeeklyMissionTime;//[Offset: 0x36c, Size: 1]
	int CurrSeasonMissionTime;//[Offset: 0x370, Size: 1]
	int CurrTime;//[Offset: 0x374, Size: 1]
	void DiscountSec();// 0x1ad0df0

--------------------------------
Class: CrowMissionQuickListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowMissionQuickListItem* MissionListItemClass;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Title;//[Offset: 0x350, Size: 1]
	CrowButton* BT_ListButtonSelect;//[Offset: 0x358, Size: 1]
	CrowWidgetToggleButton* BT_Weekly;//[Offset: 0x360, Size: 1]
	CrowWidgetToggleButton* BT_Daily;//[Offset: 0x368, Size: 1]
	CrowMissionTimerWidget* WB_MissionResetTime;//[Offset: 0x370, Size: 1]
	CanvasPanel* CP_QuickList;//[Offset: 0x378, Size: 1]
	Image* IMG_BackGround_F;//[Offset: 0x380, Size: 1]
	ScrollBox* SCB_MissionList;//[Offset: 0x388, Size: 1]
	CrowMissionQuickListItem*[] ItemList;//[Offset: 0x390, Size: 1]
	int CurrUserLevel;//[Offset: 0x3a0, Size: 1]
	bool IsDailyMission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	void OnToggleOpen();// 0x1ad1400
	void OnSelectTab(int Index);// 0x1ad1350
	void OnClickButton();// 0x1ad12f0

--------------------------------
Class: CrowMissionQuickListItem.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_MissionTitle;//[Offset: 0x348, Size: 1]
	TextBlock* TB_MissionCount;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_IMG;//[Offset: 0x358, Size: 1]
	Image* IMG_Reward00;//[Offset: 0x360, Size: 1]
	Image* IMG_Reward01;//[Offset: 0x368, Size: 1]
	Image* IMG_Reward02;//[Offset: 0x370, Size: 1]
	Image* IMG_Reward03;//[Offset: 0x378, Size: 1]
	Image* IMG_Reward04;//[Offset: 0x380, Size: 1]
	void SetMissionInfo(out const CrowMissionInfo InMissionInfo);// 0x1ad1550
	void OnTextChangeLanguage();// 0x1ad13e0

--------------------------------
Class: CrowSocialWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowTabMenuSocialWidget* WB_TabMenu_Social;//[Offset: 0x348, Size: 1]
	WidgetSwitcher* WS_Social;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_FriendList;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_FriendList;//[Offset: 0x360, Size: 1]
	GridPanel* GP_UserList_Friend;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_RequestFriend;//[Offset: 0x370, Size: 1]
	CanvasPanel* CP_GetRquest;//[Offset: 0x378, Size: 1]
	TextBlock* TB_GetCount;//[Offset: 0x380, Size: 1]
	WidgetSwitcher* WS_GetRequest;//[Offset: 0x388, Size: 1]
	ScrollBox* SB_GetRequest;//[Offset: 0x390, Size: 1]
	CanvasPanel* CP_SendRquest;//[Offset: 0x398, Size: 1]
	TextBlock* TB_SendCount;//[Offset: 0x3a0, Size: 1]
	WidgetSwitcher* WS_SendRequest;//[Offset: 0x3a8, Size: 1]
	ScrollBox* SB_SendRequest;//[Offset: 0x3b0, Size: 1]
	CanvasPanel* CP_Recent;//[Offset: 0x3b8, Size: 1]
	WidgetSwitcher* WS_RecentList;//[Offset: 0x3c0, Size: 1]
	GridPanel* GP_UserList_Recent;//[Offset: 0x3c8, Size: 1]
	CanvasPanel* CP_SearchFriend;//[Offset: 0x3d0, Size: 1]
	EditableTextBox* TB_TypingUserName;//[Offset: 0x3d8, Size: 1]
	CrowButton* BT_Search;//[Offset: 0x3e0, Size: 1]
	WidgetSwitcher* WS_SearchList;//[Offset: 0x3e8, Size: 1]
	GridPanel* GP_UserList_Search;//[Offset: 0x3f0, Size: 1]
	HorizontalBox* HB_Page;//[Offset: 0x3f8, Size: 1]
	CrowButton* BT_Prev;//[Offset: 0x400, Size: 1]
	CrowButton* BT_Next;//[Offset: 0x408, Size: 1]
	TextBlock* TB_Page;//[Offset: 0x410, Size: 1]
	CrowButton* BT_Prev_Search;//[Offset: 0x418, Size: 1]
	CrowButton* BT_Next_Search;//[Offset: 0x420, Size: 1]
	TextBlock* TB_Page_Search;//[Offset: 0x428, Size: 1]
	class CrowFriendSlotWidget* FriendSlotWidgetClass;//[Offset: 0x430, Size: 1]
	byte SearchUserNameLegnthMin;//[Offset: 0x438, Size: 1]
	enum CurrentTabType;//[Offset: 0x439, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x440, Size: 1]
	uint32 CurrentPage;//[Offset: 0x448, Size: 1]
	uint32 PageMax;//[Offset: 0x44c, Size: 1]
	void OnInputBoxChanged_TypingUserName(out const FText InputText);// 0x1b336a0
	void OnClicked_BT_Search();// 0x1b33680
	void OnClicked_BT_Prev();// 0x1b33660
	void OnClicked_BT_Next();// 0x1b33640

--------------------------------
Class: CrowTabMenuSocialWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowSocialWidget* SocialWidget;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowPartyWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowFriendSlotWidget* WB_LocalPlayer;//[Offset: 0x348, Size: 1]
	VerticalBox* VB_EmptySlot;//[Offset: 0x350, Size: 1]
	VerticalBox* VB_PartySlot;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Promote;//[Offset: 0x368, Size: 1]
	CrowButton* BT_CancelPromote;//[Offset: 0x370, Size: 1]
	CrowButton* BT_ExitParty;//[Offset: 0x378, Size: 1]
	CrowButton* BT_AddParty;//[Offset: 0x380, Size: 1]
	CrowButton* BT_AddParty;//[Offset: 0x388, Size: 1]
	CrowButton* BT_AddParty;//[Offset: 0x390, Size: 1]
	class CrowFriendSlotWidget* FriendSlotWidgetClass;//[Offset: 0x398, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x3a0, Size: 1]
	bool PromoteMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	void OnClicked_BT_Promote();// 0x1ad8aa0
	void OnClicked_BT_Invite();// 0x1ad8a80
	void OnClicked_BT_ExitParty();// 0x1ad8a60
	void OnClicked_BT_Close();// 0x1ad8a40
	void OnClicked_BT_CancelPromote();// 0x1ad8a20

--------------------------------
Class: CrowUserPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetImage* IMG_UserThumenail;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_Rank;//[Offset: 0x350, Size: 1]
	TextBlock* TB_UserLevel;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Username;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Profile;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Invite;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Kick;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Promote;//[Offset: 0x380, Size: 1]
	CrowButton* BT_RequestFriend;//[Offset: 0x388, Size: 1]
	CrowButton* BT_DeleteFriend;//[Offset: 0x390, Size: 1]
	CrowButton* BT_Wisper;//[Offset: 0x398, Size: 1]
	CrowButton* BT_Join;//[Offset: 0x3a0, Size: 1]
	CrowButton* BT_Report;//[Offset: 0x3a8, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x3b0, Size: 1]
	CrowButton* BT_PlayerWatching;//[Offset: 0x3b8, Size: 1]
	CrowButton* BT_Visit;//[Offset: 0x3c0, Size: 1]
	CrowGamePlayUserPopupInfo CurrentPlayUserPopupInfo;//[Offset: 0x3c8, Size: 1]
	enum CurrentSlotType;//[Offset: 0x408, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x410, Size: 1]
	void OnClickOkPlayerWatching(enum ButtonType);// 0x1b4f270
	void OnClicked_BT_Wisper();// 0x1b4f470
	void OnClicked_BT_Visit();// 0x1b4f450
	void OnClicked_BT_RequestFriend();// 0x1b4f410
	void OnClicked_BT_Report();// 0x1b4f3f0
	void OnClicked_BT_PromoteUser();// 0x1b4f3d0
	void OnClicked_BT_Profile();// 0x1b4f3b0
	void OnClicked_BT_PlayerWatching();// 0x1b4f390
	void OnClicked_BT_Kick();// 0x1b4f370
	void OnClicked_BT_Join();// 0x1b4f350
	void OnClicked_BT_Invite();// 0x1b4f330
	void OnClicked_BT_DeleteFriend();// 0x1b4f2f0
	void OnClicked_BT_Close();// 0x1a290c0

--------------------------------
Class: CrowGamePlayUserPopupInfo.CrowGameFriendInfo
	enum PartyState;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowClanMainWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class UserWidget* ClanListItemClass;//[Offset: 0x348, Size: 1]
	class UserWidget* UserListItemClass;//[Offset: 0x350, Size: 1]
	class UserWidget* EmblemWidgetClass;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_Clan;//[Offset: 0x360, Size: 1]
	CrowButton* WB_BT_EscBack;//[Offset: 0x368, Size: 1]
	CrowClanTabWidget* WB_ClanTab_Defualt;//[Offset: 0x398, Size: 1]
	CrowClanSubTabWidget* WB_ClanTab_Ranking;//[Offset: 0x3a0, Size: 1]
	WidgetSwitcher* WS_Clan_Defualt;//[Offset: 0x3a8, Size: 1]
	ScrollBox* SCB_RecommendClanList;//[Offset: 0x3b0, Size: 1]
	ScrollBox* SCB_InviteClanList;//[Offset: 0x3b8, Size: 1]
	CrowButton* BT_ClanSearch;//[Offset: 0x3c0, Size: 1]
	MultiLineEditableText* EDB_SearchClanName;//[Offset: 0x3c8, Size: 1]
	VerticalBox* VB_SearchResultClan;//[Offset: 0x3d0, Size: 1]
	TextBlock* TB_NoClanInvite;//[Offset: 0x3d8, Size: 1]
	CrowSpinSelectionWidget* WB_Clan_SlotSelection;//[Offset: 0x3e0, Size: 1]
	MultiLineEditableText* EDB_CreateClanName;//[Offset: 0x3e8, Size: 1]
	CrowButton* WB_BT_CreationClan;//[Offset: 0x3f0, Size: 1]
	CrowButton* WB_BT_ResetEmblemMark;//[Offset: 0x3f8, Size: 1]
	CrowButton* WB_BT_ResetEmblemBG;//[Offset: 0x400, Size: 1]
	CrowClanEmblemWidget* WB_ClanCreate_EmblemWidget;//[Offset: 0x408, Size: 1]
	Image* IMG_ClanCreateEmblem_Mark;//[Offset: 0x410, Size: 1]
	Image* IMG_ClanCreateEmblem_Bg;//[Offset: 0x418, Size: 1]
	GridPanel* GD_EmbleItemList;//[Offset: 0x420, Size: 1]
	CrowCategorySlotSmallWidget* BT_ClanEmblem_Mark;//[Offset: 0x428, Size: 1]
	CrowCategorySlotSmallWidget* BT_ClanEmblem_Bg;//[Offset: 0x430, Size: 1]
	CanvasPanel* CP_Clan_InfoSetting_L;//[Offset: 0x438, Size: 1]
	CanvasPanel* CP_Clan_InfoSetting_R;//[Offset: 0x440, Size: 1]
	CanvasPanel* CP_Clan_Info;//[Offset: 0x448, Size: 1]
	CanvasPanel* CP_ClanDismantleInfo;//[Offset: 0x450, Size: 1]
	CrowButton* WB_BT_ClanSetting;//[Offset: 0x458, Size: 1]
	CrowButton* WB_BT_ClanNotice;//[Offset: 0x460, Size: 1]
	ScrollBox* SB_ClanMember;//[Offset: 0x468, Size: 1]
	CrowClanEmblemWidget* WB_ClanEmblem;//[Offset: 0x470, Size: 1]
	TextBlock* TB_ClanInfo_ClanName;//[Offset: 0x478, Size: 1]
	TextBlock* TB_ClanInfo_ClanLevel;//[Offset: 0x480, Size: 1]
	TextBlock* TB_ClanInfo_ClanRanking;//[Offset: 0x488, Size: 1]
	TextBlock* TB_ClanInfo_TotalPoint;//[Offset: 0x490, Size: 1]
	TextBlock* TB_ClanInfo_MonthPoint;//[Offset: 0x498, Size: 1]
	RichTextBlock* RT_ClanInfo_NoticeText;//[Offset: 0x4a0, Size: 1]
	TextBlock* TB_ClanOnlineUser;//[Offset: 0x4a8, Size: 1]
	TextBlock* TB_ClanMaxUser;//[Offset: 0x4b0, Size: 1]
	TextBlock* TB_ClanInfoHappyTime;//[Offset: 0x4b8, Size: 1]
	TextBlock* TB_HappyTimeTipText;//[Offset: 0x4c0, Size: 1]
	TextBlock* TB_ClanInfo_DismantleTimer;//[Offset: 0x4c8, Size: 1]
	CrowClanNoticeWidget* WB_Clan_PopupClanNotice;//[Offset: 0x4d0, Size: 1]
	CanvasPanel* CP_Clan_Setting;//[Offset: 0x4d8, Size: 1]
	CanvasPanel* CP_HappyTime;//[Offset: 0x4e0, Size: 1]
	CanvasPanel* CP_ClanUserList;//[Offset: 0x4e8, Size: 1]
	CanvasPanel* CP_ClanInvitedSetting;//[Offset: 0x4f0, Size: 1]
	CanvasPanel* CP_ClanInvited;//[Offset: 0x4f8, Size: 1]
	CanvasPanel* CP_ClanDismantle;//[Offset: 0x500, Size: 1]
	CrowHappyTimeTabWidget* WB_Clan_PopupHappyTime;//[Offset: 0x508, Size: 1]
	Border* BD_HappyTime;//[Offset: 0x510, Size: 1]
	Border* BD_MemberSetting;//[Offset: 0x518, Size: 1]
	Border* BD_OwnerSetting;//[Offset: 0x520, Size: 1]
	CrowCategorySlotSmallWidget* BT_HappytimeSet;//[Offset: 0x528, Size: 1]
	CrowCategorySlotSmallWidget* BT_AddCommander;//[Offset: 0x530, Size: 1]
	CrowCategorySlotSmallWidget* BT_CommanderSetDel;//[Offset: 0x538, Size: 1]
	CrowCategorySlotSmallWidget* BT_ClanInvited;//[Offset: 0x540, Size: 1]
	CrowCategorySlotSmallWidget* BT_KickClanUser;//[Offset: 0x548, Size: 1]
	CrowCategorySlotSmallWidget* BT_ClanInvitedSet;//[Offset: 0x550, Size: 1]
	CrowCategorySlotSmallWidget* BT_CaptainTransfer;//[Offset: 0x558, Size: 1]
	CrowCategorySlotSmallWidget* BT_Dismantle;//[Offset: 0x560, Size: 1]
	CrowCategorySlotSmallWidget* BT_ClanSecession;//[Offset: 0x568, Size: 1]
	CrowCategorySlotSmallWidget*[] ClanSettingBtnList;//[Offset: 0x570, Size: 1]
	CrowButton* WB_BT_degrade;//[Offset: 0x580, Size: 1]
	CrowButton* WB_BT_Expulsion;//[Offset: 0x588, Size: 1]
	CrowButton* WB_BT_Transferring;//[Offset: 0x590, Size: 1]
	CrowButton* WB_BT_Appointment;//[Offset: 0x598, Size: 1]
	TextBlock* TB_ClanDismantleTimer;//[Offset: 0x5a0, Size: 1]
	WidgetSwitcher* WS_Dismantle;//[Offset: 0x5a8, Size: 1]
	CrowButton* WB_BT_Dismantle;//[Offset: 0x5b0, Size: 1]
	CrowButton* WB_BT_DeleteClan;//[Offset: 0x5b8, Size: 1]
	CrowButton* WB_BT_CancelDismantle;//[Offset: 0x5c0, Size: 1]
	CrowSpinSelectionWidget* WB_Clan_InviteSetting;//[Offset: 0x5c8, Size: 1]
	CrowButton* WB_BT_SaveInviteSetting;//[Offset: 0x5d0, Size: 1]
	ScrollBox* SB_JoinRequestList;//[Offset: 0x5d8, Size: 1]
	TextBlock* JoinRequest_Empty;//[Offset: 0x5e0, Size: 1]
	MultiLineEditableText* EB_UserSearchEditBox;//[Offset: 0x5e8, Size: 1]
	CrowButton* BT_UserSearch;//[Offset: 0x5f0, Size: 1]
	ScrollBox* SB_SearchUser;//[Offset: 0x5f8, Size: 1]
	ScrollBox* SB_InviteUser;//[Offset: 0x600, Size: 1]
	TextBlock* InviteRequest_Empty;//[Offset: 0x608, Size: 1]
	CanvasPanel* CP_ClanRankingInfo;//[Offset: 0x610, Size: 1]
	WidgetSwitcher* WS_ClanRanking;//[Offset: 0x618, Size: 1]
	ScrollBox* SCB_TotalScoreRankingList;//[Offset: 0x620, Size: 1]
	ScrollBox* SCB_MonthScoreList;//[Offset: 0x628, Size: 1]
	ScrollBox* SCB_MyClanRanking;//[Offset: 0x630, Size: 1]
	CanvasPanel* CP_ClanEmblemSetting;//[Offset: 0x638, Size: 1]
	CanvasPanel* CP_ClanEmblemSetPage;//[Offset: 0x640, Size: 1]
	HorizontalBox* HB_CustomizeClan_Shop_Button;//[Offset: 0x648, Size: 1]
	CrowClanSubTabWidget* WB_ClanTab_Emblem;//[Offset: 0x650, Size: 1]
	CrowCategorySlotSmallWidget* BT_ClanEmblemChange_Mark;//[Offset: 0x658, Size: 1]
	CrowCategorySlotSmallWidget* BT_ClanEmblemChange_Bg;//[Offset: 0x660, Size: 1]
	CrowButton* WB_BT_ChangeResetEmblemMark;//[Offset: 0x668, Size: 1]
	CrowButton* WB_BT_ChangeResetEmblemBG;//[Offset: 0x670, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x678, Size: 1]
	CrowButton* BT_AddShoppingBag;//[Offset: 0x680, Size: 1]
	Image* IMG_ChangeClanEmblemMark;//[Offset: 0x688, Size: 1]
	Image* IMG_ChangeClanEmblemBG;//[Offset: 0x690, Size: 1]
	CrowButton* WB_BT_ChangeEmblemSave;//[Offset: 0x698, Size: 1]
	CrowClanEmblemWidget* WB_Change_EmblemWidget;//[Offset: 0x6a0, Size: 1]
	GridPanel* GD_ChangeEmbleItemList;//[Offset: 0x6a8, Size: 1]
	void SendLeaveClan(enum ButtonType);// 0x1a4d740
	void SendKickUser(enum ButtonType);// 0x1a4d6c0
	void SendInviteSettingChange(enum ButtonType);// 0x1a4d640
	void SendDismantleClan(enum ButtonType);// 0x1a4d5c0
	void SendDeleteClan(enum ButtonType);// 0x1a4d540
	void SendDegrade(enum ButtonType);// 0x1a4d4c0
	void SendClanMasterChange(enum ButtonType);// 0x1a4d440
	void SendCancelDismantle(enum ButtonType);// 0x1a4d3c0
	void SendAddCommander(enum ButtonType);// 0x1a4d2c0
	void SelectShopEmblem(int InEmblemIndex, int InEmblemBGIndex);// 0x1a4d1f0
	void OnClicked_SelectEmblemMark(CrowCategorySlotSmallWidget* SelectButton);// 0x1a4ca40
	void OnClicked_SelectEmblemBG(CrowCategorySlotSmallWidget* SelectButton);// 0x1a4c9b0
	void OnClicked_SearchClan();// 0x1a4c990
	void OnClicked_SaveEmblem();// 0x1a4c970
	void OnClicked_KickUser();// 0x1a4c8d0
	void OnClicked_InviteSettingChange();// 0x1a4c870
	void OnClicked_Degrade();// 0x1a4c810
	void OnClicked_CreateClan();// 0x1a4c7f0
	void OnClicked_ClanSettingMenu(CrowCategorySlotSmallWidget* SelectButton);// 0x1a4c760
	void OnClicked_ClanSetting();// 0x1a4c740
	void OnClicked_ClanNotice();// 0x1a4c720
	void OnClicked_ClanMasterChange();// 0x1a4c700
	void OnClicked_ClanInviteSearchUser();// 0x1a4c6e0
	void OnClicked_ClanDismantle();// 0x1a4c6c0
	void OnClicked_ClanDelete();// 0x1a4c6a0
	void OnClicked_ClanAddCommander();// 0x1a4c680
	void OnClicked_ChangeSelectEmblemMark(CrowCategorySlotSmallWidget* SelectButton);// 0x1a4c5f0
	void OnClicked_ChangeSelectEmblemBG(CrowCategorySlotSmallWidget* SelectButton);// 0x1a4c560
	void OnClicked_ChangeResetEmblemMark();// 0x1a4c540
	void OnClicked_ChangeResetEmblemBG();// 0x1a4c520
	void OnClicked_CancelDismantle();// 0x1a4c4e0
	void OnClicked_BT_Buy();// 0x1a4c4c0
	void OnClicked_BT_AddShoppingBag();// 0x1a4c4a0
	void CreateClanFromSelectEmblem(int InEmblemIndex, int InEmblemBGIndex);// 0x1a4bf50
	void ClanInfoFromSelectEmblem(int InEmblemIndex, int InEmblemBGIndex);// 0x1a4be20
	void ChangeSelectTab(int InSelect);// 0x1a4bcb0
	void ChangeSelectSubTab(int InSelect);// 0x1a4bc20

--------------------------------
Class: CrowClanTabWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_ClanTabMenu;//[Offset: 0x350, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_Recommend;//[Offset: 0x358, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_Creation;//[Offset: 0x360, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_ClanRanking;//[Offset: 0x368, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_ClanInfo;//[Offset: 0x370, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_ClanEmblem;//[Offset: 0x378, Size: 1]
	CrowWidgetToggleButton* WB_LobbyButton_ClanRanking;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowClanSubTabWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetToggleButton* WB_RankingTotal;//[Offset: 0x348, Size: 1]
	CrowWidgetToggleButton* WB_RankingMonth;//[Offset: 0x350, Size: 1]
	CrowWidgetToggleButton* WB_EmblemSet;//[Offset: 0x358, Size: 1]
	CrowWidgetToggleButton* WB_ClanShop;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowSpinSelectionWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Prev;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Next;//[Offset: 0x350, Size: 1]
	TextBlock* TB_SelectedItem;//[Offset: 0x358, Size: 1]
	FText[] ItemList;//[Offset: 0x360, Size: 1]
	void OnClicked_Prev();// 0x1b369f0
	void OnClicked_Next();// 0x1b369d0

--------------------------------
Class: CrowClanEmblemWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	int EmblemIndex;//[Offset: 0x358, Size: 1]
	int BGIndex;//[Offset: 0x35c, Size: 1]
	Image* IMG_ClanEmblem_Bg;//[Offset: 0x360, Size: 1]
	Image* IMG_ClanEmblem_Mark;//[Offset: 0x368, Size: 1]
	Image* IMG_Select;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Select;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_Cost;//[Offset: 0x380, Size: 1]
	TextBlock* TB_Label_Money;//[Offset: 0x388, Size: 1]
	void OnClickSelection();// 0x1a4c460

--------------------------------
Class: CrowClanNoticeWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	EditableText* ETB_NoticeInput;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Confirm;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x358, Size: 1]
	void OnClickCancelNotice();// 0x1a290c0
	void OnClickApplyNotice();// 0x1a517f0

--------------------------------
Class: CrowHappyTimeTabWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Arrow_HourL;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Arrow_HourR;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Arrow_MinuteL;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Arrow_MinuteR;//[Offset: 0x360, Size: 1]
	TextBlock* TB_HourText;//[Offset: 0x368, Size: 1]
	TextBlock* TB_MinuteText;//[Offset: 0x370, Size: 1]
	CrowButton* WB_BT_OK;//[Offset: 0x378, Size: 1]
	void SendApplyHappyTimeChange(enum ButtonType);// 0x1a4d340
	void OnClicked_MinuteRight();// 0x1a4c910
	void OnClicked_MinuteLeft();// 0x1a4c8f0
	void OnClicked_HourRight();// 0x1a4c850
	void OnClicked_HourLeft();// 0x1a4c830
	void OnClicked_ApplyHappyTime();// 0x1a4c480

--------------------------------
Class: CrowLobbyProfileWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetImage* IMG_UserInfoBg;//[Offset: 0x348, Size: 1]
	TextBlock* TB_UserID;//[Offset: 0x350, Size: 1]
	CrowWidgetImage* IMG_LvIcon;//[Offset: 0x358, Size: 1]
	TextBlock* TB_UserLevel;//[Offset: 0x360, Size: 1]
	CrowClanEmblemWidget* WB_ClanEmblem;//[Offset: 0x368, Size: 1]
	TextBlock* TB_ClanName;//[Offset: 0x370, Size: 1]
	CrowButtonContainerBase* WB_Profile_Tab;//[Offset: 0x378, Size: 1]
	WidgetSwitcher* WS_ProfileInfo;//[Offset: 0x380, Size: 1]
	CrowLobbyProfileMercenaryWidget* WB_ProfileMercenary;//[Offset: 0x388, Size: 1]
	CrowLobbyProfileSeasonWidget* WB_ProfileSeason;//[Offset: 0x390, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x398, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x3a0, Size: 1]
	DateTime CurrentDateTime;//[Offset: 0x3a8, Size: 1]
	FString UserNickName;//[Offset: 0x3b0, Size: 1]
	enum SelectedTabType;//[Offset: 0x3c0, Size: 1]
	enum SelectedMercemaryRecordType;//[Offset: 0x3c1, Size: 1]
	int SelectedMercemaryRankingDateInfoIndex;//[Offset: 0x3c4, Size: 1]
	enum SelectedSeasonRecordType;//[Offset: 0x3c8, Size: 1]
	int SelectedSeasonRankingDateInfoIndex;//[Offset: 0x3cc, Size: 1]
	void OnSelectSeasonRecord(CrowWidgetBase* InSelectSlot);// 0x1abf6f0
	void OnSelectSeasonPeriod(CrowWidgetBase* InSelectSlot);// 0x1abf660
	void OnSelectProfileTab(int SelectedIndex);// 0x1abf420
	void OnSelectMercenaryRecord(CrowWidgetBase* InSelectSlot);// 0x1abf390
	void OnSelectMercenaryPeriod(CrowWidgetBase* InSelectSlot);// 0x1abf300
	void OnClickedClose();// 0x1a290c0

--------------------------------
Class: CrowLobbyProfileMercenaryWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowDropDownWidget* Dropdown_All;//[Offset: 0x348, Size: 1]
	CrowDropDownWidget* Dropdown_Time;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Rank;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Grade;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Kill;//[Offset: 0x368, Size: 1]
	TextBlock* TB_Assist;//[Offset: 0x370, Size: 1]
	TextBlock* TB_Death;//[Offset: 0x378, Size: 1]
	TextBlock* TB_Faint;//[Offset: 0x380, Size: 1]
	TextBlock* TB_TotalScore;//[Offset: 0x388, Size: 1]
	TextBlock* TB_AverageScore;//[Offset: 0x390, Size: 1]
	TextBlock* TB_WinLose;//[Offset: 0x398, Size: 1]
	TextBlock* TB_PlayTime;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: CrowLobbyProfileSeasonWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowDropDownWidget* Dropdown_All;//[Offset: 0x348, Size: 1]
	CrowDropDownWidget* Dropdown_Time;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Rank;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Level;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Kill;//[Offset: 0x368, Size: 1]
	TextBlock* TB_Assist;//[Offset: 0x370, Size: 1]
	TextBlock* TB_Death;//[Offset: 0x378, Size: 1]
	TextBlock* TB_Faint;//[Offset: 0x380, Size: 1]
	TextBlock* TB_TotalScore;//[Offset: 0x388, Size: 1]
	TextBlock* TB_AverageScore;//[Offset: 0x390, Size: 1]
	TextBlock* TB_WinLose;//[Offset: 0x398, Size: 1]
	TextBlock* TB_PlayTime;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: CrowMailPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButtonContainerBase* WB_TabMenu_Post;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x350, Size: 1]
	CrowButton* BT_AllReward;//[Offset: 0x358, Size: 1]
	CrowButton* BT_AllDelete;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_RewardList;//[Offset: 0x368, Size: 1]
	ScrollBox* SB_PersonalRewardList;//[Offset: 0x370, Size: 1]
	ScrollBox* SB_AccountRewardList;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_Empty;//[Offset: 0x380, Size: 1]
	TextBlock* TB_TotalMailCount;//[Offset: 0x388, Size: 1]
	TextBlock* TB_RemainMailCount;//[Offset: 0x390, Size: 1]
	VerticalBox* VB_PostInfo;//[Offset: 0x398, Size: 1]
	TextBlock* TB_PostInfo_Title;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_PostInfo_Content;//[Offset: 0x3a8, Size: 1]
	WidgetSwitcher* WS_PostInfo_Grade;//[Offset: 0x3b0, Size: 1]
	CrowWidgetImage* IMG_PostInfo_Reward;//[Offset: 0x3b8, Size: 1]
	TextBlock* TB_PostInfo_Reward;//[Offset: 0x3c0, Size: 1]
	CrowButton* BT_PostInfo_Reward;//[Offset: 0x3c8, Size: 1]
	CanvasPanel* CP_PostInfo_Reward;//[Offset: 0x3d0, Size: 1]
	class CrowMailPopupSlotWidget* SlotWidgetClass;//[Offset: 0x3d8, Size: 1]
	enum MailPopupState;//[Offset: 0x3e0, Size: 1]
	CrowMailPopupSlotWidget* SelectedSlotWidget;//[Offset: 0x3e8, Size: 1]
	void OnSelectTab(int SelectedIndex);// 0x1ac9750
	void OnClickedSlot(CrowWidgetBase* InSlot);// 0x1ac9680
	void OnClickedPostInfoReward();// 0x1ac9640
	void OnClickedPersonalSlotReward(CrowWidgetBase* InSlot);// 0x1ac9550
	void OnClickedPersonalSlotDelete(CrowWidgetBase* InSlot);// 0x1ac94c0
	void OnClickedClose();// 0x1a290c0
	void OnClickedAllReward();// 0x1ac9600
	void OnClickedAllDelete();// 0x1ac95e0
	void OnClickedAccountSlotReward(CrowWidgetBase* InSlot);// 0x1ac9550
	void OnClickedAccountSlotDelete(CrowWidgetBase* InSlot);// 0x1ac94c0

--------------------------------
Class: CrowMailPopupSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Title;//[Offset: 0x378, Size: 1]
	TextBlock* TB_CreateTime;//[Offset: 0x380, Size: 1]
	TextBlock* TB_RemainTime;//[Offset: 0x388, Size: 1]
	TextBlock* TB_Sender;//[Offset: 0x390, Size: 1]
	CrowWidgetImage* IMG_PostIcon;//[Offset: 0x398, Size: 1]
	Image* IMG_Selected;//[Offset: 0x3a0, Size: 1]
	Image* IMG_PostSlotBg_Del;//[Offset: 0x3a8, Size: 1]
	WidgetSwitcher* WS_ButtonStatus;//[Offset: 0x3b0, Size: 1]
	CrowButton* BT_Reward;//[Offset: 0x3b8, Size: 1]
	CrowButton* BT_Delete;//[Offset: 0x3c0, Size: 1]
	CrowButton* BT_PostSlot;//[Offset: 0x3c8, Size: 1]
	int64 MailNo;//[Offset: 0x3d0, Size: 1]
	enum MailType;//[Offset: 0x3d8, Size: 1]
	DateTime RewardEndDateTime;//[Offset: 0x3e0, Size: 1]
	bool bIsUpdateRemainTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	void OnClickedSlot();// 0x1ac9660
	void OnClickedReward();// 0x1a740d0
	void OnClickedDelete();// 0x1ac9620

--------------------------------
Class: CrowShopRewardPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowCustomizeOutfitSlotWidget* RewardItemWidget;//[Offset: 0x348, Size: 1]
	float ItemCreateDelayTime;//[Offset: 0x350, Size: 1]
	float PopupRemoveTime;//[Offset: 0x354, Size: 1]
	FString BuyComplateStringKey;//[Offset: 0x358, Size: 1]
	FString DesComplateStringKey;//[Offset: 0x368, Size: 1]
	HorizontalBox* HB_RewardSlot;//[Offset: 0x378, Size: 1]
	CrowButton* WB_BT_Confirm;//[Offset: 0x380, Size: 1]
	TextBlock* TB_Package;//[Offset: 0x388, Size: 1]
	CrowRewardItem[] ItemList;//[Offset: 0x390, Size: 1]
	int CurrentListIndex;//[Offset: 0x3a0, Size: 1]
	TimerHandle CreateTimerHandle;//[Offset: 0x3a8, Size: 1]
	UMGSequencePlayer* AnimPlayer;//[Offset: 0x3b0, Size: 1]
	void RemoveWidget();// 0x1a290c0
	void CreateRewardItemIcon();// 0x1b2f4d0

--------------------------------
Class: CrowLobbySlotNameChangeWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_CurrentSlotname;//[Offset: 0x368, Size: 1]
	EditableTextBox* TB_Slotname_Text;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Ok;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x380, Size: 1]
	enum LobbySlotType;//[Offset: 0x388, Size: 1]
	int TargetSlotIndex;//[Offset: 0x38c, Size: 1]
	void OnClick_BT_Ok();// 0x1abef80
	void OnClick_BT_Cancel();// 0x1a290c0

--------------------------------
Class: CrowNoticeWebBrowser.CrowWidgetBase.UserWidget.Widget.Visual.Object
	FString[] UrlList;//[Offset: 0x348, Size: 1]
	CrowToggleButton* CTB_CheckBox;//[Offset: 0x358, Size: 1]
	CrowButton* WB_BT_EscBack;//[Offset: 0x360, Size: 1]
	Widget* WB_Notice;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Exit;//[Offset: 0x370, Size: 1]
	TextBlock* TB_Title;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_Check_Close;//[Offset: 0x380, Size: 1]
	void URLChanged(out const FText InUrl);// 0x1ad4f90
	void PrevPage();// 0x1ad4df0
	void OnChangedDoNotOpenToday(bool IsChecked);// 0x1ad49d0
	void CloseBrowser();// 0x1ad4460

--------------------------------
Class: CrowMatchingTimerWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_MOD_Name;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Map_Name;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Timer;//[Offset: 0x358, Size: 1]
	Spacer* SP_Player;//[Offset: 0x360, Size: 1]
	TextBlock* TB_MatchingPlayer;//[Offset: 0x368, Size: 1]
	TextBlock* TB_Player;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_MatchingMessage;//[Offset: 0x380, Size: 1]
	TextBlock* TB_Message;//[Offset: 0x388, Size: 1]
	CanvasPanel* CP_Matching;//[Offset: 0x390, Size: 1]
	WidgetAnimation* AniMatchingTimerShow;//[Offset: 0x398, Size: 1]
	CrowSceneLobby* SceneLobby;//[Offset: 0x3a0, Size: 1]
	bool OpenedWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool SoloMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	float DurationTime;//[Offset: 0x3ac, Size: 1]
	bool bFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	void OnClicked_BT_Cancel();// 0x1ac9710

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x108, Size: 1]
	void SetSize(Vector2D InSize);// 0x31fd2f0

--------------------------------
Class: CrowDailyCheckEventWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Time;//[Offset: 0x348, Size: 1]
	TextBlock* TB_BoardType;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x358, Size: 1]
	GridPanel* GP_DailyBoard;//[Offset: 0x360, Size: 1]
	class CrowDailyCheckEventItemWidget* ItemWidgetClass;//[Offset: 0x368, Size: 1]
	void OnClickClose();// 0x1a6bc80

--------------------------------
Class: CrowDailyCheckEventItemWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Today;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_RewardEffect;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Checked;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Days;//[Offset: 0x360, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x368, Size: 1]
	Image* Special_Day;//[Offset: 0x370, Size: 1]
	Image* Item_Zone;//[Offset: 0x378, Size: 1]

--------------------------------
Class: CrowLobbyTPPFPPWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_TPPFPP;//[Offset: 0x348, Size: 1]
	CrowToggleButton* CTB_TPP_Button;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_TPP;//[Offset: 0x358, Size: 1]
	CrowToggleButton* CTB_FPP_Button;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_FPP;//[Offset: 0x368, Size: 1]
	enum GameMode;//[Offset: 0x370, Size: 1]
	enum PersonUIType;//[Offset: 0x374, Size: 1]
	bool bLockTP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	bool IsParty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 1]
	CrowLobbyMainWidget* LobbyMainWidget;//[Offset: 0x378, Size: 1]
	bool bIsMatching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	void OnClickedTPP(bool bChecked);// 0x1ac38c0
	void OnClickedFPP(bool bChecked);// 0x1ac3780

--------------------------------
Class: CrowShopCashWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_CashValue;//[Offset: 0x348, Size: 1]
	TextBlock* TB_GPointValue;//[Offset: 0x350, Size: 1]

--------------------------------
Class: CrowLobbyVisitUserWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_VisitUser_MenuPanelList;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_UserThumbnail;//[Offset: 0x350, Size: 1]
	Image* IMG_Rank;//[Offset: 0x358, Size: 1]
	TextBlock* TB_UserLevel;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Username;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Profile;//[Offset: 0x370, Size: 1]
	CrowButton* BT_EquipView;//[Offset: 0x378, Size: 1]
	CrowButton* BT_ClosetView;//[Offset: 0x380, Size: 1]
	CrowLobbyVisitOutfitWidget* WB_Lobby_VisitUser_Outfit;//[Offset: 0x388, Size: 1]
	CrowLobbyVisitWeaponWidget* WB_Lobby_VisitUser_Weapon;//[Offset: 0x390, Size: 1]
	CrowLobbyVisitUserParam VisitUserParam;//[Offset: 0x398, Size: 1]
	void OnClickedProfile();// 0x1ac38a0
	void OnClickedEquipView();// 0x1ac3760
	void OnClickedClosetView();// 0x1ac3740

--------------------------------
Class: CrowLobbyVisitOutfitWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowVisitOutfitSlotWidget* WB_LobbyVisitOutfitSlot;//[Offset: 0x348, Size: 1]
	CrowVisitOutfitSlotWidget* WB_LobbyVisitOutfitSlot;//[Offset: 0x350, Size: 1]
	CrowVisitOutfitSlotWidget* WB_LobbyVisitOutfitSlot;//[Offset: 0x358, Size: 1]
	CrowVisitOutfitSlotWidget* WB_LobbyVisitOutfitSlot;//[Offset: 0x360, Size: 1]
	CrowVisitOutfitSlotWidget* WB_LobbyVisitOutfitSlot;//[Offset: 0x368, Size: 1]
	CrowVisitOutfitSlotWidget*[] SlotWidgetList;//[Offset: 0x370, Size: 1]
	CrowVisitOutfitSlotWidget* SelectedSlotWidget;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_VisitUser_EquipList;//[Offset: 0x388, Size: 1]
	TextBlock* TB_SlotTitle;//[Offset: 0x390, Size: 1]
	ScrollBox* SB_EquipList;//[Offset: 0x398, Size: 1]
	class CrowVisitOutfitEquipSlotWidget* EquipSlotWidgetClass;//[Offset: 0x3a0, Size: 1]
	void OnClickedOutfitSlot(CrowVisitOutfitSlotWidget* InSlotWidget);// 0x1ac3810

--------------------------------
Class: CrowVisitOutfitSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_Status;//[Offset: 0x358, Size: 1]
	CrowToggleButton* BT_Slot;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Label_Select;//[Offset: 0x368, Size: 1]
	TextBlock* TB_Label_Deselect;//[Offset: 0x370, Size: 1]
	int OutfitIndex;//[Offset: 0x378, Size: 1]
	FString LabelName;//[Offset: 0x380, Size: 1]
	void OnClickedSlot();// 0x1a740d0

--------------------------------
Class: CrowVisitOutfitEquipSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_ItemName;//[Offset: 0x358, Size: 1]
	CrowWidgetImage* IMG_ItemIcon;//[Offset: 0x360, Size: 1]
	CrowButton* BT_CartSlot;//[Offset: 0x368, Size: 1]
	uint32 ItemIndex;//[Offset: 0x370, Size: 1]
	enum ClothPartsMesh;//[Offset: 0x374, Size: 1]
	void OnClickedCartSlot();// 0xca8430

--------------------------------
Class: CrowLobbyVisitWeaponWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowVisitOutfitSlotWidget* WB_Lobby_VisitUser_WeaponSlot;//[Offset: 0x348, Size: 1]
	CrowVisitOutfitSlotWidget* WB_Lobby_VisitUser_WeaponSlot;//[Offset: 0x350, Size: 1]
	CrowVisitOutfitSlotWidget* WB_Lobby_VisitUser_WeaponSlot;//[Offset: 0x358, Size: 1]
	CrowVisitOutfitSlotWidget* WB_Lobby_VisitUser_WeaponSlot;//[Offset: 0x360, Size: 1]
	CrowVisitOutfitSlotWidget* WB_Lobby_VisitUser_WeaponSlot;//[Offset: 0x368, Size: 1]
	CrowVisitOutfitSlotWidget*[] SlotWidgetList;//[Offset: 0x370, Size: 1]
	CrowVisitOutfitSlotWidget* SelectedSlotWidget;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_WeaponList;//[Offset: 0x388, Size: 1]
	CrowVisitWeaponSlotWidget* WB_Loadout_WeaponInfo_Primary;//[Offset: 0x390, Size: 1]
	CrowVisitWeaponSlotWidget* WB_Loadout_WeaponInfo_Primary;//[Offset: 0x398, Size: 1]
	CrowVisitWeaponSubSlotWidget* WB_Lobby_VisitUser_SubWeaponInfo;//[Offset: 0x3a0, Size: 1]
	CrowVisitWeaponSubSlotWidget* WB_Lobby_VisitUser_SubWeaponInfo;//[Offset: 0x3a8, Size: 1]
	CrowWeaponData[] SelectedWeaponDataList;//[Offset: 0x3b0, Size: 1]
	void OnClickedWeaponSlot(CrowVisitOutfitSlotWidget* InSlotWidget);// 0x1ac3950

--------------------------------
Class: CrowVisitWeaponSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_WeaponName;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_Weapon;//[Offset: 0x350, Size: 1]
	TextBlock* TB_WeaponLV;//[Offset: 0x358, Size: 1]
	CrowProgressBar* PB_WeaponLV;//[Offset: 0x360, Size: 1]
	CrowWeaponPartsListWidget* WB_WeaponPartsList;//[Offset: 0x368, Size: 1]

--------------------------------
Class: CrowVisitWeaponSubSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_WeaponName;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_Weapon;//[Offset: 0x350, Size: 1]
	TextBlock* TB_WeaponLV;//[Offset: 0x358, Size: 1]
	CrowProgressBar* PB_WeaponLV;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowLobbyVisitUserParam
	uint64 SteamId;//[Offset: 0x0, Size: 1]
	uint32 ClassLevel;//[Offset: 0x8, Size: 1]
	uint64 ClassRank;//[Offset: 0x10, Size: 1]
	int UserSeasonLevel;//[Offset: 0x18, Size: 1]
	FString UserNickName;//[Offset: 0x20, Size: 1]
	byte SelectedOutfitPreset;//[Offset: 0x30, Size: 1]
	byte SelectedLoadoutPreset;//[Offset: 0x31, Size: 1]
	CrowUserCharacterInfo CharacterInfo;//[Offset: 0x38, Size: 1]
	<int,CrowWeaponLoadoutPreset> WeaponLoadoutPresets;//[Offset: 0x70, Size: 1]
	<byte,CrowOutfitPreset> CharacterOutfitPresets;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: CrowLobbyShopPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowShopPurchasePopup* WB_Shop_Popup_ExclusivePurchase;//[Offset: 0x348, Size: 1]
	CrowShopPopupCartWidget* WB_Shop_Popup_Cart;//[Offset: 0x350, Size: 1]
	CrowShopPopupCartWidget* WB_Shop_Popup_Preview;//[Offset: 0x358, Size: 1]
	CrowGachaPercentWidget* WB_Shop_Popup_GachaPercentInfo;//[Offset: 0x360, Size: 1]
	CrowShopCartItemInfo[] ShopItemList;//[Offset: 0x368, Size: 1]
	CrowRandomBoxTableRow RandomBoxData;//[Offset: 0x378, Size: 1]
	void OnClose_ShopPopup(bool IsConfirm);// 0x1abf110

--------------------------------
Class: CrowShopPurchasePopup.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowShopItemSlotWidget* WB_Shop_Itemslot;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x350, Size: 1]
	CrowButton* BT_BuyCart;//[Offset: 0x358, Size: 1]
	LinearColor ItemDescWarningColor;//[Offset: 0x360, Size: 1]
	enum PurchaseType;//[Offset: 0x370, Size: 1]
	int FreePassTargetLevel;//[Offset: 0x374, Size: 1]
	uint64 FreePassRCPCost;//[Offset: 0x378, Size: 1]
	CrowShopTableRow ShopData;//[Offset: 0x380, Size: 1]
	LinearColor ItemDescOriginalColor;//[Offset: 0x418, Size: 1]
	void OnClickMoveShop(enum ButtonType);// 0x1b2f720
	void OnClickButtonCart();// 0x1b2f6e0
	void OnClickButtonBuy();// 0x1b2f6c0

--------------------------------
Class: CrowShopPopupCartWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowShopPopupCartSlotWidget* CartSlotWidgetClass;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Buy;//[Offset: 0x358, Size: 1]
	ScrollBox* SB_CartInfo;//[Offset: 0x360, Size: 1]
	TextBlock* TB_BuyCount;//[Offset: 0x368, Size: 1]
	TextBlock* TB_BuyCount_Total;//[Offset: 0x370, Size: 1]
	TextBlock* TB_BuyCount_Cash;//[Offset: 0x378, Size: 1]
	WidgetSwitcher* WS_Paytype;//[Offset: 0x380, Size: 1]
	CrowButton* BTCartPreview;//[Offset: 0x388, Size: 1]
	CrowButton* BTGachaPercent;//[Offset: 0x390, Size: 1]
	HorizontalBox* HBRandomBoxInfo;//[Offset: 0x398, Size: 1]
	CrowLobbyShopPopupWidget* LobbyShopPopupWidget;//[Offset: 0x3a0, Size: 1]
	enum CurrentType;//[Offset: 0x3a8, Size: 1]
	bool IsSendPacket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	CrowShopTableRow ShopTable;//[Offset: 0x3b0, Size: 1]
	void OnClickMoveShop(enum ButtonType);// 0x1b2a500
	void OnClickGachaPercentBtn();// 0x1b2a3d0
	void OnClick_PreviewBtn();// 0x1b2a770
	void OnClick_CancelBtn();// 0x1acc6f0
	void OnClick_BuyBtn();// 0x1b2a6d0

--------------------------------
Class: CrowShopPopupCartSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetImage* IMG_ItemIcon;//[Offset: 0x348, Size: 1]
	CrowWidgetImage* IMG_RCP;//[Offset: 0x350, Size: 1]
	TextBlock* TB_ItemName;//[Offset: 0x358, Size: 1]
	TextBlock* TB_ItemCount;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Money;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Plus;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Minus;//[Offset: 0x378, Size: 1]
	CrowButton* BT_Delete;//[Offset: 0x380, Size: 1]
	CrowButton* BT_CartSlot;//[Offset: 0x388, Size: 1]
	HorizontalBox* HB_PlusMinus;//[Offset: 0x390, Size: 1]
	CrowShopTableRow ItemShopTable;//[Offset: 0x398, Size: 1]
	CrowRewardItem RewardItemData;//[Offset: 0x430, Size: 1]
	bool bInitRewardItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	void SetWidgetType(bool IsIcon);// 0x1b2b590
	void SetSlotItemInfo(out const CrowRewardItem RewardItem);// 0x1b2b4c0
	void SetItemInfo(out const CrowShopTableRow ShopTable, int Count, bool IsClothPreviewMode);// 0x1b2b270
	void OnClick_PlusBtn();// 0x1b2a750
	void OnClick_MinusBtn();// 0x1b2a730
	void OnClick_DeleteBtn();// 0x1b2a710
	void OnClick_CartSlot();// 0x1b2a6f0

--------------------------------
Class: CrowGachaPercentWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Legendary_Percent;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Epic_Percent;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Rare_Percent;//[Offset: 0x358, Size: 1]
	TextBlock* TB_Uncommon_Percent;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Common_Percent;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_GachaInfo_Legendary;//[Offset: 0x370, Size: 1]
	CanvasPanel* CP_GachaInfo_Epic;//[Offset: 0x378, Size: 1]
	CanvasPanel* CP_GachaInfo_Rare;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_GachaInfo_Uncommon;//[Offset: 0x388, Size: 1]
	CanvasPanel* CP_GachaInfo_Common;//[Offset: 0x390, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x398, Size: 1]
	void OnClickCloseBtn();// 0x1a290c0

--------------------------------
Class: CrowShopCartItemInfo
	CrowShopTableRow ShopTableRow;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x98, Size: 1]

--------------------------------
Class: CrowMessageBoxInfo
	FText Message;//[Offset: 0x0, Size: 1]
	enum MBType;//[Offset: 0x18, Size: 1]
	bool IsShowedMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]

--------------------------------
Class: CrowMessageBoxWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowMessageBoxInfo CurrentMBInfo;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Contents;//[Offset: 0x380, Size: 1]
	RichTextBlock* RTB_MessageContents;//[Offset: 0x388, Size: 1]
	HorizontalBox* HB_CrowWidgetButtons;//[Offset: 0x390, Size: 1]
	Spacer* SP_CrowWidgetSpacer;//[Offset: 0x398, Size: 1]
	CrowButton* BT_MessageButton;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_MessageButton;//[Offset: 0x3a8, Size: 1]
	CrowButton* BT_MessageButton;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_MessageButton;//[Offset: 0x3b8, Size: 1]
	BackgroundBlur* BackgroundBlur;//[Offset: 0x3c0, Size: 1]
	WidgetSwitcher* WS_MessageSwitcher;//[Offset: 0x3c8, Size: 1]
	Image* IMG_MessageContents;//[Offset: 0x3d0, Size: 1]
	RichTextBlock* RTB_IconBoxMessage;//[Offset: 0x3d8, Size: 1]
	void OnClicked_BT_MessageButton();// 0x1acc950
	void OnClicked_BT_MessageButton();// 0x1acc930

--------------------------------
Class: CrowLoadingBoxWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	enum CurrentState;//[Offset: 0x348, Size: 1]
	float ReadyTime;//[Offset: 0x34c, Size: 1]
	float StartTime;//[Offset: 0x350, Size: 1]
	float IdleTime;//[Offset: 0x354, Size: 1]
	float EndTime;//[Offset: 0x358, Size: 1]
	float DeltaTime;//[Offset: 0x35c, Size: 1]
	float Progress;//[Offset: 0x360, Size: 1]
	float MinIdleTime;//[Offset: 0x364, Size: 1]
	float CurrentReadyTime;//[Offset: 0x368, Size: 1]

--------------------------------
Class: CrowSystemMessageBoxWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	RichTextBlock* RTB_Message;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_Contents;//[Offset: 0x350, Size: 1]
	TimerHandle TimerHandle;//[Offset: 0x358, Size: 1]
	float HideTime;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowMultiSystemMessageBoxWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowMultiSystemMessageWidget* WB_MultiSystemMessage;//[Offset: 0x348, Size: 1]
	CrowMultiSystemMessageWidget* WB_MultiSystemMessage;//[Offset: 0x350, Size: 1]
	CrowMultiSystemMessageWidget* WB_MultiSystemMessage;//[Offset: 0x358, Size: 1]
	CrowMultiSystemMessageWidget*[] MessageBoxArray;//[Offset: 0x360, Size: 1]
	float HideTime;//[Offset: 0x370, Size: 1]

--------------------------------
Class: CrowMultiSystemMessageWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	RichTextBlock* RTB_Message;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_MessageBox;//[Offset: 0x350, Size: 1]
	WidgetAnimation* Animation_Move;//[Offset: 0x358, Size: 1]
	WidgetAnimation* Animation_Move;//[Offset: 0x360, Size: 1]
	WidgetAnimation* Animation_Move;//[Offset: 0x368, Size: 1]
	WidgetAnimation* Animation_Fade_Out;//[Offset: 0x370, Size: 1]
	WidgetAnimation* Animation_Fade_Out;//[Offset: 0x378, Size: 1]
	WidgetAnimation* Animation_Fade_Out;//[Offset: 0x380, Size: 1]
	void OnAnimationFadeOut();// 0x1a94bd0

--------------------------------
Class: CrowSettingsWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	class CrowSettingsCategoryContentsWidget* CategoryContentsWidgetClass;//[Offset: 0x388, Size: 1]
	CrowSettingsTabWidget* WB_SettingsTab;//[Offset: 0x390, Size: 1]
	ScrollBox* SB_SettingsDatas;//[Offset: 0x398, Size: 1]
	VerticalBox* VB_SettingsDatas;//[Offset: 0x3a0, Size: 1]
	CrowButton* BT_Default;//[Offset: 0x3a8, Size: 1]
	CrowButton* BT_BrightnessAdjustment;//[Offset: 0x3b0, Size: 1]
	CrowButton* BT_Apply;//[Offset: 0x3b8, Size: 1]
	CrowButton* BT_ESC;//[Offset: 0x3c0, Size: 1]
	Button* BT_EditingMode;//[Offset: 0x3c8, Size: 1]
	CrowSettingsPopupWidget* WB_SettingsPopup;//[Offset: 0x3d0, Size: 1]
	CrowSettingsExplanationWidget* WB_SettingsExplanation;//[Offset: 0x3d8, Size: 1]
	HorizontalBox* HB_Icon_GRAC;//[Offset: 0x3e0, Size: 1]
	CrowButton* BT_CustomerCenter;//[Offset: 0x3e8, Size: 1]
	CrowSettingsCategoryContentsWidget*[] Categories;//[Offset: 0x3f0, Size: 1]
	ActionKeySlot EditingActionSlot;//[Offset: 0x400, Size: 1]
	AxisKeySlot EditingAxisSlot;//[Offset: 0x430, Size: 1]
	FString EditingDropdownSlotItemUniqueName;//[Offset: 0x468, Size: 1]
	void OnTabChangedCallback();// 0x1b27740
	void OnSetttingSaveConfirmCallback(bool bIsConfirm);// 0x1b27670
	void OnSetttingSaveAndQuitConfirmCallback(bool bIsConfirm);// 0x1b275e0
	void OnDuplicationKeySlotConfirmCallback(bool bIsConfirm);// 0x1b27100
	void OnClicked_BT_ESC();// 0x1acc6f0
	void OnClicked_BT_Default();// 0x1b26f80
	void OnClicked_BT_CustomerCenter();// 0x1b26f60
	void OnClicked_BT_BrightnessAdjustment();// 0x1b26f40
	void OnClicked_BT_APPLY();// 0x1b26f20
	void OnClick_OkCancel_CustomerServiceCenter(enum Result);// 0x1b26e80

--------------------------------
Class: CrowSettingsCategoryContentsWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	enum MyCategory;//[Offset: 0x348, Size: 1]
	class CrowSettingsSlotTitleWidget* CrowSettingsSlotTitleWidgetClass;//[Offset: 0x350, Size: 1]
	class CrowSettingsSlotWidget* CrowSettingsSlotWidgetClass;//[Offset: 0x358, Size: 1]
	TextBlock* TB_CategoryName;//[Offset: 0x360, Size: 1]
	VerticalBox* VB_CategoryContents;//[Offset: 0x368, Size: 1]
	CrowSettingsSlotTitleWidget*[] CrowSettingsSlotTitles;//[Offset: 0x370, Size: 1]
	CrowSettingsSlotWidget*[] CrowSettingSlots;//[Offset: 0x380, Size: 1]

--------------------------------
Class: CrowSettingsSlotTitleWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Title;//[Offset: 0x348, Size: 1]

--------------------------------
Class: CrowSettingsSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	ActionKeySlot[] ActionSlots;//[Offset: 0x360, Size: 1]
	AxisKeySlot[] AxisSlots;//[Offset: 0x370, Size: 1]
	SettingItem SettingItem;//[Offset: 0x380, Size: 1]
	SettingItem PrevSettedItem;//[Offset: 0x420, Size: 1]
	byte RequestedKeySlotType;//[Offset: 0x4c0, Size: 1]
	CrowSettingsSlotWidget*[] SubItemWidgets;//[Offset: 0x4c8, Size: 1]
	bool bIsAxisKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	TextBlock* TB_SlotName;//[Offset: 0x4e0, Size: 1]
	CrowButton* BT_SlotHover;//[Offset: 0x4e8, Size: 1]
	WidgetSwitcher* WS_SlotTypes;//[Offset: 0x4f0, Size: 1]
	CrowSettingsSlotKeyBindingWidget* WB_SettingsSlotKeyBinding;//[Offset: 0x4f8, Size: 1]
	CrowSettingsSlotOnOffWidget* WB_SettingsSlotOnOff;//[Offset: 0x500, Size: 1]
	CrowSettingsSlotSliderWidget* WB_SettingsSlotSlider;//[Offset: 0x508, Size: 1]
	CrowSettingsSlotSelectionWidget* WB_SettingsSlotSelection;//[Offset: 0x510, Size: 1]
	CrowSettingsSlotDropdownWidget* WB_SettingsSlotDropdown;//[Offset: 0x518, Size: 1]
	CrowSettingsSlotButtonWidget* WB_SettingSlotButton;//[Offset: 0x520, Size: 1]
	CrowSettingsSlotWidget* ParentSlotWidget;//[Offset: 0x528, Size: 1]
	void OnMaintainCallback(bool bMaintain);// 0x1b274d0
	void OnHovered_BT_SlotHover();// 0x1b274b0
	void OnEditKeyBindingAxisCallback(bool bIsCompletion, out AxisKeySlot AxisSlot);// 0x1b27310
	void OnEditKeyBindingActionCallback(bool bIsCompletion, out ActionKeySlot ActionSlot);// 0x1b27190
	void OnClicked_BT_SlotHover();// 0x1b27060

--------------------------------
Class: AxisKeySlot
	byte SlotType;//[Offset: 0x0, Size: 1]
	InputAxisKeyMapping AxisMapping;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 1]
	float Scale;//[Offset: 0x8, Size: 1]
	Key Key;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ActionKeySlot
	byte SlotType;//[Offset: 0x0, Size: 1]
	InputActionKeyMapping ActionMapping;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 1]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	Key Key;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SettingItem
	FString ItemTextLocalKey;//[Offset: 0x0, Size: 1]
	FString ItemUniqueName;//[Offset: 0x10, Size: 1]
	enum ItemCategory;//[Offset: 0x20, Size: 1]
	enum ItemSlotType;//[Offset: 0x21, Size: 1]
	FString CosoleCommand;//[Offset: 0x28, Size: 1]
	bool bValueParameter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	uint32 Index;//[Offset: 0x3c, Size: 1]
	float Value;//[Offset: 0x40, Size: 1]
	float MinValue;//[Offset: 0x44, Size: 1]
	float MaxValue;//[Offset: 0x48, Size: 1]
	float StepValue;//[Offset: 0x4c, Size: 1]
	enum IndexedValueFillType;//[Offset: 0x50, Size: 1]
	FString[] IndexedValueLocalKeys;//[Offset: 0x58, Size: 1]
	FString[] SubItemUniqueNames;//[Offset: 0x68, Size: 1]
	StringArray[] ActivationSubItemUniqueNames;//[Offset: 0x78, Size: 1]
	FString[] DeActivationItemUniqueNames;//[Offset: 0x88, Size: 1]
	bool ActivationApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool ImmediatelyApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool AskMaintainApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]

--------------------------------
Class: StringArray
	FString[] Strings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowSettingsSlotKeyBindingWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_KeyBinding_First;//[Offset: 0x348, Size: 1]
	Image* IMG_SavedKeyBindingIcon_First;//[Offset: 0x350, Size: 1]
	Image* IMG_ChangeKeyBindingIcon_First;//[Offset: 0x358, Size: 1]
	CrowButton* BT_KeyBinding_First;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* WS_KeyBinding_Second;//[Offset: 0x368, Size: 1]
	CrowButton* BT_KeyBinding_Second;//[Offset: 0x370, Size: 1]
	Image* IMG_SavedKeyBindingIcon_Second;//[Offset: 0x378, Size: 1]
	Image* IMG_ChangeKeyBindingIcon_Second;//[Offset: 0x380, Size: 1]
	Image* IMG_SavedKeyBindingIcon_First_C1;//[Offset: 0x388, Size: 1]
	Image* IMG_SavedKeyBindingIcon_First_C2;//[Offset: 0x390, Size: 1]
	Image* IMG_ChangeKeyBindingIcon_First_C1;//[Offset: 0x398, Size: 1]
	Image* IMG_ChangeKeyBindingIcon_First_C2;//[Offset: 0x3a0, Size: 1]
	Image* IMG_SavedKeyBindingIcon_Second_C1;//[Offset: 0x3a8, Size: 1]
	Image* IMG_SavedKeyBindingIcon_Second_C2;//[Offset: 0x3b0, Size: 1]
	Image* IMG_ChangeKeyBindingIcon_Second_C1;//[Offset: 0x3b8, Size: 1]
	Image* IMG_ChangeKeyBindingIcon_Second_C2;//[Offset: 0x3c0, Size: 1]
	Image* IMG_Combination_Mark;//[Offset: 0x3c8, Size: 1]
	Image*[] SavedKeyBindingIcons;//[Offset: 0x3d0, Size: 1]
	Image*[] ChangeKeyBindingIcons;//[Offset: 0x3e0, Size: 1]
	Image*[] CombinationSavedKeyBindingIcons;//[Offset: 0x3f0, Size: 1]
	Image*[] CombinationChangKeyBindingIcons;//[Offset: 0x400, Size: 1]
	ActionKeySlot[] ActionSlots;//[Offset: 0x410, Size: 1]
	AxisKeySlot[] AxisSlots;//[Offset: 0x420, Size: 1]
	bool bIsEditingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bIsAxisSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	CrowSettingsSlotWidget* OwnerSlot;//[Offset: 0x438, Size: 1]
	void OnClicked_KeyBinding_Second();// 0x1b270a0
	void OnClicked_KeyBinding_First();// 0x1b27080

--------------------------------
Class: CrowSettingsSlotOnOffWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* WS_OnOff;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Off;//[Offset: 0x350, Size: 1]
	CrowWidgetImage* IMG_OffIcon;//[Offset: 0x358, Size: 1]
	TextBlock* TB_On;//[Offset: 0x360, Size: 1]
	CrowWidgetImage* IMG_OnIcon;//[Offset: 0x368, Size: 1]
	CrowToggleButton* BT_OnOff;//[Offset: 0x370, Size: 1]
	CrowSettingsSlotWidget* OwnerSlot;//[Offset: 0x378, Size: 1]
	void OnClicked_BT_OnOff();// 0x1b27020

--------------------------------
Class: CrowSettingsSlotSliderWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Value;//[Offset: 0x348, Size: 1]
	Slider* SL_Value;//[Offset: 0x350, Size: 1]
	CrowSettingsSlotWidget* OwnerSlot;//[Offset: 0x358, Size: 1]
	void OnSliderMouseCaptureEnd();// 0x1b27720
	void OnSliderMouseCaptureBegin();// 0x1b27700
	void OnSliderControllerCaptureEnd();// 0x1a8d5e0
	void OnSliderControllerCaptureBegin();// 0x1b27700
	void OnChangedSliderValue(float Value);// 0x1b26d80

--------------------------------
Class: CrowSettingsSlotSelectionWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	FString[] SelectionDatas;//[Offset: 0x348, Size: 1]
	int SelectedIndex;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Prev;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Next;//[Offset: 0x368, Size: 1]
	TextBlock* TB_SelectedItem;//[Offset: 0x370, Size: 1]
	CrowSettingsSlotWidget* OwnerSlot;//[Offset: 0x378, Size: 1]
	void OnClicked_BT_Prev();// 0x1b27040
	void OnClicked_BT_Next();// 0x1b27000
	void NativeDestruct();// 0x1aacfd0
	void NativeConstruct();// 0x1aacfb0

--------------------------------
Class: CrowSettingsSlotDropdownWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	FString[] SelectionDatas;//[Offset: 0x348, Size: 1]
	int SelectedIndex;//[Offset: 0x358, Size: 1]
	CrowSettingsSlotWidget* OwnerSlot;//[Offset: 0x360, Size: 1]
	class CrowSettingsSlotDropdownSlot* DropdownSlotClass;//[Offset: 0x368, Size: 1]
	float DropdownSlotHeight;//[Offset: 0x370, Size: 1]
	float DropdownSlotMaxHeight;//[Offset: 0x374, Size: 1]
	CrowToggleButton* BT_Dropdown;//[Offset: 0x378, Size: 1]
	TextBlock* TB_SelectedItem;//[Offset: 0x380, Size: 1]
	CanvasPanel* CP_Dropdown;//[Offset: 0x388, Size: 1]
	ScrollBox* SB_Dropdown;//[Offset: 0x390, Size: 1]
	bool bNeedResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	void OnClicked_BT_Dropdown();// 0x1b26fc0

--------------------------------
Class: CrowSettingsSlotDropdownSlot.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowSettingsSlotDropdownWidget* OwnerSlotWidget;//[Offset: 0x348, Size: 1]
	CrowButton* BT_Dropdown;//[Offset: 0x350, Size: 1]
	WidgetSwitcher* WS_Select;//[Offset: 0x358, Size: 1]
	TextBlock* TB_SelectedText;//[Offset: 0x360, Size: 1]
	TextBlock* TB_DeselectedText;//[Offset: 0x368, Size: 1]
	FString Key;//[Offset: 0x370, Size: 1]
	uint32 Index;//[Offset: 0x380, Size: 1]
	void OnClicked_BT_Dropdown();// 0x1b26fa0

--------------------------------
Class: CrowSettingsSlotButtonWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_ClickButton;//[Offset: 0x348, Size: 1]
	CrowSettingsSlotWidget* OwnerSlot;//[Offset: 0x350, Size: 1]
	void OnClickedButton();// 0x1b26f00

--------------------------------
Class: CrowSettingsTabWidget.CrowButtonContainerBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowWidgetToggleButton* BT_All;//[Offset: 0x390, Size: 1]
	CrowWidgetToggleButton* BT_Display;//[Offset: 0x398, Size: 1]
	CrowWidgetToggleButton* BT_Audio;//[Offset: 0x3a0, Size: 1]
	CrowWidgetToggleButton* BT_CharacterInput;//[Offset: 0x3a8, Size: 1]
	CrowWidgetToggleButton* BT_Gameplay;//[Offset: 0x3b0, Size: 1]
	CrowWidgetToggleButton* BT_Control;//[Offset: 0x3b8, Size: 1]
	CrowWidgetToggleButton* BT_Etc;//[Offset: 0x3c0, Size: 1]
	CrowSettingsCategoryContentsWidget*[] Categories;//[Offset: 0x3c8, Size: 1]

--------------------------------
Class: CrowSettingsPopupWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Title;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Message;//[Offset: 0x350, Size: 1]
	CrowButton* BT_Close;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Confirm;//[Offset: 0x360, Size: 1]
	CrowButton* BT_Cancel;//[Offset: 0x368, Size: 1]
	void OnClicked_BT_Confirm();// 0x1b218b0
	void OnClicked_BT_Close();// 0x1b21890
	void OnClicked_BT_Cancel();// 0x1b21890

--------------------------------
Class: CrowSettingsExplanationWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_Title;//[Offset: 0x348, Size: 1]
	Image* IMG_Explanation;//[Offset: 0x350, Size: 1]
	TextBlock* TB_Explanation;//[Offset: 0x358, Size: 1]
	SettingItem ExplanationSettingItem;//[Offset: 0x360, Size: 1]
	void OnCrosshairColorChanged();// 0x1b270e0

--------------------------------
Class: CrowMovieWidget.CrowFullScreenWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Border* BD_Subtitle_01;//[Offset: 0x368, Size: 1]
	Image* IMG_ProgressCircle;//[Offset: 0x370, Size: 1]
	TextBlock* TB_Description;//[Offset: 0x378, Size: 1]
	HorizontalBox* HB_Skip;//[Offset: 0x380, Size: 1]
	MediaPlayer* MediaPlayer;//[Offset: 0x388, Size: 1]
	MediaSource* MediaSourceSynopsis;//[Offset: 0x390, Size: 1]
	MediaSource* MediaSourceLogo;//[Offset: 0x398, Size: 1]
	MediaSoundComponent* MediaSoundComp;//[Offset: 0x3a0, Size: 1]
	int SubtitleIndex;//[Offset: 0x3a8, Size: 1]
	CrowSubTitleInfo[] CurInfo;//[Offset: 0x3b0, Size: 1]
	void CloseMovie();// 0x1ad44a0
	void CloseLogo();// 0x1ad4480

--------------------------------
Class: MediaPlayer.Object
	MulticastInlineDelegateProperty OnEndReached;//[Size: 1]
	MulticastInlineDelegateProperty OnMediaClosed;//[Size: 1]
	MulticastInlineDelegateProperty OnMediaOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnMediaOpenFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnPlaybackResumed;//[Size: 1]
	MulticastInlineDelegateProperty OnPlaybackSuspended;//[Size: 1]
	MulticastInlineDelegateProperty OnSeekCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnTracksChanged;//[Size: 1]
	Timespan CacheAhead;//[Offset: 0xa8, Size: 1]
	Timespan CacheBehind;//[Offset: 0xb0, Size: 1]
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 1]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 1]
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 1]
	int PlaylistIndex;//[Offset: 0xd0, Size: 1]
	Timespan TimeDelay;//[Offset: 0xd8, Size: 1]
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 1]
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 1]
	Rotator ViewRotation;//[Offset: 0xe8, Size: 1]
	Guid PlayerGuid;//[Offset: 0x120, Size: 1]
	bool SupportsSeeking();// 0x337aa60
	bool SupportsScrubbing();// 0x337aa30
	bool SupportsRate(float Rate, bool Unthinned);// 0x337a960
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x337a880
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x337a760
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x337a650
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x337a540
	void SetTimeDelay(Timespan TimeDelay);// 0x337a4c0
	bool SetRate(float Rate);// 0x337a300
	bool SetNativeVolume(float Volume);// 0x337a270
	void SetMediaOptions(const MediaSource* Options);// 0x337a0c0
	bool SetLooping(bool Looping);// 0x3379c90
	void SetDesiredPlayerName(FName PlayerName);// 0x3379970
	void SetBlockOnTime(out const Timespan Time);// 0x33798e0
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x3379810
	bool Seek(out const Timespan Time);// 0x3379770
	bool Rewind();// 0x3379740
	bool Reopen();// 0x3379640
	bool Previous();// 0x33794d0
	void PlayAndSeek();// 0x33794b0
	bool Play();// 0x3379480
	bool Pause();// 0x3379450
	bool OpenUrl(FString URL);// 0x33793a0
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0x3379290
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0x33790a0
	bool OpenSource(MediaSource* MediaSource);// 0x3379000
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x3378f30
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x3378e90
	bool OpenFile(FString FilePath);// 0x3378de0
	bool Next();// 0x3378d90
	bool IsReady();// 0x3378d60
	bool IsPreparing();// 0x3378d30
	bool IsPlaying();// 0x3378d00
	bool IsPaused();// 0x3378cd0
	bool IsLooping();// 0x3378ca0
	bool IsConnecting();// 0x3378c70
	bool IsClosed();// 0x3378c40
	bool IsBuffering();// 0x3378c10
	bool HasError();// 0x3378b10
	Rotator GetViewRotation();// 0x3378aa0
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x3378990
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x33788c0
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x33787f0
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x3378710
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x3378640
	float GetVerticalFieldOfView();// 0x3378610
	FString GetUrl();// 0x3378550
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x3378440
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x3378370
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x3378240
	MediaTimeStampInfo* GetTimeStamp();// 0x3378210
	Timespan GetTimeDelay();// 0x33781d0
	Timespan GetTime();// 0x3378190
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x3378090
	int GetSelectedTrack(enum TrackType);// 0x3377f80
	float GetRate();// 0x3377f50
	int GetPlaylistIndex();// 0x3377df0
	MediaPlaylist* GetPlaylist();// 0x3377dd0
	FName GetPlayerName();// 0x3377d90
	int GetNumTracks(enum TrackType);// 0x3377d00
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x3377c30
	FText GetMediaName();// 0x33779e0
	float GetHorizontalFieldOfView();// 0x33779b0
	Timespan GetDuration();// 0x3377910
	FName GetDesiredPlayerName();// 0x33778d0
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x33777c0
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x33776f0
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x3377620
	void Close();// 0x3377140
	bool CanPlayUrl(FString URL);// 0x3377090
	bool CanPlaySource(MediaSource* MediaSource);// 0x3376ff0
	bool CanPause();// 0x3376fc0

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 1]
	bool Replace(int Index, MediaSource* Replacement);// 0x3379670
	bool RemoveAt(int Index);// 0x33795a0
	bool Remove(MediaSource* MediaSource);// 0x3379500
	int Num();// 0x3378dc0
	void Insert(MediaSource* MediaSource, int Index);// 0x3378b40
	MediaSource* GetRandom(out int OutIndex);// 0x3377eb0
	MediaSource* GetPrevious(out int InOutIndex);// 0x3377e10
	MediaSource* GetNext(out int InOutIndex);// 0x3377b10
	MediaSource* Get(int Index);// 0x3377550
	bool AddUrl(FString URL);// 0x3376cc0
	bool AddFile(FString FilePath);// 0x3376c10
	bool Add(MediaSource* MediaSource);// 0x3376b70

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x337aa90
	void SetMediaOptionString(out const FName Key, FString Value);// 0x3379fc0
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x3379ef0
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x3379e10
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x3379d30
	FString GetUrl();// 0x3378590

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 1]
	Timespan SeekTime;//[Offset: 0x20, Size: 1]
	enum PlayOnOpen;//[Offset: 0x28, Size: 1]
	enum Loop;//[Offset: 0x29, Size: 1]

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 1]
	int Caption;//[Offset: 0x4, Size: 1]
	int MetaData;//[Offset: 0x8, Size: 1]
	int Script;//[Offset: 0xc, Size: 1]
	int Subtitle;//[Offset: 0x10, Size: 1]
	int Text;//[Offset: 0x14, Size: 1]
	int Video;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 1]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 1]
	int64 SequenceIndex;//[Offset: 0x30, Size: 1]

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x6c0, Size: 1]
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	float RateAdjustmentFactor;//[Offset: 0x6c8, Size: 1]
	FloatRange RateAdjustmentRange;//[Offset: 0x6cc, Size: 1]
	MediaPlayer* MediaPlayer;//[Offset: 0x6e0, Size: 1]
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x337a390
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x337a150
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x3379b20
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x3379a90
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x3379a00
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x3378010
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0x3377bb0
	MediaPlayer* GetMediaPlayer();// 0x3377ab0
	float GetEnvelopeValue();// 0x3377950
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x3376d70

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 1]
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x200, Size: 1]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x208, Size: 1]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5a8, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5b0, Size: 1]
	SoundClass* SoundClass;//[Offset: 0x600, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x608, Size: 1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x610, Size: 1]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x618, Size: 1]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x628, Size: 1]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x638, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x648, Size: 1]
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x648, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x64c, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x650, Size: 1]
	MulticastInlineDelegateProperty OnAudioEnvelopeValue;//[Size: 1]
	SynthSound* Synth;//[Offset: 0x688, Size: 1]
	AudioComponent* AudioComponent;//[Offset: 0x690, Size: 1]
	void Stop();// 0x32928c0
	void Start();// 0x3292320
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x32922a0
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x3291df0
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x32916a0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x3291420
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x3291390
	bool IsPlaying();// 0x328fd10

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 1]
	float Magnitude;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x3c0, Size: 1]

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: CrowSubTitleInfo
	Timespan StartTime;//[Offset: 0x0, Size: 1]
	Timespan EndTime;//[Offset: 0x8, Size: 1]
	FText Description;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowSettingsBrightnessWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowButton* BT_Initialize;//[Offset: 0x358, Size: 1]
	CrowButton* BT_Apply;//[Offset: 0x360, Size: 1]
	TextBlock* TB_Apply;//[Offset: 0x368, Size: 1]
	CrowButton* BT_Plus;//[Offset: 0x370, Size: 1]
	CrowButton* BT_Minus;//[Offset: 0x378, Size: 1]
	Slider* SL_Brightness;//[Offset: 0x380, Size: 1]
	void OnSliderMouseCaptureEnd_SL_Brightness();// 0xca8430
	void OnReleased_BT_Plus();// 0x1b275c0
	void OnReleased_BT_Minus();// 0x1b275a0
	void OnPressed_BT_Plus();// 0x1b27580
	void OnPressed_BT_Minus();// 0x1b27560
	void OnClicked_BT_Initialize();// 0x1b26fe0
	void OnClicked_BT_APPLY();// 0x1a290c0
	void OnChangedSliderValue_SL_Brightness(float Value);// 0x1b26e00

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0x3c031d0
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0x3c02f70

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x220, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	void OnRep_bEnabled();// 0x1a7dc00

--------------------------------
Class: CrowVisibilityManager.Actor.Object

--------------------------------
Class: CrowSpectatorWidget.CrowHUDWidgetBase.CrowWidgetBase.UserWidget.Widget.Visual.Object
	float StartedCountdownEffect;//[Offset: 0x348, Size: 1]
	CrowPlayerStateBase* AttachedPlayerState;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Common;//[Offset: 0x360, Size: 1]
	CanvasPanel* CP_Conquest;//[Offset: 0x368, Size: 1]
	CanvasPanel* CP_SquadOperation;//[Offset: 0x370, Size: 1]
	CanvasPanel* CP_Squad;//[Offset: 0x378, Size: 1]
	HorizontalBox* HB_Timer;//[Offset: 0x380, Size: 1]
	HorizontalBox* HB_Changeview;//[Offset: 0x388, Size: 1]
	HorizontalBox* HB_Skip;//[Offset: 0x390, Size: 1]
	CrowButton* WB_BT_ResturnToLobby;//[Offset: 0x398, Size: 1]
	CrowButton* WB_BT_Report;//[Offset: 0x3a0, Size: 1]
	TextBlock* TB_Username;//[Offset: 0x3a8, Size: 1]
	TextBlock* TB_Timer_Effect;//[Offset: 0x3b0, Size: 1]
	TextBlock* TB_Timer;//[Offset: 0x3b8, Size: 1]
	TextBlock* TB_TimerText;//[Offset: 0x3c0, Size: 1]
	TextBlock* TB_SquadNum;//[Offset: 0x3c8, Size: 1]
	Image* IMG_SkipKeyImage;//[Offset: 0x3d0, Size: 1]
	Image* IMG_RankIcon;//[Offset: 0x3d8, Size: 1]
	Image* IMG_SquadColor;//[Offset: 0x3e0, Size: 1]
	WidgetAnimation* AniConquestCountdown;//[Offset: 0x3e8, Size: 1]
	bool bHideNickName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	void OnReturnToLobby(enum ButtonType);// 0x1b36a70
	void OnClicked_ReturnToLobby();// 0x1b36a10
	void OnClicked_Clame();// 0xca8430

--------------------------------
Class: CrowSpectatorCustomModeWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	Button* BT_Background;//[Offset: 0x348, Size: 1]
	TextBlock* TB_Squad;//[Offset: 0x350, Size: 1]
	Image* IMG_Squad_Color;//[Offset: 0x358, Size: 1]
	TextBlock* TB_KillCount;//[Offset: 0x360, Size: 1]
	TextBlock* TB_PlayerName;//[Offset: 0x368, Size: 1]
	Image* IMG_PrevIcon;//[Offset: 0x370, Size: 1]
	Image* IMG_NextIcon;//[Offset: 0x378, Size: 1]
	Image* IMG_ClosePlayerList;//[Offset: 0x380, Size: 1]
	CrowSpectatorTargetListWidget* WB_SpectatorTargetList;//[Offset: 0x388, Size: 1]
	CanvasPanel* CP_Watching;//[Offset: 0x390, Size: 1]
	CrowSpectatorSaveWidget* WB_SpectatorSave;//[Offset: 0x398, Size: 1]
	CrowPlayerStateBase* AttachedPlayerState;//[Offset: 0x3a0, Size: 1]
	bool bHideNickName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	void UpdateKeyImage();// 0x1b33770
	void OnClickedBackground();// 0x1b33620

--------------------------------
Class: CrowSpectatorTargetListWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	ScrollBox* SCB_SquadList;//[Offset: 0x348, Size: 1]
	class CrowSpectatorSquadSlotWidget* SquadSlotWidgetClass;//[Offset: 0x350, Size: 1]
	<FString,CrowSpectatorSquadSlotWidget*> SquadSlotMap;//[Offset: 0x358, Size: 1]
	CrowSpectatorPlayerSlotWidget* SelectedPlayerSlotWidget;//[Offset: 0x3a8, Size: 1]
	void OnClickedPlayerSlot(CrowSpectatorPlayerSlotWidget* InSlotWidget);// 0x1b36920

--------------------------------
Class: CrowSpectatorPlayerSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CrowToggleButton* BT_Spectating;//[Offset: 0x358, Size: 1]
	WidgetSwitcher* WS_PlayerName;//[Offset: 0x360, Size: 1]
	TextBlock* TB_DeselectPlayerName;//[Offset: 0x368, Size: 1]
	TextBlock* TB_SelectPlayerName;//[Offset: 0x370, Size: 1]
	Image* IMG_Dying;//[Offset: 0x378, Size: 1]
	Image* IMG_Death;//[Offset: 0x380, Size: 1]
	CrowPlayerStateBase* TargetPlayerState;//[Offset: 0x388, Size: 1]
	float CurrentTimeSecond;//[Offset: 0x390, Size: 1]
	bool bHideNickName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	void OnClicked();// 0x1a740d0

--------------------------------
Class: CrowSpectatorSquadSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* VB_List;//[Offset: 0x348, Size: 1]
	TextBlock* TB_SquadNumber;//[Offset: 0x350, Size: 1]
	Image* IMG_SquadColor;//[Offset: 0x358, Size: 1]
	class CrowSpectatorSquadInfoSlotWidget* SquadInfoSlotWidgetClass;//[Offset: 0x360, Size: 1]
	class CrowSpectatorPlayerSlotWidget* PlayerSlotWidgetClass;//[Offset: 0x368, Size: 1]
	<uint64,CrowSpectatorPlayerSlotWidget*> PlayerSlotMap;//[Offset: 0x370, Size: 1]
	CrowSpectatorSquadInfoSlotWidget* SquadInfoSlotWidget;//[Offset: 0x3c0, Size: 1]
	byte TeamID;//[Offset: 0x3c8, Size: 1]
	FString SquadKey;//[Offset: 0x3d0, Size: 1]
	int SquadNumber;//[Offset: 0x3e0, Size: 1]
	LinearColor SquadColor;//[Offset: 0x3e4, Size: 1]
	bool bNeedSquadInfoSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]

--------------------------------
Class: CrowSpectatorSquadInfoSlotWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_CuonCount;//[Offset: 0x348, Size: 1]
	ProgressBar* PB_ResourceCount;//[Offset: 0x350, Size: 1]
	Image* IMG_AllDead;//[Offset: 0x358, Size: 1]
	Border* BD_EscapeCall;//[Offset: 0x360, Size: 1]
	CrowPlayerStateBase*[] SquadPlayerArray;//[Offset: 0x368, Size: 1]
	uint32 MaxCuonPoint;//[Offset: 0x378, Size: 1]
	uint32 CurrentCuonPoint;//[Offset: 0x37c, Size: 1]
	enum CurrentGameStateSquadMatch;//[Offset: 0x380, Size: 1]
	WidgetAnimation* GetResourceAnim;//[Offset: 0x388, Size: 1]
	WidgetAnimation* FullResourceAnim;//[Offset: 0x390, Size: 1]

--------------------------------
Class: CrowSpectatorSaveWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* VB_SavePlayerList;//[Offset: 0x348, Size: 1]
	CrowSpectatorPlayerSlotWidget*[] SavePlayerList;//[Offset: 0x350, Size: 1]
	float VisibleTime;//[Offset: 0x364, Size: 1]
	TimerHandle VisibleTimerHandle;//[Offset: 0x368, Size: 1]

--------------------------------
Class: ClassMapKey
	class Object* Class;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowClothActorComponent.Object
	CrowObjectPoolActor* PoolActor;//[Offset: 0x30, Size: 1]
	<enum,CrowClothItem> ClothMeshesList;//[Offset: 0x38, Size: 1]
	<enum,SkeletalMesh*> DefaultClothMeshesList;//[Offset: 0x88, Size: 1]
	MaterialInstanceDynamic* MergedSkinMID;//[Offset: 0xd8, Size: 1]
	MaterialInstanceDynamic* MergedClothMID;//[Offset: 0xe0, Size: 1]
	MaterialInstanceDynamic* MergedSkinMID_LOD;//[Offset: 0xe8, Size: 1]
	MaterialInstanceDynamic* MergedClothMID_LOD;//[Offset: 0xf0, Size: 1]
	Actor* OwnerActor;//[Offset: 0xf8, Size: 1]
	SkeletalMeshComponent* MasterMesh;//[Offset: 0x100, Size: 1]

--------------------------------
Class: CrowClothItem
	enum ItemType;//[Offset: 0x2, Size: 1]
	uint32 ItemIndex;//[Offset: 0x4, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x8, Size: 1]
	ParticleSystemComponent* AttachedEffectComponent;//[Offset: 0x10, Size: 1]
	SkeletalMesh* SkeletalMeshAsset;//[Offset: 0x18, Size: 1]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x20, Size: 1]
	CrowClothItemMaterial[] ItemMaterials;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowClothItemMaterial
	FName MaterialSlotName;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowSafeBoxEventActor.Actor.Object
	BoxComponent* Root;//[Offset: 0x220, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x228, Size: 1]
	float InteractionTime;//[Offset: 0x230, Size: 1]
	ParticleSystem* SparkEffect;//[Offset: 0x238, Size: 1]
	CrowDecalInfo WeldingDecal;//[Offset: 0x240, Size: 1]
	float WeldingDecalSpawnLength;//[Offset: 0x2a0, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfo;//[Offset: 0x2a8, Size: 1]
	AkAudioEvent* SoundCutting;//[Offset: 0x330, Size: 1]
	AkAudioEvent* SoundEndCutting;//[Offset: 0x338, Size: 1]
	AkAudioEvent* SoundComplete;//[Offset: 0x340, Size: 1]
	float CuttingViewAngle;//[Offset: 0x348, Size: 1]
	enum EventState;//[Offset: 0x34c, Size: 1]
	CrowInteractionProgressCircleWidget* GaugeWidget;//[Offset: 0x350, Size: 1]
	CrowPlayerStateBase* OpenPlayerState;//[Offset: 0x358, Size: 1]
	SplineComponent*[] SplineArray;//[Offset: 0x360, Size: 1]
	ParticleSystemComponent* SparkEffectComponent;//[Offset: 0x370, Size: 1]
	void MulticastEventState(enum NewState);// 0x1acc640

--------------------------------
Class: CrowDecalInfo
	SoftObjectPath Material;//[Offset: 0x0, Size: 1]
	float LifeSpan;//[Offset: 0x18, Size: 1]
	float ScaleMin;//[Offset: 0x1c, Size: 1]
	float ScaleMax;//[Offset: 0x20, Size: 1]
	float RotateMin;//[Offset: 0x24, Size: 1]
	float RotateMax;//[Offset: 0x28, Size: 1]
	float FadeScreenSize;//[Offset: 0x2c, Size: 1]
	uint32 RandomCount;//[Offset: 0x30, Size: 1]
	CurveFloat* FadeOutIn;//[Offset: 0x38, Size: 1]
	CurveFloat* FadeOutCurve;//[Offset: 0x40, Size: 1]
	CurveFloat* EmissiveInCurve;//[Offset: 0x48, Size: 1]
	CurveFloat* EmissiveOutCurve;//[Offset: 0x50, Size: 1]
	float RelativeScaleX;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CrowProjectileClaymoreMine.CrowProjectileThrow.CrowProjectileSphereBase.CrowProjectileBase.Actor.Object
	SphereComponent* DetectionRangeComponent;//[Offset: 0x1b40, Size: 1]
	Transform ClaymoreMineTrans;//[Offset: 0x1b50, Size: 1]
	enum State;//[Offset: 0x1b80, Size: 1]
	enum LocalState;//[Offset: 0x1b81, Size: 1]
	Pawn* InstalledPawn;//[Offset: 0x1b88, Size: 1]
	Controller* InstalledPawnController;//[Offset: 0x1b90, Size: 1]
	FString SelfDestructEffectKey;//[Offset: 0x1b98, Size: 1]
	WeaponDamageSettings SelfDestructDamageSetting;//[Offset: 0x1ba8, Size: 1]
	AkAudioEvent* DetectSound;//[Offset: 0x1bd0, Size: 1]
	AkAudioEvent* ActiveSound;//[Offset: 0x1bd8, Size: 1]
	float OperationWaitingTime;//[Offset: 0x1be0, Size: 1]
	float ActivityTimeLimit;//[Offset: 0x1be4, Size: 1]
	float RangeAngle;//[Offset: 0x1be8, Size: 1]
	float RangeDistance;//[Offset: 0x1bec, Size: 1]
	float TimeFromDetectionToExplosion;//[Offset: 0x1bf0, Size: 1]
	float DetectionRate;//[Offset: 0x1bf4, Size: 1]
	float InstallableHeight;//[Offset: 0x1bf8, Size: 1]
	float CurrentTime;//[Offset: 0x1bfc, Size: 1]
	float CurrentTimeFromDetectionToExplosion;//[Offset: 0x1c00, Size: 1]
	Pawn*[] PawnInDetectionRangeList;//[Offset: 0x1c08, Size: 1]
	TimerHandle ServerDestroyTimerHandle;//[Offset: 0x1c18, Size: 1]
	CrowIndicatorClaymoreMine* IndiWidget;//[Offset: 0x1c20, Size: 1]
	CrowLaserBeamComponent* LaserBeamLeft;//[Offset: 0x1c28, Size: 1]
	CrowLaserBeamComponent* LaserBeamRight;//[Offset: 0x1c30, Size: 1]
	bool bNeedPlayInstallSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c38, Size: 1]
	CrowWorldSMC* AttachParentWorldSMC;//[Offset: 0x1c40, Size: 1]
	void ServerSelfDestroy();// 0x1b00af0
	void ServerDestroyTimer();// 0x1ad8620
	void ServerBomb();// 0x1b00ad0
	void OnWorldSMCDestroyed(byte InDestroyReason, bool InDestroyAttachChild);// 0x1b00860
	void OnRep_ChangeState();// 0x1b007e0
	void OnRep_ChangeClaymoreMineRep();// 0x1b007c0
	void MultiCast_ChangeServerState(byte InNewState);// 0x1aff9a0
	void EndOverlapDetection(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1aff740
	void BeginOverlapDetection(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1aff520

--------------------------------
Class: CrowProjectileThrow.CrowProjectileSphereBase.CrowProjectileBase.Actor.Object
	float ExplosionTime;//[Offset: 0x19a0, Size: 1]
	Vector vAngularImpulse;//[Offset: 0x19a4, Size: 1]
	float WeightInKg;//[Offset: 0x19b0, Size: 1]
	float LinearDamping;//[Offset: 0x19b4, Size: 1]
	float AngularDamping;//[Offset: 0x19b8, Size: 1]
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x19c0, Size: 1]
	CurveFloat* ThrowVelocityFactorCurve;//[Offset: 0x19c8, Size: 1]
	bool bIgnoreDestroyedExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d0, Size: 1]
	float WaterDampingFactor;//[Offset: 0x19d4, Size: 1]
	class MatineeCameraShake* CameraShake;//[Offset: 0x19d8, Size: 1]
	float CameraShakeMinDistance;//[Offset: 0x19e0, Size: 1]
	float CameraShakeMaxDistance;//[Offset: 0x19e4, Size: 1]
	bool UseTinnitus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19e8, Size: 1]
	float MaxTinnitusDuration;//[Offset: 0x19ec, Size: 1]
	bool IsShowExplosionWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f0, Size: 1]
	AkAudioEvent* LoopSound;//[Offset: 0x19f8, Size: 1]
	AkAudioEvent* EndSound;//[Offset: 0x1a00, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoProjectileThrow;//[Offset: 0x1a08, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfoProjectileThrowForObserver;//[Offset: 0x1a90, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x1b18, Size: 1]
	bool bIsRightClickAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b20, Size: 1]
	Controller* FireController;//[Offset: 0x1b28, Size: 1]

--------------------------------
Class: CrowProjectileSphereBase.CrowProjectileBase.Actor.Object
	SphereComponent* CollisionRoot;//[Offset: 0x1998, Size: 1]
	void OnSphereHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult HitResult);// 0x1afc670
	void OnSphereBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult HitResult);// 0x1afc450

--------------------------------
Class: CrowIndicatorClaymoreMine.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Root;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_LocateArrow;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Icon;//[Offset: 0x358, Size: 1]
	Image* IMG_Icon;//[Offset: 0x360, Size: 1]
	Pawn* InstalledPawn;//[Offset: 0x368, Size: 1]
	uint32 InstalledPawnPlayerID;//[Offset: 0x370, Size: 1]
	byte InstalledPawnTeamID;//[Offset: 0x374, Size: 1]
	void InitWidget(Pawn* InInstalledPawn, Actor* InOwnerActor);// 0x1a9caf0

--------------------------------
Class: CrowLaserBeamComponent.SceneComponent.ActorComponent.Object
	StaticMeshComponent* LineMesh01;//[Offset: 0x1f8, Size: 1]
	StaticMeshComponent* LineMesh02;//[Offset: 0x200, Size: 1]
	MaterialInterface* LaserBeamMaterial;//[Offset: 0x208, Size: 1]
	MaterialInterface* LaserBeamSmallDecal;//[Offset: 0x210, Size: 1]
	MaterialInterface* LaserBeamBigDecal;//[Offset: 0x218, Size: 1]
	float LaserBeamMaxDistance;//[Offset: 0x220, Size: 1]
	float LaserBeamWidth;//[Offset: 0x224, Size: 1]
	float BigDecalMaxDistance;//[Offset: 0x228, Size: 1]
	LinearColor LaserBeamColor;//[Offset: 0x22c, Size: 1]
	float LaserBeamThickness;//[Offset: 0x23c, Size: 1]
	float LaserBeamBright;//[Offset: 0x240, Size: 1]
	bool LaserBeamVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x248, Size: 1]
	DecalComponent* SmallDecal;//[Offset: 0x250, Size: 1]
	DecalComponent* BigDecal;//[Offset: 0x258, Size: 1]
	Actor*[] IgnoreActorArray;//[Offset: 0x260, Size: 1]

--------------------------------
Class: CrowWorldSMC.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int16 LayoutItemIndex;//[Offset: 0x4f8, Size: 1]
	bool bDestroyByShockwave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fa, Size: 1]
	bool bDestroyOnThrowWeaponHit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4fa, Size: 1]
	bool bDestroyOnCharacterAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4fa, Size: 1]
	bool bSlideOnBeginVaultAction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fa, Size: 1]
	bool bIgnoreCharacterInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4fa, Size: 1]
	bool bBlockCharacterMoveThrough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4fa, Size: 1]
	bool bPreventAttachChild;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4fa, Size: 1]
	bool bDestroyAttachChildOnExplosion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4fa, Size: 1]
	bool bDestroyAttachChildOnImpactCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4fb, Size: 1]
	bool bUseAnimation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4fb, Size: 1]
	float DecalScaleMultiply;//[Offset: 0x4fc, Size: 1]
	CrowWorldSMCShakingState ShakingState;//[Offset: 0x500, Size: 1]
	<SceneComponent*,Transform> VirtualChildren;//[Offset: 0x590, Size: 1]
	CrowWorldAnimationAUD* AnimationAUD;//[Offset: 0x5e0, Size: 1]
	bool bIsFirstRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 1]
	Transform BaseWorldTransform;//[Offset: 0x5f0, Size: 1]

--------------------------------
Class: CrowWorldSMCShakingState
	Transform BeginShakeTransform;//[Offset: 0x0, Size: 1]
	Transform NextShakeTransform;//[Offset: 0x30, Size: 1]
	bool Shaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool NextTimeStep;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	float ShakeDuration;//[Offset: 0x64, Size: 1]
	float ShakeTimeLeft;//[Offset: 0x68, Size: 1]
	float ShakeStepTime;//[Offset: 0x6c, Size: 1]
	float ShakeStepLeft;//[Offset: 0x70, Size: 1]
	float ShakeOffset;//[Offset: 0x74, Size: 1]
	Vector ShakeOffsetVector;//[Offset: 0x78, Size: 1]
	float ShakeOffsetMultiply;//[Offset: 0x84, Size: 1]

--------------------------------
Class: CrowWorldAnimationAUD.AssetUserData.Object
	CrowWorldAnimRotation AnimRotation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowWorldAnimRotation
	bool UseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector RotationAxis;//[Offset: 0x4, Size: 1]
	float RotationSpeed;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CharacterHitInfoClient
	Vector FireLocation;//[Offset: 0x0, Size: 1]
	float ActualDamage;//[Offset: 0xc, Size: 1]
	FName BoneName;//[Offset: 0x10, Size: 1]
	byte AttackerType;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowIngameRecordManager.Object
	bool bIsShowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum WinLose;//[Offset: 0x29, Size: 1]
	CrowIngameBattleRecord BattleRecord;//[Offset: 0x30, Size: 1]
	CrowIngameVehicleRecord VehicleRecord;//[Offset: 0x88, Size: 1]
	CrowIngameTimeRecord TimeRecord;//[Offset: 0xe0, Size: 1]
	<uint32,CrowIngameWeaponCharacterRecord> CharacterWeaponRecords;//[Offset: 0x150, Size: 1]
	<uint32,CrowIngameWeaponVehicleRecord> VehicleWeaponRecords;//[Offset: 0x1a0, Size: 1]
	<enum,CrowIngameSkillRecord> SkillRecords;//[Offset: 0x1f0, Size: 1]
	<enum,CrowIngameMedalRecord> MedalRecords;//[Offset: 0x240, Size: 1]
	FString UserNickName;//[Offset: 0x290, Size: 1]
	uint64 UserServerKey;//[Offset: 0x2a0, Size: 1]
	CrowPlayerStateBase* OwnerPlayerState;//[Offset: 0x2a8, Size: 1]
	FString[] Logs;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: CrowIngameBattleRecord.CrowIngameRecordBase

--------------------------------
Class: CrowIngameRecordBase
	<FString,CrowIngameRecordIntValue> IntValuePropertys;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowIngameRecordIntValue
	uint32 Value;//[Offset: 0x0, Size: 1]
	uint32 IncValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowIngameVehicleRecord.CrowIngameRecordBase

--------------------------------
Class: CrowIngameTimeRecord.CrowIngameRecordBase
	bool bIsAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	DateTime BattleDateTime;//[Offset: 0x60, Size: 1]
	DateTime AliveDateTime;//[Offset: 0x68, Size: 1]

--------------------------------
Class: CrowIngameWeaponCharacterRecord.CrowIngameWeaponRecord.CrowIngameItemRecord.CrowIngameRecordBase

--------------------------------
Class: CrowIngameWeaponRecord.CrowIngameItemRecord.CrowIngameRecordBase
	uint32 ExpShareIndex;//[Offset: 0x60, Size: 1]
	byte WeaponSubType;//[Offset: 0x64, Size: 1]

--------------------------------
Class: CrowIngameItemRecord.CrowIngameRecordBase
	uint16 Index;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CrowIngameWeaponVehicleRecord.CrowIngameWeaponRecord.CrowIngameItemRecord.CrowIngameRecordBase

--------------------------------
Class: CrowIngameSkillRecord.CrowIngameRecordBase
	enum ConquestSkill;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CrowIngameMedalRecord.CrowIngameRecordBase
	enum MedalType;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CrowMissionSystemManager.Object
	CrowMissionInfo[] ArrayCurrentPlayingMission;//[Offset: 0x28, Size: 1]
	CrowMissionInfo[] TutorialMissionList;//[Offset: 0x38, Size: 1]
	<int,CrowMissionTableRow> MapMissionTable;//[Offset: 0x48, Size: 1]
	CrowPlayerStateBase* PlayerState;//[Offset: 0x98, Size: 1]
	bool IsSameWeaponType(out const CrowKillInfo KillInfo, int Param);// 0x1ad11f0
	bool IsSameWeaponID(out const CrowKillInfo KillInfo, int Param, int Param02);// 0x1ad10a0
	bool IsComplateComboKill(int Param);// 0x1ad0ed0
	bool GetIsHeadShot(out const CrowKillInfo KillInfo);// 0x1ad0e10
	void AddUpdateMissionList(out CrowMissionInfo MissionInfo, out CrowMissionInfo[] UpdateMissionList);// 0x1ad0ce0

--------------------------------
Class: CrowMissionTableRow.TableRowBase
	FString HelpText;//[Offset: 0x10, Size: 1]
	byte MissionType;//[Offset: 0x20, Size: 1]
	bool MissionReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool MissionUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	byte MissionLevelLimitMin;//[Offset: 0x23, Size: 1]
	byte MissionLevelLimitMax;//[Offset: 0x24, Size: 1]
	int MissionPlayDay;//[Offset: 0x28, Size: 1]
	int WeeklyGroupNum;//[Offset: 0x2c, Size: 1]
	enum MissionModeType;//[Offset: 0x30, Size: 1]
	enum MissionConditionType;//[Offset: 0x34, Size: 1]
	int ParameterType1;//[Offset: 0x38, Size: 1]
	int ParameterType2;//[Offset: 0x3c, Size: 1]
	int MissionCounter;//[Offset: 0x40, Size: 1]
	int ExpValue;//[Offset: 0x44, Size: 1]
	FString TitleStringKey;//[Offset: 0x48, Size: 1]
	FString ContentStringKey;//[Offset: 0x58, Size: 1]
	int Rating;//[Offset: 0x68, Size: 1]
	int RewardIndex;//[Offset: 0x6c, Size: 1]

--------------------------------
Class: CrowSupplyWeaponActor.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x228, Size: 1]
	enum SupplyBoxType;//[Offset: 0x230, Size: 1]
	CrowTestWeapon WeaponSetting;//[Offset: 0x238, Size: 1]
	AkAudioEvent* UseSound;//[Offset: 0x278, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfo;//[Offset: 0x280, Size: 1]
	StaticMeshComponent* WeaponBoxStaticMeshComponent;//[Offset: 0x308, Size: 1]
	CrowWeaponBase* SupplyWeapon;//[Offset: 0x310, Size: 1]
	CrowTriggerComponent* TriggerComponent;//[Offset: 0x318, Size: 1]

--------------------------------
Class: CrowTestWeapon
	uint32 WeaponIndex;//[Offset: 0x0, Size: 1]
	uint32 SkinIndex;//[Offset: 0x4, Size: 1]
	uint32 PartsBarrel;//[Offset: 0x8, Size: 1]
	uint32 PartsMagazine;//[Offset: 0xc, Size: 1]
	uint32 PartsMuzzle;//[Offset: 0x10, Size: 1]
	uint32 PartsPistolGrip;//[Offset: 0x14, Size: 1]
	uint32 PartsPrimarySight;//[Offset: 0x18, Size: 1]
	uint32 PartsSecondarySight;//[Offset: 0x1c, Size: 1]
	uint32 PartsSideBarrel;//[Offset: 0x20, Size: 1]
	uint32 PartsStock;//[Offset: 0x24, Size: 1]
	uint32 PartsUnderBarrel;//[Offset: 0x28, Size: 1]
	uint32 CharmIndex;//[Offset: 0x2c, Size: 1]
	int[] StickerIndex;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowTriggerComponent.SceneComponent.ActorComponent.Object
	TriggerCheckDistance TriggerCheckDistance;//[Offset: 0x1f8, Size: 1]
	class CrowTriggerCommandBase* DefaultCommandDistance;//[Offset: 0x220, Size: 1]
	CrowTriggerCommandBase* CommandDistance;//[Offset: 0x228, Size: 1]
	TriggerCheckMouseOver TriggerCheckMouseOver;//[Offset: 0x230, Size: 1]
	class CrowTriggerCommandBase* DefaultCommandMouseOver;//[Offset: 0x240, Size: 1]
	CrowTriggerCommandBase* CommandMouseOver;//[Offset: 0x248, Size: 1]
	TriggerInput TriggerInput;//[Offset: 0x250, Size: 1]
	class CrowTriggerCommandBase* DefaultCommandInput;//[Offset: 0x268, Size: 1]
	FText WidgetMessageText;//[Offset: 0x270, Size: 1]
	enum[] ParamTypes;//[Offset: 0x288, Size: 1]
	float MessageDisplayTime;//[Offset: 0x298, Size: 1]
	CrowTriggerCommandBase* CommandInput;//[Offset: 0x2a0, Size: 1]
	bool ProgressDistanceEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	bool ProgressMouseOverEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 1]
	TimerHandle PressInputTimerHandle;//[Offset: 0x2b0, Size: 1]
	FName CurrentOverlapID;//[Offset: 0x2b8, Size: 1]
	FName CurrentMouseOverID;//[Offset: 0x2c0, Size: 1]
	float TotalPressInputTime;//[Offset: 0x2c8, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	void OnReleasedInputEvent(FName ActionName, CrowTriggerControlComponent* Target);// 0x1b47fc0
	void OnPressedInputEvent(FName ActionName, CrowTriggerControlComponent* Target);// 0x1b47ef0
	void OnEndOverlapTriggerNear(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1b47d90
	void OnEndOverlapTriggerFar(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1b47c30
	void OnEndOverlapTriggerCustom(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1b47ad0
	void OnEndOverlapTrigger(FName ID, PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1b47930
	void OnEndMouseOver(FName ID, CrowTriggerControlComponent* Target);// 0x1b47860
	void OnBeginOverlapTriggerNear(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1b47640
	void OnBeginOverlapTriggerFar(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1b47420
	void OnBeginOverlapTriggerCustom(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1b47200
	void OnBeginOverlapTrigger(FName ID, PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1b46f90
	void OnBeginMouseOver(FName ID, CrowTriggerControlComponent* Target);// 0x1b46ec0

--------------------------------
Class: CrowTriggerControlComponent.ActorComponent.Object
	CrowBuildingTriggerConfig BuildingTriggerConfig;//[Offset: 0xb0, Size: 1]
	TimerHandle LineTraceHandle;//[Offset: 0xb8, Size: 1]
	CrowTriggerComponent*[] DynamicTargetList;//[Offset: 0xc0, Size: 1]
	CrowWorldTrigger* CurrentWorldTrigger;//[Offset: 0xd0, Size: 1]
	CrowTriggerUIBase*[] DynamicUIList;//[Offset: 0xd8, Size: 1]
	<CrowTriggerComponent*,CrowTriggerOverlapInfo> WaitTargetOverlpInfos;//[Offset: 0xe8, Size: 1]
	void ToggleLineTraceTimer();// 0x1b482d0
	void RemoveUI(CrowTriggerUIBase* Target);// 0x1b48120
	void RemoveTarget(CrowTriggerComponent* Target);// 0x1b48090
	void LineTraceCrowTrigger();// 0x1b46ea0
	void LineTraceBuildingTrigger();// 0x1b46e80
	void LineTrace();// 0x1b46e60
	void ClearAllTriggers();// 0x1b46e40
	void AddUI(CrowTriggerUIBase* Target);// 0x1b46db0
	void AddTarget(CrowTriggerComponent* Target);// 0x1b46d20

--------------------------------
Class: CrowTriggerUIBase.Object
	CrowCharacterPawn* CharacterOwner;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowBuildingTriggerConfig
	float ActivateDistance;//[Offset: 0x0, Size: 1]
	float ActivatePitchMax;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowWorldTrigger.PrimitiveComponent.SceneComponent.ActorComponent.Object
	CrowWorldActor* WorldActor;//[Offset: 0x450, Size: 1]
	CrowWorldAnimator* WorldAnimator;//[Offset: 0x458, Size: 1]
	int16 LayoutItemIndex;//[Offset: 0x460, Size: 1]
	enum GeometryType;//[Offset: 0x462, Size: 1]
	enum TriggerType;//[Offset: 0x463, Size: 1]
	int8 TriggerState;//[Offset: 0x464, Size: 1]
	BodySetup* TriggerBodySetup;//[Offset: 0x468, Size: 1]
	FString LocalTextKey_Open;//[Offset: 0x470, Size: 1]
	FString LocalTextKey_Close;//[Offset: 0x480, Size: 1]

--------------------------------
Class: CrowWorldActor.Actor.Object
	SceneComponent* SceneRoot;//[Offset: 0x220, Size: 1]
	CrowWorldAnimator* WorldAnimator;//[Offset: 0x228, Size: 1]
	CrowWorldReplicationActor* ReplicationActor;//[Offset: 0x230, Size: 1]
	CrowWorldLODUpdater* LODUpdater;//[Offset: 0x238, Size: 1]
	bool UseActorDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	bool UseWorldActorLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x240, Size: 1]
	bool bEnabledRayTracing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x240, Size: 1]
	bool DestroyedFlagInCluster;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x240, Size: 1]
	bool DestroyedFlagInLandmark;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x240, Size: 1]
	bool SkipItemDestroyedFlag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x240, Size: 1]
	bool InitializedLayoutItems;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x240, Size: 1]
	bool InitializedLOD;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x240, Size: 1]
	bool FullyDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x241, Size: 1]
	int16 IncrementalBuildLayoutIndex;//[Offset: 0x242, Size: 1]
	int16 ActorLayoutIndex;//[Offset: 0x244, Size: 1]
	uint32 WorldActorIndex;//[Offset: 0x248, Size: 1]
	uint32 SectorIndex;//[Offset: 0x24c, Size: 1]
	uint32 ClusterIndex;//[Offset: 0x250, Size: 1]
	int16 ActorDestructibleFlagLookupInSector;//[Offset: 0x254, Size: 1]
	int16 ActorDestructibleFlagLookupInCluster;//[Offset: 0x256, Size: 1]
	int16 ActorDestructibleFlagLookupInLandmark;//[Offset: 0x258, Size: 1]
	int16 LayoutItemDestructibleFlagOrigin;//[Offset: 0x25a, Size: 1]
	int16 LayoutItemDynamicStateOrigin;//[Offset: 0x25c, Size: 1]
	CrowWorldActorLayoutItemLookups LayoutItemLookups;//[Offset: 0x260, Size: 1]
	CrowWorldActorLayoutItemInstance[] LayoutItemInstances;//[Offset: 0x2a0, Size: 1]
	CrowWorldActorDestructionState ActorDestructionState;//[Offset: 0x2b0, Size: 1]
	CrowWorldActorLODState[] ActorLODStates;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: CrowWorldAnimator.Object
	bool IsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool TriggersEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	CrowWorldMapConfig* MapConfig;//[Offset: 0x30, Size: 1]
	CrowWorldActor* WorldActor;//[Offset: 0x38, Size: 1]
	bool IsAnimationBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	CrowWorldLayoutItemAnimation[] AnimationDatas;//[Offset: 0x48, Size: 1]
	CrowWorldAnimationInstance[] AnimationInstances;//[Offset: 0x58, Size: 1]
	CrowWorldAnimationState[] ActiveAnimationStates;//[Offset: 0x68, Size: 1]
	CrowWorldSMC*[] ShakingSMCArray;//[Offset: 0x78, Size: 1]

--------------------------------
Class: CrowWorldMapConfig.DataAsset.Object
	bool DoNotUseCrowWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	CrowWorldMapVisualConfig* MapVisualConfig;//[Offset: 0x38, Size: 1]
	CrowWorldPreloadConfig*[] PreloadConfigArray;//[Offset: 0x40, Size: 1]
	bool UseLightProbe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	CrowWorldLightProbeSetting LightProbeSetting;//[Offset: 0x54, Size: 1]
	bool UseIndoorLightSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	CrowWorldIndoorLightSetting IndoorLightSetting;//[Offset: 0xa4, Size: 1]
	bool UseWorldOriginRebase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xb4, Size: 1]
	float ClusterSize;//[Offset: 0xb8, Size: 1]
	int ClusterSyncDistance;//[Offset: 0xbc, Size: 1]
	float ClusterHeightMax;//[Offset: 0xc0, Size: 1]
	float SectorSize;//[Offset: 0xc4, Size: 1]
	int SectorSyncDistance;//[Offset: 0xc8, Size: 1]
	float SectorHeightMax;//[Offset: 0xcc, Size: 1]
	float ClientUpdateVehicleDistance;//[Offset: 0xd0, Size: 1]
	float ClientUpdateVehicleMargin;//[Offset: 0xd4, Size: 1]
	bool UseOcclusionGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	float OcclusionSize;//[Offset: 0xdc, Size: 1]
	int OcclusionDistance;//[Offset: 0xe0, Size: 1]
	float OcclusionHeightMax;//[Offset: 0xe4, Size: 1]
	float SyncUpdateDelayMin;//[Offset: 0xe8, Size: 1]
	float SyncUpdateDelayMax;//[Offset: 0xec, Size: 1]
	Vector2D WorldOrigin2D;//[Offset: 0xf0, Size: 1]
	float AutoDetectParentMeshDistance;//[Offset: 0xf8, Size: 1]
	CrowWorldSoundSetting SoundSetting;//[Offset: 0xfc, Size: 1]
	CrowWorldActorLODSetting LODSetting;//[Offset: 0x100, Size: 1]
	CrowWorldDataCollectionAsset* WorldDataAsset;//[Offset: 0x120, Size: 1]
	CrowWorldTriggerCollisionSetting TriggerCollisionSetting;//[Offset: 0x128, Size: 1]
	CrowWorldDataHandlerActorItem[] ActorItems;//[Offset: 0x148, Size: 1]
	CrowWorldDataHandlerComponentItem[] ComponentItems;//[Offset: 0x158, Size: 1]

--------------------------------
Class: CrowWorldMapVisualConfig.DataAsset.Object
	CrowWorldCameraAttachedFX[] CameraAttachedFxAssets;//[Offset: 0x30, Size: 1]
	CrowWorldMapLightSetting MapLightSettings;//[Offset: 0x40, Size: 1]
	CrowWorldMaterialParameterOverride[] MPCOverrides;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CrowWorldCameraAttachedFX
	FXSystemAsset* FxAsset;//[Offset: 0x0, Size: 1]
	enum CustomDepthStencilMask;//[Offset: 0x8, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowWorldMapLightSetting
	Vector LightFPOffset;//[Offset: 0x0, Size: 1]
	PointLightComponent* PointLightFP;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 1]
	float LightFalloffExponent;//[Offset: 0x344, Size: 1]
	float SourceRadius;//[Offset: 0x348, Size: 1]
	float SoftSourceRadius;//[Offset: 0x34c, Size: 1]
	float SourceLength;//[Offset: 0x350, Size: 1]
	void SetSourceRadius(float bNewValue);// 0x3c4e560
	void SetSourceLength(float NewValue);// 0x3c4e4e0
	void SetSoftSourceRadius(float bNewValue);// 0x3c4e460
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x3c4e2d0

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x328, Size: 1]
	float Radius;//[Offset: 0x32c, Size: 1]
	float AttenuationRadius;//[Offset: 0x330, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x334, Size: 1]
	void SetIntensityUnits(enum NewIntensityUnits);// 0x3c07370
	void SetAttenuationRadius(float NewRadius);// 0x3c072f0
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x3c071e0

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: CrowWorldMaterialParameterOverride
	MaterialParameterCollection* TargetCollection;//[Offset: 0x0, Size: 1]
	CrowWorldMaterialParameterScalar[] ScalarValues;//[Offset: 0x8, Size: 1]
	CrowWorldMaterialParameterVector[] VectorValues;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldMaterialParameterScalar
	FName ParameterName;//[Offset: 0x0, Size: 1]
	float DefaultValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldMaterialParameterVector
	FName ParameterName;//[Offset: 0x0, Size: 1]
	LinearColor DefaultValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldPreloadConfig.DataAsset.Object
	CrowWorldPreloadGroup[] PreloadGroups;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowWorldPreloadGroup
	FName GroupName;//[Offset: 0x0, Size: 1]
	SoftObjectPath[] AssetPaths;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldLightProbeSetting
	LinearColor LightColor;//[Offset: 0x0, Size: 1]
	float LightCheckDistance;//[Offset: 0x10, Size: 1]
	float SourceRadius;//[Offset: 0x14, Size: 1]
	float OverlapCheckRadius;//[Offset: 0x18, Size: 1]
	int OpenCheckExtent;//[Offset: 0x1c, Size: 1]
	int OpenCheckStep;//[Offset: 0x20, Size: 1]
	int OpenCheckUpperLimitPercent;//[Offset: 0x24, Size: 1]
	int OpenCheckThresholdPercent;//[Offset: 0x28, Size: 1]
	float MinDistanceToHitSurface;//[Offset: 0x2c, Size: 1]
	float MaxDistanceToHitSurface;//[Offset: 0x30, Size: 1]
	float IntensityMultiplyMin;//[Offset: 0x34, Size: 1]
	float IntensityMultiplyMax;//[Offset: 0x38, Size: 1]
	float AttenuationRadiusMin;//[Offset: 0x3c, Size: 1]
	float AttenuationRadiusMax;//[Offset: 0x40, Size: 1]
	float MaxDrawDistance;//[Offset: 0x44, Size: 1]
	float MaxDistanceFadeRange;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowWorldIndoorLightSetting
	float IntensityMultiply;//[Offset: 0x0, Size: 1]
	float AttenuationRadiusMultiply;//[Offset: 0x4, Size: 1]
	float SourceRadiusMultiply;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldSoundSetting
	float OcclusionRefreshInterval;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowWorldActorLODSetting
	float[] LODLevelCameraDistance;//[Offset: 0x0, Size: 1]
	bool UseMergedMeshInLOD3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int MinNumberOfCores;//[Offset: 0x14, Size: 1]
	int MaxNumberOfCores;//[Offset: 0x18, Size: 1]
	int MinCountPerThread;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowWorldDataCollectionAsset.DataAsset.Object
	BodySetup*[] BodySetupArray;//[Offset: 0x30, Size: 1]
	CrowWorldActorLayout[] LayoutArray;//[Offset: 0x40, Size: 1]
	CrowWorldSectorData[] SectorArray;//[Offset: 0x50, Size: 1]
	CrowWorldClusterData[] ClusterArray;//[Offset: 0x60, Size: 1]
	CrowWorldLandmarkData LandmarkData;//[Offset: 0x70, Size: 1]
	CrowWorldLinkedActorData[] LinkedActorsArray;//[Offset: 0x80, Size: 1]

--------------------------------
Class: CrowWorldActorLayout
	bool UseActorDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool UseWorldActorLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool SkipItemDestroyedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool DestroyedFlagInCluster;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool DestroyedFlagInLandmark;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool AutoDetectParentActor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	CrowWorldActorLayoutItem[] LayoutItems;//[Offset: 0x8, Size: 1]
	CrowWorldActorLayoutItemLookups LayoutItemLookups;//[Offset: 0x18, Size: 1]
	CrowWorldLayoutItemAnimation[] LayoutItemAnimations;//[Offset: 0x58, Size: 1]
	CrowWorldActorDestruction ActorDestruction;//[Offset: 0x68, Size: 1]
	CrowWorldActorLOD ActorLOD;//[Offset: 0x80, Size: 1]

--------------------------------
Class: CrowWorldActorLayoutItem
	bool bDestructible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDestroyParent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bDestroyOnVehicleOverlap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bDestroyByShockwave;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNeedDecalReceiver;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bInteraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bInteractionParent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bInteractionChild;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool AutoDetectParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool ShakeOnDamage;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool ClientOnlyDestroy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool ClientDecorationOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSoundOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bMergedIntoMeshLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bUseAnimation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	int16 OwnerLayoutItemIndex;//[Offset: 0x2, Size: 1]
	int16 AttachParentLayoutIndex;//[Offset: 0x4, Size: 1]
	FName AttachParentSocket;//[Offset: 0x8, Size: 1]
	Transform RelativeTransform;//[Offset: 0x10, Size: 1]
	CrowWorldAsset* WorldAsset;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowWorldAsset.Object

--------------------------------
Class: CrowWorldActorLayoutItemLookups
	int16[] LayoutToDestructibleFlag;//[Offset: 0x0, Size: 1]
	int16[] DestructibleFlagToLayout;//[Offset: 0x10, Size: 1]
	int16[] LayoutToDynamicStates;//[Offset: 0x20, Size: 1]
	int16[] DynamicStatesToLayout;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowWorldLayoutItemAnimation
	bool IsValidAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bHasStateHolderParent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bHasAnyGeometry;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bHasBody;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bHasTrigger1;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bHasTrigger2;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bHasChecker1;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bHasChecker2;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bHasTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bHasHinge1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bHasHinge2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bHasSlideTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	int16 StateHolderParentIndex;//[Offset: 0x2, Size: 1]
	FString LocalTextKey_Open;//[Offset: 0x8, Size: 1]
	FString LocalTextKey_Close;//[Offset: 0x18, Size: 1]
	Vector HingeLocation1;//[Offset: 0x28, Size: 1]
	Rotator HingeRotator1;//[Offset: 0x34, Size: 1]
	Vector HingeLocation2;//[Offset: 0x40, Size: 1]
	Rotator HingeRotator2;//[Offset: 0x4c, Size: 1]
	Vector SlideTarget;//[Offset: 0x58, Size: 1]
	BodySetup*[] BodySetups;//[Offset: 0x68, Size: 1]
	CrowWorldLayoutItemAnim AnimOpen;//[Offset: 0x78, Size: 1]
	CrowWorldLayoutItemAnim AnimClose;//[Offset: 0xa8, Size: 1]
	CrowWorldLayoutItemAnim AnimBlocked;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: CrowWorldLayoutItemAnim
	float Duration;//[Offset: 0x0, Size: 1]
	CurveFloat* AnimationCurve;//[Offset: 0x8, Size: 1]
	AkAudioEvent* Sound;//[Offset: 0x10, Size: 1]
	bool HasQuickAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float DurationQuick;//[Offset: 0x1c, Size: 1]
	CurveFloat* AnimationCurveQuick;//[Offset: 0x20, Size: 1]
	AkAudioEvent* SoundQuick;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowWorldActorDestruction
	float MaxHP;//[Offset: 0x0, Size: 1]
	class CrowWorldDamageCheckerBase* DamageChecker;//[Offset: 0x8, Size: 1]
	CrowWorldDestructionAUD* DestructionAUD;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWorldDamageCheckerBase.Object

--------------------------------
Class: CrowWorldDestructionAUD.AssetUserData.Object
	StaticMesh* RemainMesh;//[Offset: 0x28, Size: 1]
	MaterialInterface*[] RemainMeshMaterialOverrides;//[Offset: 0x30, Size: 1]
	CrowWorldDestructionMeshData[] AdditionalRemainMesh;//[Offset: 0x40, Size: 1]
	FName RemainMeshCollisionProfileName;//[Offset: 0x50, Size: 1]
	StaticMesh* TemporalMesh;//[Offset: 0x58, Size: 1]
	MaterialInterface*[] TemporalMeshMaterialOverrides;//[Offset: 0x60, Size: 1]
	FName TemporalMeshCollisionProfileName;//[Offset: 0x70, Size: 1]
	bool UseCollapseByImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool UseExplosionByDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	CrowWorldDestructionSetting CollapseSetting;//[Offset: 0x80, Size: 1]
	CrowWorldDestructionSetting ExplosionSetting;//[Offset: 0x1c0, Size: 1]

--------------------------------
Class: CrowWorldDestructionMeshData
	StaticMesh* StaticMesh;//[Offset: 0x0, Size: 1]
	MaterialInterface*[] MaterialOverrides;//[Offset: 0x8, Size: 1]
	FName CollisionProfileName;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldDestructionSetting
	float DurationMin;//[Offset: 0x0, Size: 1]
	float DurationMax;//[Offset: 0x4, Size: 1]
	float ExplosionRadialDamage;//[Offset: 0x8, Size: 1]
	float ExplosionDamageRadius;//[Offset: 0xc, Size: 1]
	float ExplosionDamageDelay;//[Offset: 0x10, Size: 1]
	class CrowChainExplosionDamageType* ChainExplosionDamageType;//[Offset: 0x18, Size: 1]
	CrowWorldDestructionSimulation Simulation;//[Offset: 0x20, Size: 1]
	CrowWorldDestructionSimulationActor SimulationActor;//[Offset: 0xb0, Size: 1]
	CrowWorldDestructionFxStart FxStart;//[Offset: 0xc8, Size: 1]
	CrowWorldDestructionFxAttached FxAttached;//[Offset: 0xf0, Size: 1]
	CrowWorldDestructionFxHitGround FxHitGround;//[Offset: 0x110, Size: 1]

--------------------------------
Class: CrowChainExplosionDamageType.Object
	bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x11afca0

--------------------------------
Class: CrowWorldDestructionSimulation
	StaticMesh* SimulationSMC;//[Offset: 0x0, Size: 1]
	MaterialInterface*[] MaterialOverridesSMC;//[Offset: 0x8, Size: 1]
	float MassOverrideSMC;//[Offset: 0x18, Size: 1]
	SkeletalMesh* SimulationSKC;//[Offset: 0x20, Size: 1]
	FName[] SimulationBoneNames;//[Offset: 0x28, Size: 1]
	FName[] HideBoneNames;//[Offset: 0x38, Size: 1]
	MaterialInterface*[] MaterialOverridesSKC;//[Offset: 0x48, Size: 1]
	FName ImpulseSocket;//[Offset: 0x58, Size: 1]
	FName ImpulseTargetBone;//[Offset: 0x60, Size: 1]
	float ImpulseMagnitude;//[Offset: 0x68, Size: 1]
	FName CollisionProfileName;//[Offset: 0x6c, Size: 1]
	bool UseBreakingBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	FName[] BreakingBoneNames;//[Offset: 0x78, Size: 1]
	float BreakingBoneTime;//[Offset: 0x88, Size: 1]

--------------------------------
Class: CrowWorldDestructionSimulationActor
	class CrowWorldSimulationActor* SimulationActor;//[Offset: 0x0, Size: 1]
	FName CollisionProfileName;//[Offset: 0x8, Size: 1]
	float ImpulseMagnitude;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWorldSimulationActor.Actor.Object
	SceneComponent* SceneRoot;//[Offset: 0x220, Size: 1]
	SceneComponent* ImpactPoint;//[Offset: 0x228, Size: 1]
	bool UseMassMultiply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	float MassMultiply;//[Offset: 0x234, Size: 1]
	CrowWorldDestructionFxHitGround FxHitGroundSetting;//[Offset: 0x238, Size: 1]
	FXSystemComponent*[] FxComponents;//[Offset: 0x268, Size: 1]
	FName CollisionProfileName;//[Offset: 0x278, Size: 1]
	Vector ImpactLocation;//[Offset: 0x280, Size: 1]
	Vector ImpactNormal;//[Offset: 0x28c, Size: 1]
	float ImpulseMagnitude;//[Offset: 0x298, Size: 1]
	float PendingTime;//[Offset: 0x29c, Size: 1]
	float DestroyTime;//[Offset: 0x2a0, Size: 1]
	float ElapsedTime;//[Offset: 0x2a4, Size: 1]
	int CountHiddenSMC;//[Offset: 0x2a8, Size: 1]
	StaticMeshComponent*[] SMCList;//[Offset: 0x2b0, Size: 1]
	TimerHandle DestroyTimerHandle;//[Offset: 0x2c0, Size: 1]
	void OnSimulationComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult HitResult);// 0x11c4b40

--------------------------------
Class: CrowWorldDestructionFxHitGround
	FName GroundActorTag;//[Offset: 0x0, Size: 1]
	FName[] HitBoneNames;//[Offset: 0x8, Size: 1]
	FXSystemAsset* FxHitGound;//[Offset: 0x18, Size: 1]
	AkAudioEvent* SoundHitGround;//[Offset: 0x20, Size: 1]
	int MaxHitCount;//[Offset: 0x28, Size: 1]
	float HitCoolTime;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: CrowWorldDestructionFxStart
	FName FxSocketName;//[Offset: 0x0, Size: 1]
	FXSystemAsset* FxOnDestroyed;//[Offset: 0x8, Size: 1]
	AkAudioEvent* SoundDestroyed;//[Offset: 0x10, Size: 1]
	FXSystemAsset*[] FxOnDestroyedArray;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldDestructionFxAttached
	FName[] AttachSocketNames;//[Offset: 0x0, Size: 1]
	FXSystemAsset* FxAttachToSocket;//[Offset: 0x10, Size: 1]
	bool StopEmitterAfterHitGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldActorLOD
	float BoundingSphereRadius;//[Offset: 0x0, Size: 1]
	Vector BoundingSphereCenter;//[Offset: 0x4, Size: 1]
	float[] LODLevelCameraDistanceOverride;//[Offset: 0x10, Size: 1]
	CrowWorldActorMeshLOD[] MeshLODArray;//[Offset: 0x20, Size: 1]
	BitFlagArray[] LayoutItemShowFlags;//[Offset: 0x30, Size: 1]
	BitFlagArray[] MeshLODShowFlags;//[Offset: 0x40, Size: 1]
	BitFlagArray CameraDistanceOverrideFlags;//[Offset: 0x50, Size: 1]
	float[] CameraDistanceOverrides;//[Offset: 0x68, Size: 1]

--------------------------------
Class: CrowWorldActorMeshLOD
	int8 LODLevelMin;//[Offset: 0x0, Size: 1]
	int8 LODLevelMax;//[Offset: 0x1, Size: 1]
	StaticMesh* MeshLOD;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BitFlagArray
	int16 MaxFlagCount;//[Offset: 0x0, Size: 1]
	uint32[] FlagBlocks;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldSectorData
	uint32 SectorIndex;//[Offset: 0x0, Size: 1]
	uint32 ParentClusterIndex;//[Offset: 0x4, Size: 1]
	CrowWorldActorData[] ActorArray;//[Offset: 0x8, Size: 1]
	int16 ActorDestructibleFlagCount;//[Offset: 0x18, Size: 1]
	int16 LayoutItemDestructibleFlagCount;//[Offset: 0x1a, Size: 1]
	int16 LayoutItemDynamicStateCount;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowWorldActorData
	uint32 WorldActorIndex;//[Offset: 0x0, Size: 1]
	int16 ActorLayoutIndex;//[Offset: 0x4, Size: 1]
	int16 ActorDestructibleFlagLookupInSector;//[Offset: 0x6, Size: 1]
	int16 ActorDestructibleFlagLookupInCluster;//[Offset: 0x8, Size: 1]
	int16 ActorDestructibleFlagLookupInLandmark;//[Offset: 0xa, Size: 1]
	int16 DestructibleFlagOrigin;//[Offset: 0xc, Size: 1]
	int16 DynamicStateOrigin;//[Offset: 0xe, Size: 1]
	Transform WorldTransform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWorldClusterData
	uint32 ClusterIndex;//[Offset: 0x0, Size: 1]
	uint32[] SectorIndexArray;//[Offset: 0x8, Size: 1]
	uint32[] ActorIndexArray;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldLandmarkData
	uint32[] ActorIndexArray;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowWorldLinkedActorData
	uint32 ChildWorldActorIndex;//[Offset: 0x0, Size: 1]
	uint32 ParentWorldActorIndex;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowWorldTriggerCollisionSetting
	FName CollisionName_Body;//[Offset: 0x0, Size: 1]
	FName CollisionName_Activator;//[Offset: 0x8, Size: 1]
	FName CollisionName_Checker;//[Offset: 0x10, Size: 1]
	FName CollisionName_Trace;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldDataHandlerActorItem
	class Actor* ActorClass;//[Offset: 0x0, Size: 1]
	class CrowWorldDataActorCheckerBase* Checker;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldDataActorCheckerBase.Object

--------------------------------
Class: CrowWorldDataHandlerComponentItem
	class SceneComponent* ComponentClass;//[Offset: 0x0, Size: 1]
	class CrowWorldAsset* WorldAssetClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldAnimationInstance
	int8 DynamicState;//[Offset: 0x0, Size: 1]
	bool bIsValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bTriggersActivated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	Transform InitialRelativeTransform;//[Offset: 0x10, Size: 1]
	Transform InitialWorldTransform;//[Offset: 0x40, Size: 1]
	SceneComponent* LayoutItemComponent;//[Offset: 0x70, Size: 1]
	CrowWorldTrigger*[] TriggerComponents;//[Offset: 0x78, Size: 1]

--------------------------------
Class: CrowWorldAnimationState
	int16 LayoutItemIndex;//[Offset: 0x0, Size: 1]
	int16 DynamicStateIndex;//[Offset: 0x2, Size: 1]
	bool bAnimationFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bAnimateRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bAnimateLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	float TimeBegin;//[Offset: 0x8, Size: 1]
	float Duration;//[Offset: 0xc, Size: 1]
	CurveFloat* AnimationCurve;//[Offset: 0x10, Size: 1]
	Vector SlideLocationFrom;//[Offset: 0x18, Size: 1]
	Vector SlideLocationTo;//[Offset: 0x24, Size: 1]
	Vector HingeLocation;//[Offset: 0x30, Size: 1]
	Quat HingeRotationFrom;//[Offset: 0x40, Size: 1]
	Quat HingeRotationTo;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CrowWorldReplicationActor.Actor.Object
	SceneComponent* SceneRoot;//[Offset: 0x220, Size: 1]
	CrowWorldMapConfig* MapConfig;//[Offset: 0x228, Size: 1]
	CrowWorldGrid[] WorldGridArray;//[Offset: 0x230, Size: 1]
	CrowWorldSyncServerWorker* ServerWorker;//[Offset: 0x240, Size: 1]
	CrowWorldSyncClientWorker* FirstClientWorker;//[Offset: 0x248, Size: 1]
	CrowWorldClientObjects ClientObjects;//[Offset: 0x250, Size: 1]
	<PlayerController*,CrowWorldPlayerControllerInfo> ControllerInfos;//[Offset: 0x278, Size: 1]
	bool IsWaitingACK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool ReceivedUpdateLocationACK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	bool WaitingForLocationACK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 1]

--------------------------------
Class: CrowWorldGrid
	int8 GridLevel;//[Offset: 0x0, Size: 1]
	float GridSize;//[Offset: 0x4, Size: 1]
	float GridSizeHalf;//[Offset: 0x8, Size: 1]
	float HeightLimit;//[Offset: 0xc, Size: 1]
	Vector2D WorldOrigin2D;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWorldSyncServerWorker.Object
	World* World;//[Offset: 0x30, Size: 1]
	CrowWorldMapConfig* MapConfig;//[Offset: 0x38, Size: 1]
	CrowWorldDataCollectionAsset* WorldDataAsset;//[Offset: 0x40, Size: 1]
	CrowWorldReplicationActor* ReplicationActor;//[Offset: 0x48, Size: 1]
	CrowWorldTerrainSetup* WorldTerrainSetup;//[Offset: 0x50, Size: 1]
	CrowWorldGrid[] WorldGridArray;//[Offset: 0x58, Size: 1]
	CrowWorldReplicationLandmark LandmarkData;//[Offset: 0x68, Size: 1]
	<uint32,CrowWorldReplicationCluster> Clusters;//[Offset: 0x80, Size: 1]
	<uint32,CrowWorldReplicationSector> Sectors;//[Offset: 0xd0, Size: 1]
	<uint32,CrowWorldActor*> ActorInstances;//[Offset: 0x120, Size: 1]
	<CrowWorldReplicationController*,CrowWorldSyncServerPlayerState> SyncPlayerStates;//[Offset: 0x170, Size: 1]
	<uint32,CrowWorldSyncServerControllerContainer> SectorStates;//[Offset: 0x1c0, Size: 1]
	<uint32,CrowWorldSyncServerControllerContainer> ClusterStates;//[Offset: 0x210, Size: 1]
	uint32[] TempGridIndexes;//[Offset: 0x260, Size: 1]
	CrowWorldReplicationController*[] TempArrayControllers;//[Offset: 0x270, Size: 1]
	CrowWorldDestructionSyncCache DestructionSyncCache;//[Offset: 0x280, Size: 1]
	CrowWorldDestructionLink DestructionLink;//[Offset: 0x2e8, Size: 1]

--------------------------------
Class: CrowWorldTerrainSetup.Object
	World* World;//[Offset: 0x28, Size: 1]
	<LevelStreaming*> ActiveStreamingLevels;//[Offset: 0x30, Size: 1]
	LevelStreaming*[] LoadedLevelsCached;//[Offset: 0x80, Size: 1]
	<InstancedFoliageActor*> HiddenIngameFoliageActors;//[Offset: 0x90, Size: 1]
	void UpdateVisiblity(enum InVisibility);// 0x11c4e70
	void UpdateFoliageVisibility(enum InVisibility);// 0x11c4de0
	void UpdateActiveStreamingLevels();// 0x11c4dc0
	void Tick(float DeltaTime);// 0x11c4d40
	void OnSubLevelUnloaded();// 0x11c4d20
	void OnSubLevelLoaded();// 0x11c4d20
	void OnLevelUnloaded(LevelStreaming* InLevelStreaming);// 0x11c4ab0
	void OnLevelLoaded(LevelStreaming* InLevelStreaming);// 0x11c4a20
	void Initialize(World* InWorld);// 0x11c4990
	void HideLandscapeSpline(LandscapeProxy* InLandscapeProxy);// 0x11c4900
	void HideFoliage(InstancedFoliageActor* InIFA);// 0x11c4870

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: CrowWorldReplicationLandmark
	BitFlagArray ActorDestroyedFlags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowWorldReplicationCluster
	uint32 ClusterIndex;//[Offset: 0x4, Size: 1]
	BitFlagArray ActorDestroyedFlags;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldReplicationSector
	uint32 SectorIndex;//[Offset: 0x4, Size: 1]
	BitFlagArray ActorDestroyedFlags;//[Offset: 0x8, Size: 1]
	BitFlagArray LayoutItemDestroyedFlags;//[Offset: 0x20, Size: 1]
	int8[] LayoutItemDynamicStates;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowWorldSyncServerPlayerState
	uint32[] ActiveSectors;//[Offset: 0x0, Size: 1]
	uint32[] ActiveClusters;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWorldReplicationController.Actor.Object
	SceneComponent* SceneRoot;//[Offset: 0x220, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x228, Size: 1]
	CrowWorldReplicationActor* ReplicationActor;//[Offset: 0x230, Size: 1]
	void Server_UpdateLocationSyn(const Vector InRealWorldLocation);// 0x11c16b0
	void Server_TriggerDoorOpen(uint32 InWorldActorIndex, int16 InLayoutItemIndex, int8 InTriggerIndex, byte InTriggerActionType, Pawn* InstigatorPawn);// 0x11c14d0
	void Server_TriggerDoorClose(uint32 InWorldActorIndex, int16 InLayoutItemIndex, byte InTriggerActionType, Pawn* InstigatorPawn);// 0x11c1340
	void Server_InitControllerSyn();// 0x11c12f0
	void Client_UpdateSyncDataZip(const Vector InServerViewLocation, int InUncompressedSize, const byte[] InCompressedBuffer);// 0x11c10f0
	void Client_UpdateSyncData(const Vector InServerViewLocation, const CrowWorldReplicationSyncData InSyncData);// 0x11c0f30
	void Client_UpdateLocationAck(const Vector InRealWorldLocation, int ResultCode);// 0x11c0e30
	void Client_UpdateGlobalDataZip(int InUncompressedSize, const byte[] InCompressedBuffer);// 0x11c0d20
	void Client_UpdateGlobalData(const CrowWorldReplicationGlobalData InGlobalData);// 0x11c0c50
	void Client_TriggerDoorOpened(uint32 InWorldActorIndex, int16 InLayoutItemIndex, int8 InTriggerIndex, byte InTriggerActionType);// 0x11c0ac0
	void Client_TriggerDoorClosed(uint32 InWorldActorIndex, int16 InLayoutItemIndex, byte InTriggerActionType);// 0x11c0980
	void Client_SectorDestroyedLayoutItemsZip(int InUncompressedSize, const byte[] InCompressedBuffer);// 0x11c0870
	void Client_SectorDestroyedLayoutItems(const CrowWorldDestructionSyncData InDestructionSyncData);// 0x11c0740
	void Client_RadialImpactForDebris(const Vector_NetQuantize InOrigin, float InMaxRadius);// 0x11c0640
	void Client_InitControllerAck(float InServerTime, const Vector InServerViewLocation, bool IsServerWorldInitialized, int ResultCode);// 0x11c04a0
	void Client_DrawDebugLine(const Vector InLocationFrom, const Vector InLocationTo, Color Color, float Duration, int Priority, float Thickness);// 0x11c0270
	void Client_DrawDebugBox(const Vector InLocation, const Vector InExtent, Color Color, float Duration, int Priority, float Thickness);// 0x11c0040
	void Client_DestroyedWorldActor(uint32 InWorldActorIndex, byte InCrowWorldDestructionCause, const Vector_NetQuantize InImpactPoint, const Vector_NetQuantizeNormal InImpactNormal);// 0x11bfea0
	void Client_DestroyedSingleLayoutItem(uint32 InWorldActorIndex, int16 InDestroyedLayoutItemIndex, byte InCrowWorldDestructionCause, const Vector_NetQuantize InImpactPoint, const Vector_NetQuantizeNormal InImpactNormal);// 0x11bfcb0
	void Client_DestroyedMultipleWorldActors(const uint32[] InWorldActorIndexArray, const Vector InDamageOrigin);// 0x11bfba0
	void Client_DestroyedMultipleLayoutItems(uint32 InWorldActorIndex, const int16[] InDestroyedLayoutItemIndexArray, byte InCrowWorldDestructionCause, const Vector_NetQuantize InImpactPoint, const Vector_NetQuantizeNormal InImpactNormal);// 0x11bf9c0
	void Client_ClearLocationSyn(const Vector InRealWorldLocation);// 0x11bf910
	void Client_BeginShakeLayoutItem(uint32 InWorldActorIndex, int16 InLayoutItemIndex);// 0x11bf800

--------------------------------
Class: CrowWorldReplicationSyncData
	uint32[] SectorDropArray;//[Offset: 0x0, Size: 1]
	uint32[] ClusterDropArray;//[Offset: 0x10, Size: 1]
	CrowWorldReplicationCluster[] ClusterArray;//[Offset: 0x20, Size: 1]
	CrowWorldReplicationSector[] SectorArray;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowWorldReplicationGlobalData
	CrowWorldReplicationLandmark LandmarkData;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowWorldDestructionSyncData
	Vector Origin;//[Offset: 0x0, Size: 1]
	float MaxRadius;//[Offset: 0xc, Size: 1]
	CrowWorldDestructionSyncDataActor[] ActorDataArray;//[Offset: 0x10, Size: 1]
	uint32[] FullyDestroyedActors;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowWorldDestructionSyncDataActor
	uint32 WorldActorIndex;//[Offset: 0x0, Size: 1]
	int16[] DestroyedLayoutItems;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldSyncServerControllerContainer
	<CrowWorldReplicationController*,int> Controllers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowWorldDestructionSyncCache
	bool bCacheInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	Vector Origin;//[Offset: 0x4, Size: 1]
	float DamageRadius;//[Offset: 0x10, Size: 1]
	float ShockwaveRadius;//[Offset: 0x14, Size: 1]
	<uint32,CrowWorldDestructionActorItem> SyncCacheActors;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldDestructionActorItem
	CrowWorldActor* WorldActor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldDestructionLink
	<uint32,uint32> LinkedParentActors;//[Offset: 0x8, Size: 1]
	<uint32,CrowWorldDestructionLinkInfo> DestructionLinkInfos;//[Offset: 0x58, Size: 1]
	uint32[] WorldActorIndexArray;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CrowWorldDestructionLinkInfo
	int IndexOrigin;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowWorldSyncClientWorker.Object
	bool bInitControllerRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bEnabledVisualConfig;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bIsPreloadingAssetWaiting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsPreloadingAssetFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIsLoadingAssetAsync;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIsLoadingAssetFinished;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bEnabledRayTracing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bForceBuildAtOnce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bReceivedAnySyncData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	int ClientFrameKey;//[Offset: 0x2c, Size: 1]
	float ForceBuildWorldTime;//[Offset: 0x30, Size: 1]
	World* World;//[Offset: 0x38, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x40, Size: 1]
	CrowWorldMapConfig* MapConfig;//[Offset: 0x48, Size: 1]
	CrowWorldDataCollectionAsset* WorldDataAsset;//[Offset: 0x50, Size: 1]
	CrowWorldReplicationActor* ReplicationActor;//[Offset: 0x58, Size: 1]
	CrowWorldReplicationController* ReplicationController;//[Offset: 0x60, Size: 1]
	CrowWorldGrid SectorGrid;//[Offset: 0x68, Size: 1]
	CrowWorldLODUpdater* LODUpdater;//[Offset: 0x80, Size: 1]
	CrowWorldOcclusion* WorldOcclusion;//[Offset: 0x88, Size: 1]
	CrowWorldFoliage* WorldFoliage;//[Offset: 0x90, Size: 1]
	CrowWorldTerrainSetup* WorldTerrainSetup;//[Offset: 0x98, Size: 1]
	CrowWorldLightLimiter* LightLimiter;//[Offset: 0xa0, Size: 1]
	FXSystemComponent*[] FollowingFxComponents;//[Offset: 0xa8, Size: 1]
	CrowWorldMaterialParameterOverride[] MPCBackups;//[Offset: 0xb8, Size: 1]
	CrowWorldMaterialParameterOverride[] MPCRestores;//[Offset: 0xc8, Size: 1]
	<uint32,CrowWorldSectorData> SectorDataAssets;//[Offset: 0xd8, Size: 1]
	<uint32,CrowWorldClusterData> ClusterDataAssets;//[Offset: 0x128, Size: 1]
	CrowWorldLandmarkData LandmarkDataAsset;//[Offset: 0x178, Size: 1]
	<Object*,int> AssetReferenceCounts;//[Offset: 0x188, Size: 1]
	SoftObjectPath[] AssetPathToLoad;//[Offset: 0x1d8, Size: 1]
	<SoftObjectPath,Object*> AssetReferences;//[Offset: 0x1e8, Size: 1]
	SoftObjectPath[] PreloadPathToLoad;//[Offset: 0x238, Size: 1]
	<SoftObjectPath,Object*> PreloadReferences;//[Offset: 0x248, Size: 1]
	CrowWorldReplicationLandmark ActiveLandmarkData;//[Offset: 0x298, Size: 1]
	<uint32,CrowWorldClientCluster> ActiveClusters;//[Offset: 0x2b0, Size: 1]
	<uint32,CrowWorldClientSector> ActiveSectors;//[Offset: 0x300, Size: 1]
	<uint32,CrowWorldActor*> ActiveActors;//[Offset: 0x350, Size: 1]
	int DebugFrameCount;//[Offset: 0x3a0, Size: 1]
	CrowWorldReplicationCluster[] ReceivedClusters;//[Offset: 0x3a8, Size: 1]
	CrowWorldReplicationSector[] ReceivedSectors;//[Offset: 0x3b8, Size: 1]
	CrowWorldClientDropClusterIndex[] ReceivedDropClusters;//[Offset: 0x3c8, Size: 1]
	CrowWorldClientDropSectorIndex[] ReceivedDropSectors;//[Offset: 0x3d8, Size: 1]
	CrowWorldActor*[] DropClusterActorQueue;//[Offset: 0x3e8, Size: 1]
	CrowWorldActor*[] DropSectorActorQueue;//[Offset: 0x3f8, Size: 1]
	CrowWorldActor* ConstructingWorldActor;//[Offset: 0x408, Size: 1]
	uint32 GeneratingSectorIndex;//[Offset: 0x410, Size: 1]
	CrowWorldClientClusterActorKey[] ClusterActorKeyArray;//[Offset: 0x418, Size: 1]
	int16 GeneratingClusterActorKeyCursor;//[Offset: 0x428, Size: 1]
	int16 GeneratingSectorActorCursor;//[Offset: 0x42a, Size: 1]
	int16 CollectAssetLayoutCursor;//[Offset: 0x42c, Size: 1]
	CrowWorldDestructionLink DestructionLink;//[Offset: 0x430, Size: 1]

--------------------------------
Class: CrowWorldLODUpdater.Object
	int CoreCountAvailable;//[Offset: 0x28, Size: 1]
	int MinNumberOfCores;//[Offset: 0x2c, Size: 1]
	int MinCountPerThread;//[Offset: 0x30, Size: 1]
	float[] LODLevelCameraDistance;//[Offset: 0x38, Size: 1]
	PlayerController* PlayerController;//[Offset: 0xe0, Size: 1]
	CrowWorldLODState[] WorldActorLODStates;//[Offset: 0xe8, Size: 1]
	CrowWorldLODData[] WorldActorLODDatas;//[Offset: 0xf8, Size: 1]
	<uint32,int> WorldActorLODStateIndexes;//[Offset: 0x108, Size: 1]
	int16[] StateIndexPool;//[Offset: 0x158, Size: 1]

--------------------------------
Class: CrowWorldLODState
	CrowWorldActor* WorldActor;//[Offset: 0x28, Size: 1]
	CrowWorldAnimator* WorldAnimator;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowWorldLODData
	BitFlagArray[] LayoutItemShowFlags;//[Offset: 0x0, Size: 1]
	BitFlagArray[] MeshLODShowFlags;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWorldOcclusion.Object
	bool IsGridOcclusionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool IsVisibleGridInitialized;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool IsPersistentLevelInitialized;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	World* World;//[Offset: 0x30, Size: 1]
	CrowWorldMapConfig* MapConfig;//[Offset: 0x38, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x40, Size: 1]
	float UpdateDelay;//[Offset: 0x48, Size: 1]
	Vector ControllerLocation;//[Offset: 0x4c, Size: 1]
	<LevelStreaming*,CrowWorldLevelStreamData> ActiveStreamingLevels;//[Offset: 0x58, Size: 1]
	CrowWorldGrid GridOcclusion;//[Offset: 0xa8, Size: 1]
	uint32 CurrentGridIndex;//[Offset: 0xc0, Size: 1]
	Box CurrentGridBox;//[Offset: 0xc4, Size: 1]
	<uint32> VisibleGridIndexes;//[Offset: 0xe0, Size: 1]
	LevelStreaming*[] LoadedLevelsCached;//[Offset: 0x130, Size: 1]
	void OnSubLevelUnloaded();// 0x11c12d0
	void OnSubLevelLoaded();// 0x11c12d0

--------------------------------
Class: CrowWorldLevelStreamData
	Actor*[] LevelActors;//[Offset: 0x0, Size: 1]
	<uint32,CrowWorldGridActors> GridActors;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWorldGridActors
	bool bNearGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	StaticMeshComponent*[] SMCList;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldFoliage.Object
	bool IsWorldFoliageEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	World* World;//[Offset: 0x30, Size: 1]
	CrowWorldMapConfig* MapConfig;//[Offset: 0x38, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x40, Size: 1]
	<LevelStreaming*> ActiveStreamingLevels;//[Offset: 0x48, Size: 1]
	LevelStreaming*[] LoadedLevelsCached;//[Offset: 0x98, Size: 1]
	void OnSubLevelUnloaded();// 0x11b8bc0
	void OnSubLevelLoaded();// 0x11b8bc0

--------------------------------
Class: CrowWorldLightLimiter.Object
	PlayerController* PlayerController;//[Offset: 0x28, Size: 1]
	<CrowWorldActor*,CrowWorldActorLightInfo> ActorLightInfoMap;//[Offset: 0x30, Size: 1]
	<LightComponent*> LightArrayCastingShadow;//[Offset: 0x80, Size: 1]
	<LightComponent*> LightArrayAll;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: CrowWorldActorLightInfo
	CrowWorldActorLightItem[] LightArray;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowWorldActorLightItem
	LightComponent* LightComponent;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWorldClientCluster
	CrowWorldReplicationCluster ClusterData;//[Offset: 0x0, Size: 1]
	<uint32,CrowWorldActor*> WorldActors;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowWorldClientSector
	CrowWorldReplicationSector SectorData;//[Offset: 0x8, Size: 1]
	<uint32,CrowWorldActor*> WorldActors;//[Offset: 0x50, Size: 1]
	<uint32,CrowWorldActor*> ClusterActors;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: CrowWorldClientDropClusterIndex
	uint32 ClusterIndex;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowWorldClientDropSectorIndex
	uint32 SectorIndex;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowWorldClientClusterActorKey
	uint32 SectorIndex;//[Offset: 0x0, Size: 1]
	int ActorLoopIndex;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowWorldClientObjects
	CrowWorldLODUpdater* LODUpdater;//[Offset: 0x0, Size: 1]
	CrowWorldOcclusion* WorldOcclusion;//[Offset: 0x8, Size: 1]
	CrowWorldFoliage* WorldFoliage;//[Offset: 0x10, Size: 1]
	CrowWorldTerrainSetup* WorldTerrainSetup;//[Offset: 0x18, Size: 1]
	CrowWorldLightLimiter* LightLimiter;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CrowWorldPlayerControllerInfo
	float NextUpdateSynTime;//[Offset: 0x0, Size: 1]
	byte IsValidController;//[Offset: 0x4, Size: 1]
	byte bServerInitAck;//[Offset: 0x5, Size: 1]
	uint32 SectorIndex;//[Offset: 0x8, Size: 1]
	uint32 ClusterIndex;//[Offset: 0xc, Size: 1]
	Box SectorBox;//[Offset: 0x10, Size: 1]
	Box ClusterBox;//[Offset: 0x2c, Size: 1]
	Vector LastUpdateSynLocation;//[Offset: 0x48, Size: 1]
	CrowWorldReplicationController* ReplicationController;//[Offset: 0x58, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x60, Size: 1]
	CrowWorldSyncClientWorker* ClientWorker;//[Offset: 0x68, Size: 1]

--------------------------------
Class: CrowWorldActorLayoutItemInstance
	bool bDestroyedInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDestructibleInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bDestroyParent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bDestroyOnVehicleOverlap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bDestroyByShockwave;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNeedDecalReceiver;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bInteractiveInstance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bComponentVisibility;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bShakeOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bClientOnlyDestroy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSoundOccluder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bLightComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bLightCastShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bFxSystemComponent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bMergedIntoMeshLOD;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bUseAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	int8 DynamicState;//[Offset: 0x2, Size: 1]
	int16 OwnerLayoutItemIndex;//[Offset: 0x4, Size: 1]
	int16 AttachParentIndex;//[Offset: 0x6, Size: 1]
	FName AttachParentSocketName;//[Offset: 0x8, Size: 1]
	float HealthPoint;//[Offset: 0x10, Size: 1]
	float RelayDamageRatioToParent;//[Offset: 0x14, Size: 1]
	float OverlapImpactResistRatio;//[Offset: 0x18, Size: 1]
	float OverlapImpactResistMax;//[Offset: 0x1c, Size: 1]
	SceneComponent* Component;//[Offset: 0x20, Size: 1]
	CrowWorldSMC* WorldSMC;//[Offset: 0x28, Size: 1]
	StaticMeshComponent* DecalReceiver;//[Offset: 0x30, Size: 1]
	PrimitiveComponent*[] RemainMeshComponents;//[Offset: 0x38, Size: 1]
	CrowWorldBreakableAUD* BreakableAUD;//[Offset: 0x48, Size: 1]
	CrowWorldAnimationAUD* AnimationAUD;//[Offset: 0x50, Size: 1]
	CrowWorldDestructionAUD* DestructionAUD;//[Offset: 0x58, Size: 1]
	CrowWorldDamageCheckerBase* DamageChecker;//[Offset: 0x60, Size: 1]

--------------------------------
Class: CrowWorldBreakableAUD.AssetUserData.Object
	class CrowWorldDamageCheckerBase* DamageChecker;//[Offset: 0x28, Size: 1]
	bool Unbreakable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool TreatAsTerrain;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool DestroyParent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool AutoDetectParent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool DestroyOnVehicleOverlap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	bool DestroyOnThrowWeaponHit;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 1]
	bool DestroyOnCharacterAnimation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 1]
	bool SlideOnBeginVaultAction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 1]
	bool DestroyByShockwave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool NeedDecalReceiver;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool NetworkSyncToLargeArea;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31, Size: 1]
	bool VehicleWheelCrushDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 1]
	bool ShakeOnDamage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	bool PreventAttachChild;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 1]
	float AttachChildDistance;//[Offset: 0x34, Size: 1]
	bool DestroyAttachChildOnImpactCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool DestroyAttachChildOnExplosion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	float ShakeDuration;//[Offset: 0x3c, Size: 1]
	float ShakeOffset;//[Offset: 0x40, Size: 1]
	bool ClientOnlyDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float RelayDamageRatioToParent;//[Offset: 0x48, Size: 1]
	float MaxHP;//[Offset: 0x4c, Size: 1]
	float OverlapImpactResistRatio;//[Offset: 0x50, Size: 1]
	float OverlapImpactResistMax;//[Offset: 0x54, Size: 1]
	float DecalScaleMultiply;//[Offset: 0x58, Size: 1]

--------------------------------
Class: CrowWorldActorDestructionState
	float ActorHealthPoint;//[Offset: 0x0, Size: 1]
	float ActorMaxHP;//[Offset: 0x4, Size: 1]
	CrowWorldDamageCheckerBase* ActorDamageChecker;//[Offset: 0x8, Size: 1]
	CrowWorldDestructionAUD* ActorDestructionAUD;//[Offset: 0x10, Size: 1]
	PrimitiveComponent*[] RemainMeshComponents;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWorldActorLODState
	StaticMeshComponent* LODMeshComponent;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowTriggerOverlapInfo
	FName ID;//[Offset: 0x0, Size: 1]
	PrimitiveComponent* OverlappedComponent;//[Offset: 0x8, Size: 1]
	Actor* OtherActor;//[Offset: 0x10, Size: 1]
	PrimitiveComponent* OtherComp;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TriggerCheckDistance
	bool UseCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ShapeComponent* NearColiision;//[Offset: 0x8, Size: 1]
	ShapeComponent* FarColiision;//[Offset: 0x10, Size: 1]
	TriggerCollisionInfo[] CustomCollisions;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TriggerCollisionInfo
	FName ID;//[Offset: 0x0, Size: 1]
	FName TargetCollisionName;//[Offset: 0x8, Size: 1]
	PrimitiveComponent* TargetCollision;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowTriggerCommandBase.ActorComponent.Object
	CrowTriggerComponent* TriggerComp;//[Offset: 0xb0, Size: 1]
	bool OnEventOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]

--------------------------------
Class: TriggerCheckMouseOver
	TriggerCollisionInfo[] Targets;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TriggerInput
	FName KeyName;//[Offset: 0x0, Size: 1]
	FName KeyName02;//[Offset: 0x8, Size: 1]
	float PressTime;//[Offset: 0x10, Size: 1]
	float PressTime02;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CrowSupplyAmmoActor.Actor.Object
	CrowSupplyAmmoInfo[] ArraySupplyAmmoInfo;//[Offset: 0x220, Size: 1]
	BoxComponent* BoxComponent;//[Offset: 0x230, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x238, Size: 1]
	FName SupplyBoxTableKey;//[Offset: 0x240, Size: 1]
	enum SupplyBoxType;//[Offset: 0x248, Size: 1]
	uint32 MaxSupplyCount;//[Offset: 0x24c, Size: 1]
	AkAudioEvent* UseSound;//[Offset: 0x250, Size: 1]
	float LifeTime;//[Offset: 0x258, Size: 1]
	float CoolTime;//[Offset: 0x25c, Size: 1]
	float HP;//[Offset: 0x260, Size: 1]
	ParticleSystem* DestroyEffect;//[Offset: 0x268, Size: 1]
	AkAudioEvent* DestroySound;//[Offset: 0x270, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfo;//[Offset: 0x278, Size: 1]
	byte BoxTeam;//[Offset: 0x300, Size: 1]
	uint64 OwnerServerKey;//[Offset: 0x308, Size: 1]
	uint32 RemainSupplyCount;//[Offset: 0x310, Size: 1]
	CrowPlayerStateBase* InstallPlayerState;//[Offset: 0x318, Size: 1]
	void MulticastDetroyed();// 0x1a7dc00

--------------------------------
Class: CrowSupplyAmmoInfo
	FString AmmoTextIndex;//[Offset: 0x0, Size: 1]
	bool IsPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float IncreaseValue;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CrowStatusBreathWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	float BreathFadeInTime;//[Offset: 0x348, Size: 1]
	float BreathFadeOutTime;//[Offset: 0x34c, Size: 1]
	FName AniBreathEmptyName;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Breath;//[Offset: 0x358, Size: 1]
	CrowProgressBar* PB_Breath;//[Offset: 0x360, Size: 1]
	CrowWidgetTweenAlpha* BreathTweenAlpha;//[Offset: 0x368, Size: 1]
	CrowWidgetTweenAlpha* FadeTweenAlpha;//[Offset: 0x370, Size: 1]
	WidgetAnimation* AniBreathEmpty;//[Offset: 0x378, Size: 1]

--------------------------------
Class: CrowSoundStateComponent.ActorComponent.Object
	float SpaceCheckInterval;//[Offset: 0xb0, Size: 1]
	SoundStateInfo[] SoundStateInfos;//[Offset: 0xb8, Size: 1]
	enum CurrentSoundState;//[Offset: 0xc8, Size: 1]
	enum CurrentCCSoundStateType;//[Offset: 0xc9, Size: 1]
	float TinnitusMaxTime;//[Offset: 0xcc, Size: 1]
	float TinnitusTime;//[Offset: 0xd0, Size: 1]
	float TinnitusFactorScale;//[Offset: 0xd4, Size: 1]

--------------------------------
Class: SoundStateInfo
	enum SoundStateType;//[Offset: 0x0, Size: 1]
	FName StateGroup;//[Offset: 0x4, Size: 1]
	FName StateName;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowCharacterFallsComponent.CrowActorComponentBase.ActorComponent.Object
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	CrowCharacterPawn* CharacterPawn;//[Offset: 0xc8, Size: 1]
	CrowCharacterMovement* CrowMovementComp;//[Offset: 0xd0, Size: 1]
	enum CurrentVehicleType;//[Offset: 0xd8, Size: 1]
	enum DamageType;//[Offset: 0xd9, Size: 1]
	float Damage;//[Offset: 0xdc, Size: 1]
	Vector StartPosition;//[Offset: 0xe0, Size: 1]
	byte SurfaceType;//[Offset: 0xec, Size: 1]
	CrowPassenger* GetPassenger();// 0x1a3ebb0

--------------------------------
Class: CrowCharacterMovement.CLSCharacterMovement.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float RotationRateMultiplier;//[Offset: 0xb6c, Size: 1]
	CrowMovementSetting MovementSetting;//[Offset: 0xb70, Size: 1]
	float DiveImpactDelayElapsed;//[Offset: 0xbd4, Size: 1]
	bool bWantsToWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbd8, Size: 1]
	bool bSaveAimState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd9, Size: 1]
	enum FallType;//[Offset: 0xbda, Size: 1]
	float TargetTimeLandDelay;//[Offset: 0xbdc, Size: 1]
	float ElapsedTimeLandDelay;//[Offset: 0xbe0, Size: 1]
	float PenetrationOverlapCheckInflation;//[Offset: 0xbe8, Size: 1]
	CrowCharacterPawn* CachedCrowCharacter;//[Offset: 0xbf0, Size: 1]
	CrowProneCapsuleComponent* ProneUpdatedComponent;//[Offset: 0xbf8, Size: 1]
	PrimitiveComponent* LastBlockedComponent;//[Offset: 0xc00, Size: 1]
	PrimitiveComponent* LastMovementBase;//[Offset: 0xc08, Size: 1]
	CrowCharacterMovementWaterInfo WaterInfo;//[Offset: 0xc10, Size: 1]
	uint32 ReceivedWorldActorIndex;//[Offset: 0xc70, Size: 1]
	int16 ReceivedLayoutItemIndex;//[Offset: 0xc74, Size: 1]
	bool UseReceivedIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc76, Size: 1]
	Vector[] LocationRecords;//[Offset: 0xc78, Size: 1]

--------------------------------
Class: CrowMovementSetting
	float JumpRatioHorizontal;//[Offset: 0x0, Size: 1]
	float MaxFallVelocityZ;//[Offset: 0x4, Size: 1]
	float LandImpactVelocityRatio;//[Offset: 0x8, Size: 1]
	float FlailStartVelocity;//[Offset: 0xc, Size: 1]
	float LandRecoveryOnDefault;//[Offset: 0x10, Size: 1]
	float LandDelayIgnoreHeight;//[Offset: 0x14, Size: 1]
	float LandRecoveryOnFlail;//[Offset: 0x18, Size: 1]
	float CantActionRecovery;//[Offset: 0x1c, Size: 1]
	float SwimSpeed;//[Offset: 0x20, Size: 1]
	float FastSwimSpeed;//[Offset: 0x24, Size: 1]
	float SwimmingAcceleration;//[Offset: 0x28, Size: 1]
	float DiveAcceleration;//[Offset: 0x2c, Size: 1]
	float SwimmingDeceleration;//[Offset: 0x30, Size: 1]
	float BuoyancySurface;//[Offset: 0x34, Size: 1]
	float BuoyancyUnderwater;//[Offset: 0x38, Size: 1]
	float DiveImpactDelayTime;//[Offset: 0x3c, Size: 1]
	float DiveImpactBuoyancy;//[Offset: 0x40, Size: 1]
	float DiveImpactDelayDecel;//[Offset: 0x44, Size: 1]
	float DiveImpactSpeedXY;//[Offset: 0x48, Size: 1]
	float DiveImpactSpeedZ;//[Offset: 0x4c, Size: 1]
	float CrouchLimitDepth;//[Offset: 0x50, Size: 1]
	float ProneLimitDepth;//[Offset: 0x54, Size: 1]
	float DrownedMoveDelay;//[Offset: 0x58, Size: 1]
	float DrownedMoveSpeed;//[Offset: 0x5c, Size: 1]
	float DrowendBuoyancy;//[Offset: 0x60, Size: 1]

--------------------------------
Class: CrowProneCapsuleComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void OnBeginOverlapCallback(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1b04730

--------------------------------
Class: CrowCharacterMovementWaterInfo
	Actor* WaterActor;//[Offset: 0x18, Size: 1]
	PhysicsVolume* WaterPhysicsVolume;//[Offset: 0x20, Size: 1]
	CrowVehicleOceanTracker* OceanTracker;//[Offset: 0x38, Size: 1]
	Actor* OceanActor;//[Offset: 0x40, Size: 1]
	PhysicsVolume* OceanPhysicsVolume;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowPassenger.ActorComponent.Object
	CrowPlayerControllerBase* PlayerController;//[Offset: 0xb0, Size: 1]
	CrowVehiclePawn* VehiclePawn;//[Offset: 0xb8, Size: 1]
	Pawn* PassengerPawn;//[Offset: 0xc0, Size: 1]
	int ClientSeatIndex;//[Offset: 0xc8, Size: 1]
	CrowPassengerManager* ClientPassengerManager;//[Offset: 0xd0, Size: 1]
	FName VehicleName;//[Offset: 0xd8, Size: 1]
	enum VehicleIdentity;//[Offset: 0xe0, Size: 1]
	CrowPassengerInput* PassengerInput;//[Offset: 0xe8, Size: 1]
	enum DefaultCameraMode;//[Offset: 0xf0, Size: 1]
	enum CurrentCameraMode;//[Offset: 0xf1, Size: 1]
	bool bIsChangedCameraModeAtAimView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 1]
	TimerHandle WaitTimeWhenChangingSeatHandler;//[Offset: 0xf8, Size: 1]
	CrowVehiclePawn* LastVehiclePawn;//[Offset: 0x100, Size: 1]
	CrowGameStateBase* GameState;//[Offset: 0x108, Size: 1]
	void Use();// 0x1ad9640
	void ServerGetOff();// 0x1ad9510
	void Server_BreakWindow(CrowVehiclePawn* InVehicle, const FName InWindowBoneName);// 0x1ad9530
	void RequestUseByIndex(CrowVehiclePawn* Vehicle, int SeatIndex);// 0x1ad9330
	void RequestUseAny(CrowVehiclePawn* Vehicle);// 0x1ad9270
	void RequestUse(CrowVehiclePawn* Vehicle, FName SeatName);// 0x1ad9160
	void RequestUpdateAddedInputRotation(byte SpringArmId, byte ClientRoll, uint32 View);// 0x1ad9050
	void RequestSetCameraMode(enum InCameraMode);// 0x1ad8fa0
	void RequestMoveToSeat(CrowVehiclePawn* Vehicle, int SeatIndex);// 0x1ad8e40
	void RequestMoveToPrevSeat(CrowVehiclePawn* Vehicle);// 0x1ad8d80
	void RequestMoveToNextSeat(CrowVehiclePawn* Vehicle);// 0x1ad8cc0
	void OnChangePassengerSeats();// 0x1ad89e0
	void MoveToSeat(int SeatIndex);// 0x1ad8950
	void MoveToPrevSeat();// 0x1ad8930
	void MoveToNextSeat();// 0x1ad8910
	bool IsOnBoard();// 0x1ad88e0
	CrowVehiclePawn* GetVehiclePawn();// 0x1ad88c0
	FName GetVehicleName();// 0x1ad88a0
	enum GetVehicleIdentity();// 0x1ad8880
	void ClientFailedToBoard(CrowVehiclePawn* InVehicle, CrowCharacterPawn* InPassenger);// 0x1ad86c0
	void ChangePassengerWeapon(byte SlotIndex);// 0x1ad8640
	void Bind_Use();// 0x1ad8600
	void Bind_MoveToPrevSeat();// 0x1ad85e0
	void Bind_MoveToNextSeat();// 0x1ad85c0

--------------------------------
Class: CrowCharacterMovementCollision.SceneComponent.ActorComponent.Object
	bool bActiveHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	bool bSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa, Size: 1]
	float HeadCollisionRadius;//[Offset: 0x1fc, Size: 1]
	Quat HeadRotation;//[Offset: 0x200, Size: 1]
	CrowCharacterMovement* CrowMovement;//[Offset: 0x210, Size: 1]
	bool SimulateHitCrowCameraTP(out const Vector InCharacterLocation, const CameraComponent* InTPCamera, out const Transform InAdditiveTM);// 0x1a3f210
	void SetHeadCollisionRadius(float InRadius);// 0x1a3f190
	void SetCharacterMovementComp(CrowCharacterMovement* InMovementComp);// 0x1a3f100
	void SetActiveHeadCollision(bool bActive);// 0x1a3f070
	bool IsEnable();// 0x1a3ecb0
	float GetHeadCollisionRadius();// 0x1a3eb90
	void DrawCrowCollision();// 0x1a3ead0

--------------------------------
Class: CrowCharacterVaultCache
	CrowWorldSMC*[] VaultDestructibleSMC;//[Offset: 0x0, Size: 1]
	CrowWorldSMC* WorldSMC;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowCharacterLookLimitStance
	CrowCharacterLookLimit Stand;//[Offset: 0x0, Size: 1]
	CrowCharacterLookLimit Crouch;//[Offset: 0x18, Size: 1]
	CrowCharacterLookLimit Prone;//[Offset: 0x30, Size: 1]
	CrowCharacterLookLimit Dying;//[Offset: 0x48, Size: 1]
	CrowCharacterLookLimit Vault;//[Offset: 0x60, Size: 1]
	CrowCharacterLookLimit Ladder;//[Offset: 0x78, Size: 1]
	CrowCharacterLookLimit LookAround;//[Offset: 0x90, Size: 1]
	float InterpSpeed;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CrowCharacterLookLimit
	Rotator Min;//[Offset: 0x0, Size: 1]
	Rotator Max;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowInputBase.InputComponent.ActorComponent.Object
	Object* BindObject;//[Offset: 0x138, Size: 1]

--------------------------------
Class: CrowTeleportationActorComponent.ActorComponent.Object
	CrowTeleportationArea* CrowTeleportationArea;//[Offset: 0xb0, Size: 1]
	CrowDeathZoneWidget* DeathZoneWidget;//[Offset: 0xb8, Size: 1]
	TimerHandle CountDownHandle;//[Offset: 0xc0, Size: 1]
	float Countdown;//[Offset: 0xc8, Size: 1]
	void Server_TeleportationReadyToExecute(CrowCharacterPawn* InReadyTarget);// 0x1b43340
	void OnCompleteFadeIn();// 0x1b43090
	void Multicast_TeleportationExecution(CrowCharacterPawn* InTarget, const Vector InLocation);// 0x1b42c60
	void CountDownTimer();// 0x1b42a80
	void Client_TeleportationExecutionCountDown(CrowTeleportationArea* InTeleportationArea, float InCountDown, float InFirstDelay);// 0x1b42940
	void Client_TeleportationCancelExecution();// 0x1b428f0

--------------------------------
Class: CrowTeleportationArea.Actor.Object
	BoxComponent* CollisionComponent;//[Offset: 0x220, Size: 1]
	bool bInsideEntryingType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float ExecutionDelay;//[Offset: 0x22c, Size: 1]
	float ExecutionCountDown;//[Offset: 0x230, Size: 1]
	Actor* TeleportationDestinationActor;//[Offset: 0x238, Size: 1]
	Actor* TeleportationDestinationActorOnSeaVehicle;//[Offset: 0x240, Size: 1]
	float TeleportationRandomRadius;//[Offset: 0x248, Size: 1]
	CrowTeleportationTargetInfo[] TeleportationTargetInfos;//[Offset: 0x250, Size: 1]
	void OnEndAreaOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1b430b0
	void OnBeginAreaOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult HitResultInfo);// 0x1b42d60

--------------------------------
Class: CrowTeleportationTargetInfo
	CrowCharacterPawn* Target;//[Offset: 0x0, Size: 1]
	float StartedTimeSeconds;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowGasMaskComponent.ActorComponent.Object
	AnimMontage* MaskOn_FP;//[Offset: 0xb0, Size: 1]
	AnimMontage* MaskOn_TP;//[Offset: 0xb8, Size: 1]
	AnimMontage* MaskOff_FP;//[Offset: 0xc0, Size: 1]
	AnimMontage* MaskOff_TP;//[Offset: 0xc8, Size: 1]
	uint32 GasMaskIndex;//[Offset: 0xd0, Size: 1]
	AkAudioEvent* MaskOn_Sound;//[Offset: 0xd8, Size: 1]
	AkAudioEvent* MaskOff_Sound;//[Offset: 0xe0, Size: 1]
	AkAudioEvent* FilterDurabilityZero_Sound;//[Offset: 0xe8, Size: 1]
	AkAudioEvent* Idle_Sound;//[Offset: 0xf0, Size: 1]
	AkAudioEvent* Moving_Sound;//[Offset: 0xf8, Size: 1]
	AkAudioEvent* Sprinting_Sound;//[Offset: 0x100, Size: 1]
	AkAudioEvent* Moving_End_Sound;//[Offset: 0x108, Size: 1]
	CrowCharacterPawn* CharacterPawn;//[Offset: 0x110, Size: 1]
	SkeletalMeshComponent* GasMaskDummyComponent1P;//[Offset: 0x118, Size: 1]
	SkeletalMeshComponent* GasMaskDummyComponent3P;//[Offset: 0x120, Size: 1]
	bool bZeroFilterSoundFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bMovingEndSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool bInside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 1]
	bool bStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 1]
	enum GasMaskSoundState;//[Offset: 0x12c, Size: 1]
	void OnMovingEndSoundCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x1a94ce0
	void OnMaskOnOffAnimationEnded(AnimMontage* AnimMontage, bool bInterruped);// 0x1a94c10
	void GasMaskStateChanged(bool InMaskOn, bool InIgnoreSound);// 0x1a94940
	void GasMaskAnimation(bool InMaskOn);// 0x1a948b0

--------------------------------
Class: CrowCharacterPeekSetup
	float FPCameraAngle;//[Offset: 0x0, Size: 1]
	float InterpSpeed;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowCharacterSkydivingComponent.ActorComponent.Object
	enum State;//[Offset: 0xb0, Size: 1]
	enum AnimState;//[Offset: 0xb1, Size: 1]
	class CrowSkydivingPawn* SkydivingPawnClass;//[Offset: 0xb8, Size: 1]
	class CrowSkydivingPawn* ParachuteSkillClass;//[Offset: 0xc0, Size: 1]
	CrowSkydivingPawn* SkydivingPawn;//[Offset: 0xc8, Size: 1]
	bool bIsReadyToSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bIsWaitStartSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bUseAltitudeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	int8 ParachuteSkillCount;//[Offset: 0xd3, Size: 1]
	TimerHandle AltitudeTimerHandle;//[Offset: 0xd8, Size: 1]
	float ParachuteSpreadHeight;//[Offset: 0xe0, Size: 1]
	float ParachuteSpreadCheckOffsetX;//[Offset: 0xe4, Size: 1]
	float ParachuteSpreadCheckOffsetZ;//[Offset: 0xe8, Size: 1]
	float ParachuteSpreadCheckDist;//[Offset: 0xec, Size: 1]
	Vector ParachuteSpreadCheckBoxHalfSize;//[Offset: 0xf0, Size: 1]
	FName ParachuteSkillKeyName;//[Offset: 0xfc, Size: 1]
	bool bReadyToUseParachuteSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	float MessageWidgetTimeSecond;//[Offset: 0x108, Size: 1]
	bool bShowMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	CrowCharacterPawn* CharacterPawn;//[Offset: 0x110, Size: 1]
	bool bUseDebugAltitude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	float DrawCheckCollisionTime;//[Offset: 0x11c, Size: 1]
	void RequestUseParachuteSkill();// 0x1a47f80
	void RequestStartSkydiving();// 0x1a47f30
	void OnInputKeyModified();// 0x1a47f10
	void MulticastStartSkydiving();// 0x1a47ec0
	void MulticastSetParachuteSkillCount(uint32 InCount);// 0x1a47e00
	void MulticastCancelSkydiving();// 0x1a47de0

--------------------------------
Class: CrowZombieComponent.ActorComponent.Object
	CrowCharacterPawn* CharacterPawn;//[Offset: 0xb0, Size: 1]
	CrowZombieEnergyGaugeWidget* EnergyGaugeWidget;//[Offset: 0xb8, Size: 1]
	CrowLocalPostProcessComponent* PostProcessComp;//[Offset: 0xc0, Size: 1]
	CrowZombieInfo ZombieInfo;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: CrowZombieEnergyGaugeWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	ProgressBar* PB_Gauge;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_Tutorial_Heal;//[Offset: 0x350, Size: 1]
	WidgetAnimation* AniHeartBeat;//[Offset: 0x358, Size: 1]
	CrowZombieHeartBeatInfo[] HeartBeatInfoArray;//[Offset: 0x360, Size: 1]

--------------------------------
Class: CrowZombieHeartBeatInfo
	float Percent;//[Offset: 0x0, Size: 1]
	float AniSpeed;//[Offset: 0x4, Size: 1]
	LinearColor Color;//[Offset: 0x8, Size: 1]
	FString Dialog;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowZombieInfo
	float ZombieTransfromWaitingTime;//[Offset: 0x0, Size: 1]
	float HP;//[Offset: 0x4, Size: 1]
	float HealDelayByDamage;//[Offset: 0x8, Size: 1]
	float HealPerSecond;//[Offset: 0xc, Size: 1]
	uint16 DefaultEnergy;//[Offset: 0x10, Size: 1]
	uint16 MaxEnergy;//[Offset: 0x12, Size: 1]
	uint16 EnergyLossPerSecond;//[Offset: 0x14, Size: 1]
	uint16 GetEnergyByHit;//[Offset: 0x16, Size: 1]
	uint16 GetEnergyByKill;//[Offset: 0x18, Size: 1]
	float GetEnergyRateByQon;//[Offset: 0x1c, Size: 1]
	float RunSpeedRate;//[Offset: 0x20, Size: 1]
	float JumpSpeedRate;//[Offset: 0x24, Size: 1]
	float EnemyScanDistance;//[Offset: 0x28, Size: 1]
	CrowGameIconDisplayInfo DisplayInfo;//[Offset: 0x30, Size: 1]
	ParticleSystem* AttachEffect;//[Offset: 0xb8, Size: 1]
	ParticleSystem* ChangeZombieEffect;//[Offset: 0xc0, Size: 1]
	ParticleSystem* ZombieDeathEffect;//[Offset: 0xc8, Size: 1]
	CrowZombieDamgeInfo[] DamageRateArray;//[Offset: 0xd0, Size: 1]
	CrowZombieHeartBeatInfo[] HeartBeatInfoArray;//[Offset: 0xe0, Size: 1]
	PostProcessSettings POSTPROCESS;//[Offset: 0xf0, Size: 1]
	WeaponDamageSettings ExplosionDamage;//[Offset: 0x650, Size: 1]
	class DamageType* ExplosionDamegeType;//[Offset: 0x678, Size: 1]

--------------------------------
Class: CrowZombieDamgeInfo
	class DamageType* DamageClass;//[Offset: 0x0, Size: 1]
	float DamageRate;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowBattleSetup
	float MaxHealth;//[Offset: 0x0, Size: 1]
	float DyingSecond;//[Offset: 0x4, Size: 1]
	float ReviveSecond;//[Offset: 0x8, Size: 1]
	float StopBleedingPercent;//[Offset: 0xc, Size: 1]
	float OverBleedingPercent;//[Offset: 0x10, Size: 1]
	float ReviveHealth;//[Offset: 0x14, Size: 1]
	int CanReviveMAX;//[Offset: 0x18, Size: 1]
	float DyingHealth;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowCharacterSoundSetup
	AkAudioEvent* IdleBreathSound;//[Offset: 0x0, Size: 1]
	AkAudioEvent* IdleBreathEndSound;//[Offset: 0x8, Size: 1]
	AkAudioEvent* SprintSound;//[Offset: 0x10, Size: 1]
	AkAudioEvent* SprintEndSound;//[Offset: 0x18, Size: 1]
	AkAudioEvent* JumpLadingSound;//[Offset: 0x20, Size: 1]
	AkAudioEvent* WaterBreathSound;//[Offset: 0x28, Size: 1]
	AkAudioEvent* DeathSound;//[Offset: 0x30, Size: 1]
	<enum,AkAudioEvent*> DeathSoundByType;//[Offset: 0x38, Size: 1]
	AkAudioEvent* DeadItemDropSound;//[Offset: 0x88, Size: 1]
	AkAudioEvent* HelpSoundEvent;//[Offset: 0x90, Size: 1]
	AkAudioEvent* GroggySoundEvent;//[Offset: 0x98, Size: 1]
	AkAudioEvent* GroggyStopSoundEvent;//[Offset: 0xa0, Size: 1]
	AkAudioEvent* LadderFootStepSoundFP;//[Offset: 0xa8, Size: 1]
	AkAudioEvent* LadderFootStepSoundTP;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: CrowSkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: CrowCharacterTriggerControl.CrowTriggerControlComponent.ActorComponent.Object

--------------------------------
Class: CrowPlayerConstruction.ActorComponent.Object
	enum State;//[Offset: 0xb0, Size: 1]
	Actor* ClientTarget;//[Offset: 0xb8, Size: 1]
	CrowCharacterPawn* OwnerPawn;//[Offset: 0xc0, Size: 1]
	Object* AgentObject;//[Offset: 0xc8, Size: 1]
	class Object* TargetClass;//[Offset: 0xd0, Size: 1]
	Vector TargetBodySize;//[Offset: 0xd8, Size: 1]
	Vector Offset;//[Offset: 0xe4, Size: 1]
	float BuildTime;//[Offset: 0xf0, Size: 1]
	FName CheckBuildableCollisionPreset;//[Offset: 0xf4, Size: 1]
	bool bIsFindFloorWhenWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	bool bLetSeeFront;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 1]
	FName BuildKeyName;//[Offset: 0x100, Size: 1]
	FName CancelKeyName;//[Offset: 0x108, Size: 1]
	CrowPlayerConstructionMessage DisplayedMessage;//[Offset: 0x110, Size: 1]
	FName TargetTransformCollisionPresetName;//[Offset: 0x160, Size: 1]
	Vector PrevTargetLocation;//[Offset: 0x168, Size: 1]
	bool bIsBuildable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	void ResetProperty();// 0x1ae0f30
	void RequestUseSkill(class Object InTarget, Transform InTargetTransform, Object* InAgentObject);// 0x1ae0da0
	void RequestSpawnTarget(class Object InTarget, Transform InTargetTransform, Object* InAgentObject);// 0x1ae0c10
	void OnProgressBuild(float ProgressValue);// 0x1ae0b90
	void OnFinishBuild(float ProgressValue);// 0x1ae0af0
	bool IsWorking();// 0x1ae0910
	bool IsPossibleConstruction();// 0x1ae08e0
	bool IsConstructionUseWeaponAimBtn();// 0x1ae08b0
	bool IsConstructionUseFireBtn();// 0x1ae0880
	bool IsCanBuild();// 0x1ae0850
	bool IsBuildableTarget(out const Vector InTargetLocation, out const Rotator InTargetRotation, bool InbBuildablePlayerHalfHeight);// 0x1ae0710
	class Object GetTarget();// 0x1ae06e0
	void ForceCancel();// 0x1ae06a0
	bool FindBuildablePlace();// 0x1ae0670
	void Cancel(bool bForce);// 0x1ae05c0
	bool CalcTargetTransform(out Vector OutLocation, out Rotator OutRotation, float InViewDistance, bool InbIgnoreViewHitCheck, bool IsCheckFloor);// 0x1ae03e0
	bool BuildImmediately();// 0x1ae03b0
	bool Build();// 0x1ae0380

--------------------------------
Class: CrowPlayerConstructionMessage
	FString BuildGuideMessage;//[Offset: 0x0, Size: 1]
	FString CancelGuideMessage;//[Offset: 0x10, Size: 1]
	FString CancelBuildGuideMessage;//[Offset: 0x20, Size: 1]
	FString CannotBuildHereMessage;//[Offset: 0x30, Size: 1]
	FString TooFarToBuildMessage;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowWeaponManagerComponent.ActorComponent.Object
	CrowCharacterPawn* CharacterOwner;//[Offset: 0xb0, Size: 1]
	CrowGameInvenComponent* GameInventory;//[Offset: 0xb8, Size: 1]
	bool IsPrewWeaponAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	int BackupWeaponSlotIndex;//[Offset: 0xc4, Size: 1]
	CrowWeaponBase*[] BackupWeaponList;//[Offset: 0xc8, Size: 1]
	CrowGameHUDBase* CrowInGameHUD;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: CrowInDoorTriggerVolume.TriggerVolume.Volume.Brush.Actor.Object
	int Group;//[Offset: 0x258, Size: 1]
	int Order;//[Offset: 0x25c, Size: 1]
	Texture2D* MinimapImage;//[Offset: 0x260, Size: 1]

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CrowDotDamageInfo
	float Value;//[Offset: 0x0, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 1]
	int RemainSeconds;//[Offset: 0x8, Size: 1]
	int MaxSeconds;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowCharacterAimComponent.CrowAimComponentBase.CrowActorComponentBase.ActorComponent.Object
	CrowWeaponPartsPrimarySight* PrimarySightPart;//[Offset: 0x110, Size: 1]
	CrowWeaponPartsPrimarySight* SecondarySightPart;//[Offset: 0x118, Size: 1]
	CrowWeaponPartsPrimarySight* CurrentSightPart;//[Offset: 0x120, Size: 1]
	CrowWeaponZoomWidget* ZoomWidget;//[Offset: 0x128, Size: 1]
	CrowLocalPostProcessComponent* PostProcessComp;//[Offset: 0x130, Size: 1]
	Transform WeaponRootTransform;//[Offset: 0x140, Size: 1]
	CrowCharacterPawn* CharacterPawn;//[Offset: 0x170, Size: 1]
	CurveFloat* AimCurveX;//[Offset: 0x178, Size: 1]
	CurveFloat* AimCurveY;//[Offset: 0x180, Size: 1]
	CrowDOFComponent* DOFComponent;//[Offset: 0x188, Size: 1]
	CrowAimEvent[] AimEventArray;//[Offset: 0x190, Size: 1]

--------------------------------
Class: CrowAimComponentBase.CrowActorComponentBase.ActorComponent.Object
	CameraComponent* AimMainCamera;//[Offset: 0xc0, Size: 1]
	CrowWeaponBase* CrowWeaponBase;//[Offset: 0xc8, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: CrowWeaponPartsPrimarySight.CrowWeaponPartsBase.CrowActorComponentBase.ActorComponent.Object
	CrowWeaponPartsPrimarySightTableRow PartsTable;//[Offset: 0x3a0, Size: 1]
	CrowWeaponPartsPrimarySightTableRow DefaultPartsData;//[Offset: 0xff0, Size: 1]
	Object* AimMesh;//[Offset: 0x1c40, Size: 1]
	Object* AimLensMesh;//[Offset: 0x1c48, Size: 1]
	Object* DefaultMesh;//[Offset: 0x1c50, Size: 1]
	MeshComponent* DefaultMeshComponent;//[Offset: 0x1c58, Size: 1]
	CrowZeroingInfo* ZeroingInfo;//[Offset: 0x1c60, Size: 1]

--------------------------------
Class: CrowWeaponPartsPrimarySightTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x3a0, Size: 1]
	float WeaponModelAimFOV;//[Offset: 0x3b0, Size: 1]
	class CrowWeaponZoomWidget* ZoomWidgetClass;//[Offset: 0x3b8, Size: 1]
	enum ScopeSightRate;//[Offset: 0x3c0, Size: 1]
	float AimFOV;//[Offset: 0x3c4, Size: 1]
	float AimTime;//[Offset: 0x3c8, Size: 1]
	float ReleaseAimTime;//[Offset: 0x3cc, Size: 1]
	float AimZoomTime;//[Offset: 0x3d0, Size: 1]
	CurveFloat* AimCurveX;//[Offset: 0x3d8, Size: 1]
	CurveFloat* AimCurveY;//[Offset: 0x3e0, Size: 1]
	AkAudioEvent* AimSound_W;//[Offset: 0x3e8, Size: 1]
	float AimModelChangeDelay;//[Offset: 0x3f0, Size: 1]
	bool HideBarrelWhenAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	CrowScopeEffectTableData ScopeEffect;//[Offset: 0x3f8, Size: 1]
	bool UsePostProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x430, Size: 1]
	bool UseDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	<FString,CrowPartScopeModelInfo> ScopeModels;//[Offset: 0x998, Size: 1]
	<FString,CrowPartAimScopeModelInfo> ScopeAimModels;//[Offset: 0x9e8, Size: 1]
	bool UseZeroing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	CrowPartModelInfo TempResultInfo;//[Offset: 0xa40, Size: 1]
	CrowPartScopeModelInfo DummyPartsInfo;//[Offset: 0xb00, Size: 1]
	CrowPartAimScopeModelInfo DummyAimPartsInfo;//[Offset: 0xc10, Size: 1]

--------------------------------
Class: CrowScopeEffectTableData
	float MaxDistance;//[Offset: 0x0, Size: 1]
	float MaxAngle;//[Offset: 0x4, Size: 1]
	float MaxCharacterScale;//[Offset: 0x8, Size: 1]
	float SizeMin;//[Offset: 0xc, Size: 1]
	float SizeMax;//[Offset: 0x10, Size: 1]
	float AimEffectScaleRate;//[Offset: 0x14, Size: 1]
	SoftObjectPath EFFECT;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowPartScopeModelInfo
	SoftObjectPath Mesh1P;//[Offset: 0x0, Size: 1]
	class CrowWeaponPartsActor* MeshClass1P;//[Offset: 0x18, Size: 1]
	class AnimInstance* AnimClass1P;//[Offset: 0x20, Size: 1]
	SoftObjectPath[] Materials1P;//[Offset: 0x28, Size: 1]
	SoftObjectPath Mesh1P_Front;//[Offset: 0x38, Size: 1]
	class CrowWeaponPartsActor* MeshClass1P_Front;//[Offset: 0x50, Size: 1]
	class AnimInstance* AnimClass1P_Front;//[Offset: 0x58, Size: 1]
	SoftObjectPath[] Materials1P_Front;//[Offset: 0x60, Size: 1]
	SoftObjectPath Mesh3P;//[Offset: 0x70, Size: 1]
	SoftObjectPath LobbyMesh3P;//[Offset: 0x88, Size: 1]
	class CrowWeaponPartsActor* MeshClass3P;//[Offset: 0xa0, Size: 1]
	class AnimInstance* AnimClass3P;//[Offset: 0xa8, Size: 1]
	SoftObjectPath[] Materials3P;//[Offset: 0xb0, Size: 1]
	SoftObjectPath Mesh3P_Front;//[Offset: 0xc0, Size: 1]
	SoftObjectPath LobbyMesh3P_Front;//[Offset: 0xd8, Size: 1]
	class CrowWeaponPartsActor* MeshClass3P_Front;//[Offset: 0xf0, Size: 1]
	class AnimInstance* AnimClass3P_Front;//[Offset: 0xf8, Size: 1]
	SoftObjectPath[] Materials3P_Front;//[Offset: 0x100, Size: 1]

--------------------------------
Class: CrowPartAimScopeModelInfo
	SoftObjectPath AimChangeMesh;//[Offset: 0x0, Size: 1]
	SoftObjectPath[] MaterialsAimMesh;//[Offset: 0x18, Size: 1]
	SoftObjectPath AimLensMesh;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowZeroingInfo.Object
	ZeroingInfo[] ZeroingInfoArray;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ZeroingInfo
	int Level;//[Offset: 0x0, Size: 1]
	float DISTANCE;//[Offset: 0x4, Size: 1]
	float Pitch;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowDOFComponent.ActorComponent.Object
	bool IsActiveDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	CrowDOFSetting DOFSetting;//[Offset: 0xc0, Size: 1]
	StaticMeshComponent* UnaffectedDOFMeshComp;//[Offset: 0x650, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	void SetUnaffectedDOFMesh(StaticMesh* MeshComponent, SceneComponent* AttachComponent, FName SocketName);// 0x1a744e0
	void SetActiveExceptMotionBlur(bool bActive);// 0x1a74450
	void SetActiveDOF(bool bActive, CameraComponent* InDOFCamera);// 0x1a74380
	void ResetScreenPercentage();// 0xca8430
	void InitScopeDOF(enum InScopeSightRate);// 0x1a73f10
	void InitExceptMotionBlurOnly();// 0x1a73ed0
	void DeactiveExceptDOFMesh();// 0x1a73550
	void ActiveExceptDOFMesh();// 0x1a73460

--------------------------------
Class: CrowDOFSetting
	float OriginalScreenPercentage;//[Offset: 0x0, Size: 1]
	PostProcessSettings OriginalSetting;//[Offset: 0x10, Size: 1]
	CrowDOFProperty DOFProperty;//[Offset: 0x570, Size: 1]
	CameraComponent* DOFCamera;//[Offset: 0x580, Size: 1]

--------------------------------
Class: CrowDOFProperty
	enum ScopeSightRate;//[Offset: 0x0, Size: 1]
	float Fstop;//[Offset: 0x4, Size: 1]
	float FocalDistance;//[Offset: 0x8, Size: 1]
	float SensorWidth;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowAimEvent

--------------------------------
Class: CrowSoundScriptData
	enum ConditionType;//[Offset: 0x0, Size: 1]
	AkAudioEvent* SoundScriptEventRed_M;//[Offset: 0x8, Size: 1]
	AkAudioEvent* SoundScriptEventBlue_M;//[Offset: 0x10, Size: 1]
	AkAudioEvent* SoundScriptEventRed_F;//[Offset: 0x18, Size: 1]
	AkAudioEvent* SoundScriptEventBlue_F;//[Offset: 0x20, Size: 1]
	float Parameter;//[Offset: 0x28, Size: 1]
	float SoundScriptCoolTime;//[Offset: 0x2c, Size: 1]
	float DISTANCE;//[Offset: 0x30, Size: 1]
	enum[] IgnoreGameModes;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowFirstRespawnInfo
	byte TeamID;//[Offset: 0x0, Size: 1]
	enum SquadRole;//[Offset: 0x1, Size: 1]

--------------------------------
Class: CrowTriggerDisplay.Object
	CrowTriggerTutorialHUD TutorialHUDInfo;//[Offset: 0x28, Size: 1]
	CrowPlayerControllerBase* CrowPlayerController;//[Offset: 0x40, Size: 1]
	void TutorialHUD(bool IsActive);// 0x1a2f5c0
	void SetHUD(FName InText, MaterialInstance* InIcon, float InDuration);// 0x1b481b0
	void Init(CrowPlayerControllerBase* NewCrowPlayerController);// 0x11b8820

--------------------------------
Class: CrowTriggerTutorialHUD
	FName Text;//[Offset: 0x0, Size: 1]
	MaterialInstance* Icon;//[Offset: 0x8, Size: 1]
	float Duration;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowProjectileChecker.Object
	<uint32,CrowProjectileCheckInfo> CheckInfoMap;//[Offset: 0x68, Size: 1]
	<uint32,CrowWeaponCheckInfo> WeaponInfoMap;//[Offset: 0xb8, Size: 1]
	CrowWeaponTimeChecker WeaponTimeChecker;//[Offset: 0x108, Size: 1]
	CrowWeaponSpreadChecker WeaponSpreadChecker;//[Offset: 0x190, Size: 1]
	int YellowFlagCount;//[Offset: 0x198, Size: 1]
	int RedFlagCount;//[Offset: 0x19c, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x1c0, Size: 1]

--------------------------------
Class: CrowProjectileCheckInfo
	uint32 ProjectileUID;//[Offset: 0x4, Size: 1]
	float ServerTimeBegin;//[Offset: 0x8, Size: 1]
	float ClientTimeBegin;//[Offset: 0xc, Size: 1]
	byte WeaponItemType;//[Offset: 0x10, Size: 1]
	uint32 WeaponIndex;//[Offset: 0x14, Size: 1]
	float PartsOptionAttackRange;//[Offset: 0x18, Size: 1]
	Vector StartLocation;//[Offset: 0x1c, Size: 1]
	Vector ShootDirection;//[Offset: 0x28, Size: 1]
	Vector ViewNormal;//[Offset: 0x34, Size: 1]
	Rotator SpreadRotation;//[Offset: 0x40, Size: 1]
	float SpreadSize;//[Offset: 0x4c, Size: 1]
	CrowTrajectoryCalculator TrajectoryCalculator;//[Offset: 0x50, Size: 1]
	CrowWeaponBase* WeaponBase;//[Offset: 0x158, Size: 1]
	CrowCharacterBase* OwnerCharacter;//[Offset: 0x160, Size: 1]
	CrowVehiclePawn* OwnerVehicle;//[Offset: 0x168, Size: 1]
	Vector OwnerLocation;//[Offset: 0x170, Size: 1]
	Vector CharacterLocation;//[Offset: 0x17c, Size: 1]
	Vector WeaponLocation;//[Offset: 0x188, Size: 1]

--------------------------------
Class: CrowTrajectoryCalculator
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bIsTrajectoryMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	uint32 WeaponIndex;//[Offset: 0x4, Size: 1]
	byte WeaponItemType;//[Offset: 0x8, Size: 1]
	byte CurrentHitCount;//[Offset: 0x9, Size: 1]
	byte TrajectoryYellowFlagCount;//[Offset: 0xa, Size: 1]
	byte TrajectoryRedFlagCount;//[Offset: 0xb, Size: 1]
	World* World;//[Offset: 0x10, Size: 1]
	Vector StartLocation;//[Offset: 0x18, Size: 1]
	Vector ShootDirection;//[Offset: 0x24, Size: 1]
	Vector ShootUpVector;//[Offset: 0x30, Size: 1]
	float AttackRangeOption;//[Offset: 0x3c, Size: 1]
	float SubstepDistance;//[Offset: 0x40, Size: 1]
	float TrajectoryMaxDistance;//[Offset: 0x44, Size: 1]
	float TrajectoryLastSlope;//[Offset: 0x48, Size: 1]
	float PenetrationPower;//[Offset: 0x4c, Size: 1]
	float PenetrationDistance;//[Offset: 0x50, Size: 1]
	float PenetrationDecrease;//[Offset: 0x54, Size: 1]
	CurveFloat* TrajectoryCurve;//[Offset: 0x58, Size: 1]
	FString AmmoEffectKey;//[Offset: 0x60, Size: 1]
	FName ProjectileCollisionProfileName;//[Offset: 0x70, Size: 1]
	float CurrentDistance;//[Offset: 0x78, Size: 1]
	Vector CurrentLocation;//[Offset: 0x7c, Size: 1]
	int LineTraceCount;//[Offset: 0x88, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x100, Size: 1]

--------------------------------
Class: CrowWeaponCheckInfo
	float LastClientTime;//[Offset: 0x0, Size: 1]
	int LastAmmoCount;//[Offset: 0x4, Size: 1]
	float[] ClientTimeArray;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWeaponTimeChecker
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x18, Size: 1]
	CrowWeaponTimeInfo[] TimeInfoArray;//[Offset: 0x20, Size: 1]
	CrowWeaponTimeInfo[] TimeStamps;//[Offset: 0x30, Size: 1]
	int YellowFlagCount;//[Offset: 0x40, Size: 1]
	int TimePenalty;//[Offset: 0x44, Size: 1]
	CrowWeaponTimeInfo LastTimeInfo;//[Offset: 0x48, Size: 1]
	float ClientOffsetTotal;//[Offset: 0x68, Size: 1]
	float ClientOffsetAverage;//[Offset: 0x6c, Size: 1]
	float ClientOffsetVariance;//[Offset: 0x70, Size: 1]
	float ClientTimeRatio;//[Offset: 0x74, Size: 1]
	int TimeDeviationErrorCount;//[Offset: 0x78, Size: 1]
	int TimeDeviationValidCount;//[Offset: 0x7c, Size: 1]
	int TimeRatioErrorCount;//[Offset: 0x80, Size: 1]
	int TimeRatioValidCount;//[Offset: 0x84, Size: 1]

--------------------------------
Class: CrowWeaponTimeInfo
	float ServerTime;//[Offset: 0x0, Size: 1]
	float ClientTime;//[Offset: 0x4, Size: 1]
	float ClientOffset;//[Offset: 0x8, Size: 1]
	FString LogString;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWeaponSpreadChecker
	CrowPlayerControllerBase* PlayerController;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowWeaponFire
	uint16 WeaponIndex;//[Offset: 0x0, Size: 1]
	bool IsHitScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool IsCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool IsUseMuzzleLocation3P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	byte RemainCookingTime;//[Offset: 0x5, Size: 1]
	enum AmmoFireType;//[Offset: 0x6, Size: 1]
	enum FireMode;//[Offset: 0x7, Size: 1]
	CrowWeaponFireLocation[] LocationArray;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWeaponFireLocation
	Vector_NetQuantize FireLocation;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize EndLocation;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowNetWeaponFire
	uint16 WeaponIndex;//[Offset: 0x0, Size: 1]
	bool IsHitScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool IsCooking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool IsUseMuzzleLocation3P;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	byte RemainCookingTime;//[Offset: 0x3, Size: 1]
	byte AmmoFireType;//[Offset: 0x4, Size: 1]
	byte FireMode;//[Offset: 0x5, Size: 1]
	Vector_NetQuantize[] StartLocationArray;//[Offset: 0x8, Size: 1]
	CrowNetWeaponFireLocation[] LocationArray;//[Offset: 0x18, Size: 1]
	Vector_NetQuantizeNormal ViewNormal;//[Offset: 0x28, Size: 1]
	float ZeroingPitch;//[Offset: 0x34, Size: 1]
	Vector_NetQuantize OwnerLocation;//[Offset: 0x38, Size: 1]
	CrowWeaponBase* WeaponBase;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowNetWeaponFireLocation
	Vector_NetQuantize EndLocation;//[Offset: 0x0, Size: 1]
	uint32 ProjectileID;//[Offset: 0xc, Size: 1]
	int8 FireLocationIndex;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowNetProjectileDamage
	uint32 ProjectileID;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0xc, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 1]
	int FaceIndex;//[Offset: 0x24, Size: 1]
	int Item;//[Offset: 0x28, Size: 1]
	Actor* Actor;//[Offset: 0x30, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x38, Size: 1]
	float Damage;//[Offset: 0x40, Size: 1]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x44, Size: 1]
	byte PhysicalMaterialIndex;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CrowGameInstance.GameInstance.Object
	float DeathZoneLifeTime;//[Offset: 0x1a8, Size: 1]
	class UserWidget* DeathZoneWidgetClass;//[Offset: 0x1b0, Size: 1]
	PostProcessSettings DeathZonePostProcess;//[Offset: 0x1c0, Size: 1]
	FString[] EquipmentWeaponsIndex;//[Offset: 0x720, Size: 1]
	FText NickName;//[Offset: 0x730, Size: 1]
	FName DedicateAddress;//[Offset: 0x748, Size: 1]
	CrowPreLoad Preload;//[Offset: 0x750, Size: 1]
	class CrowWidgetManager* CrowWidgetManagerClass;//[Offset: 0x7a8, Size: 1]
	Object*[] PackagingAssetsList;//[Offset: 0x7d0, Size: 1]
	class CrowPackagingAssets* StringTableClass;//[Offset: 0x7e0, Size: 1]
	class UserWidget* PreloadingWidget;//[Offset: 0x7e8, Size: 1]
	class UserWidget* LoadingWidget;//[Offset: 0x7f0, Size: 1]
	class CrowPhysicalMatSound* PhysicalMatSoundClass;//[Offset: 0x7f8, Size: 1]
	class CrowWWiseSoundEvents* WWiseSoundEventsClass;//[Offset: 0x820, Size: 1]
	class CrowDamageEffect* DamageEffectClass;//[Offset: 0x848, Size: 1]
	class CrowSpectatorIconActor* SpectatorIconActorClass;//[Offset: 0x870, Size: 1]
	class CrowVehicleManager* CrowVehicleManagerClass;//[Offset: 0x878, Size: 1]
	class CrowSprayManager* CrowSprayManagerClass;//[Offset: 0x8a0, Size: 1]
	class CrowPlatformSteam* CrowSteamManagerClass;//[Offset: 0x8c8, Size: 1]
	class CrowItemManager* CrowItemManagerClass;//[Offset: 0x8d0, Size: 1]
	MaterialParameterCollection* MPCWeaponFOV;//[Offset: 0x8d8, Size: 1]
	CrowInputManager* InputManager;//[Offset: 0x8e0, Size: 1]
	CrowWidgetManager* WidgetManager;//[Offset: 0x8e8, Size: 1]
	CrowClientManager* ClientManager;//[Offset: 0x8f0, Size: 1]
	CrowFxManager* FXManager;//[Offset: 0x8f8, Size: 1]
	CrowDistanceBasedFXManager* DistanceBasedFXManager;//[Offset: 0x900, Size: 1]
	CrowDecalManager* DecalManager;//[Offset: 0x908, Size: 1]
	CrowNetworkClient* NetworkClient;//[Offset: 0x910, Size: 1]
	CrowNetworkDediServer* NetworkDediServer;//[Offset: 0x918, Size: 1]
	CrowSceneManager* SceneManager;//[Offset: 0x920, Size: 1]
	CrowPingManager* PingManager;//[Offset: 0x928, Size: 1]
	CrowPhysicalMatSound* PhysicalMatSound;//[Offset: 0x930, Size: 1]
	CrowWWiseSoundEvents* WWiseSoundEvents;//[Offset: 0x938, Size: 1]
	CrowChatManager* ChatManager;//[Offset: 0x940, Size: 1]
	CrowSlangManager* SlangManager;//[Offset: 0x948, Size: 1]
	CrowVivoxManager* VivoxManager;//[Offset: 0x950, Size: 1]
	CrowPlatformSteam* SteamManager;//[Offset: 0x958, Size: 1]
	CrowDamageEffect* DamageEffect;//[Offset: 0x960, Size: 1]
	CrowDediLogIPC* DediLogIPC;//[Offset: 0x968, Size: 1]
	CrowLoadingManager* LoadingManager;//[Offset: 0x970, Size: 1]
	CrowLibraryTime* LibraryTime;//[Offset: 0x978, Size: 1]
	CrowVehicleManager* VehicleManager;//[Offset: 0x980, Size: 1]
	CrowSprayManager* SprayManager;//[Offset: 0x988, Size: 1]
	CrowReplayManager* ReplayManager;//[Offset: 0x990, Size: 1]
	CrowClanManager* ClanManager;//[Offset: 0x998, Size: 1]
	CrowLobbyRecordManager* LobbyRecordManager;//[Offset: 0x9a0, Size: 1]
	CrowMailManager* MailManager;//[Offset: 0x9a8, Size: 1]
	CrowMainMedalManager* MainMedalManager;//[Offset: 0x9b0, Size: 1]
	CrowCustomModeManager* CustomModeManager;//[Offset: 0x9b8, Size: 1]
	CrowWebEventManager* NoticeManager;//[Offset: 0x9c0, Size: 1]
	CrowModCategoryTableManager* ModCategoryTableManager;//[Offset: 0x9c8, Size: 1]
	CrowDebugLogger* DebugLogger;//[Offset: 0x9d0, Size: 1]
	CrowItemManager* ItemManager;//[Offset: 0x9d8, Size: 1]
	CrowSwitchingActor* SwitchingActor;//[Offset: 0x9e0, Size: 1]
	CrowWorldProperty* WorldProperty;//[Offset: 0x9e8, Size: 1]
	CrowSceneCaptureOwner* SceneCaptureOwner;//[Offset: 0x9f0, Size: 1]
	AntiHackModule* AntiHackModule;//[Offset: 0x9f8, Size: 1]
	CrowPlayerReportManager* PlayerReportManager;//[Offset: 0xa00, Size: 1]
	CrowShopTableManager* ShopTableManager;//[Offset: 0xa08, Size: 1]
	CrowSaveGame* SaveGameObject;//[Offset: 0xa10, Size: 1]
	bool IsAsyncPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 1]
	<ClassMapKey,Object*> SingleClasses;//[Offset: 0xa38, Size: 1]
	LocalPlayer* PIE_LocalPlayer;//[Offset: 0xa88, Size: 1]
	CrowPlayerReportManager* GetPlayerReportManager();// 0x1a84b20

--------------------------------
Class: CrowPlayerReportManager.Object
	CrowPlayerReportInfo[] InfoArray;//[Offset: 0x28, Size: 1]
	double NoReportingTimeSeconds;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowPlayerReportInfo
	uint64 ServerKey;//[Offset: 0x0, Size: 1]
	int64 EndTick;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowPreLoad
	SoftClassPath[] PreloadClassList;//[Offset: 0x0, Size: 1]
	SoftObjectPath[] PreloadObjectList;//[Offset: 0x10, Size: 1]
	DataTable*[] PreloadTableList;//[Offset: 0x20, Size: 1]
	enum PreloadState;//[Offset: 0x30, Size: 1]
	SoftObjectPath[] AsyncPreloadArray;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowPackagingAssets.Object
	Object*[] Assets;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowPhysicalMatSound.Object
	AkAudioEvent* CharacterWalk;//[Offset: 0x28, Size: 1]
	AkAudioEvent* CharacterRun;//[Offset: 0x30, Size: 1]
	AkAudioEvent* CharacterSprint;//[Offset: 0x38, Size: 1]
	AkAudioEvent* CharacterProne;//[Offset: 0x40, Size: 1]
	AkAudioEvent* CharacterWalk_3P;//[Offset: 0x48, Size: 1]
	AkAudioEvent* CharacterRun_3P;//[Offset: 0x50, Size: 1]
	AkAudioEvent* CharacterSprint_3P;//[Offset: 0x58, Size: 1]
	AkAudioEvent* CharacterProne_3P;//[Offset: 0x60, Size: 1]
	AkAudioEvent* CharacterRotateStand;//[Offset: 0x68, Size: 1]
	AkAudioEvent* CharacterRotateStand;//[Offset: 0x70, Size: 1]
	AkAudioEvent* CharacterRotateCrouch;//[Offset: 0x78, Size: 1]
	AkAudioEvent* CharacterRotateCrouch;//[Offset: 0x80, Size: 1]
	AkAudioEvent* CharacterRotateProne;//[Offset: 0x88, Size: 1]
	AkAudioEvent* Ammo_Bullet_5_56mm;//[Offset: 0x90, Size: 1]
	AkAudioEvent* Ammo_Bullet_7_62mm;//[Offset: 0x98, Size: 1]
	AkAudioEvent* Ammo_Bullet_9mm;//[Offset: 0xa0, Size: 1]
	AkAudioEvent* Ammo_Bullet_338_LMag;//[Offset: 0xa8, Size: 1]
	AkAudioEvent* Ammo_Bullet_12_7mm;//[Offset: 0xb0, Size: 1]
	AkAudioEvent* Ammo_Bullet_12_7mm_Ground;//[Offset: 0xb8, Size: 1]
	AkAudioEvent* Ammo_Bullet_0_44Mag;//[Offset: 0xc0, Size: 1]
	AkAudioEvent* Ammo_Bullet_00BuckShot;//[Offset: 0xc8, Size: 1]
	AkAudioEvent* Ammo_Bullet_14_5mm;//[Offset: 0xd0, Size: 1]
	AkAudioEvent* Ammo_Bullet_25mm;//[Offset: 0xd8, Size: 1]
	AkAudioEvent* Ammo_Grenade_M26;//[Offset: 0xe0, Size: 1]
	AkAudioEvent* Ammo_Grenade_M18;//[Offset: 0xe8, Size: 1]
	AkAudioEvent* Ammo_Grenade_AN_M14;//[Offset: 0xf0, Size: 1]
	AkAudioEvent* Ammo_Grenade_M84;//[Offset: 0xf8, Size: 1]
	AkAudioEvent* Ammo_Grenade_40mm;//[Offset: 0x100, Size: 1]
	AkAudioEvent* Ammo_Cannon_120mmAP;//[Offset: 0x108, Size: 1]
	AkAudioEvent* Ammo_Cannon_120mmHE;//[Offset: 0x110, Size: 1]
	AkAudioEvent* Ammo_Smoke_66mm;//[Offset: 0x118, Size: 1]
	AkAudioEvent* Ammo_Rocket_66mm;//[Offset: 0x120, Size: 1]
	AkAudioEvent* Ammo_Rocket_70mm;//[Offset: 0x128, Size: 1]
	AkAudioEvent* Ammo_Rocket_85mm;//[Offset: 0x130, Size: 1]
	AkAudioEvent* Ammo_Missile_70mm;//[Offset: 0x138, Size: 1]
	AkAudioEvent* Ammo_Missile_127mm;//[Offset: 0x140, Size: 1]
	AkAudioEvent* Ammo_Melee_Knife;//[Offset: 0x148, Size: 1]
	AkAudioEvent* Ammo_C4;//[Offset: 0x150, Size: 1]
	AkAudioEvent* Ammo_ClaymoreMine;//[Offset: 0x158, Size: 1]
	AkAudioEvent* Ammo_ZombiePunch;//[Offset: 0x160, Size: 1]
	AkAudioEvent* Explosion_Grenade_M26;//[Offset: 0x168, Size: 1]
	AkAudioEvent* Explosion_Grenade_M18;//[Offset: 0x170, Size: 1]
	AkAudioEvent* Explosion_Grenade_AN_M14;//[Offset: 0x178, Size: 1]
	AkAudioEvent* Explosion_Grenade_M84;//[Offset: 0x180, Size: 1]
	AkAudioEvent* Explosion_Grenade_40mm;//[Offset: 0x188, Size: 1]
	AkAudioEvent* Explosion_Cannon_120mmAP;//[Offset: 0x190, Size: 1]
	AkAudioEvent* Explosion_Cannon_120mmHE;//[Offset: 0x198, Size: 1]
	AkAudioEvent* Explosion_Smoke_66mm;//[Offset: 0x1a0, Size: 1]
	AkAudioEvent* Explosion_Rocket_66mm;//[Offset: 0x1a8, Size: 1]
	AkAudioEvent* Explosion_Rocket_70mm;//[Offset: 0x1b0, Size: 1]
	AkAudioEvent* Explosion_Rocket_85mm;//[Offset: 0x1b8, Size: 1]
	AkAudioEvent* Explosion_Missile_70mm;//[Offset: 0x1c0, Size: 1]
	AkAudioEvent* Explosion_Missile_127mm;//[Offset: 0x1c8, Size: 1]
	AkAudioEvent* Explosion_C4;//[Offset: 0x1d0, Size: 1]
	AkAudioEvent* Explosion_ClaymoreMine;//[Offset: 0x1d8, Size: 1]
	AkAudioEvent* Shell_Bullet_5_56mm;//[Offset: 0x1e0, Size: 1]
	AkAudioEvent* Shell_Bullet_7_62mm;//[Offset: 0x1e8, Size: 1]
	AkAudioEvent* Shell_Bullet_9mm;//[Offset: 0x1f0, Size: 1]
	AkAudioEvent* Shell_Bullet_338_LMag;//[Offset: 0x1f8, Size: 1]
	AkAudioEvent* Shell_Bullet_12_7mm;//[Offset: 0x200, Size: 1]
	AkAudioEvent* Shell_Bullet_12_7mm_Ground;//[Offset: 0x208, Size: 1]
	AkAudioEvent* Shell_Bullet_0_44Mag;//[Offset: 0x210, Size: 1]
	AkAudioEvent* Shell_Bullet_00BuckShot;//[Offset: 0x218, Size: 1]
	AkAudioEvent* Shell_Bullet_14_5mm;//[Offset: 0x220, Size: 1]
	AkAudioEvent* Shell_Bullet_25mm;//[Offset: 0x228, Size: 1]
	void AkCallback_Default(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x1adcb90

--------------------------------
Class: CrowWWiseSoundEvents.Object
	AkAudioEvent* GasHitSound;//[Offset: 0x28, Size: 1]
	AkAudioEvent* HitSound;//[Offset: 0x30, Size: 1]
	AkAudioEvent* KillSound;//[Offset: 0x38, Size: 1]
	AkAudioEvent* VehicleKillSound;//[Offset: 0x40, Size: 1]
	<enum,AkAudioEvent*> HitMarks;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowVehicleManager.Object
	Actor*[] VehicleArray;//[Offset: 0x28, Size: 1]
	Actor*[] VehicleImpedimentsArray;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowSprayManager.Object
	float SprayDistance;//[Offset: 0x28, Size: 1]
	float CoolTime;//[Offset: 0x2c, Size: 1]
	AkAudioEvent* SpraySound;//[Offset: 0x30, Size: 1]
	int SprayMaxCount;//[Offset: 0x38, Size: 1]
	<int,int> SpraySlotMap;//[Offset: 0x40, Size: 1]
	CrowSprayActor*[] SpawndSprayArray;//[Offset: 0x98, Size: 1]

--------------------------------
Class: CrowPlatformSteam.Object
	Texture2D* DefaultTexture;//[Offset: 0x80, Size: 1]
	<uint64,Texture2D*> TexCache;//[Offset: 0x88, Size: 1]
	void GetAuthTicket();// 0x1ae06c0
	void CheckTimeOut();// 0x1ae0650

--------------------------------
Class: CrowItemManager.Object
	CrowItemBase*[] WorldItemArray;//[Offset: 0x28, Size: 1]
	CrowItemBase*[] NearItemArray;//[Offset: 0x38, Size: 1]
	float OutLineDist;//[Offset: 0x48, Size: 1]
	float EffectDist;//[Offset: 0x4c, Size: 1]
	bool bEnablePickingItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: CrowInputManager.Object
	PlayerController* PlayerController;//[Offset: 0x28, Size: 1]
	CrowCharacterPawn* CrowCharacterPawn;//[Offset: 0x30, Size: 1]
	enum CurrentInputMode;//[Offset: 0x38, Size: 1]
	CrowInputStackInfo[] InputStack;//[Offset: 0x40, Size: 1]
	CrowInputBase*[] InputBaseArray;//[Offset: 0x50, Size: 1]
	CrowInputBase* InputWeaponManager;//[Offset: 0x60, Size: 1]
	CrowInputBase* InputDefault;//[Offset: 0x68, Size: 1]
	CrowInputBase* InputCharacterOnVehicle;//[Offset: 0x70, Size: 1]
	CrowInputBase* InputCharacterOnlyRot;//[Offset: 0x78, Size: 1]
	CrowInputBase* InputFindConstructionSite;//[Offset: 0x80, Size: 1]
	CrowInputBase* InputFindBombKitTarget;//[Offset: 0x88, Size: 1]
	CrowInputBase* InputCharacterSkydiving;//[Offset: 0x90, Size: 1]
	CrowInputBase* InputConstruction;//[Offset: 0x98, Size: 1]
	CrowInputBase* InputUI;//[Offset: 0xa0, Size: 1]
	CrowInputBase* InputWorldMapUI;//[Offset: 0xa8, Size: 1]
	CrowInputBase* InputRadialMenu;//[Offset: 0xb0, Size: 1]
	CrowInputBase* InputDyingCharacter;//[Offset: 0xb8, Size: 1]
	CrowInputBase* InputRespawnAirPlane;//[Offset: 0xc0, Size: 1]
	CrowInputBase* InputOnlyTrigger;//[Offset: 0xc8, Size: 1]
	CrowInputBase* InputSpectator;//[Offset: 0xd0, Size: 1]
	CrowInputBase* InputSpectatorCustomMode;//[Offset: 0xd8, Size: 1]
	CrowInputBase* InputBombMissionPlayCountdown;//[Offset: 0xe0, Size: 1]
	CrowInputBase* InputSquadMatchRespawn;//[Offset: 0xe8, Size: 1]
	CrowInputBase* InputEmotion;//[Offset: 0xf0, Size: 1]
	CrowInputBase* InputReplay;//[Offset: 0xf8, Size: 1]
	CrowInputBase* InputSynopsis;//[Offset: 0x100, Size: 1]
	CrowInputBase* InputAnyKey;//[Offset: 0x108, Size: 1]

--------------------------------
Class: CrowInputStackInfo
	Object* Object;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowFxManager.Object
	CrowPhysicalMatSound* PhysicalMatSound;//[Offset: 0x28, Size: 1]
	CrowFxTypeArrayy[] CrowFxTypeArrayList;//[Offset: 0x48, Size: 1]
	void OnFxFinished_ParticleSystem(ParticleSystemComponent* FxSystemComp);// 0x1a81a50

--------------------------------
Class: CrowFxTypeArrayy
	ParticleSystemComponent*[] Array;//[Offset: 0x0, Size: 1]
	float LastSpawnWorldTime;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowDistanceBasedFXManager.Object
	<int64,FName> WeaponSubTypeNames;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowDecalManager.Object
	CrowDecalTypeArray[] DecalTypeArray;//[Offset: 0x28, Size: 1]
	CrowDecalTypeArray[] FadingDecalTypeArray;//[Offset: 0x38, Size: 1]
	CrowCustomDepthDecal*[] CustomDepthDecalArray;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CrowDecalTypeArray
	CrowDecalComponent*[] Array;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowCustomDepthDecal.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x4e0, Size: 1]
	CurveFloat* FadeOutCurve;//[Offset: 0x4e8, Size: 1]
	FName AttachedBoneName;//[Offset: 0x4f0, Size: 1]
	CrowDecalManager* DecalManager;//[Offset: 0x4f8, Size: 1]
	void OnWorldSMCDestroyed(byte InDestroyReason, bool InDestroyAttachChild);// 0x1a657a0

--------------------------------
Class: CrowNetworkClient.Object
	FString ServerIP;//[Offset: 0x30, Size: 1]
	FString ServerPort;//[Offset: 0x40, Size: 1]
	CrowSceneBase* CurrentScene;//[Offset: 0x50, Size: 1]
	FString UserId;//[Offset: 0x58, Size: 1]
	FString UserPassword;//[Offset: 0x68, Size: 1]

--------------------------------
Class: CrowNetworkDediServer.Object
	FString ServerIP;//[Offset: 0x30, Size: 1]
	FString ServerPort;//[Offset: 0x40, Size: 1]
	CrowSceneBase* CurrentScene;//[Offset: 0x78, Size: 1]
	CrowLoadingNewPacket LoadingNewPacket;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: CrowLoadingNewPacket
	uint32 Mode;//[Offset: 0x0, Size: 1]
	uint32 MapIndex;//[Offset: 0x4, Size: 1]
	uint32 PlaySec;//[Offset: 0x8, Size: 1]
	uint32 maxPalyer;//[Offset: 0xc, Size: 1]
	uint32 WinPoint;//[Offset: 0x10, Size: 1]
	uint32 customMode;//[Offset: 0x14, Size: 1]
	int64 customSessionID;//[Offset: 0x18, Size: 1]
	uint64[] observerIDs;//[Offset: 0x20, Size: 1]
	int personType;//[Offset: 0x30, Size: 1]
	int ControlType;//[Offset: 0x34, Size: 1]
	int TeamAIcon;//[Offset: 0x38, Size: 1]
	int TeamBIcon;//[Offset: 0x3c, Size: 1]
	FString TeamAName;//[Offset: 0x40, Size: 1]
	FString TeamBName;//[Offset: 0x50, Size: 1]
	bool bEnableChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bChatAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool bChatTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	bool bChatSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 1]
	bool bChatGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]

--------------------------------
Class: CrowPingManager.Object
	<uint16,CrowPingData> PingDataMap;//[Offset: 0x28, Size: 1]
	<uint16,CrowPingBase*> PingActorMap;//[Offset: 0x78, Size: 1]
	CrowPingData SaveListPingData;//[Offset: 0xc8, Size: 1]
	TimerHandle PingCountTimerHandle;//[Offset: 0x138, Size: 1]
	TimerHandle PingLockTimerHandle;//[Offset: 0x140, Size: 1]
	void AkSoundCallbackResponse(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x1ae02b0
	void AkSoundCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x1ae01e0

--------------------------------
Class: CrowPingBase.Actor.Object
	CapsuleComponent* CollisionComp;//[Offset: 0x220, Size: 1]
	SceneComponent* IconLocation;//[Offset: 0x228, Size: 1]
	CrowPingData PingData;//[Offset: 0x230, Size: 1]
	CrowWorldMapIconPing* MapIcon;//[Offset: 0x290, Size: 1]
	CrowIndicatorViewInfoPing* IndicatorViewInfo;//[Offset: 0x298, Size: 1]
	CrowPingIndicatorWidget* IconIndicator;//[Offset: 0x2a0, Size: 1]
	bool Aimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	bool Replyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 1]
	CrowGameIconDisplayInfo IconDisplayInfo;//[Offset: 0x2b0, Size: 1]
	ParticleSystemComponent* FxParticlesComp;//[Offset: 0x338, Size: 1]
	CrowPingTableRow PingTable;//[Offset: 0x340, Size: 1]

--------------------------------
Class: CrowWorldMapIconPing.CrowWorldMapIcon.Object
	bool VisibleWorldMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool VisibleMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	bool VisibleRespawnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	CrowPingBase* TargetPing;//[Offset: 0x1c0, Size: 1]

--------------------------------
Class: CrowIndicatorViewInfoPing.CrowIndicatorViewInfo.Object
	CrowPingIndicatorWidget* PingIndicatorWidget;//[Offset: 0x1f0, Size: 1]

--------------------------------
Class: CrowPingIndicatorWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* CP_Root;//[Offset: 0x348, Size: 1]
	CanvasPanel* CP_LocateArrow;//[Offset: 0x350, Size: 1]
	CanvasPanel* CP_Ping;//[Offset: 0x358, Size: 1]
	Image* IMG_LocateArrow;//[Offset: 0x360, Size: 1]
	Image* IMG_Ping_Point;//[Offset: 0x368, Size: 1]
	Image* IMG_Ping_BG;//[Offset: 0x370, Size: 1]
	Image* IMG_Ping;//[Offset: 0x378, Size: 1]
	Image* IMG_Ping_Active;//[Offset: 0x380, Size: 1]
	Image* IMG_Ping_Active;//[Offset: 0x388, Size: 1]
	TextBlock* TB_Distance;//[Offset: 0x390, Size: 1]
	TextBlock* TB_Name;//[Offset: 0x398, Size: 1]
	WidgetAnimation* AniWidgetActive;//[Offset: 0x3a0, Size: 1]
	CrowPingBase* TargetActor;//[Offset: 0x3a8, Size: 1]
	Image* ImgPingBG_Small;//[Offset: 0x3b0, Size: 1]
	Border* BorderPingItem_BG;//[Offset: 0x3b8, Size: 1]
	Image* ImgPing_Item;//[Offset: 0x3c0, Size: 1]
	Border* BorderPingItem_Grade;//[Offset: 0x3c8, Size: 1]

--------------------------------
Class: CrowPingTableRow.TableRowBase
	bool UseSquadColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum PingType;//[Offset: 0x9, Size: 1]
	FText Name;//[Offset: 0x10, Size: 1]
	PaperSprite* DefaultIcon;//[Offset: 0x28, Size: 1]
	PaperSprite* DefaultWorldMapIcon;//[Offset: 0x30, Size: 1]
	bool UseIconBG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	LinearColor PingColor;//[Offset: 0x3c, Size: 1]
	ParticleSystem* PingFX;//[Offset: 0x50, Size: 1]
	enum IconType;//[Offset: 0x58, Size: 1]
	float WorldMapIconScale;//[Offset: 0x5c, Size: 1]
	float DisplayMapIconDistance;//[Offset: 0x60, Size: 1]
	float IndicatorIconScale;//[Offset: 0x64, Size: 1]
	float IndicatorHeightOffset;//[Offset: 0x68, Size: 1]
	float DisplaySymbolDistance;//[Offset: 0x6c, Size: 1]
	float DisplayNameDistance;//[Offset: 0x70, Size: 1]
	float DisplayDistanceDistance;//[Offset: 0x74, Size: 1]
	float ScaleMin;//[Offset: 0x78, Size: 1]
	float ScaleMax;//[Offset: 0x7c, Size: 1]
	float ScaleMinDistance;//[Offset: 0x80, Size: 1]
	float ScaleMaxDistance;//[Offset: 0x84, Size: 1]
	float IconChangeMinDistance;//[Offset: 0x88, Size: 1]
	float AlphaMin;//[Offset: 0x8c, Size: 1]
	float AlphaMax;//[Offset: 0x90, Size: 1]
	float AlphaMinDistance;//[Offset: 0x94, Size: 1]
	float AlphaMaxDistance;//[Offset: 0x98, Size: 1]
	bool Visible_WorldMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool Visible_MiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	bool Visible_RespawnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 1]
	float LifeTime;//[Offset: 0xa0, Size: 1]
	byte MaxSpawnCount;//[Offset: 0xa4, Size: 1]
	FText ChatMessageStringKey;//[Offset: 0xa8, Size: 1]
	AkAudioEvent* PingSound;//[Offset: 0xc0, Size: 1]
	AkAudioEvent* PingResponseSound;//[Offset: 0xc8, Size: 1]
	FText ResponseMessage;//[Offset: 0xd0, Size: 1]
	<enum,CrowPingVehicleSubInfo> PingVehicleSubInfos;//[Offset: 0xe8, Size: 1]
	CrowPingVehicleSubInfo Default;//[Offset: 0x138, Size: 1]

--------------------------------
Class: CrowPingVehicleSubInfo
	FText ChatMessageStringKey;//[Offset: 0x0, Size: 1]
	AkAudioEvent* PingSound;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowChatManager.Object

--------------------------------
Class: CrowSlangManager.Object
	FString SpecialSymbols;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowDediLogIPC.Object

--------------------------------
Class: CrowLoadingManager.Object
	LevelStreamingDynamic* WeaponLoadOutLevel;//[Offset: 0x30, Size: 1]
	CrowSceneTableRow SceneData;//[Offset: 0x38, Size: 1]
	void OnLevelLoadedLoadout();// 0x1ab7ea0

--------------------------------
Class: CrowLibraryTime.Object
	CrowTimeInfo[] TimeInfoArray;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowTimeInfo

--------------------------------
Class: CrowReplayManager.Object
	CrowReplayInfo*[] ReplayList;//[Offset: 0x68, Size: 1]
	bool bFindReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool bIsLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	FString CacheReplayName;//[Offset: 0x80, Size: 1]
	FString CacheFriendlyName;//[Offset: 0x90, Size: 1]
	CrowReplayInfo* CachePlayedReplay;//[Offset: 0xa0, Size: 1]
	CrowLoadingWidget* CrowLoadingWidget;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CrowLoadingWidget.CrowWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TB_MapName;//[Offset: 0x348, Size: 1]
	TextBlock* TB_GameMode;//[Offset: 0x350, Size: 1]
	TextBlock* TB_TipDesc;//[Offset: 0x358, Size: 1]
	Image* IMG_LoadingIMG;//[Offset: 0x360, Size: 1]
	Image* TipImage;//[Offset: 0x368, Size: 1]
	Image* IMG_Loading_In;//[Offset: 0x370, Size: 1]
	VerticalBox* VB_ModeDescList;//[Offset: 0x378, Size: 1]
	Image* IMG_Loading_In;//[Offset: 0x380, Size: 1]
	WidgetAnimation* AniStart;//[Offset: 0x388, Size: 1]
	UMGSequencePlayer* AniStartPlayer;//[Offset: 0x390, Size: 1]
	FText[] ModeTipList;//[Offset: 0x398, Size: 1]

--------------------------------
Class: CrowClanManager.Object
	ClanListItem[] JoinClanList;//[Offset: 0x38, Size: 1]
	ClanListItem[] InviteClanList;//[Offset: 0x48, Size: 1]
	ClanListItem[] RecommandClanList;//[Offset: 0x58, Size: 1]
	ClanListItem[] RankingTotalClanList;//[Offset: 0x68, Size: 1]
	ClanListItem[] RankingMonthClanList;//[Offset: 0x78, Size: 1]
	ClanListItem SearchClanInfo;//[Offset: 0x88, Size: 1]
	SearchUserInfo SearchUserInfo;//[Offset: 0xc8, Size: 1]
	SearchUserInfo[] InviteUserList;//[Offset: 0xf8, Size: 1]
	SearchUserInfo[] RequestUserList;//[Offset: 0x108, Size: 1]
	ClanInfo MyClanInfo;//[Offset: 0x118, Size: 1]
	uint32[] UnlockClanMark;//[Offset: 0x190, Size: 1]

--------------------------------
Class: ClanListItem
	int ClanId;//[Offset: 0x0, Size: 1]
	FString ClanName;//[Offset: 0x8, Size: 1]
	int ClanMark;//[Offset: 0x18, Size: 1]
	int ClanMarkBG;//[Offset: 0x1c, Size: 1]
	int ClanLeval;//[Offset: 0x20, Size: 1]
	int ClanRanking;//[Offset: 0x24, Size: 1]
	int ClanMemberCurrent;//[Offset: 0x28, Size: 1]
	int ClanMemberMax;//[Offset: 0x2c, Size: 1]
	int64 ContributionPoint;//[Offset: 0x30, Size: 1]
	enum ClanInviteType;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SearchUserInfo
	uint64 UserId;//[Offset: 0x0, Size: 1]
	uint64 SteamId;//[Offset: 0x8, Size: 1]
	FString UserName;//[Offset: 0x10, Size: 1]
	int UserLevel;//[Offset: 0x20, Size: 1]
	int ClassLevel;//[Offset: 0x24, Size: 1]
	int ClassRank;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ClanInfo
	int ClanId;//[Offset: 0x0, Size: 1]
	FString ClanName;//[Offset: 0x8, Size: 1]
	FString ClanNotice;//[Offset: 0x18, Size: 1]
	int ClanMark;//[Offset: 0x28, Size: 1]
	int ClanRankingMonth;//[Offset: 0x2c, Size: 1]
	int ClanRankingTotal;//[Offset: 0x30, Size: 1]
	int ClanMarkBG;//[Offset: 0x34, Size: 1]
	int ClanLeval;//[Offset: 0x38, Size: 1]
	int ClanMemberCurrent;//[Offset: 0x3c, Size: 1]
	int ClanMemberMax;//[Offset: 0x40, Size: 1]
	int64 MonthContributionPoint;//[Offset: 0x48, Size: 1]
	int64 TotalContributionPoint;//[Offset: 0x50, Size: 1]
	int HappyTimeHour;//[Offset: 0x58, Size: 1]
	int HappyTimeMinute;//[Offset: 0x5c, Size: 1]
	enum ClanInviteType;//[Offset: 0x60, Size: 1]
	enum ClanAuthority;//[Offset: 0x61, Size: 1]
	CrewInfo[] ClanUserList;//[Offset: 0x68, Size: 1]

--------------------------------
Class: CrewInfo
	uint64 UserId;//[Offset: 0x0, Size: 1]
	uint64 SteamId;//[Offset: 0x8, Size: 1]
	FString UserName;//[Offset: 0x10, Size: 1]
	int UserLevel;//[Offset: 0x20, Size: 1]
	int ClassLevel;//[Offset: 0x24, Size: 1]
	int ClassRank;//[Offset: 0x28, Size: 1]
	DateTime LastPlayTime;//[Offset: 0x30, Size: 1]
	bool bOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	enum UserAuthority;//[Offset: 0x39, Size: 1]
	int64 UserContributionPoint;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowLobbyRecordManager.Object
	<FString,CrowLobbyProfileRecord> UserProfileList;//[Offset: 0x28, Size: 1]
	<int,CrowLobbyRankRecord> MyRankRecords;//[Offset: 0x78, Size: 1]
	CrowLobbyWeaponRecord MyFavoriteWeaponRecord;//[Offset: 0xc8, Size: 1]
	CrowLobbyWeaponRecord[] MyWeaponRecords;//[Offset: 0x118, Size: 1]
	<int,CrowLobbyRankRecords> RankRecordList;//[Offset: 0x128, Size: 1]
	CrowWidgetBase* ProfileRecordWidget;//[Offset: 0x178, Size: 1]
	CrowWidgetBase* MyFavoriteWeaponRecordWidget;//[Offset: 0x180, Size: 1]
	CrowWidgetBase* MyWeaponRecordsWidget;//[Offset: 0x188, Size: 1]
	CrowWidgetBase* MyRankRecordsWidget;//[Offset: 0x190, Size: 1]
	CrowWidgetBase* RankRecordsWidget;//[Offset: 0x198, Size: 1]
	CrowLobbyProfileRecord DefaultLobbyProfileRecord;//[Offset: 0x1a0, Size: 1]
	CrowLobbyRankRecord DefaultLobbyRankRecord;//[Offset: 0x250, Size: 1]

--------------------------------
Class: CrowLobbyProfileRecord
	FString UserNickName;//[Offset: 0x0, Size: 1]
	int Level;//[Offset: 0x10, Size: 1]
	FString ClanName;//[Offset: 0x18, Size: 1]
	int ClanMarkIndex;//[Offset: 0x28, Size: 1]
	int ClanBgIndex;//[Offset: 0x2c, Size: 1]
	uint64 SteamId;//[Offset: 0x30, Size: 1]
	int UserSeasonLevel;//[Offset: 0x38, Size: 1]
	int SeasonRank;//[Offset: 0x3c, Size: 1]
	int MercenaryLevel;//[Offset: 0x40, Size: 1]
	int64 MercenaryRank;//[Offset: 0x48, Size: 1]
	int ConquestWinCount;//[Offset: 0x50, Size: 1]
	int ConquestLoseCount;//[Offset: 0x54, Size: 1]
	int ConquestDrawCount;//[Offset: 0x58, Size: 1]
	int ConquestInvalidityCount;//[Offset: 0x5c, Size: 1]
	int RecentConquestWinCount;//[Offset: 0x60, Size: 1]
	int RecentConquestLoseCount;//[Offset: 0x64, Size: 1]
	int RecentSquadMatchAverageRank;//[Offset: 0x68, Size: 1]
	CrowLobbyProfileRankRecord ConquestRank;//[Offset: 0x70, Size: 1]
	CrowLobbyProfileRankRecord SquadRank;//[Offset: 0x90, Size: 1]

--------------------------------
Class: CrowLobbyProfileRankRecord
	int KillCount;//[Offset: 0x0, Size: 1]
	int AssistCount;//[Offset: 0x4, Size: 1]
	int DeathCount;//[Offset: 0x8, Size: 1]
	int InjuredCount;//[Offset: 0xc, Size: 1]
	int64 Score;//[Offset: 0x10, Size: 1]
	int PlayCount;//[Offset: 0x18, Size: 1]
	int PlayTimeSec;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: CrowLobbyRankRecord
	int Rank;//[Offset: 0x0, Size: 1]
	int Level;//[Offset: 0x4, Size: 1]
	FString UserNickName;//[Offset: 0x8, Size: 1]
	int64 Score;//[Offset: 0x18, Size: 1]
	int PlayCount;//[Offset: 0x20, Size: 1]
	int PlayTimeSec;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CrowLobbyWeaponRecord
	int SharedIndex;//[Offset: 0x0, Size: 1]
	int64 Exp;//[Offset: 0x8, Size: 1]
	int WeasponUsedGainExp;//[Offset: 0x10, Size: 1]
	int Kill;//[Offset: 0x14, Size: 1]
	int Headshot;//[Offset: 0x18, Size: 1]
	int Assist;//[Offset: 0x1c, Size: 1]
	int Faint;//[Offset: 0x20, Size: 1]
	int64 Damage;//[Offset: 0x28, Size: 1]
	int UsedCount;//[Offset: 0x30, Size: 1]
	int64 RecoveryHp;//[Offset: 0x38, Size: 1]
	int HpUsedCount;//[Offset: 0x40, Size: 1]
	int TankKill;//[Offset: 0x44, Size: 1]
	int HelicopterKill;//[Offset: 0x48, Size: 1]
	int Vehiclekill;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: CrowLobbyRankRecords
	CrowLobbyRankRecord[] RankList;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowMailManager.Object
	<int64,CrowAccountMailInfo> AccountMailInfos;//[Offset: 0x28, Size: 1]
	<int64,CrowPersonalMailInfo> PersonalMailInfos;//[Offset: 0x78, Size: 1]
	int RemainMailCount;//[Offset: 0xc8, Size: 1]
	CrowWidgetBase* ReqNewMailWidget;//[Offset: 0xd0, Size: 1]
	CrowWidgetBase* ReqMailListWidget;//[Offset: 0xd8, Size: 1]
	CrowWidgetBase* ReqReceiveMailItemWidget;//[Offset: 0xe0, Size: 1]
	CrowWidgetBase* ReqDeleteMailWidget;//[Offset: 0xe8, Size: 1]
	CrowWidgetBase* ReqAllReceiveMailItemWidget;//[Offset: 0xf0, Size: 1]
	CrowWidgetBase* ReqAllDeleteMailItemWidget;//[Offset: 0xf8, Size: 1]
	bool bIsAllReceiveMailItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bIsAllDeleteMailItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	CrowRewardItem[] RewardItemDatas;//[Offset: 0x108, Size: 1]
	bool bHasNewMail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool bHasNewAccountMail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	bool bHasNewPersonalMail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]

--------------------------------
Class: CrowAccountMailInfo.CrowMailInfo

--------------------------------
Class: CrowMailInfo
	int64 MailNo;//[Offset: 0x8, Size: 1]
	uint32 RewardIndex;//[Offset: 0x10, Size: 1]
	byte RewardFlag;//[Offset: 0x14, Size: 1]
	uint32 RewardSentenseDataIndex;//[Offset: 0x18, Size: 1]
	uint64 CreateTime;//[Offset: 0x20, Size: 1]
	uint64 RewardEndTime;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowPersonalMailInfo.CrowMailInfo
	FString TitleText;//[Offset: 0x30, Size: 1]
	FString ContentText;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CrowMainMedalManager.Object
	<uint32,CrowMainMedalInfos> MainMedalInfos;//[Offset: 0x28, Size: 1]
	<uint32,CrowMainMedalGroupInfo> MainMedalGroupInfos;//[Offset: 0x78, Size: 1]
	CrowWidgetBase* ReqMedalGroupRewardWidget;//[Offset: 0xc8, Size: 1]
	bool bNewKillStreakReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bNewVehicleBoomReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bNewLongshotReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool bNewCombatReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool bNewBomberReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bNewModeReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]

--------------------------------
Class: CrowMainMedalInfos
	CrowMainMedalInfo[] Array;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowMainMedalInfo
	uint32 Index;//[Offset: 0x0, Size: 1]
	uint32 GroupIndex;//[Offset: 0x4, Size: 1]
	uint32 CompleteCount;//[Offset: 0x8, Size: 1]
	uint32 TotalCompleteCount;//[Offset: 0xc, Size: 1]
	uint32 Order;//[Offset: 0x10, Size: 1]
	byte Tier;//[Offset: 0x14, Size: 1]
	enum MedalType;//[Offset: 0x15, Size: 1]

--------------------------------
Class: CrowMainMedalGroupInfo
	uint32 Index;//[Offset: 0x0, Size: 1]
	uint32 RewardIndex;//[Offset: 0x4, Size: 1]
	enum UIType;//[Offset: 0x8, Size: 1]
	byte RewardFlag;//[Offset: 0x9, Size: 1]
	uint32 CompleteCount;//[Offset: 0xc, Size: 1]
	uint32 TotalCompleteCount;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowCustomModeManager.Object
	CrowCustomDisplayRoomInfo[] CustomDisplayRoomInfoArray;//[Offset: 0x28, Size: 1]
	CrowCustomRoomInfo CurrentCustomRoomInfo;//[Offset: 0x38, Size: 1]
	<uint64,CrowCustomModeInvitation> ReceivedCustomModeInvitationMap;//[Offset: 0x128, Size: 1]
	bool IsStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]

--------------------------------
Class: CrowCustomRoomInfo.CrowCustomRoomSettingInfo
	uint64 RoomIndex;//[Offset: 0x70, Size: 1]
	enum State;//[Offset: 0x78, Size: 1]
	int MatchingUserCount;//[Offset: 0x7c, Size: 1]
	FString HostName;//[Offset: 0x80, Size: 1]
	uint64 HostId;//[Offset: 0x90, Size: 1]
	bool EnableMoveSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	<uint64,CrowCustomUserInfo> UserInfoes;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: CrowWebEventManager.Object
	CrowHttpDownloader* HttpDownloader;//[Offset: 0x38, Size: 1]
	void OnShopBannerDownloadFinishDelegate(bool InSuccess);// 0x1ad4d40
	void OnNoticeDownloadFinishDelegate(bool InSuccess);// 0x1ad4cb0
	void DownloadShopItemTimeInfoFinishDelegate(bool InSuccess);// 0x1ad4570
	void DownloadShopItemInfoFinishDelegate(bool InSuccess);// 0x1ad44e0
	void DownloadNotice();// 0x1ad44c0

--------------------------------
Class: CrowHttpDownloader.Object

--------------------------------
Class: CrowModCategoryTableManager.Object
	<enum,CrowModCategoryTableRow> ModCategoryData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CrowModCategoryTableRow.TableRowBase
	enum GameMod;//[Offset: 0x8, Size: 1]
	SoftObjectPath ModTexture;//[Offset: 0x10, Size: 1]
	SoftObjectPath ModTextureSmall;//[Offset: 0x28, Size: 1]
	FText GameModName;//[Offset: 0x40, Size: 1]
	FText GameModDescription;//[Offset: 0x58, Size: 1]
	uint32 DefaultMapIndex;//[Offset: 0x70, Size: 1]
	bool IsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool QuickMatchUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool LobbyOnlyUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: CrowDebugLogger.Object
	World* OwnerWorld;//[Offset: 0x30, Size: 1]
	CrowCharacterPawn*[] CharArray;//[Offset: 0x38, Size: 1]
	CrowVehiclePawn*[] VehicleArray;//[Offset: 0x48, Size: 1]
	CrowWeaponBase*[] WeaponArray;//[Offset: 0x58, Size: 1]
	<CrowItemBase*> ItemArray;//[Offset: 0x68, Size: 1]
	<CrowPickupInventory*> InventoryArray;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: CrowSwitchingActor.Actor.Object
	bool bSwitchOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	Actor*[] SwitcingOnActors;//[Offset: 0x228, Size: 1]
	Actor*[] SwitcingOffActors;//[Offset: 0x238, Size: 1]
	StaticMeshComponent* SphereMesh;//[Offset: 0x248, Size: 1]
	void SwitchingActors(bool InSwitchOn);// 0x1b3e940

--------------------------------
Class: CrowWorldProperty.Actor.Object
	StaticMeshComponent* SphereMesh;//[Offset: 0x220, Size: 1]
	CrowWorldPropertyVehicle PropertyVehicle;//[Offset: 0x228, Size: 1]
	CrowDOFPropertyScope PropertyScopeDOF;//[Offset: 0x230, Size: 1]

--------------------------------
Class: CrowWorldPropertyVehicle
	float WorldOceanZ;//[Offset: 0x0, Size: 1]
	float WorldAltitudeLimitZ;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowDOFPropertyScope
	CrowDOFProperty[] Properties;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrowSceneCaptureOwner.Actor.Object

--------------------------------
Class: AntiHackModule.Object

--------------------------------
Class: CrowShopTableManager.Object
	<int,CrowShopTableRow> ShopTableMap;//[Offset: 0x28, Size: 1]
	<int,CrowShopWidgetTableRow> ShopWidgetTableMap;//[Offset: 0x78, Size: 1]
	<int,CrowShopItemLimitTime> LimitTimeItemIDs;//[Offset: 0x108, Size: 1]

--------------------------------
Class: CrowShopWidgetTableRow.TableRowBase
	enum TopType;//[Offset: 0x8, Size: 1]
	CrowShopProductInfo[] ShopProductArray;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowShopItemLimitTime

--------------------------------
Class: CrowSaveGame.SaveGame.Object
	FString UserId;//[Offset: 0x28, Size: 1]
	uint32[] NewItemsIndex;//[Offset: 0x38, Size: 1]
	byte[] NewItemsType;//[Offset: 0x48, Size: 1]
	enum PersonUIType;//[Offset: 0x58, Size: 1]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: WeaponAnimationInfo
	CrowAnimPoseSet Idle;//[Offset: 0x0, Size: 1]
	CrowAnimPoseSet LobbyIdle;//[Offset: 0x18, Size: 1]
	CrowAnimPoseSet Select;//[Offset: 0x30, Size: 1]
	CrowAnimPoseSet Deselect;//[Offset: 0x48, Size: 1]
	CrowAnimPoseSet Reload;//[Offset: 0x60, Size: 1]
	CrowAnimPoseSet ReloadShort;//[Offset: 0x78, Size: 1]
	CrowAnimPoseSet MagazineReload;//[Offset: 0x90, Size: 1]
	CrowAnimPoseSet MagazineReloadShort;//[Offset: 0xa8, Size: 1]
	CrowAnimPoseSet ReloadStart;//[Offset: 0xc0, Size: 1]
	CrowAnimPoseSet ReloadLoop;//[Offset: 0xd8, Size: 1]
	CrowAnimPoseSet ReloadEnd;//[Offset: 0xf0, Size: 1]
	CrowAnimPoseSet PreFire;//[Offset: 0x108, Size: 1]
	CrowAnimPoseSet Fire;//[Offset: 0x120, Size: 1]
	CrowAnimPoseSet MagazineFire;//[Offset: 0x138, Size: 1]
	CrowAnimPoseSet PostFire;//[Offset: 0x150, Size: 1]
	CrowAnimPoseSet Aim;//[Offset: 0x168, Size: 1]
	CrowAnimPoseSet ChangeFireMode;//[Offset: 0x180, Size: 1]
	CrowAnimPoseSet ThrowPinOut;//[Offset: 0x198, Size: 1]

--------------------------------
Class: CLSWeaponAnimation
	CLSAnimation Select;//[Offset: 0x0, Size: 1]
	CLSAnimation Deselect;//[Offset: 0x20, Size: 1]
	CLSAnimation SelectLeftSide;//[Offset: 0x40, Size: 1]
	CLSAnimation DeselectLeftSide;//[Offset: 0x60, Size: 1]
	CLSAnimation PreFire;//[Offset: 0x80, Size: 1]
	CLSAnimation[] FireArray;//[Offset: 0xa0, Size: 1]
	CLSAnimation PostFire;//[Offset: 0xb0, Size: 1]
	CLSAnimation ChangeFireMode;//[Offset: 0xd0, Size: 1]
	CLSMagazineAnimation MagazineAnim;//[Offset: 0xf0, Size: 1]
	CLSMagazineAnimation ProneMagazineAnim;//[Offset: 0x190, Size: 1]

--------------------------------
Class: CLSMagazineAnimation
	CLSAnimation Reload;//[Offset: 0x0, Size: 1]
	CLSAnimation ReloadShort;//[Offset: 0x20, Size: 1]
	CLSAnimation ReloadStart;//[Offset: 0x40, Size: 1]
	CLSAnimation ReloadLoop;//[Offset: 0x60, Size: 1]
	CLSAnimation ReloadEnd;//[Offset: 0x80, Size: 1]

--------------------------------
Class: WeaponDefaultAmmoCount
	int Training;//[Offset: 0x0, Size: 1]
	int TeamDeathMatch;//[Offset: 0x4, Size: 1]
	int BombMission;//[Offset: 0x8, Size: 1]
	int Conquest;//[Offset: 0xc, Size: 1]
	int SquadMatch;//[Offset: 0x10, Size: 1]
	int BattleRoyal;//[Offset: 0x14, Size: 1]

--------------------------------
Class: WeaponShellEjectInfo
	float EjectingBulletMinSpeed;//[Offset: 0x0, Size: 1]
	float EjectingBulletMaxSpeed;//[Offset: 0x4, Size: 1]
	float EjectingBulletHorizontalAngle;//[Offset: 0x8, Size: 1]
	float EjectingBulletVerticalAngle;//[Offset: 0xc, Size: 1]
	float EjectingBulletSpinMinSpeed;//[Offset: 0x10, Size: 1]
	float EjectingBulletSpinMaxSpeed;//[Offset: 0x14, Size: 1]
	ParticleSystem* EjectingBulletEffect;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 1]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 1]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 1]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 1]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 1]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 1]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 1]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 1]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 1]
	Box FixedBounds;//[Offset: 0x388, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	float WarmupTime;//[Offset: 0x3a8, Size: 1]
	int WarmupTickCount;//[Offset: 0x3ac, Size: 1]
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 1]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool bNeedsGPUContextInitForDataInterfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 1]

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 1]
	enum CullReaction;//[Offset: 0x2c, Size: 1]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 1]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 1]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 1]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 1]
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x70, Size: 1]
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x78, Size: 1]
	Guid PerfBaselineVersion;//[Offset: 0x88, Size: 1]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 1]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	float MaxDistance;//[Offset: 0x34, Size: 1]
	int MaxInstances;//[Offset: 0x38, Size: 1]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 1]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 1]
	float MaxGlobalBudgetUsage;//[Offset: 0x44, Size: 1]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 1]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 1]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 1]
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 1]
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 1]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int MinInt;//[Offset: 0xc, Size: 1]
	int MaxInt;//[Offset: 0x10, Size: 1]
	float MinFloat;//[Offset: 0x14, Size: 1]
	float MaxFloat;//[Offset: 0x18, Size: 1]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 1]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float SpawnCountScale;//[Offset: 0x34, Size: 1]

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 1]
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 1]
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 1]
	NiagaraSystem* System;//[Offset: 0x40, Size: 1]
	bool OnTickTest();// 0xca8400
	void OnOwnerTick(float DeltaTime);// 0xca8370
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0xca82e0
	void OnBeginTest();// 0xca82c0
	NiagaraSystem* GetSystem();// 0xca8260

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x220, Size: 1]
	TextRenderComponent* Label;//[Offset: 0x228, Size: 1]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x450, Size: 1]
	MaterialInterface* TextMaterial;//[Offset: 0x468, Size: 1]
	Font* Font;//[Offset: 0x470, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x478, Size: 1]
	byte VerticalAlignment;//[Offset: 0x479, Size: 1]
	Color TextRenderColor;//[Offset: 0x47c, Size: 1]
	float XScale;//[Offset: 0x480, Size: 1]
	float YScale;//[Offset: 0x484, Size: 1]
	float WorldSize;//[Offset: 0x488, Size: 1]
	float InvDefaultSize;//[Offset: 0x48c, Size: 1]
	float HorizSpacingAdjust;//[Offset: 0x490, Size: 1]
	float VertSpacingAdjust;//[Offset: 0x494, Size: 1]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 1]
	void SetYScale(float Value);// 0x3c90ff0
	void SetXScale(float Value);// 0x3c90f70
	void SetWorldSize(float Value);// 0x3c90ef0
	void SetVertSpacingAdjust(float Value);// 0x3c90df0
	void SetVerticalAlignment(byte Value);// 0x3c90e70
	void SetTextRenderColor(Color Value);// 0x3c90d70
	void SetTextMaterial(MaterialInterface* Material);// 0x3c90ce0
	void SetText(FString Value);// 0x3c90c40
	void SetHorizSpacingAdjust(float Value);// 0x3c90b40
	void SetHorizontalAlignment(byte Value);// 0x3c90bc0
	void SetFont(Font* Value);// 0x3c90ab0
	void K2_SetText(out const FText Value);// 0x3c909e0
	Vector GetTextWorldSize();// 0x3c908d0
	Vector GetTextLocalSize();// 0x3c90890

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 1]
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 1]
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 1]
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 1]
	bool bOverrideGlobalBudgetCullingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 1]
	FName IdName;//[Offset: 0x10, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	FName Name;//[Offset: 0x1c, Size: 1]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 1]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	int RandomSeed;//[Offset: 0x2c, Size: 1]
	enum AllocationMode;//[Offset: 0x30, Size: 1]
	int PreAllocationCount;//[Offset: 0x34, Size: 1]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 1]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 1]
	enum SimTarget;//[Offset: 0x88, Size: 1]
	Box FixedBounds;//[Offset: 0x8c, Size: 1]
	int MinDetailLevel;//[Offset: 0xa8, Size: 1]
	int MaxDetailLevel;//[Offset: 0xac, Size: 1]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 1]
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 1]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 1]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 1]
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 1]
	uint32 DefaultShaderStageIndex;//[Offset: 0x110, Size: 1]
	uint32 MaxUpdateIterations;//[Offset: 0x114, Size: 1]
	<uint32> SpawnStages;//[Offset: 0x118, Size: 1]
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 1]
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 1]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 1]
	FString UniqueEmitterName;//[Offset: 0x170, Size: 1]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 1]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 1]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 1]
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 1]
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 1]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 1]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 1]
	Guid UsageId;//[Offset: 0x2c, Size: 1]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 1]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 1]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 1]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 1]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1c8, Size: 1]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x2b8, Size: 1]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2c8, Size: 1]
	void RaiseOnGPUCompilationComplete();// 0xca8430

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 1]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 1]
	byte[] ParameterData;//[Offset: 0x20, Size: 1]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 1]
	Object*[] UObjects;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 1]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 1]
	uint32 PaddedParameterSize;//[Offset: 0x7c, Size: 1]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 1]
	uint16 DestOffset;//[Offset: 0x2, Size: 1]
	uint16 SrcSize;//[Offset: 0x4, Size: 1]
	uint16 DestSize;//[Offset: 0x6, Size: 1]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 1]
	int SrcOffset;//[Offset: 0x20, Size: 1]
	int DestOffset;//[Offset: 0x24, Size: 1]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 1]
	enum ScriptUsageType;//[Offset: 0x10, Size: 1]
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 1]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	Guid BaseScriptID;//[Offset: 0x28, Size: 1]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 1]
	Guid ScriptVersionID;//[Offset: 0x48, Size: 1]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 1]
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 1]
	int NumTempRegisters;//[Offset: 0x20, Size: 1]
	int NumUserPtrs;//[Offset: 0x24, Size: 1]
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x28, Size: 1]
	byte[] ScriptLiterals;//[Offset: 0x38, Size: 1]
	NiagaraVariable[] Attributes;//[Offset: 0x48, Size: 1]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x58, Size: 1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x60, Size: 1]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x70, Size: 1]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x90, Size: 1]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xa0, Size: 1]
	NiagaraStatScope[] StatScopes;//[Offset: 0xb0, Size: 1]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xc0, Size: 1]
	enum LastCompileStatus;//[Offset: 0xd0, Size: 1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xd8, Size: 1]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bNeedsGPUContextInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 1]
	FString StringValue;//[Offset: 0x20, Size: 1]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	int UserPtrIdx;//[Offset: 0x8, Size: 1]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 1]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 1]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 1]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 1]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 1]
	FName OwnerName;//[Offset: 0x8, Size: 1]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 1]
	int NumOutputs;//[Offset: 0x20, Size: 1]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 1]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 1]
	FName Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 1]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 1]
	FName FriendlyName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 1]
	FString DIClassName;//[Offset: 0x10, Size: 1]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 1]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 1]
	FName IterationSource;//[Offset: 0x8, Size: 1]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	FName[] OutputDestinations;//[Offset: 0x18, Size: 1]
	int MinStage;//[Offset: 0x28, Size: 1]
	int MaxStage;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 1]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 1]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 1]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 1]
	Guid CompileId;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 1]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 1]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 1]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0xca3840
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0xca3750
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0xca3670
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0xca3210
	void SetIntParameter(FString InVariableName, int InValue);// 0xca3130
	void SetFloatParameter(FString InVariableName, float InValue);// 0xca3040
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0xca2f50
	void SetBoolParameter(FString InVariableName, bool InValue);// 0xca2e70
	Vector GetVectorParameter(FString InVariableName);// 0xca2a50
	Vector4 GetVector4Parameter(FString InVariableName);// 0xca2990
	Vector2D GetVector2DParameter(FString InVariableName);// 0xca28d0
	Quat GetQuatParameter(FString InVariableName);// 0xca2810
	int GetIntParameter(FString InVariableName);// 0xca2690
	float GetFloatParameter(FString InVariableName);// 0xca25e0
	LinearColor GetColorParameter(FString InVariableName);// 0xca2520
	bool GetBoolParameter(FString InVariableName);// 0xca2470

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 1]
	FName Name;//[Offset: 0x8, Size: 1]
	int UserPtrIdx;//[Offset: 0x10, Size: 1]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 1]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 1]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 1]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 1]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 1]
	FName SourceEmitter;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 1]
	FName ID;//[Offset: 0x4, Size: 1]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 1]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 1]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 1]
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 1]
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 1]
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	enum SimTarget;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 1]
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 1]
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 1]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 1]
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 1]
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 1]
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 1]
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 1]
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 1]
	float Medium;//[Offset: 0x4, Size: 1]
	float High;//[Offset: 0x8, Size: 1]
	float Epic;//[Offset: 0xc, Size: 1]
	float Cine;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 1]
	int SortOrderHint;//[Offset: 0x58, Size: 1]
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 1]
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 1]
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 1]
	Guid SourceEmitterID;//[Offset: 0x34, Size: 1]
	FName SourceEventName;//[Offset: 0x44, Size: 1]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 1]
	FName SimulationStageName;//[Offset: 0x30, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 1]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 1]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 1]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 1]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 1]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 1]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 1]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 1]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 1]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 1]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 1]

--------------------------------
Class: WeaponSpreadInfo
	CurveFloat* Curve;//[Offset: 0x0, Size: 1]
	WeaponSpreadPoseInfo Stand;//[Offset: 0x8, Size: 1]
	WeaponSpreadPoseInfo Crouch;//[Offset: 0x18, Size: 1]
	WeaponSpreadPoseInfo CrouchWalk;//[Offset: 0x28, Size: 1]
	WeaponSpreadPoseInfo CrouchRun;//[Offset: 0x38, Size: 1]
	WeaponSpreadPoseInfo CrouchSprint;//[Offset: 0x48, Size: 1]
	WeaponSpreadPoseInfo Prone;//[Offset: 0x58, Size: 1]
	WeaponSpreadPoseInfo Jump;//[Offset: 0x68, Size: 1]
	WeaponSpreadPoseInfo Walk;//[Offset: 0x78, Size: 1]
	WeaponSpreadPoseInfo Run;//[Offset: 0x88, Size: 1]
	WeaponSpreadPoseInfo Sprint;//[Offset: 0x98, Size: 1]
	float BurstModeRate;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: WeaponSpreadPoseInfo
	float Default;//[Offset: 0x0, Size: 1]
	float Increase;//[Offset: 0x4, Size: 1]
	float IncreaseMax;//[Offset: 0x8, Size: 1]
	float Decrease;//[Offset: 0xc, Size: 1]

--------------------------------
Class: WeaponRecoilInfo
	bool IsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	DataTable* RecoilTable;//[Offset: 0x8, Size: 1]
	CurveFloat* IncreaseCurve;//[Offset: 0x10, Size: 1]
	float IncreaseTime;//[Offset: 0x18, Size: 1]
	float BurstModeRate;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WeaponCameraShakeInfo
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class MatineeCameraShake* CameraShake_FP;//[Offset: 0x8, Size: 1]
	class MatineeCameraShake* CameraShake_TP;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowWeaponPartsBarrelTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: CrowWeaponPartsMagazineTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x3a0, Size: 1]
	int AmmoInClip;//[Offset: 0x3b0, Size: 1]
	CLSMagazineAnimation MagazineAnim;//[Offset: 0x3b8, Size: 1]
	CLSMagazineAnimation ProneMagazineAnim;//[Offset: 0x458, Size: 1]

--------------------------------
Class: CrowWeaponPartsMuzzleTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x3a0, Size: 1]
	AkAudioEvent* ContinuousFireSound_1P_W;//[Offset: 0x3b0, Size: 1]
	AkAudioEvent* FireSound_W;//[Offset: 0x3b8, Size: 1]
	AkAudioEvent* FireEndSound_1P_W;//[Offset: 0x3c0, Size: 1]
	AkAudioEvent* ContinuousFireSound_3P_W;//[Offset: 0x3c8, Size: 1]
	AkAudioEvent* FireSound_3P_W;//[Offset: 0x3d0, Size: 1]
	AkAudioEvent* FireEndSound_3P_W;//[Offset: 0x3d8, Size: 1]
	bool HideMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	ParticleSystem* MuzzleFX_1P;//[Offset: 0x3e8, Size: 1]
	NiagaraSystem* MuzzleFX_1P_N;//[Offset: 0x3f0, Size: 1]
	bool Attach_MuzzleFX_1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	ParticleSystem* MuzzleFX_3P;//[Offset: 0x400, Size: 1]
	NiagaraSystem* MuzzleFX_3P_N;//[Offset: 0x408, Size: 1]
	bool Attach_MuzzleFX_3P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]

--------------------------------
Class: CrowWeaponPartsPistolGripTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: CrowWeaponPartsSecondarySightTableRow.CrowWeaponPartsPrimarySightTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase

--------------------------------
Class: CrowWeaponPartsSideBarrelTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: CrowWeaponPartsStockTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: CrowWeaponPartsUnderBarrelTableRow.CrowWeaponPartsTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: CrowCharacterTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	class CrowCharacterPawn* CharacterClass;//[Offset: 0x1f0, Size: 1]

--------------------------------
Class: CrowClothHairTableRow.CrowClothTableBaseRow.CrowItemTableBaseRow.TableRowBase
	enum SubClothType;//[Offset: 0x408, Size: 1]

--------------------------------
Class: CrowClothTableBaseRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	FString SortGroup;//[Offset: 0x1f0, Size: 1]
	CrowChangeRenderClothParts[] ChangeRenderClothParts;//[Offset: 0x200, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x210, Size: 1]
	enum ExpertSkill;//[Offset: 0x218, Size: 1]
	byte ExpertSkillCount;//[Offset: 0x21c, Size: 1]
	enum[] ExpertSkillAmmoTypeArray;//[Offset: 0x220, Size: 1]
	FText ExpertSkillDesc;//[Offset: 0x230, Size: 1]
	FName AttachedEffectSocket;//[Offset: 0x248, Size: 1]
	bool UseThirdPersonOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	SoftObjectPath ClothMesh_FP;//[Offset: 0x258, Size: 1]
	SoftObjectPath ClothMesh_FP_Loose;//[Offset: 0x270, Size: 1]
	SoftObjectPath ClothMesh_TP;//[Offset: 0x288, Size: 1]
	SoftObjectPath ClothMesh_TP_Loose;//[Offset: 0x2a0, Size: 1]
	SoftObjectPath ClothMesh_FP_Female;//[Offset: 0x2b8, Size: 1]
	SoftObjectPath ClothMesh_FP_Loose_Female;//[Offset: 0x2d0, Size: 1]
	SoftObjectPath ClothMesh_TP_Female;//[Offset: 0x2e8, Size: 1]
	SoftObjectPath ClothMesh_TP_Loose_Female;//[Offset: 0x300, Size: 1]
	SoftObjectPath DefaultIcon_Female;//[Offset: 0x318, Size: 1]
	SoftObjectPath LobbyClothMesh_TP;//[Offset: 0x330, Size: 1]
	SoftObjectPath LobbyClothMesh_TP_Loose;//[Offset: 0x348, Size: 1]
	SoftObjectPath LobbyClothMesh_TP_Female;//[Offset: 0x360, Size: 1]
	SoftObjectPath LobbyClothMesh_TP_Loose_Female;//[Offset: 0x378, Size: 1]
	SoftObjectPath[] Materials1P;//[Offset: 0x390, Size: 1]
	SoftObjectPath[] Materials3P;//[Offset: 0x3a0, Size: 1]
	SoftObjectPath[] Materials1P_Female;//[Offset: 0x3b0, Size: 1]
	SoftObjectPath[] Materials3P_Female;//[Offset: 0x3c0, Size: 1]
	SoftObjectPath[] LobbyMaterials3P;//[Offset: 0x3d0, Size: 1]
	SoftObjectPath[] LobbyMaterials3P_Female;//[Offset: 0x3e0, Size: 1]
	SoftObjectPath AttachedEffect;//[Offset: 0x3f0, Size: 1]

--------------------------------
Class: CrowChangeRenderClothParts
	enum ChangeRenderClothMainType;//[Offset: 0x0, Size: 1]
	enum ChangeRenderClothHead;//[Offset: 0x1, Size: 1]
	enum ChangeRenderClothGlasses;//[Offset: 0x2, Size: 1]
	enum ChangeRenderClothMask;//[Offset: 0x3, Size: 1]
	enum ChangeRenderClothHair;//[Offset: 0x4, Size: 1]
	enum FitType;//[Offset: 0x5, Size: 1]

--------------------------------
Class: CrowClothHeadTableRow.CrowClothTableBaseRow.CrowItemTableBaseRow.TableRowBase
	enum SubClothType;//[Offset: 0x408, Size: 1]

--------------------------------
Class: CrowClothGlassesTableRow.CrowClothTableBaseRow.CrowItemTableBaseRow.TableRowBase
	enum SubClothType;//[Offset: 0x408, Size: 1]

--------------------------------
Class: CrowClothMaskTableRow.CrowClothTableBaseRow.CrowItemTableBaseRow.TableRowBase
	enum SubClothType;//[Offset: 0x408, Size: 1]
	bool bIsGasMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]

--------------------------------
Class: CrowClothTopTableRow.CrowClothTableBaseRow.CrowItemTableBaseRow.TableRowBase
	SoftObjectPath ClothMesh_FP_Patch;//[Offset: 0x408, Size: 1]
	SoftObjectPath ClothMesh_TP_Patch;//[Offset: 0x420, Size: 1]
	SoftObjectPath ClothMesh_FP_Patch_Female;//[Offset: 0x438, Size: 1]
	SoftObjectPath ClothMesh_TP_Patch_Female;//[Offset: 0x450, Size: 1]
	SoftObjectPath LobbyClothMesh_TP_Patch;//[Offset: 0x468, Size: 1]
	SoftObjectPath LobbyClothMesh_TP_Patch_Female;//[Offset: 0x480, Size: 1]

--------------------------------
Class: CrowClothBeardTableRow.CrowClothTableBaseRow.CrowItemTableBaseRow.TableRowBase
	<FString,SkeletalMesh*> RaceBeardMeshList;//[Offset: 0x408, Size: 1]

--------------------------------
Class: CrowClothPatchTableRow.CrowClothTableBaseRow.CrowItemTableBaseRow.TableRowBase
	SoftObjectPath PatchMaterial;//[Offset: 0x408, Size: 1]

--------------------------------
Class: CrowArmorTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	enum ArmorType;//[Offset: 0x1f0, Size: 1]
	int ArmorTier;//[Offset: 0x1f4, Size: 1]
	SoftObjectPath Mesh3P;//[Offset: 0x1f8, Size: 1]
	float HP;//[Offset: 0x210, Size: 1]
	float Reduction;//[Offset: 0x214, Size: 1]
	<enum,float> WeaponTypeReduction;//[Offset: 0x218, Size: 1]
	bool Head;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool neck_01;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool clavicle_l;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool clavicle_r;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	bool spine_01;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool spine_02;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool spine_03;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	bool upperarm_l;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26f, Size: 1]
	bool upperarm_r;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool lowerarm_l;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	bool lowerarm_r;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 1]
	bool hand_l;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x273, Size: 1]
	bool hand_r;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool Pelvis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	bool thigh_l;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 1]
	bool thigh_r;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 1]
	bool calf_l;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool calf_r;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	bool foot_l;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 1]
	bool foot_r;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b, Size: 1]

--------------------------------
Class: CrowInvenBagRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	SoftObjectPath Mesh3P;//[Offset: 0x1f0, Size: 1]
	uint32 InvenCount;//[Offset: 0x208, Size: 1]

--------------------------------
Class: CrowCurrencyTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	enum CurrencyType;//[Offset: 0x1f0, Size: 1]
	class CrowItemCurrencyBase* CurrencyClass;//[Offset: 0x1f8, Size: 1]
	SoftObjectPath Mesh3P;//[Offset: 0x200, Size: 1]
	CrowCurrencyMeshInfo[] MeshArray;//[Offset: 0x218, Size: 1]

--------------------------------
Class: CrowItemCurrencyBase.CrowEquipmentBase.CrowItemMesh.CrowItemBase.Actor.Object
	CrowCurrencyTableRow ItemTable;//[Offset: 0x348, Size: 1]
	bool UseDefaultSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	enum CurrencyType;//[Offset: 0x571, Size: 1]
	uint32 ItemIndex;//[Offset: 0x574, Size: 1]
	uint32 ItemCount;//[Offset: 0x578, Size: 1]

--------------------------------
Class: CrowCurrencyMeshInfo
	class CrowItemMeshActor* MeshClass;//[Offset: 0x0, Size: 1]
	int CountMin;//[Offset: 0x8, Size: 1]
	int CountMax;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CrowVictoryPoseTableRow.CrowItemTableBaseRow.TableRowBase
	SoftObjectPath Animation;//[Offset: 0x1e8, Size: 1]
	FString[] WeaponArray;//[Offset: 0x200, Size: 1]

--------------------------------
Class: CrowVehicleTableRow.CrowItemTableBaseRow.TableRowBase
	enum VehicleType;//[Offset: 0x1e0, Size: 1]
	class CrowVehiclePawn* VehicleTarget;//[Offset: 0x1e8, Size: 1]
	class CrowVehicleParachuteActor* ParachuteActor;//[Offset: 0x1f0, Size: 1]
	AnimMontage* ParachuteAnimMontage;//[Offset: 0x1f8, Size: 1]
	CrowPhysMatEffectPair[] ParachuteOnGroundEffect;//[Offset: 0x200, Size: 1]
	enum ShopProductSubType;//[Offset: 0x210, Size: 1]
	FName SkidMarkIndex;//[Offset: 0x214, Size: 1]

--------------------------------
Class: CrowVehicleParachuteActor.Actor.Object
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x220, Size: 1]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x228, Size: 1]
	float MaxSpeed;//[Offset: 0x230, Size: 1]
	float LifeTime;//[Offset: 0x234, Size: 1]
	int VehicleIndex;//[Offset: 0x238, Size: 1]
	CrowVehiclePawn* VehiclePawn;//[Offset: 0x240, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x248, Size: 1]
	Vector CurrentLocation;//[Offset: 0x250, Size: 1]
	enum ParachuteState;//[Offset: 0x25c, Size: 1]
	void OnRep_ParachuteState();// 0x1b55830

--------------------------------
Class: CrowPhysMatEffectPair
	SoftObjectPath PhysicalMaterial;//[Offset: 0x0, Size: 1]
	SoftObjectPath Particle;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowWeaponCharmTableRow.CrowItemTableBaseRow.TableRowBase
	int Grade;//[Offset: 0x1e0, Size: 1]
	float Weight;//[Offset: 0x1e4, Size: 1]
	CrowPartModelInfo ModelInfo;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: CrowWeaponStickerTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	CrowDecalInfo DecalInfo;//[Offset: 0x1f0, Size: 1]
	int Grade;//[Offset: 0x250, Size: 1]
	enum Type;//[Offset: 0x254, Size: 1]
	Texture* DecalImage;//[Offset: 0x258, Size: 1]

--------------------------------
Class: CrowEtcTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	enum EtcItemType;//[Offset: 0x1f0, Size: 1]
	int64 DurationTime;//[Offset: 0x1f8, Size: 1]

--------------------------------
Class: CrowBuffTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	uint32 GroupIndex;//[Offset: 0x1f0, Size: 1]
	enum BuffEventType;//[Offset: 0x1f4, Size: 1]
	enum BuffType;//[Offset: 0x1f5, Size: 1]
	enum WeaponUIType;//[Offset: 0x1f6, Size: 1]
	enum BuffValueType;//[Offset: 0x1f7, Size: 1]
	int BuffIntValue;//[Offset: 0x1f8, Size: 1]
	float BuffFloatValue;//[Offset: 0x1fc, Size: 1]
	int64 DurationTime;//[Offset: 0x200, Size: 1]
	FText BuffDescription;//[Offset: 0x208, Size: 1]
	FText BuffName;//[Offset: 0x220, Size: 1]

--------------------------------
Class: CrowEyeColorTableBaseRow.CrowItemTableBaseRow.TableRowBase
	SoftObjectPath EyeMaterial;//[Offset: 0x1e0, Size: 1]
	SoftObjectPath EyeMaterial_LOD;//[Offset: 0x1f8, Size: 1]

--------------------------------
Class: CrowTattooTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	enum Type;//[Offset: 0x1f0, Size: 1]
	FString NameKey;//[Offset: 0x1f8, Size: 1]
	FString DescriptionKey;//[Offset: 0x208, Size: 1]
	SoftObjectPath Icon;//[Offset: 0x218, Size: 1]
	CrowTattooInfo Tattoo;//[Offset: 0x230, Size: 1]
	CrowTattooInfo TattooSub;//[Offset: 0x248, Size: 1]

--------------------------------
Class: CrowTattooInfo
	float PosU;//[Offset: 0x0, Size: 1]
	float PosV;//[Offset: 0x4, Size: 1]
	float ScaleX;//[Offset: 0x8, Size: 1]
	float ScaleY;//[Offset: 0xc, Size: 1]
	Texture2D* Image;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowEmotionTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	FString NameKey;//[Offset: 0x1f0, Size: 1]
	FString DescriptionKey;//[Offset: 0x200, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x210, Size: 1]
	PaperSprite* Icon;//[Offset: 0x218, Size: 1]

--------------------------------
Class: CrowSprayTableRow.CrowItemTableBaseRow.TableRowBase
	int SprayIndex;//[Offset: 0x1e0, Size: 1]
	FText HelpText;//[Offset: 0x1e8, Size: 1]
	FText NameKey;//[Offset: 0x200, Size: 1]
	FText DescKey;//[Offset: 0x218, Size: 1]
	PaperSprite* IconImage;//[Offset: 0x230, Size: 1]
	Texture* DecalImage;//[Offset: 0x258, Size: 1]
	enum SprayType;//[Offset: 0x280, Size: 1]
	CrowDecalInfo DecalInfo;//[Offset: 0x288, Size: 1]

--------------------------------
Class: CrowClanMarkTableRow.CrowItemTableBaseRow.TableRowBase
	FText HelpText;//[Offset: 0x1e0, Size: 1]
	enum ImageType;//[Offset: 0x1f8, Size: 1]
	PaperSprite* Resource;//[Offset: 0x200, Size: 1]
	enum AcquireType;//[Offset: 0x208, Size: 1]
	int ShopIndex;//[Offset: 0x20c, Size: 1]

--------------------------------
Class: CrowResultMVPTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	FText NameKey;//[Offset: 0x1f0, Size: 1]
	FText DescriptionKey;//[Offset: 0x208, Size: 1]
	PaperSprite* Icon;//[Offset: 0x220, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x228, Size: 1]
	AnimMontage* LobbyAnimMontage;//[Offset: 0x230, Size: 1]
	CrowResultMVPObjectInfo[] Objects;//[Offset: 0x238, Size: 1]

--------------------------------
Class: CrowResultMVPObjectInfo
	SkeletalMesh* Mesh;//[Offset: 0x0, Size: 1]
	AnimationAsset* AnimAsset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowItemRankPointTableRow.TableRowBase
	uint32 Index;//[Offset: 0x8, Size: 1]
	FString HelpText;//[Offset: 0x10, Size: 1]
	enum ItemGrade;//[Offset: 0x20, Size: 1]
	uint32 PointValue;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CrowCanEquipParts
	FString WeaponTextIndex;//[Offset: 0x0, Size: 1]
	enum[] PartsTypeArray;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CrowParachuteSkinTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	SoftObjectPath Skin;//[Offset: 0x1f0, Size: 1]
	SoftObjectPath SkinLod;//[Offset: 0x208, Size: 1]

--------------------------------
Class: CrowFaceTableBaseRow.CrowItemTableBaseRow.TableRowBase
	bool bIsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	CrowSkinMaterial SkinTop;//[Offset: 0x1e8, Size: 1]
	CrowSkinMaterial SkinBottom;//[Offset: 0x230, Size: 1]
	CrowSkinMaterial SkinGloves;//[Offset: 0x278, Size: 1]
	CrowSkinMaterial SkinShoes;//[Offset: 0x2c0, Size: 1]
	SoftObjectPath FaceMesh;//[Offset: 0x308, Size: 1]
	SoftObjectPath LobbyFaceMesh;//[Offset: 0x320, Size: 1]

--------------------------------
Class: CrowSkinMaterial
	SoftObjectPath SkinMaterialIns_1P;//[Offset: 0x0, Size: 1]
	SoftObjectPath SkinMaterialIns_3P;//[Offset: 0x18, Size: 1]
	SoftObjectPath SkinMaterialIns_3P_LOD;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowWeaponSkinTableRow.CrowItemTableBaseRow.TableRowBase
	FString HelpText;//[Offset: 0x1e0, Size: 1]
	uint32 SkinIndex;//[Offset: 0x1f0, Size: 1]
	int WeaponIndex;//[Offset: 0x1f4, Size: 1]
	CrowWeaponSkinInfoTable WeaponSkinInfo;//[Offset: 0x1f8, Size: 1]

--------------------------------
Class: CrowWeaponSkinInfoTable
	<FName,SoftObjectPath> MainBodySkins_1P;//[Offset: 0x0, Size: 1]
	<FName,SoftObjectPath> MainBodySkins_3P;//[Offset: 0x50, Size: 1]
	CrowWeaponPartSkinListTable[] WeaponPartsSkinList;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: CrowWeaponPartSkinListTable
	enum WeaponPartsType;//[Offset: 0x0, Size: 1]
	CrowWeaponPartSkinTable[] WeaponPartsSkins;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrowWeaponPartSkinTable
	int WeaponPartsIndex;//[Offset: 0x0, Size: 1]
	FString HelpText;//[Offset: 0x8, Size: 1]
	<FName,SoftObjectPath> WeaponPartsSkin_1P;//[Offset: 0x18, Size: 1]
	<FName,SoftObjectPath> WeaponPartsSkinFront_1P;//[Offset: 0x68, Size: 1]
	<FName,SoftObjectPath> WeaponPartsSkin_3P;//[Offset: 0xb8, Size: 1]
	<FName,SoftObjectPath> WeaponPartsSkinFront_3P;//[Offset: 0x108, Size: 1]

--------------------------------
Class: CrowWeaponSpreadComponent.ActorComponent.Object
	enum LastMovementFlags;//[Offset: 0xb0, Size: 1]
	WeaponSpreadInfo NormalSpreadInfo;//[Offset: 0xb8, Size: 1]
	CrowLinearCurve NormalLinearCurve;//[Offset: 0x168, Size: 1]
	WeaponSpreadInfo AimSpreadInfo;//[Offset: 0x198, Size: 1]
	CrowLinearCurve AimLinearCurve;//[Offset: 0x248, Size: 1]
	enum WeaponState;//[Offset: 0x278, Size: 1]
	CrowWeaponPartsOptions PartsOptions;//[Offset: 0x27c, Size: 1]

--------------------------------
Class: CrowLinearCurve
	CrowLinearCurveKey[] KeyArray;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrowLinearCurveKey
	float Time;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowWeaponRecoilComponent.ActorComponent.Object
	Controller* Controller;//[Offset: 0xb0, Size: 1]
	CrowPlayerControllerBase* PlayerController;//[Offset: 0xb8, Size: 1]
	WeaponRecoilInfo NormalRecoilInfo;//[Offset: 0xc0, Size: 1]
	Rotator[] NormalRotationArray;//[Offset: 0xe0, Size: 1]
	WeaponRecoilInfo AimRecoilInfo;//[Offset: 0xf0, Size: 1]
	Rotator[] AimRotationArray;//[Offset: 0x110, Size: 1]
	CurveFloat* IncreaseCurve;//[Offset: 0x148, Size: 1]
	CrowWeaponTableRow WeaponTable;//[Offset: 0x180, Size: 1]
	CrowWeaponPartsOptions PartsOptions;//[Offset: 0x14e0, Size: 1]

--------------------------------
Class: CrowWeaponStateBase.Object
	CrowWeaponBase* WeaponBase;//[Offset: 0x28, Size: 1]
	CrowCharacterPawn* CharacterOwner;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowWeaponStateReload.CrowWeaponStateBase.Object

--------------------------------
Class: CrowWeaponSubStateBase.Object
	CrowWeaponBase* WeaponBase;//[Offset: 0x28, Size: 1]
	CrowCharacterPawn* CharacterOwner;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CrowWeaponSubStateAim.CrowWeaponSubStateBase.Object

--------------------------------
Class: CrowWeaponAniStateInfo
	enum WeaponState;//[Offset: 0x0, Size: 1]
	enum FireState;//[Offset: 0x1, Size: 1]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bIsReloadShort;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bIsLoopFireAni;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: CrowCharacterAnimWeapon
	AnimSequenceBase* Equip;//[Offset: 0x0, Size: 1]
	AnimSequenceBase* UnEquip;//[Offset: 0x8, Size: 1]
	AnimSequenceBase* Reload;//[Offset: 0x10, Size: 1]
	AnimSequenceBase* ReloadShort;//[Offset: 0x18, Size: 1]
	AnimSequenceBase* PreFire;//[Offset: 0x20, Size: 1]
	AnimSequenceBase* Fire;//[Offset: 0x28, Size: 1]
	AnimSequenceBase* AimFire;//[Offset: 0x30, Size: 1]
	AnimSequenceBase* PostFire;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CrowOptimizationPartsInfo
	float OptimizationScreenSize;//[Offset: 0x0, Size: 1]
	int OptimizationLOD;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CLSComponentTransform
	Matrix TransformMatrix;//[Offset: 0x0, Size: 1]
	Transform Transform;//[Offset: 0x40, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 1]
	HitResult HitResult;//[Offset: 0x78, Size: 1]
	FString ComponentName;//[Offset: 0x100, Size: 1]

--------------------------------
Class: CLSVaultTraceSettings
	float MaxLedgeHeight;//[Offset: 0x0, Size: 1]
	float MinLedgeHeight;//[Offset: 0x4, Size: 1]
	float ReachDistance;//[Offset: 0x8, Size: 1]
	float RunReachDistance;//[Offset: 0xc, Size: 1]
	float ForwardTraceRadius;//[Offset: 0x10, Size: 1]
	float DownwardTraceRadius;//[Offset: 0x14, Size: 1]
	float MaxWindowHeightSize;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CLSVaultNetTransform
	Vector_NetQuantize VaultLocation;//[Offset: 0x0, Size: 1]
	Rotator VaultRotation;//[Offset: 0xc, Size: 1]
	PrimitiveComponent* VaultOnComponent;//[Offset: 0x18, Size: 1]
	CLSNetHitResult NetHitResult;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CLSNetHitResult
	bool bSerializeBoneName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSerializeImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bSerializeFaceIndexAndItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bSerializeComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bSerializeActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x14, Size: 1]
	FName BoneName;//[Offset: 0x20, Size: 1]
	int FaceIndex;//[Offset: 0x28, Size: 1]
	int Item;//[Offset: 0x2c, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 1]
	Actor* Actor;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CLSVaultTime
	delegate UpdateFunction;//[Offset: 0x14, Size: 1]
	delegate FinishedFunction;//[Offset: 0x24, Size: 1]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	void Stop();// 0x3c945c0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x3c944f0
	void SetTimelineLengthMode(byte NewLengthMode);// 0x3c94470
	void SetTimelineLength(float NewLength);// 0x3c943f0
	void SetPlayRate(float NewRate);// 0x3c94250
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x3c942d0
	void SetNewTime(float NewTime);// 0x3c941d0
	void SetLooping(bool bNewLooping);// 0x3c94140
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x3c94070
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x3c93fe0
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x3c93f10
	void ReverseFromEnd();// 0x3c93ef0
	void Reverse();// 0x3c93ed0
	void PlayFromStart();// 0x3c93eb0
	void Play();// 0x3c93e90
	void OnRep_Timeline();// 0x3c93e70
	bool IsReversing();// 0x3c93e40
	bool IsPlaying();// 0x3c93e10
	bool IsLooping();// 0x3c93de0
	float GetTimelineLength();// 0x3c93db0
	float GetPlayRate();// 0x3c93ca0
	float GetPlaybackPosition();// 0x3c93cd0
	bool GetIgnoreTimeDilation();// 0x3c93c70

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	float Length;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float position;//[Offset: 0xc, Size: 1]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 1]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 1]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 1]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 1]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 1]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 1]
	Object* PropertySetObject;//[Offset: 0x70, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 1]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 1]
	delegate EventFunc;//[Offset: 0x4, Size: 1]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName VectorPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName FloatPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CLSCameraParameters
	enum DesiredViewMode;//[Offset: 0x0, Size: 1]
	bool bRightShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: CrowCharacterTracker.Object
	World* World;//[Offset: 0x28, Size: 1]
	CrowCharacterBase* OwnerCharacter;//[Offset: 0x30, Size: 1]
	SkeletalMeshComponent* MeshTP;//[Offset: 0x38, Size: 1]

--------------------------------
Class: DataTableRowHandle
	DataTable* DataTable;//[Offset: 0x0, Size: 1]
	FName RowName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CLSMovementSettingsData.TableRowBase
	CLSMovementSettingsStance OnGround;//[Offset: 0x8, Size: 1]
	CLSMovementSettingsStance OnInjured;//[Offset: 0x68, Size: 1]
	CLSMovementSettingsSwim OnSwimming;//[Offset: 0xc8, Size: 1]
	CLSMovementSettingsLadder OnLadder;//[Offset: 0x110, Size: 1]

--------------------------------
Class: CLSMovementSettingsStance
	CLSMovementSettings Standing;//[Offset: 0x0, Size: 1]
	CLSMovementSettings Crouching;//[Offset: 0x20, Size: 1]
	CLSMovementSettings Prone;//[Offset: 0x40, Size: 1]

--------------------------------
Class: CLSMovementSettings
	float WalkSpeed;//[Offset: 0x0, Size: 1]
	float RunSpeed;//[Offset: 0x4, Size: 1]
	float SprintSpeed;//[Offset: 0x8, Size: 1]
	CurveVector* MovementCurve;//[Offset: 0x10, Size: 1]
	CurveFloat* RotationRateCurve;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CLSMovementSettingsSwim
	CLSMovementSettings Settings;//[Offset: 0x0, Size: 1]
	float DiveAcceleration;//[Offset: 0x20, Size: 1]
	float BuoyancySurface;//[Offset: 0x24, Size: 1]
	float BuoyancyUnderwater;//[Offset: 0x28, Size: 1]
	float DiveImpactDelayTime;//[Offset: 0x2c, Size: 1]
	float DiveImpactBuoyancy;//[Offset: 0x30, Size: 1]
	float DiveImpactDelayDecel;//[Offset: 0x34, Size: 1]
	float DiveImpactSpeedXY;//[Offset: 0x38, Size: 1]
	float DiveImpactSpeedZ;//[Offset: 0x3c, Size: 1]
	float CrouchLimitDepth;//[Offset: 0x40, Size: 1]
	float ProneLimitDepth;//[Offset: 0x44, Size: 1]

--------------------------------
Class: CLSMovementSettingsLadder
	float LadderUpSpeed;//[Offset: 0x0, Size: 1]
	float LadderDownSpeed;//[Offset: 0x4, Size: 1]
	float LadderJumpOutImpulse;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CLSVaultParams
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 1]
	CurveVector* PositionCorrectionCurve;//[Offset: 0x8, Size: 1]
	CurveFloat* CameraPivotInterpCurveOverride;//[Offset: 0x10, Size: 1]
	float StartingPosition;//[Offset: 0x18, Size: 1]
	float EndTrimPosition;//[Offset: 0x1c, Size: 1]
	float PlayRate;//[Offset: 0x20, Size: 1]
	Vector StartingOffset;//[Offset: 0x24, Size: 1]
	float VaultEndVelocity;//[Offset: 0x30, Size: 1]
	float VaultEndVelocityZ;//[Offset: 0x34, Size: 1]

--------------------------------
Class: CLSCharacterBattleStanceTime
	float ToReady;//[Offset: 0x0, Size: 1]
	float ToRelaxed;//[Offset: 0x4, Size: 1]
	float ToKeepDirectedOnWalk;//[Offset: 0x8, Size: 1]
	float ToReadyOnWalkStop;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CLSVaultAsset
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 1]
	CurveVector* PositionCorrectionCurve;//[Offset: 0x8, Size: 1]
	CurveFloat* CameraPivotInterpCurveOverride;//[Offset: 0x10, Size: 1]
	Vector StartingOffset;//[Offset: 0x18, Size: 1]
	float LowHeight;//[Offset: 0x24, Size: 1]
	float LowPlayRate;//[Offset: 0x28, Size: 1]
	float LowStartPosition;//[Offset: 0x2c, Size: 1]
	float LowEndTrimPosition;//[Offset: 0x30, Size: 1]
	float HighHeight;//[Offset: 0x34, Size: 1]
	float HighPlayRate;//[Offset: 0x38, Size: 1]
	float HighStartPosition;//[Offset: 0x3c, Size: 1]
	float HighEndTrimPosition;//[Offset: 0x40, Size: 1]
	float VaultEndVelocity;//[Offset: 0x44, Size: 1]
	float VaultEndVelocityZ;//[Offset: 0x48, Size: 1]
	bool UseGroundCheckCorrectionZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool UseSlopeMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool KeepAnimationOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	bool StopVaultOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 1]

--------------------------------
Class: CrowLobbyNoiseAnimInfo
	AnimMontage*[] NoiseAnimations;//[Offset: 0x0, Size: 1]
	int MinSecond;//[Offset: 0x10, Size: 1]
	int MaxSecond;//[Offset: 0x14, Size: 1]
	AnimMontage* PrePlayNoiseAnimations;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x230, Size: 1]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x3c89820
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x3c89720

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x358, Size: 1]
	float OuterConeAngle;//[Offset: 0x35c, Size: 1]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x3c898a0
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x3c897a0

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7b0, Size: 1]
	CineCameraComponent* GetCineCameraComponent();// 0x3216710

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7d0, Size: 1]
	CameraFilmbackSettings Filmback;//[Offset: 0x7dc, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x7e8, Size: 1]
	CameraFocusSettings FocusSettings;//[Offset: 0x800, Size: 1]
	float CurrentFocalLength;//[Offset: 0x858, Size: 1]
	float CurrentAperture;//[Offset: 0x85c, Size: 1]
	float CurrentFocusDistance;//[Offset: 0x860, Size: 1]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x870, Size: 1]
	NamedLensPreset[] LensPresets;//[Offset: 0x880, Size: 1]
	FString DefaultFilmbackPresetName;//[Offset: 0x890, Size: 1]
	FString DefaultFilmbackPreset;//[Offset: 0x8a0, Size: 1]
	FString DefaultLensPresetName;//[Offset: 0x8b0, Size: 1]
	float DefaultLensFocalLength;//[Offset: 0x8c0, Size: 1]
	float DefaultLensFStop;//[Offset: 0x8c4, Size: 1]
	void SetLensPresetByName(FString InPresetName);// 0x3216c30
	void SetFilmbackPresetByName(FString InPresetName);// 0x3216b90
	void SetCurrentFocalLength(float InFocalLength);// 0x3216b10
	float GetVerticalFieldOfView();// 0x3216ae0
	static NamedLensPreset[] GetLensPresetsCopy();// 0x3216a00
	FString GetLensPresetName();// 0x3216980
	float GetHorizontalFieldOfView();// 0x3216950
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0x3216870
	FString GetFilmbackPresetName();// 0x32167f0
	FString GetDefaultFilmbackPresetName();// 0x3216730

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 1]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 1]
	Vector RelativeOffset;//[Offset: 0x40, Size: 1]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x230, Size: 1]
	void SetRadius(float NewRadius);// 0x3c4e3e0
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x3c4e250

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BuoyancyManager.Actor.Object
	BuoyancyComponent*[] BuoyancyComponents;//[Offset: 0x270, Size: 1]
	static bool GetBuoyancyComponentManager(const Object* WorldContextObject, out BuoyancyManager* Manager);// 0xd3d960

--------------------------------
Class: BuoyancyComponent.ActorComponent.Object
	SphericalPontoon[] Pontoons;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty OnEnteredWaterDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnExitedWaterDelegate;//[Size: 1]
	BuoyancyData BuoyancyData;//[Offset: 0xe0, Size: 1]
	WaterBody*[] CurrentWaterBodies;//[Offset: 0x130, Size: 1]
	PrimitiveComponent* SimulatingComponent;//[Offset: 0x140, Size: 1]
	void OnPontoonExitedWater(out const SphericalPontoon Pontoon);// 0xd3e240
	void OnPontoonEnteredWater(out const SphericalPontoon Pontoon);// 0xd3e170
	bool IsInWaterBody();// 0xd3e0b0
	void GetLastWaterSurfaceInfo(out Vector OutWaterPlaneLocation, out Vector OutWaterPlaneNormal, out Vector OutWaterSurfacePosition, out float OutWaterDepth, out int OutWaterBodyIdx, out Vector OutWaterVelocity);// 0xd3db60

--------------------------------
Class: SphericalPontoon
	FName CenterSocket;//[Offset: 0x0, Size: 1]
	Vector RelativeLocation;//[Offset: 0x8, Size: 1]
	float Radius;//[Offset: 0x14, Size: 1]
	Vector LocalForce;//[Offset: 0x18, Size: 1]
	Vector CenterLocation;//[Offset: 0x24, Size: 1]
	Quat SocketRotation;//[Offset: 0x30, Size: 1]
	Vector Offset;//[Offset: 0x40, Size: 1]
	float WaterHeight;//[Offset: 0x50, Size: 1]
	float WaterDepth;//[Offset: 0x54, Size: 1]
	float ImmersionDepth;//[Offset: 0x58, Size: 1]
	Vector WaterPlaneLocation;//[Offset: 0x5c, Size: 1]
	Vector WaterPlaneNormal;//[Offset: 0x68, Size: 1]
	Vector WaterSurfacePosition;//[Offset: 0x74, Size: 1]
	Vector WaterVelocity;//[Offset: 0x80, Size: 1]
	int WaterBodyIndex;//[Offset: 0x8c, Size: 1]
	WaterBody* CurrentWaterBody;//[Offset: 0x208, Size: 1]

--------------------------------
Class: BuoyancyData
	SphericalPontoon[] Pontoons;//[Offset: 0x0, Size: 1]
	float BuoyancyCoefficient;//[Offset: 0x10, Size: 1]
	float BuoyancyDamp;//[Offset: 0x14, Size: 1]
	float BuoyancyDamp2;//[Offset: 0x18, Size: 1]
	float BuoyancyRampMinVelocity;//[Offset: 0x1c, Size: 1]
	float BuoyancyRampMaxVelocity;//[Offset: 0x20, Size: 1]
	float BuoyancyRampMax;//[Offset: 0x24, Size: 1]
	float MaxBuoyantForce;//[Offset: 0x28, Size: 1]
	float WaterShorePushFactor;//[Offset: 0x2c, Size: 1]
	float WaterVelocityStrength;//[Offset: 0x30, Size: 1]
	float MaxWaterForce;//[Offset: 0x34, Size: 1]
	float DragCoefficient;//[Offset: 0x38, Size: 1]
	float DragCoefficient2;//[Offset: 0x3c, Size: 1]
	float AngularDragCoefficient;//[Offset: 0x40, Size: 1]
	float MaxDragSpeed;//[Offset: 0x44, Size: 1]
	bool bApplyDragForcesInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: BP_CrowGameModeLobby_C.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 1]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c0, Size: 1]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 1]
	int NumSpectators;//[Offset: 0x2cc, Size: 1]
	int NumPlayers;//[Offset: 0x2d0, Size: 1]
	int NumBots;//[Offset: 0x2d4, Size: 1]
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 1]
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 1]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 1]
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 1]
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 1]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	void StartMatch();// 0x3b8d380
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x3b89e10
	void Say(FString Msg);// 0x3b89d70
	void RestartGame();// 0x3b89990
	bool ReadyToStartMatch();// 0x3b896a0
	bool ReadyToEndMatch();// 0x3b58880
	void K2_OnSetMatchState(FName NewState);// 0x1ef32e0
	bool IsMatchInProgress();// 0x3b873a0
	FName GetMatchState();// 0x3b85f50
	void EndMatch();// 0x3b846e0
	void AbortMatch();// 0x3b80ec0

--------------------------------
Class: CrowGameSession.GameSession.Info.Actor.Object

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 1]
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 1]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 1]
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 1]
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 1]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 1]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 1]
	MulticastInlineDelegateProperty ReceiveMoveCompleted;//[Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x3e49030
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3e48de0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x3e488d0
	void SetMoveBlockDetection(bool bEnable);// 0x3e48840
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x3e48650
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x1ef32e0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x3e48310
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3e48080
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3e47e40
	void K2_SetFocus(Actor* NewFocus);// 0x3e47ca0
	void K2_SetFocalPoint(Vector FP);// 0x3e47c10
	void K2_ClearFocus();// 0x3e47bf0
	bool HasPartialPath();// 0x3e47a10
	PathFollowingComponent* GetPathFollowingComponent();// 0x1afc1b0
	byte GetMoveStatus();// 0x3e476c0
	Vector GetImmediateMoveDestination();// 0x3e47590
	Actor* GetFocusActor();// 0x3e47560
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x3e474b0
	Vector GetFocalPoint();// 0x3e47470
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x3e46fd0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3e46cb0

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 1]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 1]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 1]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 1]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 1]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 1]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 1]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x3e52990
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x3e52850
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x3e52760
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x3e52690
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x3e525c0
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x3e524f0
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x3e52410
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x3e52330
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x3e52260
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x3e52180
	bool IsVectorValueSet(out const FName KeyName);// 0x3e52010
	Vector GetValueAsVector(out const FName KeyName);// 0x3e51ea0
	FString GetValueAsString(out const FName KeyName);// 0x3e51dc0
	Rotator GetValueAsRotator(out const FName KeyName);// 0x3e51d10
	Object* GetValueAsObject(out const FName KeyName);// 0x3e51c70
	FName GetValueAsName(out const FName KeyName);// 0x3e51bd0
	int GetValueAsInt(out const FName KeyName);// 0x3e51b30
	float GetValueAsFloat(out const FName KeyName);// 0x3e51a90
	byte GetValueAsEnum(out const FName KeyName);// 0x3e519f0
	class Object GetValueAsClass(out const FName KeyName);// 0x3e51950
	bool GetValueAsBool(out const FName KeyName);// 0x3e518b0
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x3e51720
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x3e51630
	void ClearValue(out const FName KeyName);// 0x3e515a0

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 1]
	AIController* AIOwner;//[Offset: 0xc0, Size: 1]
	void StopLogic(FString reason);// 0x3e52a80
	void StartLogic();// 0x1b42b60
	void RestartLogic();// 0x1a94dd0
	bool IsRunning();// 0x3e51fe0
	bool IsPaused();// 0x3e51fb0

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 1]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 1]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 1]
	void OnNavDataRegistered(NavigationData* NavData);// 0x3e61870
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3e616d0
	Vector GetPathDestination();// 0x3e612c0
	byte GetPathActionType();// 0x3e61290

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 1]
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 1]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x2ac, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x2b0, Size: 1]
	uint32 DataVersion;//[Offset: 0x2b4, Size: 1]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c0, Size: 1]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 1]
	Color Color;//[Offset: 0x38, Size: 1]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 1]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 1]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 1]
	int AreaID;//[Offset: 0x10, Size: 1]
	class Object* AreaClass;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 1]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 1]
	AIController* AIOwner;//[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionInfoUpdated;//[Size: 1]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x3e48960
	void RequestStimuliListenerUpdate();// 0x3e48630
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x3e484b0
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x3e47920
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x3e47870
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3e47780
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3e475d0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3e47380
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x3e46ff0
	void ForgetAll();// 0x3e46f20

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 1]
	float MaxAge;//[Offset: 0x2c, Size: 1]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 1]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 1]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 1]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x3e4d8a0
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x3e4d630
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x3e4d2f0
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x3e4d220
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x3e4d0e0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 1]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 1]
	float AcceptanceRadius;//[Offset: 0x88, Size: 1]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 1]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 1]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 1]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 1]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 1]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 1]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 1]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 1]
	void AILoggingVerbose();// 0x2c7dd10
	void AIIgnorePlayers();// 0x3b61be0

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 1]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 1]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 1]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 1]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 1]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 1]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 1]
	BTService*[] Services;//[Offset: 0x68, Size: 1]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 1]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 1]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 1]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 1]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 1]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 1]
	float RandomDeviation;//[Offset: 0x64, Size: 1]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 1]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 1]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x3e520b0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x3e51810
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x3e51480

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 1]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 1]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 1]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 1]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 1]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 1]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x3e5e080

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 1]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 1]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 1]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 1]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 1]
	byte TestPurpose;//[Offset: 0x34, Size: 1]
	FString TestComment;//[Offset: 0x38, Size: 1]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 1]
	byte FilterType;//[Offset: 0x4a, Size: 1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 1]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 1]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 1]
	byte ScoringEquation;//[Offset: 0xf9, Size: 1]
	byte ClampMinType;//[Offset: 0xfa, Size: 1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 1]
	enum NormalizationType;//[Offset: 0xfc, Size: 1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 1]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 1]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 1]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 1]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 1]
	FName DataField;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 1]
	int OptionIndex;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnQueryFinishedEvent;//[Size: 1]
	void SetNamedParam(FName ParamName, float Value);// 0x3e5e210
	Vector[] GetResultsAsLocations();// 0x3e5e000
	Actor*[] GetResultsAsActors();// 0x3e5df80
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x3e5dec0
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x3e5de00
	float GetItemScore(int ItemIndex);// 0x3e5dd60
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x1ef32e0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	MulticastInlineDelegateProperty OnSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnFail;//[Size: 1]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x3e483e0

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x3e61a90
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x3e61900
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x3e61060
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3e60db0
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3e60bf0
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3e609d0
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3e60790

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 1]
	float ExpirationAge;//[Offset: 0x4, Size: 1]
	float Strength;//[Offset: 0x8, Size: 1]
	Vector StimulusLocation;//[Offset: 0xc, Size: 1]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 1]
	FName Tag;//[Offset: 0x24, Size: 1]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 1]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 1]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 1]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 1]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 1]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 1]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x3e615c0
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x3e614c0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x3e61420
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x3e61380

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 1]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 1]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 1]
	Object* Instigator;//[Offset: 0x40, Size: 1]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 1]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x3e61270
	void Finish(byte WithResult);// 0x3e611f0
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x3e60f90

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 1]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 1]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 1]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 1]
	MulticastInlineDelegateProperty OnClaimedResourcesChange;//[Size: 1]
	void OnRep_SimulatedTasks();// 0x3dbaf10
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x3dbacc0

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 1]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x60, Size: 1]
	void ReadyForActivation();// 0x3dbaf30
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x1ef32e0
	void EndTask();// 0x3dbabd0

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 1]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 1]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 1]
	float TravelCostOverride;//[Offset: 0x8, Size: 1]
	float EnteringCostOverride;//[Offset: 0xc, Size: 1]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 1]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 1]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: LobbyMap_C02_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 1]
	void ReceiveBeginPlay();// 0x1ef32e0
	void ExecuteUbergraph_LobbyMap(int EntryPoint);// 0x1ef32e0

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: BP_LobbyNpc_C.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c0, Size: 1]
	SkeletalMeshComponent* AR_M4A1_Simple;//[Offset: 0x4c8, Size: 1]
	SkeletalMeshComponent* Npc_Guard;//[Offset: 0x4d0, Size: 1]
	void ReceiveBeginPlay();// 0x1ef32e0
	void ExecuteUbergraph_BP_LobbyNpc(int EntryPoint, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x1ef32e0

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: CrowPlayerControllerLobby.PlayerController.Controller.Actor.Object

--------------------------------
Class: BP_CrowLobbyHUD_C.CrowLobbyHUD.CrowHUDBase.HUD.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x450, Size: 1]

--------------------------------
Class: UIParticleActor.Actor.Object

--------------------------------
Class: BP_CrowLobbyCharacterPawn_C.CrowLobbyCharacterPawn.CrowCharacterBase.CLSCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1190, Size: 1]
	SpotLightComponent* SpotLight;//[Offset: 0x1198, Size: 1]
	void InpActEvt_PageUp_K2Node_InputActionEvent(Key Key);// 0x1ef32e0
	void InpActEvt_PageDown_K2Node_InputActionEvent(Key Key);// 0x1ef32e0
	void InpActEvt_NightVisionToggle_K2Node_InputActionEvent(Key Key);// 0x1ef32e0
	void ExecuteUbergraph_BP_CrowLobbyCharacterPawn(int EntryPoint, Key K2Node_InputActionEvent_Key, bool Temp_bool_Variable, float Temp_float_Variable, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float Temp_float_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, float CallFunc_GetScalarParameterValue_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x1ef32e0

--------------------------------
